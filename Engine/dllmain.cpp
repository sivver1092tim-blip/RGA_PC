// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"
#include "stdio.h"
#include "psapi.h"
#include "atltime.h"
#include "ws2tcpip.h"
#include "iphlpapi.h"
#include "Aria.h"
#include "Global.h"
#include "Engine.h"
//#include "Client.h"


#pragma pack(push, 8)
#include "tlhelp32.h"
#pragma pack(pop)

#pragma comment(lib, "psapi.lib")
#pragma comment(lib, "User32.lib")
#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "iphlpapi.lib")

#define _PRINT_LOG_
//#define _TEST_VERSION_
//#define DISABLE_GAMEGUARD

//											//[2025-8-13]	//[2025-07-30]	//[2025-07-16]		//[2025-06-25]		//[2025-06-11]		//[2025-05-07]		//[2025-04-30]		//[2025-04-10]	////[2025-04-09]	////[2025-03-26]	////[2025-03-12]	////[2025-03-05]	//[2025-02-26]	//[2025-01-24-1]	////[2025-01-24]	//[2025-01-22]	//[2024-12-18-01]	////[2024-12-18]	////[2024-11-29]	[2024-11-27]	[2024-11-13]	[2024-10-30]		[2024-10-16]		[2024-10-11]		[2024-10-04]		[2024-10-02]		[2024-08-28]		[2024-08-14]		[2024-07-31]		[2024-07-17]		[2024-06-26]		[2024-06-12]		[2024-06-05]		[2024-05-29]		[2024-05-01]		[2024-04-24]		[2024-04-11]		[2024-03-27]		[2024-03-20]		[2024-03-13]		[2024-02-28]		[2024-02-14]		[2024-02-07]		[2024-01-31]		[2024-01-17]		[2023-12-27]		[2023-12-20]		[2023-11-29]		[2023-11-15]		[2023-10-25]		[2023-10-11]		[2023-09-26]		[2023-09-14]		[2023-09-13]		[2023-08-31]		[2023-08-30]		[2023-08-16]		[2023-07-26]		[2023-07-12]		[2023-06-28]		[2023-06-21]		[2023-06-14]		[2023-06-02]		[2023-05-31]		[2023-05-26]		[2023-05-17]		[2023-04-26]		[2023-04-19]		[2023-04-12]		[2023-03-29]		[2023-03-15]		[2023-03-08]		[2023-02-22]		[2023-02-08]		[2023-01-26]		[2023-01-11]		[2023-01-05]		[2022-12-28]		[2022-12-21]		[2022-11-30]		[2022-11-23]		[2022-11-16]		[2022-11-02]		[2022-10-26]		[2022-10-12]		[2022-10-05]		[2022-09-28]		[2022-09-14]		[2022-08-31]		[2022-08-10]		[2022-07-27]		[2022-07-13]		[2022-06-29]		[2022-06-15]		[2022-05-26]	[2022-05-25]	[2022-05-11]	[2022-04-27]	[2022-04-13]	[2022-03-31]	[2022-03-30]	[2022-03-29]	[2022-01-26]	[2022-01-12]	[2021-12-23]	[2021-12-08]	[2021-11-24]	[2021-11-10]	[2021-10-27]	[2021-10-13]	[2021-09-29]		[2021-09-15]		[2021-09-08]		[2021-08-25]		[2021-08-11] [2021-07-28] [2021-07-12]

#define ADDR_BASEADDR						0x7FF72F040000	//0x7FF6AB380000	//0x7FF78F9C0000	//0x7FF7005F0000	//0x7FF723540000	//0x7FF6F3220000	//0x7FF6E5DB0000	//0x7FF757160000	//0x7FF67FAE0000	//0x7FF6D4B70000	//0x7FF669070000	//0x7FF75F9E0000	//0x7FF7970E0000	//0x7FF689B60000	//0x7FF7F59F0000	//0x7FF792960000	//0x7FF6A6B60000	//0x7FF61C110000	//0x7FF639BC0000//	0x7FF69B5E0000//	0x7FF6DE410000//	0x7FF676430000//	0x7FF7E1290000//	0x7FF75B650000//	0x7FF7DFB20000//	0x7FF6C0CD0000//	0x7FF65B970000//	0x7FF6E3C00000//	0x7FF675490000//	0x7FF728720000//	0x7FF625290000//	0x7FF670700000//	0x7FF78B490000//	0x7FF7EAA40000//	0x7FF7A1980000//	0x7FF6BE220000//	0x7FF6262D0000//	0x7FF6A9160000//	0x7FF758D80000//	0x7FF630E00000//	0x7FF780BA0000//	0x7FF673050000//	0x7FF62A1E0000//	0x7FF6ED660000//	0x7FF6B3170000//	0x7FF6EFA30000//	0x7FF619790000//	0x7FF758210000//	0x7FF76D6C0000//	0x7FF7E26F0000//	0x7FF61D2D0000//	0x7FF65EFA0000//	0x7FF64A4C0000//	0x7FF739A70000//	0x7FF6BBF40000//	0x7FF66FAE0000//	0x7FF6B3F80000//	0x7FF782D80000//	0x7FF6EB6E0000//	0x7FF6F3530000//	0x7FF7B5480000//	0x7FF699CA0000//	0x7FF75BC50000//	0x7FF73A870000//	0x7FF74F3C0000//	0x7FF73B3B0000//	0x7FF6FDAE0000//	0x7FF75F450000//	0x7FF6D58A0000//	0x7FF689120000//	0x7FF7CC960000//	0x7FF7F5E40000//	0x7FF726730000//	0x7FF6048C0000//	0x7FF748F20000//	0x7FF6EF280000//	0x7FF7A5660000//	0x7FF7ED1B0000//	0x7FF6BD990000//	0x7FF6F2C10000//	0x7FF717580000//	0x7FF7A8DF0000//	0x7FF7890B0000//	0x7FF7374C0000//	0x7FF6AD810000//	0x7FF6547F0000//	0x7FF786180000//	0x7FF677D80000//	0x7FF749830000//	0x7FF61C7A0000//	0x7FF7E6DC0000//	0x7FF6250F0000//	0x7FF651BA0000//	0x7FF6FEB90000//	0x7FF7B3C40000//	0x7FF6F4F70000//0x7FF69A0F0000//0x7FF6E81E0000//0x7FF7B6640000	0x7FF70D330000	0x7FF6D6DF0000	0x7FF7F2990000	0x7FF6AEF50000	0x7FF6C8580000	0x7FF70A110000	0x7FF7141E0000	0x7FF7EE4F0000	0x7FF71A680000	0x7FF75D5D0000	0x7FF69CE30000	0x7FF671C50000	0x7FF68F980000	//0x7FF6FBA50000	//0x7FF69DA80000	//0x7FF74D730000	//0x7FF757280000	//0x140000000//0x140000000//0x140000000//
#define ADDR_MULTICHECK						0x7FF72F3B180A	//0x7FF6AB6F165A	//0x7FF78FD307DA	//0x7FF70095FF9A	//0x7FF7238AF3CA	//0x7FF6F358E3CA	//0x7FF6E611E3CA	//0x7FF7574CD78A	//0x7FF67FE4D78A	//0x7FF6D4EDCEDA	//0x7FF6693DD12A	//0x7FF75FD4B9EA	//0x7FF79744B9EA	//0x7FF689ECA17A	//0x7FF7F5D5A17A	//0x7FF792CCA17A	//0x7FF6A6EC96CA	//0x7FF61C4796CA	//0x7FF639F28E9E//	0x7FF69B948E9E//	0x7FF6DE77797E//	0x7FF67679692E//	0x7FF7E15F48CE//	0x7FF75B9B291E//	0x7FF7DFE8291E//	0x7FF6C103291E//	0x7FF65BCD16EE//	0x7FF6E3F60C2E//	0x7FF6757F0B3E//	0x7FF728A808BE//	0x7FF6255F086E//	0x7FF670A5FE8E//	0x7FF78B7EF7DE//	0x7FF7EAD9F7DE//	0x7FF7A1CDE94E//	0x7FF6BE57E94E//	0x7FF62662E9CE//	0x7FF6A94BD89E//	0x7FF7590DD2BE//	0x7FF63115D2BE//	0x7FF780EFC04E//	0x7FF6733ABA2E//	0x7FF62A53A0DE//	0x7FF6ED9BA0DE//	0x7FF6B34C87FE//	0x7FF6EFD8822E//	0x7FF619AE822E//	0x7FF75856670E//	0x7FF76DA15C8E//	0x7FF7E2A4460E//	0x7FF61D62409E//	0x7FF65F2F39EE//	0x7FF64A81247E//	0x7FF739DC247E//	0x7FF6BC28F89E//	0x7FF66FE2F89E//	0x7FF6B42CF08E//	0x7FF7830CC69E//	0x7FF6EBA2BAAE//	0x7FF6F387B54E//	0x7FF7B57CA00E//	0x7FF699FEA00E//	0x7FF75BF98C9E//	0x7FF73ABB8C9E//	0x7FF74F7073CE//	0x7FF73B6F73CE//	0x7FF6FDE265CE//	0x7FF75F7947AE//	0x7FF6D5BE47AE//	0x7FF68946272E//	0x7FF7CCCA132E//	0x7FF7F618003E//	0x7FF726A6FF1E//	0x7FF604BFFA1E//	0x7FF74925F42E//	0x7FF6EF5BEBAE//	0x7FF7A599CE4E//	0x7FF7ED4ECE4E//	0x7FF6BDCCCE4E//	0x7FF6F2F4C62E//	0x7FF7178C8B2E//	0x7FF7A9138B2E//	0x7FF7893F7B5E//	0x7FF737807B5E//	0x7FF6ADB56E3E//	0x7FF654B36A9E//	0x7FF7864C6A6E//	0x7FF6780C44FE//	0x7FF749B70C8E//	0x7FF61CADE28E//	0x7FF7E70FBA5E//	0x7FF62542852E//	0x7FF651ED6B5E//	0x7FF6FEEC402E//	0x7FF7B3F7048E//	0x7FF6F52A048E//0x7FF69A41F3DE//0x7FF6E850E2FE//0x7FF7B696D5DE	0x7FF70D65C94E	0x7FF6D711C94E	0x7FF7F2CBC94E	0x7FF6AF27BB8E	0x7FF6C88A7B0E	0x7FF70A43613E	0x7FF7145022DE	0x7FF7EE810EAE	0x7FF71A99F8BE	0x7FF75D8ED63E	0x7FF69D149F2E	0x7FF671F69F2E	0x7FF68FC989CE	//0x7FF6FBD6717E	//0x7FF69DD964A7	//0x7FF750854468	//0x7FF757595604	//0x1403120D4//0x1403119C4//0x140310474//
#define ADDR_INITXIGNCODE					0x7FF72F3B18A8	//0x7FF6AB6F16F8	//0x7FF78FD30878	//0x7FF700960038	//0x7FF7238AF468	//0x7FF6F358E468	//0x7FF6E611E468	//0x7FF7574CD828	//0x7FF67FE4D828	//0x7FF6D4EDCF78	//0x7FF6693DD1C8	//0x7FF75FD4BA88	//0x7FF79744BA88	//0x7FF689ECA218	//0x7FF7F5D5A218	//0x7FF792CCA218	//0x7FF6A6EC9768	//0x7FF61C479768	//0x7FF639F28F32//	0x7FF69B948F32//	0x7FF6DE777A12//	0x7FF6767969C2//	0x7FF7E15F4962//	0x7FF75B9B29B2//	0x7FF7DFE829B2//	0x7FF6C10329B2//	0x7FF65BCD1782//	0x7FF6E3F60CC2//	0x7FF6757F0BD2//	0x7FF728A80952//	0x7FF6255F0902//	0x7FF670A5FF22//	0x7FF78B7EF872//	0x7FF7EAD9F872//	0x7FF7A1CDE9E2//	0x7FF6BE57E9E2//	0x7FF62662EA62//	0x7FF6A94BD932//	0x7FF7590DD352//	0x7FF63115D352//	0x7FF780EFC0E2//	0x7FF6733ABAC2//	0x7FF62A53A172//	0x7FF6ED9BA172//	0x7FF6B34C8892//	0x7FF6EFD882C2//	0x7FF619AE82C2//	0x7FF7585667A2//	0x7FF76DA15D22//	0x7FF7E2A446A2//	0x7FF61D624132//	0x7FF65F2F3A82//	0x7FF64A812512//	0x7FF739DC2512//	0x7FF6BC28F932//	0x7FF66FE2F932//	0x7FF6B42CF122//	0x7FF7830CC732//	0x7FF6EBA2BB42//	0x7FF6F387B5E2//	0x7FF7B57CA0A2//	0x7FF699FEA0A2//	0x7FF75BF98D32//	0x7FF73ABB8D32//	0x7FF74F707462//	0x7FF73B6F7462//	0x7FF6FDE26662//	0x7FF75F794842//	0x7FF6D5BE4842//	0x7FF6894627C2//	0x7FF7CCCA13C2//	0x7FF7F61800D2//	0x7FF726A6FFB2//	0x7FF604BFFAB2//	0x7FF74925F4C2//	0x7FF6EF5BEC42//	0x7FF7A599CEE2//	0x7FF7ED4ECEE2//	0x7FF6BDCCCEE2//	0x7FF6F2F4C6C2//	0x7FF7178C8BC2//	0x7FF7A9138BC2//	0x7FF7893F7BF2//	0x7FF737807BF2//	0x7FF6ADB56ED2//	0x7FF654B36B32//	0x7FF7864C6B02//	0x7FF6780C4592//	0x7FF749B70D22//	0x7FF61CADE322//	0x7FF7E70FBAF2//	0x7FF6254285C2//	0x7FF651ED6BF2//	0x7FF6FEEC40C2//	0x7FF7B3F70522//	0x7FF6F52A0522//0x7FF69A41F472//0x7FF6E850E392//0x7FF7B696D672	0x7FF70D65C9E2	0x7FF6D711C9E2	0x7FF7F2CBC9E2	0x7FF6AF27BC22	0x7FF6C88A7BA2	0x7FF70A4361D2	0x7FF714502372	0x7FF7EE810F42	0x7FF71A99F952	0x7FF75D8ED6D2	0x7FF69D149FC2	0x7FF671F69FC2	0x7FF68FC98A62	//0x7FF6FBD67212	//0x7FF69DD96531	//0x7FF74DA46531	//0x7FF757595621	//0x1403120F1//0x1403119E1//0x140310491//
#define ADDR_CHECKGUARD						0x7FF72F3B1B8B	//0x7FF6AB6F19DB	//0x7FF78FD30B5B	//0x7FF70096031B	//0x7FF7238AF74B	//0x7FF6F358E74B	//0x7FF6E611E74B	//0x7FF7574CDB0B	//0x7FF67FE4DB0B	//0x7FF6D4EDD25B	//0x7FF6693DD4AB	//0x7FF75FD4BD6B	//0x7FF79744BD6B	//0x7FF689ECA4FB	//0x7FF7F5D5A4FB	//0x7FF792CCA4FB	//0x7FF6A6EC9A4B	//0x7FF61C479A4B	//0x7FF639F2921B//	0x7FF69B94921B//	0x7FF6DE777CFB//	0x7FF676796CAB//	0x7FF7E15F4C4B//	0x7FF75B9B2C9B//	0x7FF7DFE82C9B//	0x7FF6C1032C9B//	0x7FF65BCD1A6B//	0x7FF6E3F60FAB//	0x7FF6757F0EBB//	0x7FF728A80C3B//	0x7FF6255F0BEB//	0x7FF670A6020B//	0x7FF78B7EFB5B//	0x7FF7EAD9FB5B//	0x7FF7A1CDECCB//	0x7FF6BE57ECCB//	0x7FF62662ED4B//	0x7FF6A94BDC1B//	0x7FF7590DD63B//	0x7FF63115D63B//	0x7FF780EFC3CB//	0x7FF6733ABDAB//	0x7FF62A53A45B//	0x7FF6ED9BA45B//	0x7FF6B34C8B7B//	0x7FF6EFD885AB//	0x7FF619AE85AB//	0x7FF758566A8B//	0x7FF76DA1600B//	0x7FF7E2A4498B//	0x7FF61D62441B//	0x7FF65F2F3D6B//	0x7FF64A8127FB//	0x7FF739DC27FB//	0x7FF6BC28FC1B//	0x7FF66FE2FC1B//	0x7FF6B42CF40B//	0x7FF7830CCA1B//	0x7FF6EBA2BE2B//	0x7FF6F387B8CB//	0x7FF7B57CA38B//	0x7FF699FEA38B//	0x7FF75BF9901B//	0x7FF73ABB901B//	0x7FF74F70774B//	0x7FF73B6F774B//	0x7FF6FDE2694B//	0x7FF75F794B2B//	0x7FF6D5BE4B2B//	0x7FF689462AAB//	0x7FF7CCCA16AB//	0x7FF7F61803BB//	0x7FF726A7029B//	0x7FF604BFFD9B//	0x7FF74925F7AB//	0x7FF6EF5BEF2B//	0x7FF7A599D1CB//	0x7FF7ED4ED1CB//	0x7FF6BDCCD1CB//	0x7FF6F2F4C9AB//	0x7FF7178C8EAB//	0x7FF7A9138EAB//	0x7FF7893F7EDB//	0x7FF737807EDB//	0x7FF6ADB571BB//	0x7FF654B36E1B//	0x7FF7864C6DEB//	0x7FF6780C487B//	0x7FF749B7100B//	0x7FF61CADE60B//	0x7FF7E70FBDDB//	0x7FF6254288AB//	0x7FF651ED6EDB//	0x7FF6FEEC43AB//	0x7FF7B3F7080B//	0x7FF6F52A080B//0x7FF69A41F75B//0x7FF6E850E67B//0x7FF7B696D95B	0x7FF70D65CCCB	0x7FF6D711CCCB	0x7FF7F2CBCCCB	0x7FF6AF27BF0B	0x7FF6C88A7E8B	0x7FF70A4364BB	0x7FF71450265B	0x7FF7EE81122B	0x7FF71A99FC3B	0x7FF75D8ED9BB	0x7FF69D14A2AB	0x7FF671F6A2AB	0x7FF68FC98D4B	//0x7FF6FBD674FB	//0x7FF69DD967BA	//0x7FF74DA467BA	//0x7FF7575958AA	//0x140312348//0x140311C38//0x1403106E8//
#define ADDR_ADDVECTOREDHANDLER				0x7FF72F27A110	//0x7FF6AB5B9F60	//0x7FF78FBF90E0	//0x7FF7008288A0	//0x7FF723777CD0	//0x7FF6F3456F50	//0x7FF6E5FE6F50	//0x7FF6E5FE6F50	//0x7FF757396310	//0x7FF67FD16310	//0x7FF6D4DA5A60	//0x7FF6692A5CB0	//0x7FF75FC14570	//0x7FF797314570	//0x7FF689D92D00	//0x7FF7F5C22D00	//0x7FF792B92D00	//0x7FF6A6D92250	//0x7FF61C342250	//0x7FF639DF1A30//	0x7FF69B811A30//	0x7FF6DE640510//	0x7FF67665F4C0//	0x7FF7E14BD460//	0x7FF75B87B4B0//	0x7FF7DFD4B4B0//	0x7FF6C0EFB4B0//	0x7FF65BB9A280//	0x7FF6E3E297C0//	0x7FF6756B96D0//	0x7FF728949450//	0x7FF6254B9400//	0x7FF670928A20//	0x7FF78B6B8370//	0x7FF7EAC68370//	0x7FF7A1BA74E0//	0x7FF6BE4474E0//	0x7FF6264F7560//	0x7FF6A9386430//	0x7FF758FA5E50//	0x7FF631025E50//	0x7FF780DC4BE0//	0x7FF6732745C0//	0x7FF62A402C70//	0x7FF6ED882C70//	0x7FF6B3391390//	0x7FF6EFC50DC0//	0x7FF6199B0DC0//	0x7FF75842F2A0//	0x7FF76D8DE820//	0x7FF7E290D520//	0x7FF61D4ECFA0//	0x7FF65F1BC8F0//	0x7FF64A6DB380//	0x7FF739C8B380//	0x7FF6BC1587A0//	0x7FF66FCF87A0//	0x7FF6B4197F90//	0x7FF782F955A0//	0x7FF6EB8F4880//	0x7FF6F3744320//	0x7FF7B5692DE0//	0x7FF699EB2DE0//	0x7FF75BE61A70//	0x7FF73AA81A70//	0x7FF74F5D01A0//	0x7FF73B5C01A0//	0x7FF6FDCEF3B0//	0x7FF75F65D5C0//	0x7FF6D5AAD5C0//	0x7FF68932B540//	0x7FF7CCB6A140//	0x7FF7F6048E50//	0x7FF726938D30//	0x7FF604AC8830//	0x7FF749128240//	0x7FF6EF4879C0//	0x7FF7A5865C60//	0x7FF7ED3B5C60//	0x7FF6BDB95C60//	0x7FF6F2E15440//	0x7FF717791B70//	0x7FF7A9001B70//	0x7FF7892C0BA0//	0x7FF7376D0BA0//	0x7FF6ADA1FE80//	0x7FF6549FFAE0//	0x7FF78638FAB0//	0x7FF677F8D540//	0x7FF749A39CD0//	0x7FF61C9A72D0//	0x7FF7E6FC4AA0//	0x7FF6252F1570//	0x7FF651D9FBA0//	0x7FF6FED8D070//	0x7FF7B3E394D0//	0x7FF6F51694D0//0x7FF69A2E8420//0x7FF6E83D7340//0x7FF7B6836620	0x7FF70D525990	0x7FF6D6FE5990	0x7FF7F2B85990	0x7FF6AF144BD0	0x7FF6C8770B90	0x7FF70A2FF1C0	0x7FF7143CB360	0x7FF7EE6D9F30	0x7FF71A868940	0x7FF75D7B66D0	0x7FF69D012FC0	0x7FF671E32FC0	0x7FF68FB61A60	//0x7FF6FBC30250	//0x7FF69DC5EFA0	//0x7FF74D90EFA0	//0x7FF758525D40	//0x141279F40//0x141268F90//0x1412354F0//
													//					//				//        	    //          	//              	
#define ADDR_MEM_GNAMES						0x7FF735DCD440	//0x7FF6B2108140	//0x7FF7967201C0	//0x7FF70733A340	//0x7FF72A265180	//0x7FF6F9F14140	//0x7FF6ECAA4140	//0x7FF75DE23B80	//0x7FF6867A3B80	//0x7FF6DB818D80	//0x7FF66FCE2E40	//0x7FF76662B380	//0x7FF79DD2B380	//0x7FF690780640	//0x7FF7FC60F5C0	//0x7FF7995805C0	//0x7FF6AD74B180	//0x7FF622CFB180	//0x7FF64078D440//	0x7FF6A21AD440//	0x7FF6E4FADD00//	0x7FF67CF8FE40//	0x7FF7E7D61C80//	0x7FF7620EA680//	0x7FF7E65BA680//	0x7FF6C776A680//	0x7FF6623F9280//	0x7FF6EA667000//	0x7FF67BEECC80//	0x7FF72F177840//	0x7FF62BCDF440//	0x7FF677131900//	0x7FF791EC8040//	0x7FF7F1478040//	0x7FF7A8381B00//	0x7FF6C4C21A40//	0x7FF62CCC05C0//	0x7FF6AFB0FB00//	0x7FF75F71B280//	0x7FF63779B0C0//	0x7FF78750DCC0//	0x7FF679991F80//	0x7FF630AE5500//	0x7FF6F3F63500//	0x7FF6B9A3F340//	0x7FF6F62E6D00//	0x7FF620046D00//	0x7FF75EA734C0//	0x7FF773EFCA00//	0x7FF7E8EEE840//	0x7FF6236D2880//	0x7FF66538CEC0//	0x7FF650845980//	0x7FF73FDF5980//	0x7FF6C225D480//	0x7FF675DFD480//	0x7FF6BA280780//	0x7FF789046D00//	0x7FF6F195BB00//	0x7FF6F9791280//	0x7FF7BB69F6C0//	0x7FF69FEBF6C0//	0x7FF761E26900//	0x7FF740A46900//	0x7FF755538180//	0x7FF741528180//	0x7FF703C3F280//	0x7FF765565C80//	0x7FF6DB9B5C80//	0x7FF68F1DFE40//	0x7FF7D25C7340//	0x7FF7FBA74B80//	0x7FF72C362B00//	0x7FF60A4D7240//	0x7FF74EB22900//	0x7FF6F4E69C40//	0x7FF7AB1FC880//	0x7FF7F2D4C880//	0x7FF6C352C880//	0x7FF6F878FD00//	0x7FF71CC76600//	0x7FF7AE4E6600//	0x7FF78E786300//	0x7FF73CB96300//	0x7FF6B2EBCF80//	0x7FF659E73E00//	0x7FF78B803DC0//	0x7FF67D322A40//	0x7FF74EB35DC0//	0x7FF621A46C40//	0x7FF7EBFFB200//	0x7FF62A2CD440//	0x7FF656D41740//	0x7FF703CD3BC0//	0x7FF7B8D210C0//	0x7FF6FA0510C0//0x7FF69EFA1380//0x7FF6ED06A880//0x7FF7BB492440	0x7FF712156240	0x7FF6DBC16240	0x7FF7F77B6240	0x7FF6B3D51100	0x7FF6CD281B40	0x7FF70EDCB140	0x7FF718E3F000	0x7FF7F311E700	0x7FF71EE6EB00	0x7FF761D85400	0x7FF6A1546AC0	0x7FF676366AC0	0x7FF69406E440	//0x7FF700114800	//0x7FF6A2104C80	//0x7FF751DB4C80	//0x7FF75B8D60C0	//0x144610280//0x1445FCA40//0x1445B2580//
#define ADDR_MEM_GOBJECTS					0x7FF735DE4C50	//0x7FF6B211F950	//0x7FF7967379D0	//0x7FF707351B50	//0x7FF72A27C990	//0x7FF6F9F2B950	//0x7FF6ECABB950	//0x7FF75DE3B390	//0x7FF6867BB390	//0x7FF6DB830590	//0x7FF66FCFA650	//0x7FF766642B90	//0x7FF79DD42B90	//0x7FF690797E50	//0x7FF7FC626DD0	//0x7FF799597DD0	//0x7FF6AD762990	//0x7FF622D12990	//0x7FF6407A4C50//	0x7FF6A21C4C50//	0x7FF6E4FC5510//	0x7FF67CFA7650//	0x7FF7E7D79490//	0x7FF762101E90//	0x7FF7E65D1E90//	0x7FF6C7781E90//	0x7FF662410A90//	0x7FF6EA67E810//	0x7FF67BF04490//	0x7FF72F18F050//	0x7FF62BCF6C50//	0x7FF677149110//	0x7FF791EDF850//	0x7FF7F148F850//	0x7FF7A8399310//	0x7FF6C4C39250//	0x7FF62CCD7DD0//	0x7FF6AFB27310//	0x7FF75F732A90//	0x7FF6377B28D0//	0x7FF7875254D0//	0x7FF6799A9790//	0x7FF630AFCD10//	0x7FF6F3F7AD10//	0x7FF6B9A56B50//	0x7FF6F62FE510//	0x7FF62005E510//	0x7FF75EA8ACD0//	0x7FF773F14210//	0x7FF7E8F06050//	0x7FF6236EA090//	0x7FF6653A46D0//	0x7FF65085D190//	0x7FF73FE0D190//	0x7FF6C2274C90//	0x7FF675E14C90//	0x7FF6BA297F90//	0x7FF78905E510//	0x7FF6F1973310//	0x7FF6F97A8A90//	0x7FF7BB6B6ED0//	0x7FF69FED6ED0//	0x7FF761E3E110//	0x7FF740A5E110//	0x7FF75554F990//	0x7FF74153F990//	0x7FF703C56A90//	0x7FF76557D490//	0x7FF6DB9CD490//	0x7FF68F1F7650//	0x7FF7D25DEB50//	0x7FF7FBA8C390//	0x7FF72C37A310//	0x7FF60A4EEA50//	0x7FF74EB3A110//	0x7FF6F4E81450//	0x7FF7AB214090//	0x7FF7F2D64090//	0x7FF6C3544090//	0x7FF6F87A7510//	0x7FF71CC8DE10//	0x7FF7AE4FDE10//	0x7FF78E79DB10//	0x7FF73CBADB10//	0x7FF6B2ED4790//	0x7FF659E8B610//	0x7FF78B81B5D0//	0x7FF67D33A250//	0x7FF74EB4D5D0//	0x7FF621A5E450//	0x7FF7EC012A10//	0x7FF62A2E4C50//	0x7FF656D58F50//	0x7FF703CEB3D0//	0x7FF7B8D388D0//	0x7FF6FA0688D0//0x7FF69EFB8B90//0x7FF6ED082090//0x7FF7BB4A9C50	0x7FF71216DA50	0x7FF6DBC2DA50	0x7FF7F77CDA50	0x7FF6B3D68910	0x7FF6CD299350	0x7FF70EDE2950	0x7FF718E56810	0x7FF7F3135F10	0x7FF71EE86310	0x7FF761D9CC20	0x7FF6A155E2E0	0x7FF67637E2E0	0x7FF694085C60	//0x7FF70012C000	//0x7FF6A211C480	//0x7FF751DCC480	//0x7FF75B8ED8C0	//0x144627A80//0x144614240//0x1445C9D80//
													//					//				//        	    //          	//              	
#define ADDR_MEMORY_ADDR					0x7FF736B0E89C	//0x7FF6B2E4A354	//0x7FF79745C5D0	//0x7FF70807600C	//0x7FF72AF9264C	//0x7FF6FAC45078	//0x7FF6ED7CEC0C	//0x7FF75EB4D960	//0x7FF6874D0F6C	//0x7FF6DC54303C	//0x7FF670A036AC	//0x7FF7673449E8	//0x7FF79EA4AEDC	//0x7FF6914982F4	//0x7FF7FD327FDC	//0x7FF79A2A25E0	//0x7FF6AE460CE8	//0x7FF623A0DCBC	//0x7FF6414A1498//	0x7FF6A2EC1B60//	0x7FF6E5CB9DB4//	0x7FF67DC976D0//	0x7FF7E8A5F360//	0x7FF762D79360//	0x7FF7E724F35C//	0x7FF6C834D358//	0x7FF663034358//	0x7FF6EB36C35C//	0x7FF67CC3735C//	0x7FF72FE0135C//	0x7FF62C96935C//	0x7FF677D8335C//	0x7FF792BD6360//	0x7FF7F21E4358//	0x7FF7A9083358//	0x7FF6C58EC360//	0x7FF62D9EB35C//	0x7FF6B07D7358//	0x7FF760327360//	0x7FF638483358//	0x7FF7881E9358//	0x7FF67A5DA358//	0x7FF63175C35C//	0x7FF6F4B78358//	0x7FF6BA70E35C//	0x7FF6F6F40358//	0x7FF620D0635C//	0x7FF75F67E35C//	0x7FF774B18360//	0x7FF7E9B82360//	0x7FF62438735C//	0x7FF665F9635C//	0x7FF65140935C//	0x7FF740AD8360//	0x7FF6C2EFF358//	0x7FF676AA5360//	0x7FF6BAF3A358//	0x7FF789C0D358//	0x7FF6F254435C//	0x7FF6FA31A360//	0x7FF7BC2A4358//	0x7FF6A0AD935C//	0x7FF762A5F358//	0x7FF741620360//	0x7FF75611D358//	0x7FF741864000//	0x7FF703FBAFFC//	0x7FF7658F1FF8//	0x7FF6DBCC2000//	0x7FF68F52BFFC//	0x7FF7D4A1CE18//	0x7FF7FDE59458//	0x7FF72E79B360//	0x7FF60C882CE0//	0x7FF750FA4A38//	0x7FF6F72E8160//	0x7FF7AD6EA848//	0x7FF7F51F6F38//	0x7FF6C598E5C8//	0x7FF6FAA2B7B0//	0x7FF71EEEC340//	0x7FF7B06F7628//	0x7FF790752DA0//	0x7FF73ED7A5E0//	0x7FF6B50B49B0//	0x7FF65BFCB8F0//	0x7FF78DA2D4F0//	0x7FF67F524D28//	0x7FF750D4EA40//	0x7FF623C829A8//	0x7FF7EE199238//	0x7FF62C41BF00//	0x7FF658E449D8//	0x7FF705BF5758//	0x7FF7BAE986F8//	0x7FF6FC1EEF98//0x7FF6A0E8BD30//0x7FF6EEE693C8//
#define ADDR_SENDFUNC						0x7FF72FD018B0	//0x7FF6AC040310	//0x7FF79067B510	//0x7FF7012A73D0	//0x7FF7241F8590	//0x7FF6F3ECD780	//0x7FF6E6A5D6A0	//0x7FF757E09A80	//0x7FF680789A80	//0x7FF6D5817050	//0x7FF669D13700	//0x7FF76067B690	//0x7FF797D7B690	//0x7FF68A7F6FB0	//0x7FF7F6686E90	//0x7FF7935F6F20	//0x7FF6A77E94A0	//0x7FF61CD994C0	//0x7FF63A841AB0//	0x7FF69C261A30//	0x7FF6DF077630//	0x7FF6772EB900//	0x7FF7E2135CF0//	0x7FF75C4EAD80//	0x7FF7E09BAC00//	0x7FF6C1B6AAB0//	0x7FF65C803CD0//	0x7FF6E4A8D4D0//	0x7FF676319000//	0x7FF7295A6EC0//	0x7FF626115D80//	0x7FF671331A90//	0x7FF78C0BDB90//	0x7FF7EB66DAE0//	0x7FF7A25A0640//	0x7FF6BEE406D0//	0x7FF626EEB240//	0x7FF6A9D6CC40//	0x7FF759BEBDC0//	0x7FF631C6BD90//	0x7FF7819FF650//	0x7FF673E9EA90//	0x7FF62B018450//	0x7FF6EE497BD0//	0x7FF6B3F9BD30//	0x7FF6F0852D70//	0x7FF61A5B2B90//	0x7FF758DD1F80//	0x7FF76E278A40//	0x7FF7E32A0400//	0x7FF61DE7E640//	0x7FF65FB4BFB0//	0x7FF64B05BAE0//	0x7FF73A60BAE0//	0x7FF6BCAD0DD0//	0x7FF670670AE0//	0x7FF6B4B05940//	0x7FF7838F0E70//	0x7FF6EC244510//	0x7FF6F40904E0//	0x7FF7B5FD01D0//	0x7FF69A7F0200//	0x7FF75C79DD40//	0x7FF73B3BD920//	0x7FF74FEFCED0//	0x7FF73BEECED0//	0x7FF6FE616D10//	0x7FF75FF6B450//	0x7FF6D63BB4A0//	0x7FF689C33240//	0x7FF7CD468AE0//	0x7FF7F6942860//	0x7FF727232490//	0x7FF6053BFF80//	0x7FF749A1DAD0//	0x7FF6EFF89C20//	0x7FF7A635F420//	0x7FF7EDEAF450//	0x7FF6BE68F3C0//	0x7FF6F3909030//	0x7FF71820F910//	0x7FF7A9A7F940//	0x7FF789D38D70//	0x7FF738148D20//	0x7FF6AE283A90//	0x7FF6552607A0//	0x7FF786BF0690//	0x7FF6787D30F0//	0x7FF74A255740//	0x7FF61D351EF0//	0x7FF7E795A400//	0x7FF625C81870//	0x7FF652724770//	0x7FF6FF57DC60//	0x7FF7B4623780//	0x7FF6F59537C0//0x7FF69AACCE30//	
													//					//				////				//              //              	
#define ADDR_MEM_GWORLD					1//0x7FF735ECD2F8	//0x7FF6B2207FF8	//0x7FF796820078	//0x7FF70743A1F8	//0x7FF72A365038	//0x7FF6FA013FF8	//0x7FF6ECBA3FF8	//	0x7FF75DF23A38	//0x7FF6868A3A38	//0x7FF6DB918C38	//0x7FF66FDE2CF8	//0x7FF76672B238	//0x7FF79DE2B238	//0x7FF6908804F8	//0x7FF7FC70F478	//0x7FF799680478	//0x7FF6AD84B038	//0x7FF622DFB038	//0x7FF64088D2F8//	0x7FF6A22AD2F8//	0x7FF6E50ADBB8//	0x7FF67D08FCF8//	0x7FF7E7E61B38//	0x7FF7621EA538//	0x7FF7E66BA538//	0x7FF6C786A538//	0x7FF6624F9138//	0x7FF6EA766EB8//	0x7FF67BFECB38//	0x7FF72F2776F8//	0x7FF62BDDF2F8//	0x7FF6772317B8//	0x7FF791FC7EF8//	0x7FF7F1577EF8//	0x7FF7A84819B8//	0x7FF6C4D218F8//	0x7FF62CDC0478//	0x7FF6AFC0F9B8//	0x7FF75F81B138//	0x7FF63789AF78//	0x7FF78760DB78//	0x7FF679A91E38//	0x7FF630BE53B8//	0x7FF6F40633B8//	0x7FF6B9B3F1F8//	0x7FF6F63E6BB8//	0x7FF620146BB8//	0x7FF75EB73378//	0x7FF773FFC8B8//	0x7FF7E8FEE6F8//	0x7FF6237D2738//	0x7FF66548CD78//	0x7FF650945838//	0x7FF73FEF5838//	0x7FF6C235D338//	0x7FF675EFD338//	0x7FF6BA380638//	0x7FF789146BB8//	0x7FF6F1A5BA48//	0x7FF6F98911B8//	0x7FF7BB79F5F8//	0x7FF69FFBF5F8//	0x7FF761F26838//	0x7FF740B46838//	0x7FF7556380B8//	0x7FF7416280B8//	0x7FF703D3F1A8//	0x7FF765665B98//	0x7FF6DBAB5B98//	0x7FF68F2DFD58//	0x7FF7D26C7258//	0x7FF7FBB74A88//	0x7FF72C462A08//	0x7FF60A5D7148//	0x7FF74EC22808//	0x7FF6F4F69B48//	0x7FF7AB2FC788//	0x7FF7F2E4C788//	0x7FF6C362C788//	0x7FF6F888FC08//	0x7FF71CD76508//	0x7FF7AE5E6508//	0x7FF78E886208//	0x7FF73CC96208//	0x7FF6B2FBCE88//	0x7FF659F73D08//	0x7FF78B903CC8//	0x7FF67D422948//	0x7FF74EC35CC8//	0x7FF621B46B48//	0x7FF7EC0FB108//	0x7FF62A3CD358//	0x7FF656E41658//	0x7FF703DD3AD8//	0x7FF7B8E20FD8//	0x7FF6FA150FD8//0x7FF69F0A1298//0x7FF6ED16A798//0x7FF7BB592358	0x7FF712256158	0x7FF6DBD16158	0x7FF7F78B6158	0x7FF6B3E51018	0x7FF6CD381A58	0x7FF70EECB058	0x7FF718F3EF18	0x7FF7F321E618	0x7FF71EF6EA18	0x7FF761E85378	0x7FF6A1646A38	0x7FF676466A38	0x7FF69416E3B8	//0x7FF700214748	//0x7FF6A2204BB8	//0x7FF751EB4BB8	//0x7FF75B9D5FF8	//0x1447101B8//0x1446FC988//0x1446B24C8//// 0F 57 C9 0F 2E C1 74 ? 48 8B ? ? ? ? ? 48 85 DB 74 ? 41 B0
#define ADDR_GARBAGECOLLECTING_FLAG		2//0x7FF735DE3074	//0x7FF6B211DD74	//0x7FF796735DF4	//0x7FF70734FF74	//0x7FF72A27ADB4	//0x7FF6F9F29D74	//0x7FF6ECAB9D74	//	0x7FF75DE397B4	//0x7FF6867B97B4	//0x7FF6DB82E9B4	//0x7FF66FCF8A74	//0x7FF766640FB4	//0x7FF79DD40FB4	//0x7FF690796274	//0x7FF7FC6251F4	//0x7FF7995961F4	//0x7FF6AD760DB4	//0x7FF622D10DB4	//0x7FF6407A3074//	0x7FF6A21C3074//	0x7FF6E4FC3934//	0x7FF67CFA5A74//	0x7FF7E7D778B4//	0x7FF7621002B4//	0x7FF7E65D02B4//	0x7FF6C77802B4//	0x7FF66240EEB4//	0x7FF6EA67CC34//	0x7FF67BF028B4//	0x7FF72F18D474//	0x7FF62BCF5074//	0x7FF677147534//	0x7FF791EDDC74//	0x7FF7F148DC74//	0x7FF7A8397734//	0x7FF6C4C37674//	0x7FF62CCD61F4//	0x7FF6AFB25734//	0x7FF75F730EB4//	0x7FF6377B0CF4//	0x7FF7875238F4//	0x7FF6799A7BB4//	0x7FF630AFB134//	0x7FF6F3F79134//	0x7FF6B9A54F74//	0x7FF6F62FC934//	0x7FF62005C934//	0x7FF75EA890F4//	0x7FF773F12634//	0x7FF7E8F04474//	0x7FF6236E84B4//	0x7FF6653A2AF4//	0x7FF65085B5B4//	0x7FF73FE0B5B4//	0x7FF6C22730B4//	0x7FF675E130B4//	0x7FF6BA2963B4//	0x7FF78905C934//	0x7FF6F1971734//	0x7FF6F97A6EB4//	0x7FF7BB6B52F4//	0x7FF69FED52F4//	0x7FF761E3C534//	0x7FF740A5C534//	0x7FF75554DDB4//	0x7FF74153DDB4//	0x7FF703C54EB4//	0x7FF76557B8B4//	0x7FF6DB9CB8B4//	0x7FF68F1F5A74//	0x7FF7D25DCF74//	0x7FF7FBA8A7B4//	0x7FF72C378734//	0x7FF60A4ECE74//	0x7FF74EB38534//	0x7FF6F4E7F874//	0x7FF7AB2124B4//	0x7FF7F2D624B4//	0x7FF6C35424B4//	0x7FF6F87A5934//	0x7FF71CC8C234//	0x7FF7AE4FC234//	0x7FF78E79BF34//	0x7FF73CBABF34//	0x7FF6B2ED2BB4//	0x7FF659E89A34//	0x7FF78B8199F4//	0x7FF67D338674//	0x7FF74EB4B9F4//	0x7FF621A5C874//	0x7FF7EC010E34//	0x7FF62A2E3074//	0x7FF656D57374//	0x7FF703CE97F4//	0x7FF7B8D36CF4//	0x7FF6FA066CF4//0x7FF69EFB6FB4//0x7FF6ED0804B4//0x7FF7BB4A8074	0x7FF71216BE74	0x7FF6DBC2BE74	0x7FF7F77CBE74	0x7FF6B3D66D34	0x7FF6CD297774	0x7FF70EDE0D74	0x7FF718E54C34	0x7FF7F3134334	0x7FF71EE84734	0x7FF761D9B034	0x7FF6A155C6F4	0x7FF67637C6F4	0x7FF694084074	//0x7FF70012A414	//0x7FF6A211A894	//0x7FF751DCA894	//0x7FF75B8EBCD4	//0x144625E94//0x144612654//0x1445C8194//
#define ADDR_ITERMAPDATA				3//0x7FF72F3A6DC0	//0x7FF6AB6E6C10	//0x7FF78FD25D90	//0x7FF700955550	//0x7FF7238A4980	//0x7FF6F3583980	//0x7FF6E6113980	//	0x7FF7574C2D40	//0x7FF67FE42D40	//0x7FF6D4ED2490	//0x7FF6693D26E0	//0x7FF75FD40FA0	//0x7FF797440FA0	//0x7FF689EBF730	//0x7FF7F5D4F730	//0x7FF792CBF730	//0x7FF6A6EBEC80	//0x7FF61C46EC80	//0x7FF639F1E460//	0x7FF69B93E460//	0x7FF6DE76CF40//	0x7FF67678BEF0//	0x7FF7E15E9E90//	0x7FF75B9A7EE0//	0x7FF7DFE77EE0//	0x7FF6C1027EE0//	0x7FF65BCC6CB0//	0x7FF6E3F561F0//	0x7FF6757E6100//	0x7FF728A75E80//	0x7FF6255E5E30//	0x7FF670A55450//	0x7FF78B7E4DA0//	0x7FF7EAD94DA0//	0x7FF7A1CD3F10//	0x7FF6BE573F10//	0x7FF626623F90//	0x7FF6A94B2E60//	0x7FF7590D2880//	0x7FF631152880//	0x7FF780EF1610//	0x7FF6733A0FF0//	0x7FF62A52F6A0//	0x7FF6ED9AF6A0//	0x7FF6B34BDDC0//	0x7FF6EFD7D7F0//	0x7FF619ADD7F0//	0x7FF75855BCD0//	0x7FF76DA0B250//	0x7FF7E2A39BD0//	0x7FF61D619660//	0x7FF65F2E8FB0//	0x7FF64A807A40//	0x7FF739DB7A40//	0x7FF6BC284E60//	0x7FF66FE24E60//	0x7FF6B42C4650//	0x7FF7830C1C60//	0x7FF6EBA20FB0//	0x7FF6F3870A50//	0x7FF7B57BF510//	0x7FF699FDF510//	0x7FF75BF8E1A0//	0x7FF73ABAE1A0//	0x7FF74F6FC8D0//	0x7FF73B6EC8D0//	0x7FF6FDE1BAD0//	0x7FF75F789CB0//	0x7FF6D5BD9CB0//	0x7FF689457C30//	0x7FF7CCC96830//	0x7FF7F6175540//	0x7FF726A65420//	0x7FF604BF4F20//	0x7FF749254930//	0x7FF6EF5B40B0//	0x7FF7A5992350//	0x7FF7ED4E2350//	0x7FF6BDCC2350//	0x7FF6F2F41B30//	0x7FF7178BE030//	0x7FF7A912E030//	0x7FF7893ED060//	0x7FF7377FD060//	0x7FF6ADB4C340//	0x7FF654B2BFA0//	0x7FF7864BBF70//	0x7FF6780B9A00//	0x7FF749B66190//	0x7FF61CAD3790//	0x7FF7E70F0F60//	0x7FF62541DA30//	0x7FF651ECC060//	0x7FF6FEEB9530//	0x7FF7B3F65990//	0x7FF6F5295990//0x7FF69A4148E0//0x7FF6E8503800//0x7FF7B6962AE0	0x7FF70D651E50	0x7FF6D7111E50	0x7FF7F2CB1E50	0x7FF6AF271090	0x7FF6C889D010	0x7FF70A42B640	0x7FF7144F77E0	0x7FF7EE8063B0	0x7FF71A994DC0	0x7FF75D8E2B40	0x7FF69D13F430	0x7FF671F5F430	0x7FF68FC8DED0	//0x7FF6FBD5C680	//0x7FF69DD8B8D0	//0x7FF74DA3B8D0	//0x7FF75758A9C0	//0x140307970//0x140307400//0x140305EB0//
#define ADDR_GETMAINWIDGETS				4//0x7FF72F9EE590	//0x7FF6ABD2DE00	//0x7FF79036CA90	//0x7FF700F9B610	//0x7FF723EE8750	//0x7FF6F3BC6850	//0x7FF6E67567E0	//	0x7FF757B027B0	//0x7FF6804827B0	//0x7FF6D5512790	//0x7FF669A23070	//0x7FF76038D810	//0x7FF797A8D820	//0x7FF68A50CB60	//0x7FF7F639CB60	//0x7FF79330CBF0	//0x7FF6A7508130	//0x7FF61CAB8150	//0x7FF63A561160//	0x7FF69BF810E0//	0x7FF6DEDAD140//	0x7FF676D9AA70//	0x7FF7E1BF6A20//	0x7FF75BFB3860//	0x7FF7E04837A0//	0x7FF6C1633770//	0x7FF65C2D5AC0//	0x7FF6E4563E90//	0x7FF675DEFD20//	0x7FF72907F400//	0x7FF625BEEBC0//	0x7FF67105F8A0//	0x7FF78BDEC870//	0x7FF7EB39C850//	0x7FF7A22E6AB0//	0x7FF6BEB86AB0//	0x7FF626C367D0//	0x7FF6A9AC4EF0//	0x7FF7596E3540//	0x7FF631763570//	0x7FF7814FFF00//	0x7FF6739ACAC0//	0x7FF62AB39610//	0x7FF6EDFB9320//	0x7FF6B3AC1130//	0x7FF6F037EF00//	0x7FF61A0DEF00//	0x7FF758B5D2E0//	0x7FF76E009C30//	0x7FF7E3034F50//	0x7FF61DC16D50//	0x7FF65F8E5DA0//	0x7FF64AE00A20//	0x7FF73A3B0A20//	0x7FF6BC87E450//	0x7FF67041E430//	0x7FF6B48BC730//	0x7FF7836B4840//	0x7FF6EC011B60//	0x7FF6F3E60CE0//	0x7FF7B5D860D0//	0x7FF69A5A60D0//	0x7FF75C551020//	0x7FF73B171020//	0x7FF74FCBA5E0//	0x7FF73BCAA5E0//	0x7FF6FE3D6E30//	0x7FF75FD4BD20//	0x7FF6D619BCF0//	0x7FF689A15FC0//	0x7FF7CD254CC0//	0x7FF7F6731940//	0x7FF727021790//	0x7FF6051B0510//	0x7FF74980EB50//	0x7FF6EFB78AF0//	0x7FF7A5F468E0//	0x7FF7EDA96940//	0x7FF6BE2768B0//	0x7FF6F34F4F20//	0x7FF717E18CD0//	0x7FF7A9688D00//	0x7FF7899477D0//	0x7FF737D577A0//	0x7FF6AE0A3D00//	0x7FF655083C20//	0x7FF786A13BF0//	0x7FF67860E0E0//	0x7FF74A094040//	0x7FF61D001EC0//	0x7FF7E75EE590//	0x7FF625917350//	0x7FF6523C6A20//	0x7FF6FF3B3D40//	0x7FF7B445DD90//	0x7FF6F578DD60//0x7FF69A90C200//0x7FF6E8A06E80//0x7FF7B6E68900	0x7FF70DB57070	0x7FF6D7617090	0x7FF7F31B6E40	0x7FF6AF773AF0	0x7FF6C8D97530	0x7FF70A9228F0	0x7FF7149F19F0	0x7FF7EECFECC0	0x7FF71AE9C1C0	0x7FF75DDB2D90	0x7FF69D60BA60	0x7FF67242BA60	0x7FF690159900	//0x7FF6FC227100	//0x7FF69E252EA0	//0x7FF74DF02E90	//0x7FF757A50880	//0x1407D18D0//0x1407DBCA0//0x1407D7790//
													//					//				////				//              //              	
#define OFFSET_ITEMMAPCOUNT					0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//0x000000000028//0x000000000028//0x000000000028	//0x000000000028//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
#define OFFSET_ITEMMAPDATA					0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//0x000000000010//0x000000000010//0x000000000010	//0x000000000010//0x000000000010	//0x000000000010	//0x000000000010	//0x000000010//0x000000010//0x000000010//
//											0x7FF72FA811D0	//0x7FF6ABDC0A30	//0x7FF7903FE8D0	//0x7FF70102D2C0	//0x7FF723F79CF0	//0x7FF6F3C55370	//0x7FF6E67E5300	//0x7FF757B910D0	//0x7FF6805110D0	//0x7FF6D559F2B0	//0x7FF669AA2A93	//0x7FF76040CCF3	//0x7FF797B0CD03	//0x7FF68A58C663	//0x7FF7F641C663	//0x7FF79338C6F3	//0x7FF6A7585FC3	//0x7FF61CB35FE3	//0x7FF63A5DEE23//	0x7FF69BFFEDA3//		7FF6DEE2AC33//		//7FF676E1B313//	//7FF7E1C76FC3//	//7FF75C032743//	//7FF7E0502653//	//7FF6C16B2673//	//7FF65C350CD3//	//7FF6E45DEBB3//	//7FF675E6D6B3//	//7FF7290FD6A3//	//7FF625C6CC63//	//7FF6710D9D03//	//7FF78BE66653//	//7FF7EB416633//	//7FF7A236F363//	//7FF6BEC0F3F3//	//7FF626CBE233//	//7FF6A9B467B3//	//7FF759764763//	//7FF6317E4793//	//7FF78157FF23//	//7FF673A2C4D3//	//7FF62ABB6453//	//7FF6EE035C83//	//7FF6B3B3D2E3//	//7FF6F03FAD13//	//7FF61A15AB93//	//7FF758BD6D73//	//7FF76E081B33//	//7FF7E30AF133//	//7FF61DC8E583//	//7FF65F95D703//	//7FF64AE77A43//	//7FF73A427A43//	//7FF6BC8F2E03//	//7FF670492DE3//	//7FF6B4930413//	//7FF7836FC153//	//7FF6EC059203//	//7FF6F3EA8303//	//7FF7B5DF64F3//	//7FF69A6164F3//	//7FF75C5C0D03//	//7FF73B1E0D03//	//7FF74FD288C3//	//7FF73BD188C3//	//7FF6FE444933//	//7FF75FDCABA3//	//7FF6D621AB63//	//7FF689A94A23//	//7FF7CD2CE193//	//7FF7F67AA563//	//7FF72709A2E3//	//7FF60522A643//	//7FF749888553//	//7FF6EFBBB723//	//7FF7A5F88F23//	//7FF7EDAD8F83//	//7FF6BE2B8EF3//	//7FF6F35372B3//	//7FF717E5A1B3//	//7FF7A96CA1E3//	//7FF789988503//	//7FF737D984D3//	//7FF6AE0E3ED3//	//7FF6550C2E33//	//7FF786A52DF3//	//7FF67864B003//	//7FF74A0D00A3//	//7FF61D03D153//	//7FF7E765C383//	//7FF625984DF3//	//7FF6524382B3//	//7FF6FF421263		//7FF7B44CB553		//7FF6F57FB593////7FF69A976FD3//7FF6E8A4E413	//7FF7B6EA9E53	//7FF70DB983E3	//7FF6D7658403	//7FF7F31F81B3	//7FF6AF7B4E93	//7FF6C8DD50A3	//7FF70A95FF33	//7FF714A2BA33	//7FF7EED3C923	//7FF71AEDB213	//7FF75DE331A3	//7FF69D68AA53	//7FF6724AAA53////7FF6901D9253	////7FF6FC2A6C63	////7FF69E2D09E3	////7FF74DF809D3	////7FF757ACE0F3	////14084A353////140820B33////14081BB83//
													//					//				////				//              //              	
#define OFFSET_ITEMBRANCH					0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//0x000000000030//0x000000000030//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000030//0x000000030//0x000000030//
#define OFFSET_ITEMUID						0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//0x000000000028//0x000000000028//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
//											0x7FF72FA813A8	//0x7FF6ABDC0C08	//0x7FF7903FEAA8	//0x7FF70102D498	//0x7FF723F79EC8	//0x7FF6F3C55548	//0x7FF6E67E54D8	//0x7FF757B912A8	//0x7FF6805112A8	//0x7FF6D559F488	//0x7FF669AA2C38	//0x7FF76040CE98	//0x7FF797B0CEA8	//0x7FF68A58C808	//0x7FF7F641C808	//0x7FF79338C898	//0x7FF6A7586168	//0x7FF61CB36188	//0x7FF63A5DEFC8//	0x7FF69BFFEF48//		7FF6DEE2ADD8//		//7FF676E1B4BB//	//7FF7E1C7716B//	//7FF75C0328EB//	//7FF7E05027FB//	//7FF6C16B281B//	//7FF65C350E7B//	//7FF6E45DED5B//	//7FF675E6D85B//	//7FF7290FD84B//	//7FF625C6CE0B//	//7FF6710D9EAB//	//7FF78BE667FB//	//7FF7EB4167DB//	//7FF7A236F508//	//7FF6BEC0F598//	//7FF626CBE3D8//	//7FF6A9B46958//	//7FF759764908//	//7FF6317E4938//	//7FF7815800C8//	//7FF673A2C678//	//7FF62ABB65F8//	//7FF6EE035E28//	//7FF6B3B3D488//	//7FF6F03FAEB8//	//7FF61A15AD38//	//7FF758BD6F18//	//7FF76E081CD8//	//7FF7E30AF2D8//	//7FF61DC8E728//	//7FF65F95D8A8//	//7FF64AE77BE8//	//7FF73A427BE8//	//7FF6BC8F2FA8//	//7FF670492F88//	//7FF6B49305B8//	//7FF7836FC2FB//	//7FF6EC0593AB//	//7FF6F3EA84AB//	//7FF7B5DF669B//	//7FF69A61669B//	//7FF75C5C0EAB//	//7FF73B1E0EAB//	//7FF74FD28A6B//	//7FF73BD18A6B//	//7FF6FE444ADB//	//7FF75FDCAD48//	//7FF6D621AD08//	//7FF689A94BC8//	//7FF7CD2CE338//	//7FF7F67AA708//	//7FF72709A488//	//7FF60522A7E8//	//7FF7498886F8//	//7FF6EFBBB8CB//	//7FF7A5F890CB//	//7FF7EDAD912B//	//7FF6BE2B909B//	//7FF6F353745B//	//7FF717E5A35B//	//7FF7A96CA38B//	//7FF7899886AB//	//7FF737D9867B//	//7FF6AE0E407B//	//7FF6550C2FDB//	//7FF786A52F9B//	//7FF67864B1AB//	//7FF74A0D024B//	//7FF61D03D2F8//	//7FF7E765C528//	//7FF625984F98//	//7FF652438458//	//7FF6FF421408//	//7FF7B44CB6F8		//7FF6F57FB738////7FF69A977178////7FF6E8A4E5BB	//7FF7B6EA9FFB	//7FF70DB9858B	//7FF6D76585AB	//7FF7F31F835B	//7FF6AF7B503B	//7FF6C8DD524B	//7FF70A9600DB	//7FF714A2BBDB	//7FF7EED3CAC8	//7FF71AEDB3B8	//7FF75DE33348	//7FF69D68ABF8	//7FF6724AABF8//	//7FF6901D93F8	////7FF6FC2A6E08	////7FF69E2D0B88	////7FF74DF80B78	////7FF757ACE298	////14084A4F8////140820CD8////14081BD28//
													//					//				////				//              //              
#define ADDR_CONVWIDGETRCX				5//0x7FF72FA390A0	//0x7FF6ABD78900	//0x7FF7903B6700	//0x7FF700FE5280	//0x7FF723F31DB0	//0x7FF6F3C0D960	//0x7FF6E679D8F0	//	0x7FF757B496C0	//0x7FF6804C96C0	//0x7FF6D5557B40	//0x7FF669A63180	//0x7FF7603CD730	//0x7FF797ACD740	//0x7FF68A54CC30	//0x7FF7F63DCC30	//0x7FF79334CCC0	//0x7FF6A7549EE0	//0x7FF61CAF9F00	//0x7FF63A5A2F20//	0x7FF69BFC2EA0//	0x7FF6DEDED8E0//	0x7FF676E22830//	0x7FF7E1C7E4E0//	0x7FF75C039C60//	0x7FF7E0509B70//	0x7FF6C16B9B90//	0x7FF65C3581F0//	0x7FF6E45E60D0//	0x7FF675E74BC0//	0x7FF729104B50//	0x7FF625C73FD0//	0x7FF6710E0B30//	0x7FF78BE6D450//	0x7FF7EB41D430//	0x7FF7A232D790//	0x7FF6BEBCD980//	0x7FF626C7C7B0//	0x7FF6A9B048E0//	0x7FF759722BE0//	0x7FF6317A2C10//	0x7FF78153F5B0//	0x7FF6739EBFE0//	0x7FF62AB75CC0//	0x7FF6EDFF59D0//	0x7FF6B3AFD750//	0x7FF6F03BB1D0//	0x7FF61A11B050//	0x7FF758B98540//	0x7FF76E044390//	0x7FF7E306F500//	0x7FF61DC52900//	0x7FF65F921760//	0x7FF64AE3BC40//	0x7FF73A3EBC40//	0x7FF6BC8BA550//	0x7FF67045A530//	0x7FF6B48F7FA0//	0x7FF783702AC0//	0x7FF6EC05FB30//	0x7FF6F3EAEC00//	0x7FF7B5DFD4B0//	0x7FF69A61D4B0//	0x7FF75C5C7CB0//	0x7FF73B1E7CB0//	0x7FF74FD2E420//	0x7FF73BD1E420//	0x7FF6FE44A490//	0x7FF75FD8F7F0//	0x7FF6D61DF7B0//	0x7FF689A59870//	0x7FF7CD295C00//	0x7FF7F6772350//	0x7FF7270621B0//	0x7FF6051F06E0//	0x7FF74984EA90//	0x7FF6EFBC0B70//	0x7FF7A5F8E370//	0x7FF7EDADE3D0//	0x7FF6BE2BE340//	0x7FF6F353C700//	0x7FF717E5F580//	0x7FF7A96CF5B0//	0x7FF78998D8D0//	0x7FF737D9D8A0//	0x7FF6AE0E92A0//	0x7FF6550C80D0//	0x7FF786A58090//	0x7FF678650220//	0x7FF74A0D52C0//	0x7FF61D042920//	0x7FF7E7662110//	0x7FF62598AB80//	0x7FF6524423D0//	0x7FF6FF42B350//	0x7FF7B44D5340//	0x7FF6F5805380//0x7FF69A980DC0//0x7FF6E8A534E0//0x7FF7B6EAEF20	0x7FF70DB9D4B0	0x7FF6D765D4D0	0x7FF7F31FD280	0x7FF6AF7B9F60	0x7FF6C8DD9BB0	0x7FF70A9646B0	0x7FF714A30140	0x7FF7EED41B40	0x7FF71AEE44D0	0x7FF75DDED670	0x7FF69D645ED0	0x7FF672465ED0	0x7FF690193750	//0x7FF6FC261760	//0x7FF69E28C380	//0x7FF74DF3C370	//0x7FF757A89CD0	//0x14080A530//0x1408256F0//0x140820030//
#define ADDR_GETWIDGETWITHID			6//0x7FF72FA390B0	//0x7FF6ABD78910	//0x7FF7903B6710	//0x7FF700FE5290	//0x7FF723F31DC0	//0x7FF6F3C0D970	//0x7FF6E679D900	//	0x7FF757B496D0	//0x7FF6804C96D0	//0x7FF6D5557B50	//0x7FF669A63190	//0x7FF7603CD740	//0x7FF797ACD750	//0x7FF68A54CC40	//0x7FF7F63DCC40	//0x7FF79334CCD0	//0x7FF6A7549EF0	//0x7FF61CAF9F10	//0x7FF63A5A2F30//	0x7FF69BFC2EB0//	0x7FF6DEDED8F0//	0x7FF676E22840//	0x7FF7E1C7E4F0//	0x7FF75C039C70//	0x7FF7E0509B80//	0x7FF6C16B9BA0//	0x7FF65C358200//	0x7FF6E45E60E0//	0x7FF675E74BD0//	0x7FF729104B60//	0x7FF625C73FE0//	0x7FF6710E0B40//	0x7FF78BE6D460//	0x7FF7EB41D440//	0x7FF7A232D7A0//	0x7FF6BEBCD990//	0x7FF626C7C7C0//	0x7FF6A9B048F0//	0x7FF759722BF0//	0x7FF6317A2C20//	0x7FF78153F5C0//	0x7FF6739EBFF0//	0x7FF62AB75CD0//	0x7FF6EDFF59E0//	0x7FF6B3AFD760//	0x7FF6F03BB1E0//	0x7FF61A11B060//	0x7FF758B98550//	0x7FF76E0443A0//	0x7FF7E306F510//	0x7FF61DC52910//	0x7FF65F921770//	0x7FF64AE3BC50//	0x7FF73A3EBC50//	0x7FF6BC8BA560//	0x7FF67045A540//	0x7FF6B48F7FB0//	0x7FF783702AD0//	0x7FF6EC05FB40//	0x7FF6F3EAEC10//	0x7FF7B5DFD4C0//	0x7FF69A61D4C0//	0x7FF75C5C7CC0//	0x7FF73B1E7CC0//	0x7FF74FD2E430//	0x7FF73BD1E430//	0x7FF6FE44A4A0//	0x7FF75FD8F800//	0x7FF6D61DF7C0//	0x7FF689A59880//	0x7FF7CD295C10//	0x7FF7F6772360//	0x7FF7270621C0//	0x7FF6051F06F0//	0x7FF74984EAA0//	0x7FF6EFBC0B80//	0x7FF7A5F8E380//	0x7FF7EDADE3E0//	0x7FF6BE2BE350//	0x7FF6F353C710//	0x7FF717E5F590//	0x7FF7A96CF5C0//	0x7FF78998D8E0//	0x7FF737D9D8B0//	0x7FF6AE0E92B0//	0x7FF6550C80E0//	0x7FF786A580A0//	0x7FF678650230//	0x7FF74A0D52D0//	0x7FF61D042930//	0x7FF7E7662120//	0x7FF62598AB90//	0x7FF6523FDE80//	0x7FF6FF3EA360//	0x7FF7B4494560//	0x7FF6F57C45A0//0x7FF69A940730//0x7FF6E8A534F0//0x7FF7B6EAEF30	0x7FF70DB9D4C0	0x7FF6D765D4E0	0x7FF7F31FD290	0x7FF6AF7B9F70	0x7FF6C8DD9BC0	0x7FF70A9646C0	0x7FF714A30150	0x7FF7EED41B50	0x7FF71AE9EF70	0x7FF75DDED680	0x7FF69D645EE0	0x7FF672465EE0	0x7FF690193760	//0x7FF6FC261770	//0x7FF69E28C390	//0x7FF74DF3C380	//0x7FF757A89CE0	//0x14080A540//0x140825700//0x140820040//
#define ADDR_LHGameInstance				7//0x7FF734CD2E38	//0x7FF6B100DBB8	//0x7FF795625E58	//0x7FF7062402E8	//0x7FF72916B428	//0x7FF6F8E1A690	//0x7FF6EB9AA690	//	0x7FF75CD2A550	//0x7FF6856AA550	//0x7FF6DA71F960	//0x7FF66EBE9A70	//0x7FF765532420	//0x7FF79CC32420	//0x7FF68F687E20	//0x7FF7FB516DA0	//0x7FF798487DA0	//0x7FF6AC652C88	//0x7FF621C02C88	//0x7FF63F6951D8//	0x7FF6A10B51D8//	0x7FF6E3EB5F98//	0x7FF67BE98490//	0x7FF7E6C6AD50//	0x7FF760FF3E50//	0x7FF7E54C3E50//	0x7FF6C6673E50//	0x7FF661302E08//	0x7FF6E9570F08//	0x7FF67ADF6B50//	0x7FF72E0817D0//	0x7FF62ABE94D0//	0x7FF67603BB28//	0x7FF790DD24A8//	0x7FF7F03824A8//	0x7FF7A728C378//	0x7FF6C3B2C2F8//	0x7FF62BBCAE60//	0x7FF6AEA1A890//	0x7FF75E626250//	0x7FF6366A60D0//	0x7FF786419020//	0x7FF67889D4D0//	0x7FF62F9F0FA0//	0x7FF6F2E6EFA0//	0x7FF6B894B2E0//	0x7FF6F51F2DA0//	0x7FF61EF52DA0//	0x7FF75D97FBB0//	0x7FF772E09330//	0x7FF7E7DFB620//	0x7FF6229DF888//	0x7FF66469A108//	0x7FF64FB53390//	0x7FF73F103390//	0x7FF6C156B7B0//	0x7FF67510B7B0//	0x7FF6B958ED70//	0x7FF788356948//	0x7FF6F0C6BA58//	0x7FF6F8AA1348//	0x7FF7BA9AFC18//	0x7FF69F1CFC18//	0x7FF761137458//	0x7FF73FD57458//	0x7FF754849258//	0x7FF740839258//	0x7FF702F50618//	0x7FF764877668//	0x7FF6DACC7668//	0x7FF68E4F1F08//	0x7FF7D1CD9AB0//	0x7FF7FB187738//	0x7FF72BA756B8//	0x7FF609BE9F78//	0x7FF74E2357F8//	0x7FF6F457CDE8//	0x7FF7AA90FF28//	0x7FF7F245FF28//	0x7FF6C2C3FF28//	0x7FF6F7EA3588//	0x7FF71C38A848//	0x7FF7ADBFA848//	0x7FF78DE9A8C0//	0x7FF73C2AA8C0//	0x7FF6B25D1980//	0x7FF659588988//	0x7FF78AF18948//	0x7FF67CA37F98//	0x7FF74E44BEA8//	0x7FF62135D5F0//	0x7FF7EB9123F8//	0x7FF629BE5268//	0x7FF656659B28//	0x7FF7035EC7E8//	0x7FF7B863A858//	0x7FF6F996A858//0x7FF69EABAEF8//0x7FF6ECB848F0//0x7FF7BAFAC830	0x7FF711C70930	0x7FF6DB730930	0x7FF7F72D0930	0x7FF6B386BAB0	0x7FF6CCDA5EE0	0x7FF70E8EFA70	0x7FF718964508	0x7FF7F2C44088	0x7FF71ED94840	0x7FF761CAB3F8	0x7FF6A146D8F8	0x7FF67628D8F8	0x7FF693F95638	//0x7FF70003BF78	//0x7FF6A202C8B8	//0x7FF751CDC8B8	//0x7FF75B7FE0B8	//0x144538B58//0x144525488//0x1444DB5F8//
#define ADDR_GETPLAYERCONTROLLER		8//0x7FF72F9F0E40	//0x7FF6ABD306B0	//0x7FF79036F340	//0x7FF700F9DEC0	//0x7FF723EEB000	//0x7FF6F3BC9140	//0x7FF6E67590D0	//	0x7FF757B050A0	//0x7FF6804850A0	//0x7FF6D5514E70	//0x7FF669A25800	//0x7FF76038FFA0	//0x7FF797A8FFB0	//0x7FF68A50F2F0	//0x7FF7F639F2F0	//0x7FF79330F380	//0x7FF6A750A720	//0x7FF61CABA740	//0x7FF63A563750//	0x7FF69BF836D0//	0x7FF6DEDAF730//	0x7FF676D9B8E0//	0x7FF7E1BF7770//	0x7FF75BFB45B0//	0x7FF7E04844F0//	0x7FF6C16344C0//	0x7FF65C2D6850//	0x7FF6E4564C20//	0x7FF675DF0A70//	0x7FF729080150//	0x7FF625BEF910//	0x7FF671060630//	0x7FF78BDED600//	0x7FF7EB39D5E0//	0x7FF7A22E9360//	0x7FF6BEB89360//	0x7FF626C39040//	0x7FF6A9AC7750//	0x7FF7596E5DA0//	0x7FF631765DD0//	0x7FF781502760//	0x7FF6739AF320//	0x7FF62AB3BC60//	0x7FF6EDFBB970//	0x7FF6B3AC3780//	0x7FF6F0381550//	0x7FF61A0E1550//	0x7FF758B5FA80//	0x7FF76E00C3D0//	0x7FF7E30376F0//	0x7FF61DC19570//	0x7FF65F8E85C0//	0x7FF64AE03240//	0x7FF73A3B3240//	0x7FF6BC880C70//	0x7FF670420C50//	0x7FF6B48BEF50//	0x7FF7836B7090//	0x7FF6EC0143F0//	0x7FF6F3E63570//	0x7FF7B5D87320//	0x7FF69A5A7320//	0x7FF75C552270//	0x7FF73B172270//	0x7FF74FCBB730//	0x7FF73BCAB730//	0x7FF6FE3D7F80//	0x7FF75FD4E860//	0x7FF6D619E830//	0x7FF689A18B00//	0x7FF7CD257530//	0x7FF7F67341B0//	0x7FF727024000//	0x7FF6051B2D80//	0x7FF7498113C0//	0x7FF6EFB7B2D0//	0x7FF7A5F490C0//	0x7FF7EDA99120//	0x7FF6BE279090//	0x7FF6F34F7700//	0x7FF717E1B3E0//	0x7FF7A968B410//	0x7FF789949EE0//	0x7FF737D59EB0//	0x7FF6AE0A6410//	0x7FF655086320//	0x7FF786A162F0//	0x7FF6786107F0//	0x7FF74A096750//	0x7FF61D0043F0//	0x7FF7E75EFB40//	0x7FF625918900//	0x7FF6523C7FC0//	0x7FF6FF3B52D0//	0x7FF7B445F320//	0x7FF6F578F2F0//0x7FF69A90D550//0x7FF6E8A09AD0//0x7FF7B6E6AF70	0x7FF70DB596E0	0x7FF6D7619700	0x7FF7F31B94B0	0x7FF6AF776160	0x7FF6C8D99B20	0x7FF70A924C80	0x7FF7149F3EC0	0x7FF7EED011D0	0x7FF71AE9E430	0x7FF75DDB65D0	0x7FF69D60F2A0	0x7FF67242F2A0	0x7FF69015D140	//0x7FF6FC22A940	//0x7FF69E2563F0	//0x7FF74DF063E0	//0x7FF757A53DD0	//0x1407D4820//0x1407DED50//0x1407DA7D0//
#define ADDR_INITQUESTPARAM				9//0x7FF72F7F01A0	//0x7FF6ABB2FFF0	//0x7FF79016F170	//0x7FF700D9F2F0	//0x7FF723CEE5E0	//0x7FF6F3A4C5F0	//0x7FF6E65DC5F0	//	0x7FF75798B760	//0x7FF68030B760	//0x7FF6D5399DD0	//0x7FF6698A0E60	//0x7FF76020BE10	//0x7FF79790BE10	//0x7FF68A38B310	//0x7FF7F621B310	//0x7FF79318B3A0	//0x7FF6A7389A50	//0x7FF61C939A80	//0x7FF63A3E5F80//	0x7FF69BE05F80//	0x7FF6DEC33720//	0x7FF676C52810//	0x7FF7E1AAE260//	0x7FF75BE6C110//	0x7FF7E033C0B0//	0x7FF6C14EC0B0//	0x7FF65C18A700//	0x7FF6E4419AF0//	0x7FF675CA9440//	0x7FF728F390B0//	0x7FF625AA8FF0//	0x7FF670F172F0//	0x7FF78BCA84F0//	0x7FF7EB258480//	0x7FF7A21A2CF0//	0x7FF6BEA42CF0//	0x7FF626AE7960//	0x7FF6A9975430//	0x7FF759594D80//	0x7FF631614DB0//	0x7FF7813BD6A0//	0x7FF67386BF20//	0x7FF62A9F9E80//	0x7FF6EDE79E40//	0x7FF6B39861C0//	0x7FF6F0245590//	0x7FF619FA5590//	0x7FF758A23950//	0x7FF76DED1FF0//	0x7FF7E2EFF220//	0x7FF61DADD9D0//	0x7FF65F7AD010//	0x7FF64ACCB580//	0x7FF73A27B580//	0x7FF6BC748120//	0x7FF6702E8120//	0x7FF6B4786F60//	0x7FF783582B20//	0x7FF6EBEE1770//	0x7FF6F3D30B30//	0x7FF7B5C7F310//	0x7FF69A49F310//	0x7FF75C44D610//	0x7FF73B06D610//	0x7FF74FBBBCF0//	0x7FF73BBABCF0//	0x7FF6FE2DA5D0//	0x7FF75FC44130//	0x7FF6D6094100//	0x7FF6899123D0//	0x7FF7CD152F80//	0x7FF7F6631EB0//	0x7FF726F21D30//	0x7FF6050B1650//	0x7FF7497104E0//	0x7FF6EFA735C0//	0x7FF7A5E41F50//	0x7FF7ED991FB0//	0x7FF6BE171F30//	0x7FF6F33F1220//	0x7FF717D1EAA0//	0x7FF7A958EAD0//	0x7FF78984D260//	0x7FF737C5D230//	0x7FF6ADFAAED0//	0x7FF654F8AB00//	0x7FF78691AAD0//	0x7FF6785184B0//	0x7FF749FA12C0//	0x7FF61CF0E4A0//	0x7FF7E74F2550//	0x7FF62581E950//	0x7FF6522CCDA0//	0x7FF6FF2B9D10//	0x7FF7B4366110//	0x7FF6F56960E0//0x7FF69A8162F0//0x7FF6E8905610//0x7FF7B6D668F0	0x7FF70DA55900	0x7FF6D7515900	0x7FF7F30B5900	0x7FF6AF674B70	0x7FF6C8C9FB20	0x7FF70A82E090	0x7FF7148FA090	0x7FF7EEC07070	0x7FF71AD9A240	0x7FF75DDB2B60	0x7FF69D60B830	0x7FF67242B830	0x7FF6901596D0	//0x7FF6FC226E90	//0x7FF69E252C30	//0x7FF74DF02C20	//0x7FF757A50610	//0x1407D1610//0x140794830//0x140791BF0//
#define ADDR_QUESTTABLEDATA				10//0x7FF734CD2E78	//0x7FF6B100DBF8	//0x7FF795625E80	//0x7FF706240308	//0x7FF72916B450	//0x7FF6F8E1A6B0	//0x7FF6EB9AA6B0	//0x7FF75CD2A578	//0x7FF6856AA578	//0x7FF6DA71F980	//0x7FF66EBE99C8	//0x7FF765532378	//0x7FF79CC32378	//0x7FF68F687D78	//0x7FF7FB516CF8	//0x7FF798487CF8	//0x7FF6AC652BE8	//0x7FF621C02BE8	//0x7FF63F695138//	0x7FF6A10B5138//	0x7FF6E3EB5EF0//	0x7FF67BE984C8//	0x7FF7E6C6AD88//	0x7FF760FF3E88//	0x7FF7E54C3E88//	0x7FF6C6673E88//	0x7FF661302E40//	0x7FF6E9570F40//	0x7FF67ADF6B88//	0x7FF72E081808//	0x7FF62ABE9508//	0x7FF67603BB60//	0x7FF790DD24E0//	0x7FF7F03824E0//	0x7FF7A728C3B0//	0x7FF6C3B2C330//	0x7FF62BBCAE98//	0x7FF6AEA1A8B0//	0x7FF75E626270//	0x7FF6366A60F0//	0x7FF786419040//	0x7FF67889D4F0//	0x7FF62F9F0FC0//	0x7FF6F2E6EFC0//	0x7FF6B894B300//	0x7FF6F51F2DC0//	0x7FF61EF52DC0//	0x7FF75D97FA00//	0x7FF772E09180//	0x7FF7E7DFB470//	0x7FF6229DF708//	0x7FF664699F88//	0x7FF64FB53208//	0x7FF73F103208//	0x7FF6C156B6D0//	0x7FF67510B6D0//	0x7FF6B958EC90//	0x7FF788356860//	0x7FF6F0C6B970//	0x7FF6F8AA1260//	0x7FF7BA9AFC50//	0x7FF69F1CFC50//	0x7FF761137490//	0x7FF73FD57490//	0x7FF754849290//	0x7FF740839290//	0x7FF702F50650//	0x7FF7648776A0//	0x7FF6DACC76A0//	0x7FF68E4F1F40//	0x7FF7D1CD9AE8//	0x7FF7FB187770//	0x7FF72BA756F0//	0x7FF609BE9FB0//	0x7FF74E235830//	0x7FF6F457CC58//	0x7FF7AA90FD98//	0x7FF7F245FD98//	0x7FF6C2C3FD98//	0x7FF6F7EA33F8//	0x7FF71C38A760//	0x7FF7ADBFA760//	0x7FF78DE9A7E0//	0x7FF73C2AA7E0//	0x7FF6B25D18A0//	0x7FF6595888A0//	0x7FF78AF18860//	0x7FF67CA37EB0//	0x7FF74E44BDD0//	0x7FF62135D550//	0x7FF7EB912430//	0x7FF629BE52A0//	0x7FF656659B60//	0x7FF7035EC820//	0x7FF7B863A890//	0x7FF6F996A890//0x7FF69EABAF30//0x7FF6ECB84928//0x7FF7BAFAC868	0x7FF711C70968	0x7FF6DB730968	0x7FF7F72D0968	0x7FF6B386BAE8	0x7FF6CCDA5F18	0x7FF70E8EFAA8	0x7FF718964370	0x7FF7F2C43EF0	0x7FF71ED947A0	0x7FF761CAB430	0x7FF6A146D930	0x7FF67628D930	0x7FF693F95670	//0x7FF70003BFB0	//0x7FF6A202C8F0	//0x7FF751CDC8F0	//0x7FF75B7FE0F0	//0x144538B90//0x1445254C0//0x1444DB630//
#define ADDR_GETQUESTTABLE				11//0x7FF72FC84F90	//0x7FF6ABFC3CE0	//0x7FF7905FF6C0	//0x7FF70122DA20	//0x7FF72418FAE0	//0x7FF6F3E64E90	//0x7FF6E69F4DB0	//0x7FF757D9DA00	//0x7FF68071DA00	//0x7FF6D57AB140	//0x7FF669CA99F0	//0x7FF760611DF0	//0x7FF797D11DF0	//0x7FF68A78DD30	//0x7FF7F661DC10	//0x7FF79358DCA0	//0x7FF6A77810A0	//0x7FF61CD310C0	//0x7FF63A7DA9D0//	0x7FF69C1FA950//	0x7FF6DF001590//	0x7FF677033E90//	0x7FF7E1E8ED30//	0x7FF75C2468E0//	0x7FF7E0716730//	0x7FF6C18C6610//	0x7FF65C563DA0//	0x7FF6E47F0360//	0x7FF67607DDC0//	0x7FF72930C1C0//	0x7FF625E7A270//	0x7FF6712B4780//	0x7FF78C03F1C0//	0x7FF7EB5EF110//	0x7FF7A2531EB0//	0x7FF6BEDD1F40//	0x7FF626E7F580//	0x7FF6A9D00EB0//	0x7FF7599359E0//	0x7FF6319B59B0//	0x7FF78174C4C0//	0x7FF673BED930//	0x7FF62AD76D90//	0x7FF6EE1F6560//	0x7FF6B3CFBB30//	0x7FF6F05B4B70//	0x7FF61A314990//	0x7FF758D5CD30//	0x7FF76E203B90//	0x7FF7E3231F20//	0x7FF61DE0E4F0//	0x7FF65FADBEE0//	0x7FF64AFEEDA0//	0x7FF73A59EDA0//	0x7FF6BCA66C20//	0x7FF670606930//	0x7FF6B4A9CA30//	0x7FF783879870//	0x7FF6EC1DAEE0//	0x7FF6F4028030//	0x7FF7B5F6ABD0//	0x7FF69A78ABD0//	0x7FF75C732260//	0x7FF73B352250//	0x7FF74FE92A50//	0x7FF73BE82A50//	0x7FF6FE5AC810//	0x7FF75FEFD060//	0x7FF6D634D0B0//	0x7FF689BC63F0//	0x7FF7CD3FC820//	0x7FF7F68D6D80//	0x7FF7271C69B0//	0x7FF6053545E0//	0x7FF7499B0C60//	0x7FF6EFD27740//	0x7FF7A6104420//	0x7FF7EDC54480//	0x7FF6BE4343F0//	0x7FF6F36B11C0//	0x7FF717FC5510//	0x7FF7A9835540//	0x7FF789AF0DB0//	0x7FF737F00D80//	0x7FF6AE21B330//	0x7FF6551F8040//	0x7FF786B87F30//	0x7FF67876B390//	0x7FF74A1E8CC0//	0x7FF61D1633D0//	0x7FF7E77754F0//	0x7FF625A9FFF0//	0x7FF652554240//	0x7FF6FF507800//	0x7FF7B45AEB30//	0x7FF6F58DEB70//0x7FF69AA58690//0x7FF6E8B69630//0x7FF7B6FBF3D0	0x7FF70DCB5980	0x7FF6D77759A0	0x7FF7F3315750	0x7FF6AF8D03D0	0x7FF6C8EB5680	0x7FF70AA38EE0	0x7FF714AFFAF0	0x7FF7EEE15EE0	0x7FF71AFB8600	0x7FF75DEFDB20	0x7FF69D7583C0	0x7FF6725783C0	0x7FF6902A2C30	//0x7FF6FC333970	//0x7FF69E35BF30	//0x7FF74E00BF20	//0x7FF757B594E0	//0x1408D6C00//0x1408EE9E0//0x1408E9090//
#define ADDR_GETQUESTINFO				12//0x7FF730D49560	//0x7FF6AD0855E0	//0x7FF7916AC310	//0x7FF7022CFB40	//0x7FF725206990	//0x7FF6F4EC2830	//0x7FF6E7A52770	//0x7FF758DDE3F0	//0x7FF68175E380	//0x7FF6D67DF000	//0x7FF66ACB5E00	//0x7FF761617650	//0x7FF798D17620	//0x7FF68B77D450	//0x7FF7F760D2E0	//0x7FF79457D330	//0x7FF6A8756CC0	//0x7FF61DD06DC0	//0x7FF63B7A12E0//	0x7FF69D1C1250//	0x7FF6DFFD32B0//	0x7FF677FC93F0//	0x7FF7E2DC6F90//	0x7FF75D16C150//	0x7FF7E163BEB0//	0x7FF6C27EBD60//	0x7FF65D48A280//	0x7FF6E57059F0//	0x7FF676F8F020//	0x7FF72A21BAB0//	0x7FF626D86430//	0x7FF6721E34F0//	0x7FF78CF80E80//	0x7FF7EC530BD0//	0x7FF7A344ABD0//	0x7FF6BFCEAB00//	0x7FF627D8D890//	0x7FF6AABF1110//	0x7FF75A802B80//	0x7FF632882550//	0x7FF782606750//	0x7FF674A974C0//	0x7FF62BBFD6B0//	0x7FF6EF07CA50//	0x7FF6B4B718D0//	0x7FF6F141F6F0//	0x7FF61B17F0B0//	0x7FF759BC7C70//	0x7FF76F05E750//	0x7FF7E40671F0//	0x7FF61EC4EA90//	0x7FF66090F490//	0x7FF64BDE5A70//	0x7FF73B395A60//	0x7FF6BD826630//	0x7FF6713C6300//	0x7FF6B5853210//	0x7FF78462FF10//	0x7FF6ECF71E70//	0x7FF6F4DAE690//	0x7FF7B6CD0550//	0x7FF69B4F0550//	0x7FF75D46E6D0//	0x7FF73C08E170//	0x7FF750B9E030//	0x7FF73CB8E030//	0x7FF6FF2B1D00//	0x7FF760BF9E00//	0x7FF6D7049990//	0x7FF68A894010//	0x7FF7CE099240//	0x7FF7F7559580//	0x7FF727E48B00//	0x7FF605FC27E0//	0x7FF74A615A90//	0x7FF6F09688D0//	0x7FF7A6D10EE0//	0x7FF7EE860E30//	0x7FF6BF040E60//	0x7FF6F42AC870//	0x7FF718B7BB10//	0x7FF7AA3EBC00//	0x7FF78A6984D0//	0x7FF738AA83A0//	0x7FF6AEDDC200//	0x7FF655DA04C0//	0x7FF7877301A0//	0x7FF6792843E0//	0x7FF74ACC4470//	0x7FF61DBF60C0//	0x7FF7E81DD8F0//	0x7FF6264E0EF0//	0x7FF652F68240//	0x7FF6FFF20C00//	0x7FF7B4FA50D0//	0x7FF6F62D5080//0x7FF69B438B80//0x7FF6E9510490//0x7FF7B7947820	0x7FF70E625580	0x7FF6D80E55A0	0x7FF7F3C85340	0x7FF6B022EBE0	0x7FF6C97B8650	0x7FF70B31C950	0x7FF7153C30D0	0x7FF7EF6B4EA0	0x7FF71B81C180	0x7FF75E72E540	0x7FF69DF29E80	0x7FF672D49DC0	0x7FF690A658C0	//0x7FF6FCB1D9A0	//0x7FF69EB24500	//0x7FF74E7D44E0	//0x7FF758308060	//0x141062430//0x1410523C0//0x141020DD0//
#define ADDR_GETGAMESTRING				13//0x7FF72FCB65C0	//0x7FF6ABFF50D0	//0x7FF790630710	//0x7FF70125E570	//0x7FF7241BD670	//0x7FF6F3E92A00	//0x7FF6E6A22920	//0x7FF757DCBAC0	//0x7FF68074BAC0	//0x7FF6D57D91B0	//0x7FF669CD7300	//0x7FF76063F530	//0x7FF797D3F530	//0x7FF68A7BB430	//0x7FF7F664B310	//0x7FF7935BB3A0	//0x7FF6A77AE020	//0x7FF61CD5E040	//0x7FF63A806240//	0x7FF69C2261C0//	0x7FF6DF02FE90//	0x7FF67705F730//	0x7FF7E1EBB660//	0x7FF75C273210//	0x7FF7E0743060//	0x7FF6C18F2F40//	0x7FF65C58FE40//	0x7FF6E481B700//	0x7FF6760A8860//	0x7FF7293369E0//	0x7FF625EA4A30//	0x7FF6712E20E0//	0x7FF78C06C9C0//	0x7FF7EB61C910//	0x7FF7A255D6E0//	0x7FF6BEDFD770//	0x7FF626EA8A90//	0x7FF6A9D2A3C0//	0x7FF75995C650//	0x7FF6319DC620//	0x7FF781773170//	0x7FF673C145E0//	0x7FF62AD9EB70//	0x7FF6EE21E340//	0x7FF6B3D23910//	0x7FF6F05DC940//	0x7FF61A33C760//	0x7FF758D87CF0//	0x7FF76E22EB50//	0x7FF7E325B3F0//	0x7FF61DE37B50//	0x7FF65FB05540//	0x7FF64B0165F0//	0x7FF73A5C65F0//	0x7FF6BCA8DF20//	0x7FF67062DC30//	0x7FF6B4AC31B0//	0x7FF7838A3FE0//	0x7FF6EC1FF3B0//	0x7FF6F404C1C0//	0x7FF7B5F8D150//	0x7FF69A7AD180//	0x7FF75C7546C0//	0x7FF73B3746B0//	0x7FF74FEB4B90//	0x7FF73BEA4B90//	0x7FF6FE5CEB00//	0x7FF75FF23FF0//	0x7FF6D6374040//	0x7FF689BED3A0//	0x7FF7CD423A20//	0x7FF7F68FDF40//	0x7FF7271EDB70//	0x7FF60537B7A0//	0x7FF7499D7E10//	0x7FF6EFD48310//	0x7FF7A6125920//	0x7FF7EDC75980//	0x7FF6BE4558F0//	0x7FF6F36D25B0//	0x7FF717FE4A90//	0x7FF7A9854AC0//	0x7FF789B10310//	0x7FF737F202E0//	0x7FF6AE23F370//	0x7FF65521C090//	0x7FF786BABF80//	0x7FF67878E7A0//	0x7FF74A20C0C0//	0x7FF61D181170//	0x7FF7E7792660//	0x7FF625ABD7E0//	0x7FF652572450//	0x7FF6FF52C970//	0x7FF7B45D38C0//	0x7FF6F5903900//0x7FF69AA7D3F0//0x7FF6E8B86E40//0x7FF7B6FDC1B0	0x7FF70DCD10A0	0x7FF6D77910C0	0x7FF7F3330E70	0x7FF6AF8EB800	0x7FF6C8ED5310	0x7FF70AA58B70	0x7FF714B1F720	0x7FF7EEE320D0	0x7FF71AFCFC60	0x7FF75DF15230	0x7FF69D76F320	0x7FF67258F320	0x7FF6902B9AC0	//0x7FF6FC352920	//0x7FF69E37A650	//0x7FF74E02A640	//0x7FF757B77C00	//0x1408F50B0//0x140905990//0x1408FFEC0//
#define ADDR_GETPLAYABLE				14//0x7FF72FE68B30	//0x7FF6AC1A70F0	//0x7FF7907E0020	//0x7FF70140C5A0	//0x7FF7241E8D60	//0x7FF6F3EBDE40	//0x7FF6E6A4DD60	//0x7FF757DFA570	//0x7FF68077A570	//0x7FF6D5807B40	//0x7FF669D04230	//0x7FF76066C1D0	//0x7FF797D6C1D0	//0x7FF68A7E7AD0	//0x7FF7F66779B0	//0x7FF7935E7A40	//0x7FF6A77DA190	//0x7FF61CD8A1B0	//0x7FF63A832A20//	0x7FF69C2529A0//	0x7FF6DF1CC560//	0x7FF6771CB180//	0x7FF7E201BF60//	0x7FF75C3D23C0//	0x7FF7E08A2240//	0x7FF6C1A520F0//	0x7FF65C6ECAE0//	0x7FF6E49770B0//	0x7FF6762036C0//	0x7FF7294918C0//	0x7FF626000200//	0x7FF671478CF0//	0x7FF78C204600//	0x7FF7EB7B4550//	0x7FF7A26E62E0//	0x7FF6BEF86370//	0x7FF627030DC0//	0x7FF6A9EAF820//	0x7FF759AB7B90//	0x7FF631B37B60//	0x7FF7818CCE10//	0x7FF673D6D3F0//	0x7FF62AEED090//	0x7FF6EE36C830//	0x7FF6B3E71540//	0x7FF6F0729C00//	0x7FF61A489A20//	0x7FF758F09550//	0x7FF76E3AF020//	0x7FF7E33D3BA0//	0x7FF61DFB2BA0//	0x7FF65FC80070//	0x7FF64B18C820//	0x7FF73A73C820//	0x7FF6BCAC0220//	0x7FF67065FF30//	0x7FF6B4C35940//	0x7FF783A1DBA0//	0x7FF6EC372290//	0x7FF6F41BDF10//	0x7FF7B60FC3E0//	0x7FF69A91C410//	0x7FF75C78BDB0//	0x7FF73B3ABB90//	0x7FF74FEEB130//	0x7FF73BEDB130//	0x7FF6FE6052A0//	0x7FF76008FD60//	0x7FF6D64DFDB0//	0x7FF689D53930//	0x7FF7CD587400//	0x7FF7F6A5EE70//	0x7FF72734E800//	0x7FF6054DB9A0//	0x7FF749B37CC0//	0x7FF6EFE7D610//	0x7FF7A624D840//	0x7FF7EDD9D870//	0x7FF6BE57D7E0//	0x7FF6F37F89E0//	0x7FF718105E00//	0x7FF7A9975E30//	0x7FF789C304C0//	0x7FF738040470//	0x7FF6AE272E10//	0x7FF65524FB20//	0x7FF786BDFA10//	0x7FF6787C2350//	0x7FF74A243450//	0x7FF61D29F0A0//	0x7FF7E78AA7F0//	0x7FF625BD05F0//	0x7FF6526760B0//	0x7FF6FF56C340//	0x7FF7B4612250//	0x7FF6F5942290//0x7FF69AABB9D0//0x7FF6E8C7DC20//0x7FF7B70CF8E0	0x7FF70DDBE830	0x7FF6D787E850	0x7FF7F341E600	0x7FF6AF9D6E70	0x7FF6C8FCC270	0x7FF70AB4CD90	0x7FF714C108F0	0x7FF7EEF17960	0x7FF71B0A7840	0x7FF75DFE5FC0	0x7FF69D76AF60	0x7FF67258AF60	0x7FF6902B56E0	//0x7FF6FC429240	//0x7FF69E44CF20	//0x7FF74E0FCF10	//0x7FF757C47870	//0x1409BD1F0//0x1409BF980//0x1409B6690//
#define ADDR_AUTOPLAYQUESTID			15//0x7FF72F8A61C0	//0x7FF6ABBE5F40	//0x7FF7902251E0	//0x7FF700E54A90	//0x7FF723DA36A0	//0x7FF6F3A82160	//0x7FF6E66120F0	//0x7FF7579C0B70	//0x7FF680340B70	//0x7FF6D53CF240	//0x7FF6698E9AC0	//0x7FF7602548B0	//0x7FF7979548B0	//0x7FF68A3D3DB0	//0x7FF7F6263DB0	//0x7FF7931D3E40	//0x7FF6A73D21A0	//0x7FF61C9821C0	//0x7FF63A42D730//	0x7FF69BE4D720//	0x7FF6DEC7AB30//	0x7FF676C99770//	0x7FF7E1AF50A0//	0x7FF75BEB2F50//	0x7FF7E0382EF0//	0x7FF6C1532EF0//	0x7FF65C1D10D0//	0x7FF6E4460290//	0x7FF675CEFC80//	0x7FF728F7F840//	0x7FF625AEF410//	0x7FF670F5D2F0//	0x7FF78BCEBF80//	0x7FF7EB29BF60//	0x7FF7A21DB190//	0x7FF6BEA7B190//	0x7FF626B2B3F0//	0x7FF6A99BB160//	0x7FF7595DA470//	0x7FF63165A4A0//	0x7FF7813F7CC0//	0x7FF6738A4FA0//	0x7FF62AA328B0//	0x7FF6EDEB2790//	0x7FF6B39C18A0//	0x7FF6F02804D0//	0x7FF619FE04D0//	0x7FF758A5E3A0//	0x7FF76DF0CA30//	0x7FF7E2F39730//	0x7FF61DB17D40//	0x7FF65F7E72C0//	0x7FF64AD047F0//	0x7FF73A2B47F0//	0x7FF6BC782540//	0x7FF670322540//	0x7FF6B47C0FB0//	0x7FF7835BAD90//	0x7FF6EBF19640//	0x7FF6F3D68A60//	0x7FF7B5CB6FF0//	0x7FF69A4D6FF0//	0x7FF75C4851F0//	0x7FF73B0A51F0//	0x7FF74FBF34E0//	0x7FF73BBE34E0//	0x7FF6FE3116C0//	0x7FF75FC7A010//	0x7FF6D60C9FE0//	0x7FF6899481E0//	0x7FF7CD18ACB0//	0x7FF7F66684E0//	0x7FF726F58360//	0x7FF6050E7C70//	0x7FF749746730//	0x7FF6EFA72EE0//	0x7FF7A5E41870//	0x7FF7ED9918D0//	0x7FF6BE171850//	0x7FF6F33F0B40//	0x7FF717D1E380//	0x7FF7A958E3B0//	0x7FF78984CB40//	0x7FF737C5CB10//	0x7FF6ADFAA7B0//	0x7FF654F8A3E0//	0x7FF78691A3B0//	0x7FF678517D90//	0x7FF749FA0C00//	0x7FF61CF0DDE0//	0x7FF7E752CCD0//	0x7FF6258571C0//	0x7FF652305600//	0x7FF6FF2F1BD0//	0x7FF7B439D7D0//	0x7FF6F56CD7A0//0x7FF69A84B5A0//0x7FF6E893B640//0x7FF7B6DA04F0	0x7FF70DA8F470	0x7FF6D754F460	0x7FF7F30EF360	0x7FF6AF6AD7A0	0x7FF6C8CD6300	0x7FF70A864610	0x7FF714931DE0	0x7FF7EEC3E6F0	0x7FF71ADDFF40	0x7FF75DD2BDB0	0x7FF69D585F50	0x7FF6723A5F50	0x7FF6900D45E0	//0x7FF6FC1A27F0	//0x7FF69E1CF550	//0x7FF74DE7F540	//0x7FF7579CD6B0	//0x14074B680//0x14074C3E0//0x140749D40//
#define ADDR_GETQUICKSLOTCOMMONLIST		16//0x7FF7305D7670	//0x7FF6AC9142A0	//0x7FF790F3D320	//0x7FF701B62950	//0x7FF724AD6690	//0x7FF6F47A7E30	//0x7FF6E7337D70	//0x7FF758689FA0	//0x7FF681009F30	//0x7FF6D609A710	//0x7FF66A585700	//0x7FF760EF9620	//0x7FF7985F95F0	//0x7FF68B08B530	//0x7FF7F6F1B410	//0x7FF793E8B490	//0x7FF6A8073B60	//0x7FF61D623BB0	//0x7FF63B0C2060//	0x7FF69CAE1FD0//	0x7FF6DF8FF210//	0x7FF6778CFB80//	0x7FF7E2726B60//	0x7FF75CA98250//	0x7FF7E0F68030//	0x7FF6C2117F00//	0x7FF65CDB98A0//	0x7FF6E5040D20//	0x7FF676905670//	0x7FF729B92C30//	0x7FF6266FED00//	0x7FF671B46040//	0x7FF78C8CA930//	0x7FF7EBE7A7F0//	0x7FF7A2DA0250//	0x7FF6BF6402E0//	0x7FF6276F2CE0//	0x7FF6AA563EE0//	0x7FF75A170D10//	0x7FF6321F0A10//	0x7FF781F7CD90//	0x7FF674418540//	0x7FF62B589ED0//	0x7FF6EEA09450//	0x7FF6B45196A0//	0x7FF6F0DCBB70//	0x7FF61AB2B560//	0x7FF75956EE80//	0x7FF76EA0E470//	0x7FF7E3A3D900//	0x7FF61E61AB40//	0x7FF6602E4B40//	0x7FF64B7B2E10//	0x7FF73AD62E00//	0x7FF6BD22AB00//	0x7FF670DCA810//	0x7FF6B525E080//	0x7FF7840423F0//	0x7FF6EC9A7FB0//	0x7FF6F47DB670//	0x7FF7B66D0F00//	0x7FF69AEF0F30//	0x7FF75CEA6520//	0x7FF73BAC6030//	0x7FF7505F4960//	0x7FF73C5E4960//	0x7FF6FED15CF0//	0x7FF76062FAA0//	0x7FF6D6A7F630//	0x7FF68A2E05F0//	0x7FF7CDB125B0//	0x7FF7F6FE5ED0//	0x7FF7278D5450//	0x7FF605A152A0//	0x7FF74A06EFB0//	0x7FF6F03DC4D0//	0x7FF7A6782A30//	0x7FF7EE2D2980//	0x7FF6BEAB29B0//	0x7FF6F3D2B3D0//	0x7FF718627BA0//	0x7FF7A9E97BD0//	0x7FF78A14B560//	0x7FF73855B510//	0x7FF6AE88F280//	0x7FF65585E0F0//	0x7FF7871EDE80//	0x7FF678D49630//	0x7FF74A7C5C50//	0x7FF61D6E7DB0//	0x7FF7E7CFA7E0//	0x7FF625FDC5F0//	0x7FF652A79650//	0x7FF6FFA33A60//	0x7FF7B4AD4AD0//	0x7FF6F5E04A80//0x7FF69AF76700//0x7FF6E9076AF0//0x7FF7B7490050	0x7FF70E17EAD0	0x7FF6D7C3EAF0	0x7FF7F37DE890	0x7FF6AFD939C0	0x7FF6C9386D10	0x7FF70AF058E0	0x7FF714F7C970	0x7FF7EF27B370	0x7FF71B41B890	0x7FF75E353360	0x7FF69DB51EC0	0x7FF672971EC0	0x7FF69069B4C0	//0x7FF6FC73E720	//0x7FF69E759500	//0x7FF74E4094E0	//0x7FF757F4AB60	//0x140CC3810//0x140C97E50//0x140C97D40//
#define ADDR_CALCPARAM					17//0x7FF72F976AC0	//0x7FF6ABCB6370	//0x7FF7902F58A0	//0x7FF700F24AD0	//0x7FF723E73630	//0x7FF6F3B59310	//0x7FF6E66E92A0	//0x7FF757A958B0	//0x7FF6804158B0	//0x7FF6D54A3F40	//0x7FF66996F480	//0x7FF7602DA1D0	//0x7FF7979DA1D0	//0x7FF68A459670	//0x7FF7F62E9670	//0x7FF793259700	//0x7FF6A7457980	//0x7FF61CA079A0	//0x7FF63A4B1ED0//	0x7FF69BED1E50//	0x7FF6DECFF4A0//	0x7FF676D21790//	0x7FF7E1B7EE00//	0x7FF75BF3E550//	0x7FF7E040E520//	0x7FF6C15BE4F0//	0x7FF65C25E550//	0x7FF6E44ECB50//	0x7FF675D76EE0//	0x7FF7290066F0//	0x7FF625B75FA0//	0x7FF670FE9020//	0x7FF78BD77840//	0x7FF7EB327820//	0x7FF7A2271120//	0x7FF6BEB11120//	0x7FF626BC06A0//	0x7FF6A9A53FC0//	0x7FF7596726F0//	0x7FF6316F2720//	0x7FF7814901B0//	0x7FF67393D0A0//	0x7FF62AACEAD0//	0x7FF6EDF4E7F0//	0x7FF6B3A58740//	0x7FF6F0316C20//	0x7FF61A076C20//	0x7FF758AF4360//	0x7FF76DFA1A00//	0x7FF7E2FCE230//	0x7FF61DBAE630//	0x7FF65F87D660//	0x7FF64AD99A00//	0x7FF73A349A00//	0x7FF6BC817680//	0x7FF6703B7660//	0x7FF6B4855880//	0x7FF78364F440//	0x7FF6EBFB0100//	0x7FF6F3DFF530//	0x7FF7B5D56760//	0x7FF69A576760//	0x7FF75C522290//	0x7FF73B142290//	0x7FF74FC8CFA0//	0x7FF73BC7CFA0//	0x7FF6FE3A9710//	0x7FF75FCCAA90//	0x7FF6D611AA60//	0x7FF689996430//	0x7FF7CD1D9790//	0x7FF7F66B6780//	0x7FF726FA65D0//	0x7FF605135B60//	0x7FF7497941E0//	0x7FF6EFB0AB70//	0x7FF7A5ED8A90//	0x7FF7EDA28AF0//	0x7FF6BE208A70//	0x7FF6F34871D0//	0x7FF717DADD00//	0x7FF7A961DD30//	0x7FF7898DC990//	0x7FF737CEC960//	0x7FF6AE039A60//	0x7FF655019550//	0x7FF7869A9520//	0x7FF6785A3C80//	0x7FF74A02B4B0//	0x7FF61CF98A10//	0x7FF7E75B64D0//	0x7FF6258DF9C0//	0x7FF65238F490//	0x7FF6FF37A8A0//	0x7FF7B4425180//	0x7FF6F5755150//0x7FF69A8D5520//0x7FF6E89D1860//0x7FF7B6E35F50	0x7FF70DB24A00	0x7FF6D75E4A20	0x7FF7F31847D0	0x7FF6AF7415B0	0x7FF6C8D663C0	0x7FF70A8F2870	0x7FF7149C5790	0x7FF7EECD4EB0	0x7FF71AE2FA00	0x7FF75DD7B0E0	0x7FF69D5D4900	0x7FF6723F4900	0x7FF690122C70	//0x7FF6FC1F0B20	//0x7FF69E21DA60	//0x7FF74DECDA50	//0x7FF757A1B5F0	//0x140799EE0//0x14079E9C0//0x14079B770//
#define ADDR_MOVETOPOS					18//0x7FF72F8BB7B0	//0x7FF6ABBFB530	//0x7FF79023A7D0	//0x7FF700E6A080	//0x7FF723DB8C70	//0x7FF6F3A975B0	//0x7FF6E6627540	//0x7FF7579D5FB0	//0x7FF680355FB0	//0x7FF6D53E4640	//0x7FF6698BE4B0	//0x7FF7602292D0	//0x7FF7979292D0	//0x7FF68A3A87D0	//0x7FF7F62387D0	//0x7FF7931A8860	//0x7FF6A73A6D70	//0x7FF61C956D90	//0x7FF63A402BF0//	0x7FF69BE22BF0//	0x7FF6DEC50290//	0x7FF676C6F370//	0x7FF7E1ACADB0//	0x7FF75BE88C60//	0x7FF7E0358C00//	0x7FF6C1508C00//	0x7FF65C1A71C0//	0x7FF6E4436580//	0x7FF675CC5F80//	0x7FF728F55BE0//	0x7FF625AC5B10//	0x7FF670F33D30//	0x7FF78BCC3FE0//	0x7FF7EB273FC0//	0x7FF7A21B6330//	0x7FF6BEA56330//	0x7FF626B033B0//	0x7FF6A9990A70//	0x7FF7595B02B0//	0x7FF6316302E0//	0x7FF7813D0670//	0x7FF67387EDB0//	0x7FF62AA0C960//	0x7FF6EDE8C840//	0x7FF6B39991D0//	0x7FF6F0258590//	0x7FF619FB8590//	0x7FF758A36760//	0x7FF76DEE4DF0//	0x7FF7E2F11C30//	0x7FF61DAF0280//	0x7FF65F7BF970//	0x7FF64ACDD980//	0x7FF73A28D980//	0x7FF6BC75A4F0//	0x7FF6702FA4F0//	0x7FF6B4799150//	0x7FF783594150//	0x7FF6EBEF2D60//	0x7FF6F3D42180//	0x7FF7B5C904B0//	0x7FF69A4B04B0//	0x7FF75C45E710//	0x7FF73B07E710//	0x7FF74FBCCCB0//	0x7FF73BBBCCB0//	0x7FF6FE2EB3E0//	0x7FF75FC55080//	0x7FF6D60A5050//	0x7FF689923250//	0x7FF7CD165A90//	0x7FF7F66437C0//	0x7FF726F33640//	0x7FF6050C2F60//	0x7FF749721BE0//	0x7FF6EFA84700//	0x7FF7A5E52EF0//	0x7FF7ED9A2F50//	0x7FF6BE182ED0//	0x7FF6F34021C0//	0x7FF717D31F20//	0x7FF7A95A1F50//	0x7FF789860610//	0x7FF737C705E0//	0x7FF6ADFBE290//	0x7FF654F9DEA0//	0x7FF78692DE70//	0x7FF67852ADF0//	0x7FF749FB3BC0//	0x7FF61CF20D50//	0x7FF7E7541550//	0x7FF62586B8E0//	0x7FF652319C70//	0x7FF6FF3061E0//	0x7FF7B43B15C0//	0x7FF6F56E1590//0x7FF69A8605F0//0x7FF6E8953810//0x7FF7B6DB82F0	0x7FF70DAA7220	0x7FF6D7567210	0x7FF7F3107110	0x7FF6AF6C53F0	0x7FF6C8CED930	0x7FF70A87B810	0x7FF7149493F0	0x7FF7EEC55B30	0x7FF71ADB3EA0	0x7FF75DD04B20	0x7FF69D55F0D0	0x7FF67237F0D0	0x7FF6900AD760	//0x7FF6FC17BC50	//0x7FF69E1A9150	//0x7FF74DE59140	//0x7FF7579A7330	//0x1407253D0//0x1407246D0//0x1407220A0//
#define ADDR_REFRESHPURCHAGE			19//0x7FF730887560	//0x7FF6ACBC40E0	//0x7FF7911ECE50	//0x7FF701E11DE0	//0x7FF724D4C2B0	//0x7FF6F4A0D830	//0x7FF6E759D770	//0x7FF75892DB00	//0x7FF6812ADA90	//0x7FF6D6338AA0	//0x7FF66A8139D0	//0x7FF76117BED0	//0x7FF79887BEA0	//0x7FF68B2EDB50	//0x7FF7F717DA30	//0x7FF7940EDAB0	//0x7FF6A82D5180	//0x7FF61D885280	//0x7FF63B3386E0//	0x7FF69CD58650//	0x7FF6DFB75C00//	0x7FF677B63D50//	0x7FF7E299D7B0//	0x7FF75CD28520//	0x7FF7E11F8280//	0x7FF6C23A8150//	0x7FF65D048800//	0x7FF6E52CD540//	0x7FF676B50080//	0x7FF729DDD0D0//	0x7FF626948430//	0x7FF671DBFA60//	0x7FF78CB5F5B0//	0x7FF7EC10F470//	0x7FF7A302E4D0//	0x7FF6BF8CE560//	0x7FF627972500//	0x7FF6AA7DA130//	0x7FF75A3F02F0//	0x7FF63246FE10//	0x7FF7821F80B0//	0x7FF67468F1B0//	0x7FF62B7B91B0//	0x7FF6EEC38610//	0x7FF6B4759510//	0x7FF6F100A2B0//	0x7FF61AD69CA0//	0x7FF7597A97B0//	0x7FF76EC558B0//	0x7FF7E3C7ED90//	0x7FF61E8573A0//	0x7FF660522F50//	0x7FF64B9FA800//	0x7FF73AFAA7F0//	0x7FF6BD46A110//	0x7FF671009DE0//	0x7FF6B549FFA0//	0x7FF784288430//	0x7FF6ECBA6FE0//	0x7FF6F49E6C90//	0x7FF7B68E7100//	0x7FF69B107100//	0x7FF75D0BD3D0//	0x7FF73BCDCEE0//	0x7FF7507FC1F0//	0x7FF73C7EC1F0//	0x7FF6FEF10620//	0x7FF76084B8A0//	0x7FF6D6C9B430//	0x7FF68A4E9750//	0x7FF7CDCDE7E0//	0x7FF7F71B2320//	0x7FF727AA18A0//	0x7FF605C1EF10//	0x7FF74A275E70//	0x7FF6F05EBCF0//	0x7FF7A69836A0//	0x7FF7EE4D35F0//	0x7FF6BECB3620//	0x7FF6F3F3AC10//	0x7FF7188300E0//	0x7FF7AA0A0140//	0x7FF78A351710//	0x7FF7387615E0//	0x7FF6AEA8CBF0//	0x7FF655A64AF0//	0x7FF7873F4860//	0x7FF678F56D50//	0x7FF74A9869C0//	0x7FF61D8F3EC0//	0x7FF7E7EB9080//	0x7FF6261EC3B0//	0x7FF652C4C340//	0x7FF6FFC3D140//	0x7FF7B4CABB80//	0x7FF6F5FDBB30//0x7FF69B145660//0x7FF6E9224B10//0x7FF7B76916E0	0x7FF70E347030	0x7FF6D7E07050	0x7FF7F39A6DF0	0x7FF6AFF57B90	0x7FF6C9548B10	0x7FF70B06FCF0	0x7FF715148CC0	0x7FF7EF440020	0x7FF71B588760	0x7FF75E4D70F0	0x7FF69DCC3B80	0x7FF672AE3AC0	0x7FF69080C320	//0x7FF6FC906D20	//0x7FF69E8D9640	//0x7FF74E589620	//0x7FF7580C5D00	//0x140E42960//0x140E1A580//0x140E2C830//
#define ADDR_CHANGEQUICKSLOTSTATE		20//0x7FF72FC5F730	//0x7FF6ABF9ECB0	//0x7FF7905DA8B0	//0x7FF70120AE40	//0x7FF7241290A0	//0x7FF6F3E00FB0	//0x7FF6E6990ED0	//0x7FF757D370C0	//0x7FF6806B70C0	//0x7FF6D57451C0	//0x7FF669C43C60	//0x7FF7605AD310	//0x7FF797CAD310	//0x7FF68A729DE0	//0x7FF7F65B9CC0	//0x7FF793529D50	//0x7FF6A771E660	//0x7FF61CCCE680	//0x7FF63A777FD0//	0x7FF69C197F50//	0x7FF6DEFDAF10//	0x7FF676FC8550//	0x7FF7E1E25620//	0x7FF75C1DE110//	0x7FF7E06ADF60//	0x7FF6C185DE40//	0x7FF65C4FB600//	0x7FF6E4787BA0//	0x7FF676015AA0//	0x7FF7292A52E0//	0x7FF625E13D50//	0x7FF671287070//	0x7FF78C011B80//	0x7FF7EB5C1AD0//	0x7FF7A250F1D0//	0x7FF6BEDAF260//	0x7FF626E5C900//	0x7FF6A9CDE460//	0x7FF759910640//	0x7FF631990610//	0x7FF781725AA0//	0x7FF673BC7DD0//	0x7FF62AD53310//	0x7FF6EE1D2AE0//	0x7FF6B3CD87B0//	0x7FF6F0591830//	0x7FF61A2F1650//	0x7FF758D35890//	0x7FF76E1DD670//	0x7FF7E320EFE0//	0x7FF61DDEBD10//	0x7FF65FAB9750//	0x7FF64AFCD3B0//	0x7FF73A57D3B0//	0x7FF6BCA43650//	0x7FF6705E3630//	0x7FF6B4A7A410//	0x7FF7838BE920//	0x7FF6EC1B6330//	0x7FF6F4002D40//	0x7FF7B5F45C70//	0x7FF69A765C70//	0x7FF75C70CA00//	0x7FF73B32C9F0//	0x7FF74FE6DB40//	0x7FF73BE5DB40//	0x7FF6FE5880E0//	0x7FF75FF3BF30//	0x7FF6D638BF80//	0x7FF689C051D0//	0x7FF7CD43B1D0//	0x7FF7F6915560//	0x7FF727205190//	0x7FF605392CB0//	0x7FF7499EF150//	0x7FF6EFD03760//	0x7FF7A60DF560//	0x7FF7EDC2F5C0//	0x7FF6BE40F530//	0x7FF6F368C390//	0x7FF717FA12A0//	0x7FF7A98112D0//	0x7FF789ACCC60//	0x7FF737EDCC30//	0x7FF6AE256660//	0x7FF655233370//	0x7FF786BC3260//	0x7FF6787A5620//	0x7FF74A222C20//	0x7FF61D13F070//	0x7FF7E7752830//	0x7FF625A7DAB0//	0x7FF652530620//	0x7FF6FF548910//	0x7FF7B45EF7F0//	0x7FF6F591F830//0x7FF69AA991B0//0x7FF6E8B47750//0x7FF7B6F9D630	0x7FF70DC94250	0x7FF6D7754270	0x7FF7F32F4020	0x7FF6AF8AE9D0	0x7FF6C8EF04C0	0x7FF70AA73250	0x7FF714B39DA0	0x7FF7EEE48FD0	0x7FF71AF989D0	0x7FF75DEDF300	0x7FF69D739A30	0x7FF672559A30	0x7FF690284E10	//0x7FF6FC36F640	//0x7FF69E396790	//0x7FF74E046780	//0x7FF757B94350	//0x14090E330//0x1408CF470//0x1408C8850//
#define		OFFSET_QUICKSLOTAUTOSTATE		0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//	0x000000000011//0x000000000011//0x000000000011	//0x000000000011	//0x000000000011	//0x000000000011	//0x000000011//0x000000011//0x000000011//
#define		OFFSET_QUICKSLOTSKILLID			0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//0x000000000008//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000008//0x000000008//0x000000008//
//                                          		//				//    			//    			//
#define ADDR_CHANGEITEMQUICKSLOTSTATE	21//0x7FF72FC5F5F0	//0x7FF6ABF9EB70	//0x7FF7905DA770	//0x7FF70120AD00	//0x7FF724128F60	//0x7FF6F3E00E70	//0x7FF6E6990D90	//0x7FF757D36F80	//0x7FF6806B6F80	//0x7FF6D5745080	//0x7FF669C43B20	//0x7FF7605AD1D0	//0x7FF797CAD1D0	//0x7FF68A729CA0	//0x7FF7F65B9B80	//0x7FF793529C10	//0x7FF6A771E520	//0x7FF61CCCE540	//0x7FF63A777E90//	0x7FF69C197E10//	0x7FF6DEFDADD0//	0x7FF676FC8410//	0x7FF7E1E254E0//	0x7FF75C1DDFD0//	0x7FF7E06ADE20//	0x7FF6C185DD00//	0x7FF65C4FB4C0//	0x7FF6E4787A60//	0x7FF676015960//	0x7FF7292A51A0//	0x7FF625E13C10//	0x7FF671286F30//	0x7FF78C011A40//	0x7FF7EB5C1990//	0x7FF7A250F090//	0x7FF6BEDAF120//	0x7FF626E5C7C0//	0x7FF6A9CDE320//	0x7FF759910500//	0x7FF6319904D0//	0x7FF781725960//	0x7FF673BC7C90//	0x7FF62AD531D0//	0x7FF6EE1D29A0//	0x7FF6B3CD8670//	0x7FF6F05916F0//	0x7FF61A2F1510//	0x7FF758D35750//	0x7FF76E1DD530//	0x7FF7E320EEA0//	0x7FF61DDEBBD0//	0x7FF65FAB9610//	0x7FF64AFCD270//	0x7FF73A57D270//	0x7FF6BCA43510//	0x7FF6705E34F0//	0x7FF6B4A7A2D0//	0x7FF7838BE7E0//	0x7FF6EC1B61F0//	0x7FF6F4002C00//	0x7FF7B5F45B30//	0x7FF69A765B30//	0x7FF75C70C8C0//	0x7FF73B32C8B0//	0x7FF74FE6DA00//	0x7FF73BE5DA00//	0x7FF6FE587FA0//	0x7FF75FF3BDF0//	0x7FF6D638BE40//	0x7FF689C05090//	0x7FF7CD43B090//	0x7FF7F6915420//	0x7FF727205050//	0x7FF605392B70//	0x7FF7499EF010//	0x7FF6EFD03620//	0x7FF7A60DF420//	0x7FF7EDC2F480//	0x7FF6BE40F3F0//	0x7FF6F368C250//	0x7FF717FA1160//	0x7FF7A9811190//	0x7FF789ACCB20//	0x7FF737EDCAF0//	0x7FF6AE256520//	0x7FF655233230//	0x7FF786BC3120//	0x7FF6787A54E0//	0x7FF74A222AE0//	0x7FF61D13EF30//	0x7FF7E77526F0//	0x7FF625A7D970//	0x7FF6525304E0//	0x7FF6FF5487D0//	0x7FF7B45EF6B0//	0x7FF6F591F6F0//0x7FF69AA99070//0x7FF6E8B47610//0x7FF7B6F9D4F0	0x7FF70DC94110	0x7FF6D7754130	0x7FF7F32F3EE0	0x7FF6AF8AE890	0x7FF6C8EF0380	0x7FF70AA73110	0x7FF714B39C60	0x7FF7EEE48E90	0x7FF71AF98890	0x7FF75DEDF1C0	0x7FF69D7398F0	0x7FF6725598F0	0x7FF690284CD0	//0x7FF6FC36F500	//0x7FF69E396650	//0x7FF74E046640	//0x7FF757B94210	//0x14090E1F0//0x1408CF330//0x1408C8710//
#define ADDR_INITSTRING					22//0x7FF72F39FAE0	//0x7FF6AB6DF930	//0x7FF78FD1EAB0	//0x7FF70094E270	//0x7FF72389D6A0	//0x7FF6F357C6A0	//0x7FF6E610C6A0	//0x7FF7574BBA60	//0x7FF67FE3BA60	//0x7FF6D4ECB1B0	//0x7FF6693CB400	//0x7FF75FD39CC0	//0x7FF797439CC0	//0x7FF689EB8450	//0x7FF7F5D48450	//0x7FF792CB8450	//0x7FF6A6EB79A0	//0x7FF61C4679A0	//0x7FF639F17180//	0x7FF69B937180//	0x7FF6DE765C60//	0x7FF676784C10//	0x7FF7E15E2BB0//	0x7FF75B9A0C00//	0x7FF7DFE70C00//	0x7FF6C1020C00//	0x7FF65BCBF9D0//	0x7FF6E3F4EF10//	0x7FF6757DEE20//	0x7FF728A6EBA0//	0x7FF6255DEB50//	0x7FF670A4E170//	0x7FF78B7DDAC0//	0x7FF7EAD8DAC0//	0x7FF7A1CCCC30//	0x7FF6BE56CC30//	0x7FF62661CCB0//	0x7FF6A94ABB80//	0x7FF7590CB5A0//	0x7FF63114B5A0//	0x7FF780EEA330//	0x7FF673399D10//	0x7FF62A5283C0//	0x7FF6ED9A83C0//	0x7FF6B34B6AE0//	0x7FF6EFD76510//	0x7FF619AD6510//	0x7FF7585549F0//	0x7FF76DA03F70//	0x7FF7E2A328F0//	0x7FF61D612370//	0x7FF65F2E1CC0//	0x7FF64A800750//	0x7FF739DB0750//	0x7FF6BC27DB70//	0x7FF66FE1DB70//	0x7FF6B42BD360//	0x7FF7830BA970//	0x7FF6EBA19CB0//	0x7FF6F3869750//	0x7FF7B57B8210//	0x7FF699FD8210//	0x7FF75BF86EA0//	0x7FF73ABA6EA0//	0x7FF74F6F55D0//	0x7FF73B6E55D0//	0x7FF6FDE147E0//	0x7FF75F7829C0//	0x7FF6D5BD29C0//	0x7FF689450940//	0x7FF7CCC8F540//	0x7FF7F616E250//	0x7FF726A5E130//	0x7FF604BEDC30//	0x7FF74924D640//	0x7FF6EF5ACDC0//	0x7FF7A598B060//	0x7FF7ED4DB060//	0x7FF6BDCBB060//	0x7FF6F2F3A840//	0x7FF7178B6D40//	0x7FF7A9126D40//	0x7FF7893E5D70//	0x7FF7377F5D70//	0x7FF6ADB45050//	0x7FF654B24CB0//	0x7FF7864B4C80//	0x7FF6780B2710//	0x7FF749B5EEA0//	0x7FF61CACC4A0//	0x7FF7E70E9C70//	0x7FF625416740//	0x7FF651EC4D70//	0x7FF6FEEB2240//	0x7FF7B3F5E6A0//	0x7FF6F528E6A0//0x7FF69A40D5F0//0x7FF6E84FC510//0x7FF7B695B7F0	0x7FF70D64AB60	0x7FF6D710AB60	0x7FF7F2CAAB60	0x7FF6AF269DA0	0x7FF6C8895D20	0x7FF70A424350	0x7FF7144F04F0	0x7FF7EE7FF0C0	0x7FF71A98DAD0	0x7FF75D8DB860	0x7FF69D138150	0x7FF671F58150	0x7FF68FC86BF0	//0x7FF6FBD553A0	//0x7FF69DD840F0	//0x7FF74DA340F0	//0x7FF7575831E0	//0x140300A80//0x1403005F0//0x1402FF0A0//
#define ADDR_GETSKILLINFO				23//0x7FF72F9AB220	//0x7FF6ABCEAAC0	//0x7FF79032B310	//0x7FF700F59EB0	//0x7FF723EA7BC0	//0x7FF6F3B8B7E0	//0x7FF6E671B770	//0x7FF757AC79D0	//0x7FF6804479D0	//0x7FF6D54D6D50	//0x7FF6699B5E50	//0x7FF760320B80	//0x7FF797A20B90	//0x7FF68A49FF00	//0x7FF7F632FF00	//0x7FF79329FF90	//0x7FF6A749CB00	//0x7FF61CA4CB20	//0x7FF63A4F6A10//	0x7FF69BF16990//	0x7FF6DED43770//	0x7FF676D63D10//	0x7FF7E1BBEC40//	0x7FF75BF7CEB0//	0x7FF7E044CE80//	0x7FF6C15FCE50//	0x7FF65C29E120//	0x7FF6E452C520//	0x7FF675DB8E30//	0x7FF729048540//	0x7FF625BB7CF0//	0x7FF671028800//	0x7FF78BDB6380//	0x7FF7EB366360//	0x7FF7A22A7610//	0x7FF6BEB47610//	0x7FF626BF6950//	0x7FF6A9A88B20//	0x7FF7596A7170//	0x7FF6317271A0//	0x7FF7814C3E30//	0x7FF673970320//	0x7FF62AB023B0//	0x7FF6EDF820C0//	0x7FF6B3A8B270//	0x7FF6F0349460//	0x7FF61A0A9460//	0x7FF758B276F0//	0x7FF76DFD4460//	0x7FF7E3000060//	0x7FF61DBDF830//	0x7FF65F8AE860//	0x7FF64ADCA260//	0x7FF73A37A260//	0x7FF6BC847D50//	0x7FF6703E7D30//	0x7FF6B4885BB0//	0x7FF78367F600//	0x7FF6EBFE1EF0//	0x7FF6F3E31260//	0x7FF7B5D4EF90//	0x7FF69A56EF90//	0x7FF75C51AF80//	0x7FF73B13AF80//	0x7FF74FC85FE0//	0x7FF73BC75FE0//	0x7FF6FE3A2610//	0x7FF75FD0E3A0//	0x7FF6D615E370//	0x7FF6899D8CA0//	0x7FF7CD21A140//	0x7FF7F66F74B0//	0x7FF726FE7300//	0x7FF605176180//	0x7FF7497D47E0//	0x7FF6EFB45E60//	0x7FF7A5F13C70//	0x7FF7EDA63CD0//	0x7FF6BE243C50//	0x7FF6F34C2300//	0x7FF717DE8960//	0x7FF7A9658990//	0x7FF789917360//	0x7FF737D27330//	0x7FF6AE074260//	0x7FF6550545F0//	0x7FF7869E45C0//	0x7FF67859D7B0//	0x7FF74A067520//	0x7FF61CFD3FC0//	0x7FF7E75EFBE0//	0x7FF6259189A0//	0x7FF6523C8060//	0x7FF6FF3B5370//	0x7FF7B445F3C0//	0x7FF6F578F390//0x7FF69A90D5F0//0x7FF6E89CBC10//0x7FF7B6E2FF10	0x7FF70DB1E9C0	0x7FF6D75DE9E0	0x7FF7F317E790	0x7FF6AF73B5C0	0x7FF6C8D5F480	0x7FF70A8EBAB0	0x7FF7149BEBC0	0x7FF7EECCE410	0x7FF71AE6B640	0x7FF75DDB7080	0x7FF69D60FD50	0x7FF67242FD50	0x7FF69015DBF0	//0x7FF6FC22B3F0	//0x7FF69E256EA0	//0x7FF74DF06E90	//0x7FF757A54880	//0x1407D52D0//0x1407DEDF0//0x1407DA870//
#define ADDR_GETCOINCOUNT				24//0x7FF72FB2FEF0	//0x7FF6ABE6F610	//0x7FF7904AD4D0	//0x7FF7010DB620	//0x7FF724026CB0	//0x7FF6F3D01FF0	//0x7FF6E6891F10	//0x7FF757C3C530	//0x7FF6805BC530	//0x7FF6D564A750	//0x7FF669B49480	//0x7FF7604B33B0	//0x7FF797BB33C0	//0x7FF68A632A00	//0x7FF7F64C2A00	//0x7FF793432A90	//0x7FF6A762A2B0	//0x7FF61CBDA2D0	//0x7FF63A6833D0//	0x7FF69C0A3350//	0x7FF6DEE8C940//	0x7FF676ECFEB0//	0x7FF7E1D2E790//	0x7FF75C0E7730//	0x7FF7E05B7660//	0x7FF6C1767660//	0x7FF65C405B40//	0x7FF6E46932F0//	0x7FF675F21680//	0x7FF7291B1500//	0x7FF625D20A60//	0x7FF67118CFA0//	0x7FF78BF19000//	0x7FF7EB4C8FE0//	0x7FF7A240DA10//	0x7FF6BECADAA0//	0x7FF626D00B60//	0x7FF6A9B8D550//	0x7FF7597AB740//	0x7FF63182B770//	0x7FF7815C6C30//	0x7FF673A72A50//	0x7FF62ABFC310//	0x7FF6EE07BAC0//	0x7FF6B3B826E0//	0x7FF6F043FE50//	0x7FF61A19FCD0//	0x7FF758C1BA10//	0x7FF76E0C61E0//	0x7FF7E311A680//	0x7FF61DCF6600//	0x7FF65F9C5130//	0x7FF64AEDF220//	0x7FF73A48F220//	0x7FF6BC955D70//	0x7FF6704F5D50//	0x7FF6B49928D0//	0x7FF7837A4180//	0x7FF6EC107F20//	0x7FF6F3F56310//	0x7FF7B5E9E520//	0x7FF69A6BE520//	0x7FF75C666BD0//	0x7FF73B286BD0//	0x7FF74FDCB3A0//	0x7FF73BDBB3A0//	0x7FF6FE4E7190//	0x7FF75FE27BA0//	0x7FF6D6277B60//	0x7FF689AF1940//	0x7FF7CD32B640//	0x7FF7F68079B0//	0x7FF7270F7610//	0x7FF605285990//	0x7FF7498E3410//	0x7FF6EFC61EA0//	0x7FF7A6031390//	0x7FF7EDB813F0//	0x7FF6BE361360//	0x7FF6F35DE3D0//	0x7FF717EA0D40//	0x7FF7A9710D70//	0x7FF7899CE4C0//	0x7FF737DDE490//	0x7FF6AE12C910//	0x7FF65510AAA0//	0x7FF786A9AA60//	0x7FF67868F1E0//	0x7FF74A112500//	0x7FF61D081C50//	0x7FF7E769F4F0//	0x7FF6259C8020//	0x7FF65248F670//	0x7FF6FF47AD90//	0x7FF7B4523C40//	0x7FF6F5853C80//0x7FF69A9CEE80//0x7FF6E8A93AB0//0x7FF7B6EEE5D0	0x7FF70DBDDF90	0x7FF6D769DFB0	0x7FF7F323DD60	0x7FF6AF7FA7C0	0x7FF6C8E1A190	0x7FF70A9A3A80	0x7FF714A6CCC0	0x7FF7EED83390	0x7FF71AF30500	0x7FF75DE3A020	0x7FF69D691830	0x7FF6724B1830	0x7FF6901DFE40	//0x7FF6FC2AD7F0	//0x7FF69E2D7430	//0x7FF74DF87420	//0x7FF757AD4830	//0x1408509C0//0x1408683E0//0x1408619D0//
#define ADDR_GET_CHARID					25//0x7FF72F9F16F0	//0x7FF6ABD30F60	//0x7FF79036FBF0	//0x7FF700F9E770	//0x7FF723EEB8B0	//0x7FF6F3BC99F0	//0x7FF6E6759980	//0x7FF757B05950	//0x7FF680485950	//0x7FF6D5515720	//0x7FF669A25DE0	//0x7FF760390580	//0x7FF797A90590	//0x7FF68A50F8D0	//0x7FF7F639F8D0	//0x7FF79330F960	//0x7FF6A750AC00	//0x7FF61CABAC20	//0x7FF63A563C30//	0x7FF69BF83BB0//	0x7FF6DEDAFC10//	0x7FF676D9C490//	0x7FF7E1BF80F0//	0x7FF75BFB4F30//	0x7FF7E0484E70//	0x7FF6C1634E40//	0x7FF65C2D6D80//	0x7FF6E4565150//	0x7FF675DF13F0//	0x7FF729080AD0//	0x7FF625BF0290//	0x7FF671060B60//	0x7FF78BDEDB30//	0x7FF7EB39DB10//	0x7FF7A22E9C10//	0x7FF6BEB89C10//	0x7FF626C398F0//	0x7FF6A9AC8000//	0x7FF7596E6650//	0x7FF631766680//	0x7FF781503010//	0x7FF6739AFBD0//	0x7FF62AB3C510//	0x7FF6EDFBC220//	0x7FF6B3AC4030//	0x7FF6F0381E00//	0x7FF61A0E1E00//	0x7FF758B60330//	0x7FF76E00CC80//	0x7FF7E3037FA0//	0x7FF61DC19E20//	0x7FF65F8E8E70//	0x7FF64AE03AF0//	0x7FF73A3B3AF0//	0x7FF6BC881520//	0x7FF670421500//	0x7FF6B48BF800//	0x7FF7836B7570//	0x7FF6EC0148D0//	0x7FF6F3E63A50//	0x7FF7B5D87D80//	0x7FF69A5A7D80//	0x7FF75C552CD0//	0x7FF73B172CD0//	0x7FF74FCBC190//	0x7FF73BCAC190//	0x7FF6FE3D89E0//	0x7FF75FD4EF30//	0x7FF6D619EF00//	0x7FF689A191D0//	0x7FF7CD257BF0//	0x7FF7F6734870//	0x7FF7270246C0//	0x7FF6051B3440//	0x7FF749811A80//	0x7FF6EFB7B990//	0x7FF7A5F49780//	0x7FF7EDA997E0//	0x7FF6BE279750//	0x7FF6F34F7DC0//	0x7FF717E1BAB0//	0x7FF7A968BAE0//	0x7FF78994A5B0//	0x7FF737D5A580//	0x7FF6AE0A6AE0//	0x7FF655086810//	0x7FF786A167E0//	0x7FF678610CE0//	0x7FF74A096C40//	0x7FF61D0048E0//	0x7FF7E75F3550//	0x7FF62591C310//	0x7FF6523CA550//	0x7FF6FF3B7930//	0x7FF7B4461960//	0x7FF6F5791930//0x7FF69A90EEB0//0x7FF6E8A0A270//0x7FF7B6E6B630	0x7FF70DB59DA0	0x7FF6D7619DC0	0x7FF7F31B9B70	0x7FF6AF776820	0x7FF6C8D9A1E0	0x7FF70A925340	0x7FF7149F4200	0x7FF7EED01510	0x7FF71AE9E790	0x7FF75DDBC350	0x7FF69D615020	0x7FF672435020	0x7FF690162DA0	//0x7FF6FC2305A0	//0x7FF69E25BB70	//0x7FF74DF0BB60	//0x7FF757A59550	//0x1407D9E20//0x1407E22E0//0x1407DDC00//
#define ADDR_GETACHIEVEMENTSTATE		26//0x7FF72FAD0380	//0x7FF6ABE0FD70	//0x7FF79044DF50	//0x7FF70107C2E0	//0x7FF723FC8DD0	//0x7FF6F3CA42F0	//0x7FF6E6834210	//0x7FF757BDF070	//0x7FF68055F070	//0x7FF6D55ED260	//0x7FF669AEFB50	//0x7FF760459C20	//0x7FF797B59C30	//0x7FF68A5D9260	//0x7FF7F6469260	//0x7FF7933D92F0	//0x7FF6A75D25B0	//0x7FF61CB825D0	//0x7FF63A62B5F0//	0x7FF69C04B570//	0x7FF6DEE93000//	0x7FF676E72C70//	0x7FF7E1CD2DA0//	0x7FF75C08D4E0//	0x7FF7E055D3F0//	0x7FF6C170D410//	0x7FF65C3AB800//	0x7FF6E4638FD0//	0x7FF675EC74D0//	0x7FF729157350//	0x7FF625CC67D0//	0x7FF671133120//	0x7FF78BEBF600//	0x7FF7EB46F5E0//	0x7FF7A23B7360//	0x7FF6BEC573F0//	0x7FF626D07410//	0x7FF6A9B95340//	0x7FF7597B3530//	0x7FF631833560//	0x7FF7815CE930//	0x7FF673A7A740//	0x7FF62AC03FD0//	0x7FF6EE083710//	0x7FF6B3B8A310//	0x7FF6F0447A80//	0x7FF61A1A7900//	0x7FF758C23640//	0x7FF76E0CDCC0//	0x7FF7E3125350//	0x7FF61DD01180//	0x7FF65F9CFCB0//	0x7FF64AEE9D00//	0x7FF73A499D00//	0x7FF6BC95F740//	0x7FF6704FF720//	0x7FF6B499C2A0//	0x7FF783753F20//	0x7FF6EC0B1550//	0x7FF6F3EFFE50//	0x7FF7B5E48870//	0x7FF69A668870//	0x7FF75C611500//	0x7FF73B231500//	0x7FF74FD77180//	0x7FF73BD67180//	0x7FF6FE493350//	0x7FF75FE30440//	0x7FF6D6280400//	0x7FF689AFA1E0//	0x7FF7CD334C40//	0x7FF7F6810F90//	0x7FF727100BF0//	0x7FF605236490//	0x7FF749894500//	0x7FF6EFC0E210//	0x7FF7A5FDAD20//	0x7FF7EDB2AD80//	0x7FF6BE30ACF0//	0x7FF6F35885D0//	0x7FF717EA7590//	0x7FF7A97175C0//	0x7FF7899D4BB0//	0x7FF737DE4B80//	0x7FF6AE1344D0//	0x7FF6551121A0//	0x7FF786AA2160//	0x7FF6786966F0//	0x7FF74A119300//	0x7FF61D088F90//	0x7FF7E76A6170//	0x7FF6259CEEA0//	0x7FF652495010//	0x7FF6FF480680//	0x7FF7B4529500//	0x7FF6F5859540//0x7FF69A9D45D0//0x7FF6E8A9A820//0x7FF7B6EF4F30	0x7FF70DBE4B70	0x7FF6D76A4B90	0x7FF7F3244940	0x7FF6AF801370	0x7FF6C8E204C0	0x7FF70A9A97F0	0x7FF714A72710	0x7FF7EED88AD0	0x7FF71AEEC630	0x7FF75DE3F600	0x7FF69D696D50	0x7FF6724B6D50	0x7FF6901E5920	//0x7FF6FC2B3280	//0x7FF69E2DD190	//0x7FF74DF8D180	//0x7FF757ADA300	//0x140856D70//0x14086E3D0//0x140867870//
#define ADDR_GETNEWMARK					27//0x7FF72F7F55C0	//0x7FF6ABB35410	//0x7FF790174590	//0x7FF700DA4EE0	//0x7FF723CF4180	//0x7FF6F39D32D0	//0x7FF6E65632D0	//0x7FF757912580	//0x7FF680292580	//0x7FF6D5320D00	//0x7FF669820E50	//0x7FF76018BEC0	//0x7FF79788BEC0	//0x7FF68A30A650	//0x7FF7F619A650	//0x7FF79310A680	//0x7FF6A7309DB0	//0x7FF61C8B9DE0	//0x7FF63A3691A0//	0x7FF69BD891A0//	0x7FF6DEBB8000//	0x7FF676BD68E0//	0x7FF7E1A33150//	0x7FF75BDF1050//	0x7FF7E02C0FF0//	0x7FF6C1470FF0//	0x7FF65C10FD60//	0x7FF6E439F2A0//	0x7FF675C2F120//	0x7FF728EBEEA0//	0x7FF625A2EE50//	0x7FF670E9E430//	0x7FF78BC2DD80//	0x7FF7EB1DDD80//	0x7FF7A211D8F0//	0x7FF6BE9BD8F0//	0x7FF626A6D010//	0x7FF6A98FBED0//	0x7FF75951B8F0//	0x7FF63159B920//	0x7FF78133AEC0//	0x7FF6737EA600//	0x7FF62A9789A0//	0x7FF6EDDF89A0//	0x7FF6B3905880//	0x7FF6F01C5070//	0x7FF619F25070//	0x7FF7589A3550//	0x7FF76DE52750//	0x7FF7E2E80C40//	0x7FF61DA60190//	0x7FF65F72FAC0//	0x7FF64AC4E6F0//	0x7FF73A1FE6F0//	0x7FF6BC6CB960//	0x7FF67026B960//	0x7FF6B470B0F0//	0x7FF7835084A0//	0x7FF6EBE68550//	0x7FF6F3CB7DD0//	0x7FF7B5C06640//	0x7FF69A426640//	0x7FF75C3D6210//	0x7FF73AFF6210//	0x7FF74FB44870//	0x7FF73BB34870//	0x7FF6FE263A60//	0x7FF75FBCED20//	0x7FF6D601ECF0//	0x7FF68989CCA0//	0x7FF7CD0DC920//	0x7FF7F65BB150//	0x7FF726EAAFD0//	0x7FF60503AAD0//	0x7FF74969A490//	0x7FF6EF9FA660//	0x7FF7A5DC9050//	0x7FF7ED9190B0//	0x7FF6BE0F9050//	0x7FF6F3378490//	0x7FF717CA7C20//	0x7FF7A9517C50//	0x7FF7897D6CF0//	0x7FF737BE6CF0//	0x7FF6ADF35780//	0x7FF654F15480//	0x7FF7868A5450//	0x7FF6784A35E0//	0x7FF749F2D3D0//	0x7FF61CE9A9D0//	0x7FF7E74B71C0//	0x7FF6257E4660//	0x7FF652292AE0//	0x7FF6FF27FF30//	0x7FF7B432C4A0//	0x7FF6F565C470//0x7FF69A7DB9B0//0x7FF6E88CA860//0x7FF7B6D29A30	0x7FF70DA18DB0	0x7FF6D74D8DB0	0x7FF7F3078DB0	0x7FF6AF6393D0	0x7FF6C8C64760	0x7FF70A7F2CD0	0x7FF7148BEE60	0x7FF7EEBCD5F0	0x7FF71AD5BB30	0x7FF75DCB2D60	0x7FF69D50DDC0	0x7FF67232DDC0	0x7FF69005C7E0	//0x7FF6FC12AF40	//0x7FF69E1594B0	//0x7FF74DE094A0	//0x7FF757958110	//0x1406D6320//0x1406D5AA0//0x140AA50A0//
#define ADDR_ATTENDANCE_TEMP			28//0x7FF733626948	//0x7FF6AF962418	//0x7FF704BA5878	//0x7FF704BA5878	//0x7FF727AD8A58	//0x7FF6F778ED08	//0x7FF6EA31ED08	//0x7FF75B6A6DC8	//0x7FF684026DC8	//0x7FF6D90A34F8	//0x7FF66D5789F8	//0x7FF763ECD068	//0x7FF79B5CD0A8	//0x7FF68E02F658	//0x7FF7F9EBE608	//0x7FF796E2F618	//0x7FF6AB002588	//0x7FF6205B2588	//0x7FF63E0497A8//	0x7FF69FA69748//	0x7FF6E2875F98//	0x7FF67A864108//	0x7FF7E5656360//	0x7FF75F9ED560//	0x7FF7E3EBD560//	0x7FF6C506D540//	0x7FF65FD07DF8//	0x7FF6E7F7A5A0//	0x7FF679802BC8//	0x7FF72CA8EED8//	0x7FF6295F8738//	0x7FF674A51618//	0x7FF78F7EE1E8//	0x7FF7EED9E1D8//	0x7FF7A5CB2A38//	0x7FF6C2552878//	0x7FF62A5F5198//	0x7FF6AD451C78//	0x7FF75D0607C8//	0x7FF6350E0508//	0x7FF784E5FC88//	0x7FF6772EFDE8//	0x7FF62E450030//	0x7FF6F18CEFB0//	0x7FF6B73BC958//	0x7FF6F3C68158//	0x7FF61D9C8148//	0x7FF75C403A18//	0x7FF771895258//	0x7FF7E6897888//	0x7FF62147CE88//	0x7FF66313D8F8//	0x7FF64E60BCD8//	0x7FF73DBBBD48//	0x7FF6C0040588//	0x7FF673BE0588//	0x7FF6B806AD78//	0x7FF786E3C4E8//	0x7FF6EF77C8A8//	0x7FF6F75B64E8//	0x7FF7B94D1E48//	0x7FF69DCF1E48//	0x7FF75FC67D08//	0x7FF73E887D08//	0x7FF75338D468//	0x7FF73F37D468//	0x7FF701A9C438//	0x7FF7633D2E88//	0x7FF6D9822E68//	0x7FF68D064AC8//	0x7FF7D0860C78//	0x7FF7F9D194F8//	0x7FF72A608398//	0x7FF608781120//	0x7FF74CDD1EC0//	0x7FF6F311E300//	0x7FF7A94BE340//	0x7FF7F100E340//	0x7FF6C17EE370//	0x7FF6F6A56C90//	0x7FF71AFD9390//	0x7FF7AC8493D0//	0x7FF78CAF1520//	0x7FF73AF014E0//	0x7FF6B122FF00//	0x7FF6581EFC00//	0x7FF789B7FBC0//	0x7FF67B6C5830//	0x7FF74D0F4600//	0x7FF62001C2D0//	0x7FF7EA5EE9A0//	0x7FF6288E25A0//	0x7FF655364480//	0x7FF70230D778//	0x7FF7B737CDC8//	0x7FF6F86ACDC8//0x7FF69D809CE8//0x7FF6EB8DC558//0x7FF7B9D0EFA8	0x7FF7109DF3F8	0x7FF6DA49F3E8	0x7FF7F603F3F8	0x7FF6B25E30B8	0x7FF6CBB54688	0x7FF70D6B1058	0x7FF717744188	0x7FF7F1A2F6A8	0x7FF71DB8FCA8	0x7FF760AA94E8	0x7FF6A0291220	0x7FF6750B1200	0x7FF692DC4FD8	//0x7FF6FEE73C00	//0x7FF6A0E746C0	//0x7FF750B246C0	//0x7FF75A652DE0	//0x1433A0000//0x143391520//0x143356D90//
#define ADDR_ATTENDANCE_CONDITION_TEMP	29//0x7FF730BF03B0	//0x7FF6AF961E10	//0x7FF793F84860	//0x7FF704BA5270	//0x7FF727AD8450	//0x7FF6F778E700	//0x7FF6EA31E700	//0x7FF75B6A67C0	//0x7FF6840267C0	//0x7FF6D90A2EF0	//0x7FF66D5783F0	//0x7FF763ECCA60	//0x7FF79B5CCAA0	//0x7FF68E02F050	//0x7FF7F9EBE000	//0x7FF796E2F010	//0x7FF6AB001F80	//0x7FF6205B1F80	//0x7FF63E0491A0//	0x7FF69FA69140//	0x7FF6E2875990//	0x7FF67A863B00//	0x7FF7E5655D58//	0x7FF75F9ECF58//	0x7FF7E3EBCF58//	0x7FF6C506CF38//	0x7FF65FD024C8//	0x7FF6E7F79F98//	0x7FF6798025C0//	0x7FF72CA8E8D0//	0x7FF6295F8130//	0x7FF674A51010//	0x7FF78F7EDBE0//	0x7FF7EED9DBD0//	0x7FF7A5CB2430//	0x7FF6C2552270//	0x7FF62A5F4B90//	0x7FF6AD451670//	0x7FF75D0601C0//	0x7FF6350DFF00//	0x7FF784E5F680//	0x7FF6772EF7E0//	0x7FF62E44AB40//	0x7FF6F18C9AC0//	0x7FF6B73B7470//	0x7FF6F3C62C70//	0x7FF61D9C2C60//	0x7FF75C403410//	0x7FF771894C58//	0x7FF7E6897288//	0x7FF62147C888//	0x7FF66313D2F8//	0x7FF64E60B6D8//	0x7FF73DBBB748//	0x7FF6C003FF88//	0x7FF673BDFF88//	0x7FF6B806A778//	0x7FF786E3BEE8//	0x7FF6EF77C2A8//	0x7FF6F75B5EE8//	0x7FF7B94D1848//	0x7FF69DCF1848//	0x7FF75FC67708//	0x7FF73E887708//	0x7FF75338CE68//	0x7FF73F37CE68//	0x7FF701A9BE38//	0x7FF7633D2888//	0x7FF6D9822868//	0x7FF68D0644C8//	0x7FF7D0860678//	0x7FF7F9D18EF8//	0x7FF72A607D98//	0x7FF608780B20//	0x7FF74CDD18C0//	0x7FF6F311DD00//	0x7FF7A94BDD48//	0x7FF7F100DD48//	0x7FF6C17EDD78//	0x7FF6F6A56698//	0x7FF71AFD8D98//	0x7FF7AC848DD8//	0x7FF78CAF0F28//	0x7FF73AF00EE8//	0x7FF6B122F908//	0x7FF6581EF608//	0x7FF789B7F5C8//	0x7FF67B6C5238//	0x7FF74D0F4008//	0x7FF62001BCD8//	0x7FF7EA5EE3A8//	0x7FF6288E1FB0//	0x7FF655363E90//	0x7FF70230D190//	0x7FF7B737C7E0//	0x7FF6F86AC7E0//0x7FF69D809700//0x7FF6EB8DBF70//0x7FF7B9D0E9C0	0x7FF7109DEE10	0x7FF6DA49EE00	0x7FF7F603EE10	0x7FF6B25E2AD0	0x7FF6CBB540A8	0x7FF70D6B0A78	0x7FF717743BA8	0x7FF7F1A2F0C8	0x7FF71DB8F6C8	0x7FF760AA8F08	0x7FF6A0290C40	0x7FF6750B0C20	0x7FF692DC49F8	//0x7FF6FEE73628	//0x7FF6A0E740F0	//0x7FF750B240F0	//0x7FF75A652810	//0x14339FA30//0x143390F50//0x1433567C0//
#define ADDR_MISSION_TEMP				30//0x7FF7336FD420	//0x7FF6AFA38D88	//0x7FF793F84E68	//0x7FF704C7A9A8	//0x7FF727BAD660	//0x7FF6F7863700	//0x7FF6EA3F3700	//0x7FF75B777E50	//0x7FF6840F7E50	//0x7FF6D91744F0	//0x7FF66D649860	//0x7FF763F9D660	//0x7FF79B69D690	//0x7FF68E0FE300	//0x7FF7F9F8D2B0	//0x7FF796EFE2C0	//0x7FF6AB0D0D00	//0x7FF620680D20	//0x7FF63E117690//	0x7FF69FB37640//	0x7FF6E29434C0//	0x7FF67A9333E0//	0x7FF7E571A2F8//	0x7FF75FAADC00//	0x7FF7E3F7DC00//	0x7FF6C512DBE0//	0x7FF65FDC8770//	0x7FF6E8040130//	0x7FF6798C8480//	0x7FF72CB54290//	0x7FF6296BDAD0//	0x7FF674B166A0//	0x7FF78F8B2880//	0x7FF7EEE62870//	0x7FF7A5D75B80//	0x7FF6C26159C0//	0x7FF62A6B8100//	0x7FF6AD5110B0//	0x7FF75D11FB00//	0x7FF63519F750//	0x7FF784F1E6D0//	0x7FF6773A90F0//	0x7FF62E508890//	0x7FF6F19877F0//	0x7FF6B7474950//	0x7FF6F3D20020//	0x7FF61DA80010//	0x7FF75C4C1DD0//	0x7FF771952EB0//	0x7FF7E6953B20//	0x7FF621538990//	0x7FF6631F4B50//	0x7FF64E6C2EE0//	0x7FF73DC72F50//	0x7FF6C00F23A0//	0x7FF673C923A0//	0x7FF6B8117090//	0x7FF786EEF290//	0x7FF6EF82ECA0//	0x7FF6F76611D0//	0x7FF7B957C630//	0x7FF69DD9C630//	0x7FF75FD12000//	0x7FF73E932000//	0x7FF7534310A0//	0x7FF73F4210A0//	0x7FF701B3FEF0//	0x7FF763475E00//	0x7FF6D98C5DE0//	0x7FF68D1073F8//	0x7FF7D0902D58//	0x7FF7F9DBB558//	0x7FF72A6AA3F8//	0x7FF608820D18//	0x7FF74CE71BC8//	0x7FF6F31BD8D0//	0x7FF7A955D630//	0x7FF7F10AD630//	0x7FF6C188D650//	0x7FF6F6AF5E00//	0x7FF71B076490//	0x7FF7AC8E64D0//	0x7FF78CB8DB90//	0x7FF73AF9DB50//	0x7FF6B12CCEB0//	0x7FF65828A530//	0x7FF789C1A490//	0x7FF67B754810//	0x7FF74D178A50//	0x7FF62009EA00//	0x7FF7EA6703F0//	0x7FF6289644F0//	0x7FF6553E3CE0//	0x7FF70238A950//	0x7FF7B73F8A80//	0x7FF6F8728A80//0x7FF69D882490//0x7FF6EB954B80//0x7FF7B9D871C0	0x7FF710A56E20	0x7FF6DA516E10	0x7FF7F60B6E20	0x7FF6B265AED0	0x7FF6CBBC7CE0	0x7FF70D71AFC0	0x7FF7177AE8A0	0x7FF7F1A98D28	0x7FF71DBF80A8	0x7FF760B0A250	0x7FF6A02E8B20	0x7FF675108B00	0x7FF692E1B5A8	//0x7FF6FEECACA0	//0x7FF6A0ECA4D8	//0x7FF750B7A4D8	//0x7FF75A6A87E8	//0x1433F8E60//0x1433E9F90//0x1433AD300//
#define ADDR_MISSION_DAY_TEMP			31//0x7FF7336FE0F0	//0x7FF6AFA39A58	//0x7FF79405AE50	//0x7FF704C7B678	//0x7FF727BAE330	//0x7FF6F78643D0	//0x7FF6EA3F43D0	//0x7FF75B778B20	//0x7FF6840F8B20	//0x7FF6D91751C0	//0x7FF66D64A530	//0x7FF763F9E330	//0x7FF79B69E360	//0x7FF68E0FEFD0	//0x7FF7F9F8DF80	//0x7FF796EFEF90	//0x7FF6AB0D19D0	//0x7FF6206819F0	//0x7FF63E118360//	0x7FF69FB38310//	0x7FF6E2944190//	0x7FF67A9340B0//	0x7FF7E571AFC8//	0x7FF75FAAE8D0//	0x7FF7E3F7E8D0//	0x7FF6C512E8B0//	0x7FF65FDC9440//	0x7FF6E8040E00//	0x7FF6798C9150//	0x7FF72CB54F60//	0x7FF6296BE7A0//	0x7FF674B17370//	0x7FF78F8B3550//	0x7FF7EEE63540//	0x7FF7A5D76850//	0x7FF6C2616690//	0x7FF62A6B8DD0//	0x7FF6AD511D80//	0x7FF75D1207D0//	0x7FF6351A0420//	0x7FF784F1F3A0//	0x7FF6773A9DC0//	0x7FF62E509560//	0x7FF6F19884C0//	0x7FF6B7475620//	0x7FF6F3D20CF0//	0x7FF61DA80CE0//	0x7FF75C4C2AA0//	0x7FF771953B78//	0x7FF7E69547E8//	0x7FF621539658//	0x7FF6631F5818//	0x7FF64E6C3BA8//	0x7FF73DC73C18//	0x7FF6C00F3068//	0x7FF673C93068//	0x7FF6B811C4D8//	0x7FF786EEFF58//	0x7FF6EF82F968//	0x7FF6F7666648//	0x7FF7B957D2F8//	0x7FF69DD9D2F8//	0x7FF75FD12CC8//	0x7FF73E932CC8//	0x7FF753436ED0//	0x7FF73F426ED0//	0x7FF701B45D18//	0x7FF76347BB98//	0x7FF6D98CBB78//	0x7FF68D1080C0//	0x7FF7D0903A20//	0x7FF7F9DBC220//	0x7FF72A6AB0C0//	0x7FF6088219E0//	0x7FF74CE72890//	0x7FF6F31BE598//	0x7FF7A955E2F0//	0x7FF7F10AE2F0//	0x7FF6C188E310//	0x7FF6F6AF6AC0//	0x7FF71B077150//	0x7FF7AC8E7190//	0x7FF78CB8E850//	0x7FF73AF9E810//	0x7FF6B12CDB70//	0x7FF65828B1F0//	0x7FF789C1B150//	0x7FF67B7554D0//	0x7FF74D17E748//	0x7FF6200A4708//	0x7FF7EA6760D0//	0x7FF6289651A0//	0x7FF6553E99D8//	0x7FF702390638//	0x7FF7B73F9728//	0x7FF6F8729728//0x7FF69D8881C0//0x7FF6EB959F50//0x7FF7B9D8C598	0x7FF710A57AC8	0x7FF6DA517AB8	0x7FF7F60B7AC8	0x7FF6B265BB78	0x7FF6CBBC8978	0x7FF70D71BC58	0x7FF7177AF538	0x7FF7F1A999C0	0x7FF71DBF8D40	0x7FF760B0F380	0x7FF6A02EDC20	0x7FF67510DC00	0x7FF692E20260	//0x7FF6FEECFB88	//0x7FF6A0ECF3A8	//0x7FF750B7F3A8	//0x7FF75A6AD298	//0x1433F9AE0//0x1433EAC10//0x1433ADF80//
#define ADDR_GETREPATEQUESTDOINGINFO	32//0x7FF72FBFC770	//0x7FF6ABF3BEA0	//0x7FF790577D50	//0x7FF7011A4BF0	//0x7FF7240FE3D0	//0x7FF6F3DD6D30	//0x7FF6E6966C50	//0x7FF757D0DCA0	//0x7FF68068DCA0	//0x7FF6D571BD70	//0x7FF669C1A850	//0x7FF760583EE0	//0x7FF797C83EE0	//0x7FF68A700E30	//0x7FF7F6590F60	//0x7FF793500FF0	//0x7FF6A76F7730	//0x7FF61CCA7750	//0x7FF63A7511D0//	0x7FF69C171150//	0x7FF6DEFB6E40//	0x7FF676FA43A0//	0x7FF7E1DFA5E0//	0x7FF75C1B3200//	0x7FF7E06830D0//	0x7FF6C18330D0//	0x7FF65C4D0E80//	0x7FF6E475F590//	0x7FF675FED4E0//	0x7FF72927D040//	0x7FF625DEBC20//	0x7FF6712613B0//	0x7FF78BFECAA0//	0x7FF7EB59C9F0//	0x7FF7A24EB740//	0x7FF6BED8B7D0//	0x7FF626E39160//	0x7FF6A9CBB250//	0x7FF75989CC80//	0x7FF63191CCB0//	0x7FF7816B5900//	0x7FF673B5FD40//	0x7FF62ACE6F10//	0x7FF6EE166700//	0x7FF6B3C6CB80//	0x7FF6F0529C00//	0x7FF61A289A80//	0x7FF758D0DC40//	0x7FF76E1B5A30//	0x7FF7E31EAC40//	0x7FF61DDC6860//	0x7FF65FA943A0//	0x7FF64AFA9380//	0x7FF73A559380//	0x7FF6BCA1CED0//	0x7FF6705BCEB0//	0x7FF6B4A55F80//	0x7FF78382CAB0//	0x7FF6EC18DD50//	0x7FF6F3FDA660//	0x7FF7B5F1F6D0//	0x7FF69A73F6D0//	0x7FF75C6E5960//	0x7FF73B305950//	0x7FF74FE48320//	0x7FF73BE38320//	0x7FF6FE562FB0//	0x7FF75FEB0FF0//	0x7FF6D6301040//	0x7FF689B7A470//	0x7FF7CD3B46C0//	0x7FF7F6890190//	0x7FF72717FDC0//	0x7FF60530DA10//	0x7FF74996A3D0//	0x7FF6EFCE10D0//	0x7FF7A60BA910//	0x7FF7EDC0A970//	0x7FF6BE3EA8E0//	0x7FF6F3667750//	0x7FF717F7C360//	0x7FF7A97EC390//	0x7FF789AA7F40//	0x7FF737EB7F10//	0x7FF6AE1CDF60//	0x7FF6551AAD10//	0x7FF786B3AD40//	0x7FF678724CC0//	0x7FF74A1A2A50//	0x7FF61D11AF00//	0x7FF7E772E480//	0x7FF625A56E00//	0x7FF65250B020//	0x7FF6FF507770//	0x7FF7B45AEAA0//	0x7FF6F58DEAE0//0x7FF69AA58600//0x7FF6E8B224A0//0x7FF7B6F78700	0x7FF70DC6F450	0x7FF6D772F470	0x7FF7F32CF220	0x7FF6AF889C70	0x7FF6C8EB55F0	0x7FF70AA38E50	0x7FF714AFFA60	0x7FF7EEDCFC10	0x7FF71AF720F0	0x7FF75DEB9490	0x7FF69D715780	0x7FF672535780	0x7FF690261410	//0x7FF6FC3338E0	//0x7FF69E35BEA0	//0x7FF74E00BE90	//0x7FF757B59450	//0x1408D6B70//0x1408AD3D0//0x1408A5EF0//
#define ADDR_GETMAINQUESTINFO			33//0x7FF72FBFC1E0	//0x7FF6ABF3B910	//0x7FF7905777C0	//0x7FF7011A4660	//0x7FF7240FDE40	//0x7FF6F3DD6890	//0x7FF6E69667B0	//0x7FF757D0D800	//0x7FF68068D800	//0x7FF6D571B8D0	//0x7FF669C1A3B0	//0x7FF760583A40	//0x7FF797C83A40	//0x7FF68A700990	//0x7FF7F6590AC0	//0x7FF793500B50	//0x7FF6A76F7290	//0x7FF61CCA72B0	//0x7FF63A750D30//	0x7FF69C170CB0//	0x7FF6DEFB6910//	0x7FF676FA3F00//	0x7FF7E1DFA140//	0x7FF75C1B2D60//	0x7FF7E0682C30//	0x7FF6C1832C30//	0x7FF65C4D09E0//	0x7FF6E475F0F0//	0x7FF675FED040//	0x7FF72927CBA0//	0x7FF625DEB780//	0x7FF671260F10//	0x7FF78BFEC600//	0x7FF7EB59C550//	0x7FF7A24EB2A0//	0x7FF6BED8B330//	0x7FF626E38CC0//	0x7FF6A9CBADB0//	0x7FF75989C7E0//	0x7FF63191C810//	0x7FF7816B5460//	0x7FF673B5F8A0//	0x7FF62ACE6A70//	0x7FF6EE166260//	0x7FF6B3C6C6E0//	0x7FF6F0529760//	0x7FF61A2895E0//	0x7FF758D0D7A0//	0x7FF76E1B5590//	0x7FF7E31EA7A0//	0x7FF61DDC63C0//	0x7FF65FA93F00//	0x7FF64AFA8EE0//	0x7FF73A558EE0//	0x7FF6BCA1CA30//	0x7FF6705BCA10//	0x7FF6B4A55AE0//	0x7FF78382C610//	0x7FF6EC18D8B0//	0x7FF6F3FDA1C0//	0x7FF7B5F1F230//	0x7FF69A73F230//	0x7FF75C6E54C0//	0x7FF73B3054B0//	0x7FF74FE47E80//	0x7FF73BE37E80//	0x7FF6FE562B10//	0x7FF75FEB0B50//	0x7FF6D6300BA0//	0x7FF689B79FD0//	0x7FF7CD3B4220//	0x7FF7F688FCF0//	0x7FF72717F920//	0x7FF60530D570//	0x7FF749969F30//	0x7FF6EFCE0C30//	0x7FF7A60BA240//	0x7FF7EDC0A2A0//	0x7FF6BE3EA210//	0x7FF6F3667080//	0x7FF717F7BC90//	0x7FF7A97EBCC0//	0x7FF789AA7870//	0x7FF737EB7840//	0x7FF6AE1CDAC0//	0x7FF6551AA870//	0x7FF786B3A8A0//	0x7FF678724820//	0x7FF74A1A25B0//	0x7FF61D11AA60//	0x7FF7E772DFE0//	0x7FF625A56960//	0x7FF65250A950//	0x7FF6FF507050//	0x7FF7B45AE380//	0x7FF6F58DE3C0//0x7FF69AA57EE0//0x7FF6E8B22000//0x7FF7B6F78260	0x7FF70DC6ED80	0x7FF6D772EDA0	0x7FF7F32CEB50	0x7FF6AF8895A0	0x7FF6C8EB4ED0	0x7FF70AA38730	0x7FF714AFF340	0x7FF7EEDCF770	0x7FF71AF71A20	0x7FF75DEB8DC0	0x7FF69D7150B0	0x7FF6725350B0	0x7FF690260D40	//0x7FF6FC3331C0	//0x7FF69E35B780	//0x7FF74E00B770	//0x7FF757B58D30	//0x1408D6450//0x1408ACF30//0x1408A5A50//
#define		OFFSET_QUESTINFOSTART1			0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//0x000000000070//0x000000000070//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000070//0x000000070//0x000000070//
#define		OFFSET_QUESTINFOSTART2			0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//	0x00000000009C//0x00000000009C//0x00000000009C//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000000009C	//0x00000009C//0x00000009C//0x00000009C//
#define		OFFSET_QUESTINFOBRANCHCOUNT		0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//	0x0000000000B0//0x0000000000B0//0x0000000000B0//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000000B0	//0x0000000B0//0x0000000B0//0x0000000B0//
#define		OFFSET_QUESTINFOBRANCHSTART		0x0000000000A0	//0x0000000000B0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//	0x0000000000A0//0x0000000000A0//0x0000000000A0//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000A0//0x0000000A0//0x0000000A0//
#define		OFFSET_QUESTINFOSTART			0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//0x000000000068//0x000000000068//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000068//0x000000068//0x000000068//
#define		OFFSET_QUESTINFONEXT			0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//0x000000000040//0x000000000040//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000040//0x000000040//0x000000040//
//                                          ////				//	    			//    				//
#define ADDR_GETSUBQUESTINFO			34//0x7FF72FBFC3E0	//0x7FF6ABF3BB10	//0x7FF7905779C0	//0x7FF7011A4860	//0x7FF7240FE040	//0x7FF6F3DD69A0	//0x7FF6E69668C0	//0x7FF757D0D910	//0x7FF68068D910	//0x7FF6D571B9E0	//0x7FF669C1A4C0	//0x7FF760583B50	//0x7FF797C83B50	//0x7FF68A700AA0	//0x7FF7F6590BD0	//0x7FF793500C60	//0x7FF6A76F73A0	//0x7FF61CCA73C0	//0x7FF63A750E40//	0x7FF69C170DC0//	0x7FF6DEFB6AB0//	0x7FF676FA4010//	0x7FF7E1DFA250//	0x7FF75C1B2E70//	0x7FF7E0682D40//	0x7FF6C1832D40//	0x7FF65C4D0AF0//	0x7FF6E475F200//	0x7FF675FED150//	0x7FF72927CCB0//	0x7FF625DEB890//	0x7FF671261020//	0x7FF78BFEC710//	0x7FF7EB59C660//	0x7FF7A24EB3B0//	0x7FF6BED8B440//	0x7FF626E38DD0//	0x7FF6A9CBAEC0//	0x7FF75989C8F0//	0x7FF63191C920//	0x7FF7816B5570//	0x7FF673B5F9B0//	0x7FF62ACE6B80//	0x7FF6EE166370//	0x7FF6B3C6C7F0//	0x7FF6F0529870//	0x7FF61A2896F0//	0x7FF758D0D8B0//	0x7FF76E1B56A0//	0x7FF7E31EA8B0//	0x7FF61DDC64D0//	0x7FF65FA94010//	0x7FF64AFA8FF0//	0x7FF73A558FF0//	0x7FF6BCA1CB40//	0x7FF6705BCB20//	0x7FF6B4A55BF0//	0x7FF78382C720//	0x7FF6EC18D9C0//	0x7FF6F3FDA2D0//	0x7FF7B5F1F340//	0x7FF69A73F340//	0x7FF75C6E55D0//	0x7FF73B3055C0//	0x7FF74FE47F90//	0x7FF73BE37F90//	0x7FF6FE562C20//	0x7FF75FEB0C60//	0x7FF6D6300CB0//	0x7FF689B7A0E0//	0x7FF7CD3B4330//	0x7FF7F688FE00//	0x7FF72717FA30//	0x7FF60530D680//	0x7FF74996A040//	0x7FF6EFCE0D40//	0x7FF7A60BA580//	0x7FF7EDC0A5E0//	0x7FF6BE3EA550//	0x7FF6F36673C0//	0x7FF717F7BFD0//	0x7FF7A97EC000//	0x7FF789AA7BB0//	0x7FF737EB7B80//	0x7FF6AE1CDBD0//	0x7FF6551AA980//	0x7FF786B3A9B0//	0x7FF678724930//	0x7FF74A1A26C0//	0x7FF61D11AB70//	0x7FF7E772E0F0//	0x7FF625A56A70//	0x7FF65250AC90//	0x7FF6FF507390//	0x7FF7B45AE6C0//	0x7FF6F58DE700//0x7FF69AA58220//0x7FF6E8B22110//0x7FF7B6F78370	0x7FF70DC6F0C0	0x7FF6D772F0E0	0x7FF7F32CEE90	0x7FF6AF8898E0	0x7FF6C8EB5210	0x7FF70AA38A70	0x7FF714AFF680	0x7FF7EEDCF880	0x7FF71AF71D60	0x7FF75DEB9100	0x7FF69D7153F0	0x7FF6725353F0	0x7FF690261080	//0x7FF6FC333500	//0x7FF69E35BAC0	//0x7FF74E00BAB0	//0x7FF757B59070	//0x1408D6790//0x1408AD040//0x1408A5B60//
#define ADDR_SETMANUALTARGET			35//0x7FF72F8BDDC0	//0x7FF6ABBFDB40	//0x7FF79023CD80	//0x7FF700E6C630	//0x7FF723DBB220	//0x7FF6F3A99840	//0x7FF6E66297D0	//0x7FF7579D8240	//0x7FF680358240	//0x7FF6D53E68D0	//0x7FF6698C2A90	//0x7FF76022D8B0	//0x7FF79792D8B0	//0x7FF68A3ACDB0	//0x7FF7F623CDB0	//0x7FF7931ACE40	//0x7FF6A73AB310	//0x7FF61C95B330	//0x7FF63A407120//	0x7FF69BE27120//	0x7FF6DEC54790//	0x7FF676C73870//	0x7FF7E1ACF2B0//	0x7FF75BE8D160//	0x7FF7E035D100//	0x7FF6C150D100//	0x7FF65C1AB6C0//	0x7FF6E443A8C0//	0x7FF675CCA2C0//	0x7FF728F59F20//	0x7FF625AC9AD0//	0x7FF670F37CD0//	0x7FF78BCC7880//	0x7FF7EB277860//	0x7FF7A21B9470//	0x7FF6BEA59470//	0x7FF626B06C10//	0x7FF6A99942B0//	0x7FF7595B3990//	0x7FF6316339C0//	0x7FF7813D3740//	0x7FF673881E60//	0x7FF62AA0FA10//	0x7FF6EDE8F8F0//	0x7FF6B399C330//	0x7FF6F025B6D0//	0x7FF619FBB6D0//	0x7FF758A398A0//	0x7FF76DEE7F30//	0x7FF7E2F14D80//	0x7FF61DAF33D0//	0x7FF65F7C2AA0//	0x7FF64ACE0BF0//	0x7FF73A290BF0//	0x7FF6BC75D710//	0x7FF6702FD710//	0x7FF6B479C370//	0x7FF783596C40//	0x7FF6EBEF5850//	0x7FF6F3D44C70//	0x7FF7B5C92F10//	0x7FF69A4B2F10//	0x7FF75C461160//	0x7FF73B081160//	0x7FF74FBCF700//	0x7FF73BBBF700//	0x7FF6FE2EDE30//	0x7FF75FC57AE0//	0x7FF6D60A7AB0//	0x7FF689925CB0//	0x7FF7CD168E30//	0x7FF7F6646B50//	0x7FF726F369D0//	0x7FF6050C62F0//	0x7FF749724F00//	0x7FF6EFA87DE0//	0x7FF7A5E565E0//	0x7FF7ED9A6640//	0x7FF6BE1865C0//	0x7FF6F34058B0//	0x7FF717D35610//	0x7FF7A95A5640//	0x7FF789863D00//	0x7FF737C73CD0//	0x7FF6ADFC1980//	0x7FF654FA1590//	0x7FF786931560//	0x7FF67852DE90//	0x7FF749FB6C60//	0x7FF61CF23DF0//	0x7FF7E75442B0//	0x7FF62586E640//	0x7FF65231C9D0//	0x7FF6FF308EF0//	0x7FF7B43B42D0//	0x7FF6F56E42A0//0x7FF69A863300//0x7FF6E8956630//0x7FF7B6DBAA80	0x7FF70DAA99B0	0x7FF6D75699A0	0x7FF7F31098A0	0x7FF6AF6C7B80	0x7FF6C8CF02E0	0x7FF70A87E1B0	0x7FF71494BC00	0x7FF7EEC58340	0x7FF71ADB7FC0	0x7FF75DD079D0	0x7FF69D561F80	0x7FF672381F80	0x7FF6900B0610	//0x7FF6FC17EB00	//0x7FF69E1ABFB0	//0x7FF74DE5BFA0	//0x7FF7579AA220	//0x1407282A0//0x1407275F0//0x140725070//
#define ADDR_GETMAXREPEATEQUEST			36//0x7FF72FC04950	//0x7FF6ABF44080	//0x7FF79057FF30	//0x7FF7011ACDD0	//0x7FF72410A2A0	//0x7FF6F3DE2EF0	//0x7FF6E6972E10	//0x7FF757D199E0	//0x7FF6806999E0	//0x7FF6D5727AB0	//0x7FF669C26590	//0x7FF76058FC10	//0x7FF797C8FC10	//0x7FF68A70CB40	//0x7FF7F659CC70	//0x7FF79350CD00	//0x7FF6A7702C60	//0x7FF61CCB2C80	//0x7FF63A75C430//	0x7FF69C17C3B0//	0x7FF6DEFC2340//	0x7FF676FABD00//	0x7FF7E1E079A0//	0x7FF75C1C05C0//	0x7FF7E0690490//	0x7FF6C1840490//	0x7FF65C4DE240//	0x7FF6E476BA90//	0x7FF675FF99E0//	0x7FF729289530//	0x7FF625DF8070//	0x7FF67126C740//	0x7FF78BFF7DE0//	0x7FF7EB5A7D30//	0x7FF7A24F6B90//	0x7FF6BED96C20//	0x7FF626E44410//	0x7FF6A9CC6480//	0x7FF7598A7CD0//	0x7FF631927D00//	0x7FF7816C07F0//	0x7FF673B67E50//	0x7FF62ACEF020//	0x7FF6EE16E810//	0x7FF6B3C74C90//	0x7FF6F0531550//	0x7FF61A2913D0//	0x7FF758D192C0//	0x7FF76E1C1080//	0x7FF7E31F5280//	0x7FF61DDD1180//	0x7FF65FA9ECE0//	0x7FF64AFB38B0//	0x7FF73A5638B0//	0x7FF6BCA274D0//	0x7FF6705C74B0//	0x7FF6B4A613D0//	0x7FF783834160//	0x7FF6EC19A290//	0x7FF6F3FE6D70//	0x7FF7B5F2B990//	0x7FF69A74B990//	0x7FF75C6F28D0//	0x7FF73B3128C0//	0x7FF74FE542D0//	0x7FF73BE442D0//	0x7FF6FE56ED00//	0x7FF75FEB8BB0//	0x7FF6D6308C00//	0x7FF689B82030//	0x7FF7CD3BBB30//	0x7FF7F6896B90//	0x7FF7271867C0//	0x7FF605314410//	0x7FF749970DD0//	0x7FF6EFCEB4B0//	0x7FF7A60C5240//	0x7FF7EDC152A0//	0x7FF6BE3F5210//	0x7FF6F3672080//	0x7FF717F86A80//	0x7FF7A97F6AB0//	0x7FF789AB25F0//	0x7FF737EC25C0//	0x7FF6AE1D4F90//	0x7FF6551B1D40//	0x7FF786B41D70//	0x7FF67872BBA0//	0x7FF74A1A9930//	0x7FF61D126140//	0x7FF7E7739110//	0x7FF625A61CD0//	0x7FF652514FB0//	0x7FF6FF526790//	0x7FF7B45CD7E0//	0x7FF6F58FD820//0x7FF69AA77310//0x7FF6E8B2D0E0//0x7FF7B6F832E0	0x7FF70DC79690	0x7FF6D77396B0	0x7FF7F32D9460	0x7FF6AF893E90	0x7FF6C8ECF6D0	0x7FF70AA52F30	0x7FF714B19AF0	0x7FF7EEDD6140	0x7FF71AF7D530	0x7FF75DEC4330	0x7FF69D71EDC0	0x7FF67253EDC0	0x7FF69026A7E0	//0x7FF6FC34CD90	//0x7FF69E374B90	//0x7FF74E024B80	//0x7FF757B72140	//0x1408EF5E0//0x1408B7B50//0x1408B0790//
#define ADDR_FREEMEMORY					37//0x7FF730F878B0	//0x7FF6AD2C3770	//0x7FF7918E8210	//0x7FF70250B1F0	//0x7FF7254408F0	//0x7FF6F50FB790	//0x7FF6E7C8B6D0	//0x7FF759016010	//0x7FF681995FA0	//0x7FF6D6A15B60	//0x7FF66AEEC0C0	//0x7FF7618450F0	//0x7FF798F450C0	//0x7FF68B9A7BF0	//0x7FF7F7837A80	//0x7FF7947A7AD0	//0x7FF6A897F2F0	//0x7FF61DF2F3F0	//0x7FF63B9C97E0//	0x7FF69D3E9750//	0x7FF6E01F95B0//	0x7FF6781EE9C0//	0x7FF7E2FE90B0//	0x7FF75D387B30//	0x7FF7E1857860//	0x7FF6C2A07710//	0x7FF65D6A0820//	0x7FF6E5919C00//	0x7FF6771A2D70//	0x7FF72A42EC90//	0x7FF626F990A0//	0x7FF6723F45B0//	0x7FF78D191B10//	0x7FF7EC741860//	0x7FF7A3659DF0//	0x7FF6BFEF9D20//	0x7FF627F9C190//	0x7FF6AADFC8C0//	0x7FF75AA0D740//	0x7FF632A8D110//	0x7FF78280F790//	0x7FF674C9EED0//	0x7FF62BE034F0//	0x7FF6EF282890//	0x7FF6B4D73F30//	0x7FF6F1620C30//	0x7FF61B3805F0//	0x7FF759DC5850//	0x7FF76F25ADA0//	0x7FF7E42628C0//	0x7FF61EE47D40//	0x7FF660B078C0//	0x7FF64BFDBB80//	0x7FF73B58BB70//	0x7FF6BDA153B0//	0x7FF6715B5080//	0x7FF6B5A40760//	0x7FF784819690//	0x7FF6ED159D90//	0x7FF6F4F95780//	0x7FF7B6EB6650//	0x7FF69B6D6650//	0x7FF75D650810//	0x7FF73C2702B0//	0x7FF750D7CC30//	0x7FF73CD6CC30//	0x7FF6FF48C480//	0x7FF760DD0D50//	0x7FF6D72208E0//	0x7FF68AA65E90//	0x7FF7CE266B20//	0x7FF7F7723400//	0x7FF7280127A0//	0x7FF60618C2D0//	0x7FF74A7DE190//	0x7FF6F0B2FC30//	0x7FF7A6ED6C00//	0x7FF7EEA26B50//	0x7FF6BF206B80//	0x7FF6F4471460//	0x7FF718D3ADC0//	0x7FF7AA5AAEB0//	0x7FF78A855530//	0x7FF738C65400//	0x7FF6AEF96C70//	0x7FF655F59FB0//	0x7FF7878E9C20//	0x7FF6794394F0//	0x7FF74AE76900//	0x7FF61DDA63A0//	0x7FF7E837FC50//	0x7FF62667A3D0//	0x7FF653100930//	0x7FF7000B0C80//	0x7FF7B51271D0//	0x7FF6F6457180//0x7FF69B5B82D0//0x7FF6E968EBB0//0x7FF7B7AC6520	0x7FF70E7989C0	0x7FF6D82589E0	0x7FF7F3DF8780	0x7FF6B03A04F0	0x7FF6C99266E0	0x7FF70B488FC0	0x7FF715520C10	0x7FF7EF80E850	0x7FF71B971110	0x7FF75E892200	0x7FF69E086D30	0x7FF672EA6C70	0x7FF690BBC2D0	//0x7FF6FCC70E10	//0x7FF69EC74EA0	//0x7FF74E924E80	//0x7FF758456280	//0x1411AA320//0x141199370//0x1411659C0//
#define ADDR_GETSTORECURCOUNT			38//0x7FF72FA7B300	//0x7FF6ABDBAB60	//0x7FF7903F8A00	//0x7FF7010273F0	//0x7FF723F73E20	//0x7FF6F3C4F400	//0x7FF6E67DF390	//0x7FF757B8B120	//0x7FF68050B120	//0x7FF6D5599300	//0x7FF669A9D7D0	//0x7FF760407A30	//0x7FF797B07A40	//0x7FF68A5873A0	//0x7FF7F64173A0	//0x7FF793387430	//0x7FF6A75813C0	//0x7FF61CB313E0	//0x7FF63A5DA220//	0x7FF69BFFA1A0//	0x7FF6DEE259C0//	0x7FF676E15840//	0x7FF7E1C715F0//	0x7FF75C02D030//	0x7FF7E04FCF40//	0x7FF6C16ACF10//	0x7FF65C34B6E0//	0x7FF6E45D99E0//	0x7FF675E684E0//	0x7FF7290F84D0//	0x7FF625C67A90//	0x7FF6710D4B50//	0x7FF78BE614A0//	0x7FF7EB411480//	0x7FF7A236A060//	0x7FF6BEC0A0F0//	0x7FF626CB8F30//	0x7FF6A9B414B0//	0x7FF75975F460//	0x7FF6317DF490//	0x7FF78157AE50//	0x7FF673A27720//	0x7FF62ABB1540//	0x7FF6EE031200//	0x7FF6B3B38860//	0x7FF6F03F6290//	0x7FF61A156110//	0x7FF758BD24E0//	0x7FF76E07D2A0//	0x7FF7E30A9FC0//	0x7FF61DC89E40//	0x7FF65F958FC0//	0x7FF64AE73310//	0x7FF73A423310//	0x7FF6BC8EF440//	0x7FF67048F420//	0x7FF6B492CA50//	0x7FF7836F8620//	0x7FF6EC055770//	0x7FF6F3EA48A0//	0x7FF7B5DF32A0//	0x7FF69A6132A0//	0x7FF75C5BDAB0//	0x7FF73B1DDAB0//	0x7FF74FD25800//	0x7FF73BD15800//	0x7FF6FE441870//	0x7FF75FDC7A00//	0x7FF6D62179C0//	0x7FF689A91880//	0x7FF7CD2CB650//	0x7FF7F67A7A20//	0x7FF7270977A0//	0x7FF605227B00//	0x7FF749885A10//	0x7FF6EFBB89A0//	0x7FF7A5F861A0//	0x7FF7EDAD6200//	0x7FF6BE2B6170//	0x7FF6F3534530//	0x7FF717E57430//	0x7FF7A96C7460//	0x7FF7899857A0//	0x7FF737D95770//	0x7FF6AE0E1170//	0x7FF6550C00D0//	0x7FF786A50090//	0x7FF6786486A0//	0x7FF74A0CDAE0//	0x7FF61D03ABF0//	0x7FF7E7659F80//	0x7FF6259829F0//	0x7FF6524356D0//	0x7FF6FF41E680//	0x7FF7B44C8970//	0x7FF6F57F89B0//0x7FF69A9743F0//0x7FF6E8A4BED0//0x7FF7B6EA7950	0x7FF70DB95EE0	0x7FF6D7655F00	0x7FF7F31F5CB0	0x7FF6AF7B29D0	0x7FF6C8DD3300	0x7FF70A95DF90	0x7FF714A29B40	0x7FF7EED3AA00	0x7FF71AED8E70	0x7FF75DE2FEA0	0x7FF69D687750	0x7FF6724A7750	0x7FF6901D5F90	//0x7FF6FC2A39D0	//0x7FF69E2CD7C0	//0x7FF74DF7D7B0	//0x7FF757ACAF10	//0x140847DA0//0x14081F400//0x14081A450//
#define ADDR_GETQUESTCOMPLETEDSTATE		39//0x7FF72FBFC260	//0x7FF6ABF3B990	//0x7FF790577840	//0x7FF7011A46E0	//0x7FF7240FDEC0	//0x7FF6F3DD6910	//0x7FF6E6966830	//0x7FF757D0D880	//0x7FF68068D880	//0x7FF6D571B950	//0x7FF669C1A430	//0x7FF760583AC0	//0x7FF797C83AC0	//0x7FF68A700A10	//0x7FF7F6590B40	//0x7FF793500BD0	//0x7FF6A76F7310	//0x7FF61CCA7330	//0x7FF63A750DB0//	0x7FF69C170D30//	0x7FF6DEFB6990//	0x7FF676FA3F80//	0x7FF7E1DFA1C0//	0x7FF75C1B2DE0//	0x7FF7E0682CB0//	0x7FF6C1832CB0//	0x7FF65C4D0A60//	0x7FF6E475F170//	0x7FF675FED0C0//	0x7FF72927CC20//	0x7FF625DEB800//	0x7FF671260F90//	0x7FF78BFEC680//	0x7FF7EB59C5D0//	0x7FF7A24EB320//	0x7FF6BED8B3B0//	0x7FF626E38D40//	0x7FF6A9CBAE30//	0x7FF75989C860//	0x7FF63191C890//	0x7FF7816B54E0//	0x7FF673B5F920//	0x7FF62ACE6AF0//	0x7FF6EE1662E0//	0x7FF6B3C6C760//	0x7FF6F05297E0//	0x7FF61A289660//	0x7FF758D0D820//	0x7FF76E1B5610//	0x7FF7E31EA820//	0x7FF61DDC6440//	0x7FF65FA93F80//	0x7FF64AFA8F60//	0x7FF73A558F60//	0x7FF6BCA1CAB0//	0x7FF6705BCA90//	0x7FF6B4A55B60//	0x7FF78382C690//	0x7FF6EC18D930//	0x7FF6F3FDA240//	0x7FF7B5F1F2B0//	0x7FF69A73F2B0//	0x7FF75C6E5540//	0x7FF73B305530//	0x7FF74FE47F00//	0x7FF73BE37F00//	0x7FF6FE562B90//	0x7FF75FEB0BD0//	0x7FF6D6300C20//	0x7FF689B7A050//	0x7FF7CD3B42A0//	0x7FF7F688FD70//	0x7FF72717F9A0//	0x7FF60530D5F0//	0x7FF749969FB0//	0x7FF6EFCE0CB0//	0x7FF7A60BA2C0//	0x7FF7EDC0A320//	0x7FF6BE3EA290//	0x7FF6F3667100//	0x7FF717F7BD10//	0x7FF7A97EBD40//	0x7FF789AA78F0//	0x7FF737EB78C0//	0x7FF6AE1CDB40//	0x7FF6551AA8F0//	0x7FF786B3A920//	0x7FF6787248A0//	0x7FF74A1A2630//	0x7FF61D11AAE0//	0x7FF7E772E060//	0x7FF625A569E0//	0x7FF65250A9D0//	0x7FF6FF5070D0//	0x7FF7B45AE400//	0x7FF6F58DE440//0x7FF69AA57F60//0x7FF6E8B22080//0x7FF7B6F782E0	0x7FF70DC6EE00	0x7FF6D772EE20	0x7FF7F32CEBD0	0x7FF6AF889620	0x7FF6C8EB4F50	0x7FF70AA387B0	0x7FF714AFF3C0	0x7FF7EEDCF7F0	0x7FF71AF71AA0	0x7FF75DEB8E40	0x7FF69D715130	0x7FF672535130	0x7FF690260DC0	//0x7FF6FC333240	//0x7FF69E35B800	//0x7FF74E00B7F0	//0x7FF757B58DB0	//0x1408D64D0//0x1408ACFB0//0x1408A5AD0//
#define ADDR_GETQUESTACCEPTABLE			40//0x7FF72FC09820	//0x7FF6ABF48F50	//0x7FF790584E00	//0x7FF7011B1CA0	//0x7FF7241126B0	//0x7FF6F3DEB370	//0x7FF6E697B290	//0x7FF757D21A30	//0x7FF6806A1A30	//0x7FF6D572FB00	//0x7FF669C2E5E0	//0x7FF760597C60	//0x7FF797C97C60	//0x7FF68A714AD0	//0x7FF7F65A4C00	//0x7FF793514C90	//0x7FF6A770AC70	//0x7FF61CCBAC90	//0x7FF63A7643F0//	0x7FF69C184370//	0x7FF6DEFCB010//	0x7FF676FB0AD0//	0x7FF7E1E0F850//	0x7FF75C1C8470//	0x7FF7E0698340//	0x7FF6C1848340//	0x7FF65C4E5F10//	0x7FF6E47733C0//	0x7FF676001310//	0x7FF729290E60//	0x7FF625DFF9A0//	0x7FF6712754F0//	0x7FF78C000000//	0x7FF7EB5AFF50//	0x7FF7A24FF270//	0x7FF6BED9F300//	0x7FF626E4CAF0//	0x7FF6A9CCEB60//	0x7FF7598AE3A0//	0x7FF63192E3D0//	0x7FF7816C6EB0//	0x7FF673B6DA40//	0x7FF62ACF4C10//	0x7FF6EE174400//	0x7FF6B3C7A880//	0x7FF6F0536DB0//	0x7FF61A296C30//	0x7FF758D206E0//	0x7FF76E1C84A0//	0x7FF7E31FC4B0//	0x7FF61DDD8790//	0x7FF65FAA61E0//	0x7FF64AFBA990//	0x7FF73A56A990//	0x7FF6BCA2E970//	0x7FF6705CE950//	0x7FF6B4A687B0//	0x7FF7838398C0//	0x7FF6EC1A1AB0//	0x7FF6F3FEE580//	0x7FF7B5F327F0//	0x7FF69A7527F0//	0x7FF75C6F95C0//	0x7FF73B3195B0//	0x7FF74FE5AD80//	0x7FF73BE4AD80//	0x7FF6FE575620//	0x7FF75FEBDFD0//	0x7FF6D630E020//	0x7FF689B87420//	0x7FF7CD3C0E10//	0x7FF7F689BD50//	0x7FF72718B980//	0x7FF6053195B0//	0x7FF749976010//	0x7FF6EFCF2060//	0x7FF7A60CC230//	0x7FF7EDC1C290//	0x7FF6BE3FC200//	0x7FF6F3679070//	0x7FF717F8D8F0//	0x7FF7A97FD920//	0x7FF789AB9430//	0x7FF737EC9400//	0x7FF6AE1DB320//	0x7FF6551B80D0//	0x7FF786B48100//	0x7FF678730D40//	0x7FF74A1AEAD0//	0x7FF61D12CF10//	0x7FF7E7740440//	0x7FF625A693E0//	0x7FF65251C150//	0x7FF6FF5314B0//	0x7FF7B45D83D0//	0x7FF6F5908410//0x7FF69AA81EE0//0x7FF6E8B34450//0x7FF7B6F8A650	0x7FF70DC804F0	0x7FF6D7740510	0x7FF7F32E02C0	0x7FF6AF89AC20	0x7FF6C8ED98F0	0x7FF70AA5D130	0x7FF714B23CE0	0x7FF7EEDDC090	0x7FF71AF84DA0	0x7FF75DECB9C0	0x7FF69D725A90	0x7FF672545A90	0x7FF6902714A0	//0x7FF6FC357490	//0x7FF69E37F080	//0x7FF74E02F070	//0x7FF757B7C790	//0x1408F8D50//0x1408BDF80//0x1408B6B70//
#define ADDR_GETBUFFITEMINFO			41//0x7FF72F96ED60	//0x7FF6ABCAE610	//0x7FF7902EDA30	//0x7FF700F1CC60	//0x7FF723E6B7C0	//0x7FF6F3B4FC20	//0x7FF6E66DFBB0	//0x7FF757A8C1C0	//0x7FF68040C1C0	//0x7FF6D549A850	//0x7FF6699ADAD0	//0x7FF760318800	//0x7FF797A18810	//0x7FF68A497B80	//0x7FF7F6327B80	//0x7FF793297C10	//0x7FF6A7494AC0	//0x7FF61CA44AE0	//0x7FF63A4EEA60//	0x7FF69BF0E9E0//	0x7FF6DED3BB90//	0x7FF676D5C180//	0x7FF7E1BB7610//	0x7FF75BF75940//	0x7FF7E0445910//	0x7FF6C15F58E0//	0x7FF65C295A30//	0x7FF6E4523E30//	0x7FF675DAFF80//	0x7FF72903F690//	0x7FF625BAEE40//	0x7FF67101FD30//	0x7FF78BDAD940//	0x7FF7EB35D920//	0x7FF7A229F1C0//	0x7FF6BEB3F1C0//	0x7FF626BEE4D0//	0x7FF6A9A4CA70//	0x7FF75966B1B0//	0x7FF6316EB1E0//	0x7FF781488D70//	0x7FF673935F60//	0x7FF62AAC5FB0//	0x7FF6EDF45CF0//	0x7FF6B3A4FCE0//	0x7FF6F030E1D0//	0x7FF61A06E1D0//	0x7FF758AEBA20//	0x7FF76DF997E0//	0x7FF7E2FC62C0//	0x7FF61DBA4BF0//	0x7FF65F873EB0//	0x7FF64AD90420//	0x7FF73A340420//	0x7FF6BC80D2D0//	0x7FF6703AD2B0//	0x7FF6B484B5A0//	0x7FF783645300//	0x7FF6EBFA4D00//	0x7FF6F3DF3FD0//	0x7FF7B5D46F60//	0x7FF69A566F60//	0x7FF75C5135A0//	0x7FF73B1335A0//	0x7FF74FC7ED50//	0x7FF73BC6ED50//	0x7FF6FE39B660//	0x7FF75FD06FB0//	0x7FF6D6156F80//	0x7FF6899D1EC0//	0x7FF7CD213840//	0x7FF7F66F0BC0//	0x7FF726FE0A10//	0x7FF60516F890//	0x7FF7497CDEF0//	0x7FF6EFB05F50//	0x7FF7A5ED40C0//	0x7FF7EDA24120//	0x7FF6BE2040A0//	0x7FF6F3482800//	0x7FF717DA92C0//	0x7FF7A96192F0//	0x7FF7898D76D0//	0x7FF737CE76A0//	0x7FF6AE0347A0//	0x7FF655014290//	0x7FF7869A4260//	0x7FF67859EA40//	0x7FF74A0266A0//	0x7FF61CF93BC0//	0x7FF7E75AF0A0//	0x7FF6258D8820//	0x7FF652386FF0//	0x7FF6FF372430//	0x7FF7B441D150//	0x7FF6F574D120//0x7FF69A8CC570//0x7FF6E89C68A0//0x7FF7B6E2A9F0	0x7FF70DB194A0	0x7FF6D75D94C0	0x7FF7F3179270	0x7FF6AF7360A0	0x7FF6C8D59DE0	0x7FF70A8E6490	0x7FF7149B9610	0x7FF7EECC8EA0	0x7FF71AE2C630	0x7FF75DD77DF0	0x7FF69D5D1650	0x7FF6723F1650	0x7FF69011F9C0	//0x7FF6FC1ED8B0	//0x7FF69E21A5A0	//0x7FF74DECA590	//0x7FF757A18130	//0x1407962B0//0x1407973E0//0x140794440//
#define ADDR_GETINSTANCEMSG				42//0x7FF72FA238D0	//0x7FF6ABD63140	//0x7FF7903A0F40	//0x7FF700FCFAC0	//0x7FF723F1C600	//0x7FF6F3BF8180	//0x7FF6E6788110	//0x7FF757B33FB0	//0x7FF6804B3FB0	//0x7FF6D5542430	//0x7FF669A4E2F0	//0x7FF7603B8940	//0x7FF797AB8950	//0x7FF68A537BA0	//0x7FF7F63C7BA0	//0x7FF793337C30	//0x7FF6A7533E10	//0x7FF61CAE3E30	//0x7FF63A58CE70//	0x7FF69BFACDF0//	0x7FF6DEDD7830//	0x7FF676DFA520//	0x7FF7E1C57D20//	0x7FF75C013760//	0x7FF7E04E3670//	0x7FF6C1693640//	0x7FF65C331E60//	0x7FF6E45C0160//	0x7FF675E4FC50//	0x7FF7290DFC40//	0x7FF625C4F340//	0x7FF6710BC5A0//	0x7FF78BE490D0//	0x7FF7EB3F90B0//	0x7FF7A23199B0//	0x7FF6BEBB99B0//	0x7FF626C689E0//	0x7FF6A9AF29B0//	0x7FF759710EF0//	0x7FF631790F20//	0x7FF78152D810//	0x7FF6739DA1F0//	0x7FF62AB63FB0//	0x7FF6EDFE3CC0//	0x7FF6B3AEBA50//	0x7FF6F03A94E0//	0x7FF61A109360//	0x7FF758B87D70//	0x7FF76E034730//	0x7FF7E305FA40//	0x7FF61DC41520//	0x7FF65F910570//	0x7FF64AE2AB20//	0x7FF73A3DAB20//	0x7FF6BC8A80F0//	0x7FF6704480D0//	0x7FF6B48E5BE0//	0x7FF7836E1410//	0x7FF6EC03F360//	0x7FF6F3E8E4B0//	0x7FF7B5DE0F30//	0x7FF69A600F30//	0x7FF75C5AB7A0//	0x7FF73B1CB7A0//	0x7FF74FD144F0//	0x7FF73BD044F0//	0x7FF6FE4305B0//	0x7FF75FD7E0B0//	0x7FF6D61CE080//	0x7FF689A48190//	0x7FF7CD283120//	0x7FF7F675F2D0//	0x7FF72704F120//	0x7FF6051DDCE0//	0x7FF74983BBB0//	0x7FF6EFBA2EE0//	0x7FF7A5F708C0//	0x7FF7EDAC0920//	0x7FF6BE2A0890//	0x7FF6F351EC50//	0x7FF717E422F0//	0x7FF7A96B2320//	0x7FF789970A80//	0x7FF737D80A50//	0x7FF6AE0CC7C0//	0x7FF6550AC350//	0x7FF786A3C320//	0x7FF678635EA0//	0x7FF74A0BB6C0//	0x7FF61D029240//	0x7FF7E7647EB0//	0x7FF625970E50//	0x7FF6523E4070//	0x7FF6FF3D3420//	0x7FF7B447D420//	0x7FF6F57AD460//0x7FF69A929720//0x7FF6E8A36440//0x7FF7B6E93450	0x7FF70DB81A40	0x7FF6D7641A60	0x7FF7F31E1810	0x7FF6AF79E560	0x7FF6C8DBFE70	0x7FF70A94AC10	0x7FF714A18040	0x7FF7EED26100	0x7FF71AE867A0	0x7FF75DDD6250	0x7FF69D62EDC0	0x7FF67244EDC0	0x7FF69017C6C0	//0x7FF6FC24A520	//0x7FF69E275240	//0x7FF74DF25230	//0x7FF757A72BF0	//0x1407F5050//0x14080B110//0x140806190//
#define ADDR_WIDGET_ISSAMEANIMATION		43//0x7FF731D19930	//0x7FF6AE0557F0	//0x7FF79267A3B0	//0x7FF70329D530	//0x7FF7261D2A80	//0x7FF6F5E8D970	//0x7FF6E8A1D8B0	//0x7FF759DA8150	//0x7FF6827280E0	//0x7FF6D77A7EE0	//0x7FF66BC7E1C0	//0x7FF7625D72A0	//0x7FF799CD7180	//0x7FF68C73A380	//0x7FF7F85CA240	//0x7FF79553A380	//0x7FF6A9711910	//0x7FF61ECC1A70	//0x7FF63C75C3D0//	0x7FF69E17C340//	0x7FF6E0F8C1A0//	0x7FF678F81970//	0x7FF7E3D7C2B0//	0x7FF75E11ACF0//	0x7FF7E25EA930//	0x7FF6C379A810//	0x7FF65E433A00//	0x7FF6E66ACCD0//	0x7FF677F36040//	0x7FF72B1C2020//	0x7FF627D2BC00//	0x7FF673186FC0//	0x7FF78DF24540//	0x7FF7ED4D4290//	0x7FF7A43EC790//	0x7FF6C0C8C6C0//	0x7FF628D2EFB0//	0x7FF6ABB8FC30//	0x7FF75B7A0700//	0x7FF6338200D0//	0x7FF7835A2CB0//	0x7FF675A320E0//	0x7FF62CB96CE0//	0x7FF6F0016080//	0x7FF6B5B077B0//	0x7FF6F23B45B0//	0x7FF61C113F70//	0x7FF75AB59240//	0x7FF76FFEF030//	0x7FF7E4FF6CD0//	0x7FF61FBDB6A0//	0x7FF66189B690//	0x7FF64CD6F670//	0x7FF73C31F660//	0x7FF6BE7A9550//	0x7FF672349250//	0x7FF6B67D4780//	0x7FF7855AD560//	0x7FF6EDEF0D20//	0x7FF6F5D2C0A0//	0x7FF7B7C4CFE0//	0x7FF69C46CFE0//	0x7FF75E3E7610//	0x7FF73D0070B0//	0x7FF751B13A70//	0x7FF73DB03A70//	0x7FF700223390//	0x7FF761B67B00//	0x7FF6D7FB76B0//	0x7FF68B7FCD20//	0x7FF7CEFFE150//	0x7FF7F84BA410//	0x7FF728DA9690//	0x7FF606F23350//	0x7FF74B5751B0//	0x7FF6F18C65E0//	0x7FF7A7C6DBA0//	0x7FF7EF7BDAC0//	0x7FF6BFF9DB20//	0x7FF6F52082B0//	0x7FF719AD2810//	0x7FF7AB342A20//	0x7FF78B5ECDF0//	0x7FF7399FCCF0//	0x7FF6AFD2E430//	0x7FF656CF17E0//	0x7FF788681450//	0x7FF67A1D1020//	0x7FF74BC0EBD0//	0x7FF61EB3E360//	0x7FF7E9118440//	0x7FF6274127A0//	0x7FF653E99080//	0x7FF700E48F60//	0x7FF7B5EBFA60//	0x7FF6F71EF9E0//0x7FF69C350730//0x7FF6EA4264A0//0x7FF7B885E340	0x7FF70F530410	0x7FF6D8FF0430	0x7FF7F4B901D0	0x7FF6B1137DA0	0x7FF6CA6C00F0	0x7FF70C222700	0x7FF7162BA5C0	0x7FF7F05A8BC0	0x7FF71C70BA50	0x7FF75F62AEF0	0x7FF69EE1FB60	0x7FF673C3FAA0	0x7FF691955080	//0x7FF6FDA094B0	//0x7FF69FA0D490	//0x7FF74F6BD3B0	//0x7FF7591EE690	//0x141F42700//0x141F31E90//0x141EFDDF0//
#define ADDR_UNSLEEPMODE				44//0x7FF730A7EC10	//0x7FF6ACDBB5B0	//0x7FF7913E4C90	//0x7FF70200A5D0	//0x7FF724F43FE0	//0x7FF6F4C04310	//0x7FF6E7794250	//0x7FF758B22540	//0x7FF6814A24D0	//0x7FF6D652C6F0	//0x7FF66AA06880	//0x7FF76136C460	//0x7FF798A6C430	//0x7FF68B48D2D0	//0x7FF7F731D1B0	//0x7FF79428D200	//0x7FF6A8476280	//0x7FF61DA26380	//0x7FF63B4FB560//	0x7FF69CF1B4D0//	0x7FF6DFD307B0//	0x7FF677D2B850//	0x7FF7E2AF9BF0//	0x7FF75CEDA520//	0x7FF7E13AA280//	0x7FF6C255A150//	0x7FF65D1FA050//	0x7FF6E547AB80//	0x7FF676D011C0//	0x7FF729F8E030//	0x7FF626AF8FD0//	0x7FF671F15CB0//	0x7FF78CCB5830//	0x7FF7EC2656F0//	0x7FF7A318DC00//	0x7FF6BFA2DC90//	0x7FF627AD10C0//	0x7FF6AA9388E0//	0x7FF75A54DDA0//	0x7FF6325CD8A0//	0x7FF7823548B0//	0x7FF6747F8A90//	0x7FF62B989320//	0x7FF6EEE08740//	0x7FF6B48B9680//	0x7FF6F1168E00//	0x7FF61AEC87F0//	0x7FF7599199E0//	0x7FF76EDB3D40//	0x7FF7E3DF3FB0//	0x7FF61E9C6560//	0x7FF6606A0E00//	0x7FF64BB6A720//	0x7FF73B11A710//	0x7FF6BD5D4FD0//	0x7FF671174CA0//	0x7FF6B55C1A70//	0x7FF7843A22D0//	0x7FF6ECD2A790//	0x7FF6F4B68A90//	0x7FF7B6A4F0A0//	0x7FF69B26F0A0//	0x7FF75D238800//	0x7FF73BE58310//	0x7FF750924070//	0x7FF73C914070//	0x7FF6FF037EA0//	0x7FF7609C66C0//	0x7FF6D6E16250//	0x7FF68A663EE0//	0x7FF7CDE5ECB0//	0x7FF7F732FFB0//	0x7FF727C1F530//	0x7FF605D9B180//	0x7FF74A3EF0A0//	0x7FF6F071F700//	0x7FF7A6AB0820//	0x7FF7EE600770//	0x7FF6BEDE07A0//	0x7FF6F4069E30//	0x7FF718968830//	0x7FF7AA1D8890//	0x7FF78A489A80//	0x7FF738899950//	0x7FF6AEBD1AA0//	0x7FF655B9E630//	0x7FF78752E370//	0x7FF67908C910//	0x7FF74AABF3E0//	0x7FF61D9CA910//	0x7FF7E7FA0ED0//	0x7FF6262D8BA0//	0x7FF652D33AB0//	0x7FF6FFD281E0//	0x7FF7B4D8CA50//	0x7FF6F60BCA00//0x7FF69B22F1E0//0x7FF6E930D160//0x7FF7B777E090	0x7FF70E42D5F0	0x7FF6D7EED610	0x7FF7F3A8D3B0	0x7FF6B003E5B0	0x7FF6C962E790	0x7FF70B146150	0x7FF71522E6F0	0x7FF7EF525830	0x7FF71B67B210	0x7FF75E5BE620	0x7FF69DDA7E90	0x7FF672BC7DD0	0x7FF6908F2BF0	//0x7FF6FC997450	//0x7FF69E9C2980	//0x7FF74E672960	//0x7FF7581AAF60	//0x140EBB950//0x140E9DCC0//
#define ADDR_ADDSKILLSHOOT				45//0x7FF72FCC5B10	//0x7FF72FA0FEA0	//0x7FF72FCC5B10	//0x7FF6AC004620	//0x7FF79063FC60	//0x7FF70126D580	//0x7FF7241CA6A0	//0x7FF6F3E9F900	//0x7FF6E6A2F820	//0x7FF757DD8970	//0x7FF680758970	//0x7FF6D57E6060	//0x7FF669CE2C90	//0x7FF76064AD80	//0x7FF797D4AD80	//0x7FF68A7C6A50	//0x7FF7F6656930	//0x7FF7935C69C0	//0x7FF6A77B95F0	//0x7FF61CD69610	//0x7FF63A811720//	0x7FF69C2316A0//	0x7FF6DF03FB10//	0x7FF67706D1C0//	0x7FF7E1E5CBB0//	0x7FF75C215490//	0x7FF7E06E52E0//	0x7FF6C18951C0//	0x7FF65C5328E0//	0x7FF6E47BEEA0//	0x7FF67604CCF0//	0x7FF7292DB2D0//	0x7FF625E49540//	0x7FF6712F4F30//	0x7FF78C07F820//	0x7FF7EB62F770//	0x7FF7A256A7F0//	0x7FF6BEE0A880//	0x7FF626EB5820//	0x7FF6A9D37120//	0x7FF759969C90//	0x7FF6319E9C60//	0x7FF781780790//	0x7FF673C21B60//	0x7FF62AD48200//	0x7FF6EE1C79E0//	0x7FF6B3CCD800//	0x7FF6F05868D0//	0x7FF61A2E6750//	0x7FF758D98780//	0x7FF76E23F520//	0x7FF7E3269D10//	0x7FF61DE46BD0//	0x7FF65FB145C0//	0x7FF64B024D50//	0x7FF73A5D4D50//	0x7FF6BCA9C3C0//	0x7FF67063C0D0//	0x7FF6B4ACEC40//	0x7FF7838B4050//	0x7FF6EC20B5F0//	0x7FF6F4058700//	0x7FF7B5F99620//	0x7FF69A7B9650//	0x7FF75C761F20//	0x7FF73B381F10//	0x7FF74FEC22D0//	0x7FF73BEB22D0//	0x7FF6FE5DC200//	0x7FF75FF32CE0//	0x7FF6D6382D30//	0x7FF689BFBFC0//	0x7FF7CD432560//	0x7FF7F690C960//	0x7FF7271FC590//	0x7FF60538A1B0//	0x7FF7499E6800//	0x7FF6EFD55260//	0x7FF7A60D56A0//	0x7FF7EDC25700//	0x7FF6BE405670//	0x7FF6F36824E0//	0x7FF717F96D60//	0x7FF7A9806D90//	0x7FF789AC2850//	0x7FF737ED2820//	0x7FF6AE24DA70//	0x7FF65522A780//	0x7FF786BBA670//	0x7FF67879CE20//	0x7FF74A21A600//	0x7FF61D18FB60//	0x7FF7E77A0810//	0x7FF625ACABE0//	0x7FF652581800//	0x7FF6FF53EB60//	0x7FF7B45E5A50//	0x7FF6F5915A90//0x7FF69AA8F510//0x7FF6E8B93FB0//0x7FF7B6FE92E0	0x7FF70DCDEE10	0x7FF6D779EE30	0x7FF7F333EBE0	0x7FF6AF8F9550	0x7FF6C8EE69F0	0x7FF70AA698B0	0x7FF714B30400	0x7FF7EEE40530	0x7FF71AFDCF90	0x7FF75DF225A0	0x7FF69D72EAA0	0x7FF67254EAA0	0x7FF690279EA0	//0x7FF6FC364220	//0x7FF69E38BD80	//0x7FF74E03BD70	//0x7FF757B898D0	//0x140904A00//0x140912DA0//0x14090E6A0//
#define ADDR_ADDPLAYER					46//0x7FF72FA0FEA0	//0x7FF6ABD4F710	//0x7FF79038D5B0	//0x7FF700FBC130	//0x7FF723F08CD0	//0x7FF6F3BE4B60	//0x7FF6E6774AF0	//0x7FF757B20B40	//0x7FF6804A0B40	//0x7FF6D552F820	//0x7FF669A3FB30	//0x7FF7603AA180	//0x7FF797AAA190	//0x7FF68A5293E0	//0x7FF7F63B93E0	//0x7FF793329470	//0x7FF6A7525EB0	//0x7FF61CAD5ED0	//0x7FF63A57EF40//	0x7FF69BF9EEC0//	0x7FF6DEDCAA60//	0x7FF676DE8770//	0x7FF7E1C46640//	0x7FF75C002590//	0x7FF7E04D24A0//	0x7FF6C1682470//	0x7FF65C321C70//	0x7FF6E45AFF70//	0x7FF675E3E970//	0x7FF7290CE960//	0x7FF625C3E060//	0x7FF6710AC250//	0x7FF78BE38E40//	0x7FF7EB3E8E20//	0x7FF7A2306EB0//	0x7FF6BEBA6EB0//	0x7FF626C55A80//	0x7FF6A9AE0A90//	0x7FF7596FEFD0//	0x7FF63177F000//	0x7FF78151B970//	0x7FF6739C8440//	0x7FF62AB52D30//	0x7FF6EDFD2A40//	0x7FF6B3ADA7D0//	0x7FF6F0398690//	0x7FF61A0F8510//	0x7FF758B775B0//	0x7FF76E023ED0//	0x7FF7E304F1F0//	0x7FF61DC31430//	0x7FF65F900480//	0x7FF64AE1AA20//	0x7FF73A3CAA20//	0x7FF6BC898E20//	0x7FF670438E00//	0x7FF6B48D69D0//	0x7FF7836CF620//	0x7FF6EC02D8F0//	0x7FF6F3E7CA40//	0x7FF7B5DD12E0//	0x7FF69A5F12E0//	0x7FF75C59BBF0//	0x7FF73B1BBBF0//	0x7FF74FD05140//	0x7FF73BCF5140//	0x7FF6FE4217A0//	0x7FF75FD6BEE0//	0x7FF6D61BBEB0//	0x7FF689A35FC0//	0x7FF7CD272320//	0x7FF7F674E9D0//	0x7FF72703E820//	0x7FF6051CD560//	0x7FF74982BB80//	0x7FF6EFB92120//	0x7FF7A5F5FAD0//	0x7FF7EDAAFB30//	0x7FF6BE28FAA0//	0x7FF6F350DEE0//	0x7FF717E31B20//	0x7FF7A96A1B50//	0x7FF789960700//	0x7FF737D706D0//	0x7FF6AE0BC8F0//	0x7FF65509C530//	0x7FF786A2C500//	0x7FF6786279B0//	0x7FF74A0AD910//	0x7FF61D01BB60//	0x7FF7E763A220//	0x7FF6259631C0//	0x7FF652416190//	0x7FF6FF400280//	0x7FF7B44AAB40//	0x7FF6F57DAB80//0x7FF69A956820//0x7FF6E8A26050//0x7FF7B6E83770	0x7FF70DB719F0	0x7FF6D7631A10	0x7FF7F31D17C0	0x7FF6AF78E510	0x7FF6C8DB0B20	0x7FF70A93B740	0x7FF714A08D70	0x7FF7EED16670	0x7FF71AEB65E0	0x7FF75DE09260	0x7FF69D661540	0x7FF672481540	0x7FF6901AEC30	//0x7FF6FC27C780	//0x7FF69E2A6AB0	//0x7FF74DF56AA0	//0x7FF757AA4070	//0x140823150//0x1407FAFC0//0x1407F6020//
#define ADDR_DAILYPACKAGE_TEMP			47//0x7FF733664F00	//0x7FF6AF9A09F0	//0x7FF793FC2410	//0x7FF704BE2CA0	//0x7FF727B15E40	//0x7FF6F77CC090	//0x7FF6EA35C090	//0x7FF75B6E4160	//0x7FF684064160	//0x7FF6D90E0880	//0x7FF66D5B5D70	//0x7FF763F09BF0	//0x7FF79B609C30	//0x7FF68E06C140	//0x7FF7F9EFB0F0	//0x7FF796E6C100	//0x7FF6AB03EDF0	//0x7FF6205EEDF0	//0x7FF63E085760//	0x7FF69FAA5710//	0x7FF6E28B1F80//	0x7FF67A8A0990//	0x7FF7E5684780//	0x7FF75FA1AEB0//	0x7FF7E3EEAEB0//	0x7FF6C509AE90//	0x7FF65FD356C0//	0x7FF6E7FAD010//	0x7FF6798353D0//	0x7FF72CAC16E0//	0x7FF62962AF40//	0x7FF674A83D30//	0x7FF78F820910//	0x7FF7EEDD0900//	0x7FF7A5CE5130//	0x7FF6C2584F70//	0x7FF62A629560//	0x7FF6AD482FE0//	0x7FF75D091B00//	0x7FF635111780//	0x7FF784E90F20//	0x7FF67731D0A0//	0x7FF62E47C920//	0x7FF6F18FB8A0//	0x7FF6B73E9220//	0x7FF6F3C94A20//	0x7FF61D9F4A10//	0x7FF75C4347F0//	0x7FF7718C5F00//	0x7FF7E68C8460//	0x7FF6214ADA50//	0x7FF66316AB00//	0x7FF64E638ED0//	0x7FF73DBE8F40//	0x7FF6C006C4F0//	0x7FF673C0C4F0//	0x7FF6B8096D00//	0x7FF786E6D0F0//	0x7FF6EF7AD250//	0x7FF6F75E6360//	0x7FF7B94FDD60//	0x7FF69DD1DD60//	0x7FF75FC937F0//	0x7FF73E8B37F0//	0x7FF7533B8110//	0x7FF73F3A8110//	0x7FF701AC70C0//	0x7FF7633FDAE0//	0x7FF6D984DAC0//	0x7FF68D08F720//	0x7FF7D088B8E0//	0x7FF7F9D441F0//	0x7FF72A633090//	0x7FF6087ACF38//	0x7FF74CDFDC38//	0x7FF6F314A050//	0x7FF7A94E9F10//	0x7FF7F1039F10//	0x7FF6C1819F40//	0x7FF6F6A828A0//	0x7FF71B004F80//	0x7FF7AC874FC0//	0x7FF78CB1C650//	0x7FF73AF2C610//	0x7FF6B125ADF0//	0x7FF6582190C8//	0x7FF789BA9088//	0x7FF67B6EA280//	0x7FF74D11A870//	0x7FF620042530//	0x7FF7EA613F40//	0x7FF628907B08//	0x7FF655386808//	0x7FF70232DC38//	0x7FF7B739D298//	0x7FF6F86CD298//0x7FF69D829448//0x7FF6EB8FBDB8//0x7FF7B9D2E7D8	0x7FF7109FEA48	0x7FF6DA4BEA38	0x7FF7F605EA48	0x7FF6B2602CF8	0x7FF6CBB71EB0	0x7FF70D6C6700	0x7FF717759190	0x7FF7F1A443C0	0x7FF71DBA3C70	0x7FF760ABDF70	0x7FF6A02A57B0	0x7FF6750C5790	0x7FF692DD8E10	//0x7FF6FEE88560	//0x7FF6A0E88EC8	//0x7FF750B38EC8	//0x7FF75A667628	//0x1433B5F18//0x1433A7AA8//
#define ADDR_DOUBLEODINPASS_TEMP		48//0x7FF733667170	//0x7FF6AF9A2C60	//0x7FF793FC4680	//0x7FF704BE4F10	//0x7FF727B180B0	//0x7FF6F77CE300	//0x7FF6EA35E300	//0x7FF75B6E63D0	//0x7FF6840663D0	//0x7FF6D90E2AF0	//0x7FF66D5B7FE0	//0x7FF763F0BE60	//0x7FF79B60BEA0	//0x7FF68E06E3B0	//0x7FF7F9EFD360	//0x7FF796E6E370	//0x7FF6AB041060	//0x7FF6205F1060	//0x7FF63E0879D0//	0x7FF69FAA7980//	0x7FF6E28B41F0//	0x7FF67A8A2C00//	0x7FF7E568ABB0//	0x7FF75FA21280//	0x7FF7E3EF1280//	0x7FF6C50A1260//	0x7FF65FD3BB28//	0x7FF6E7FB3478//	0x7FF67983B838//	0x7FF72CAC7B48//	0x7FF6296313B0//	0x7FF674A8A1A0//	0x7FF78F826DA0//	0x7FF7EEDD6D90//	0x7FF7A5CEB5D0//	0x7FF6C258B410//	0x7FF62A62B7D0//	0x7FF6AD485250//	0x7FF75D093D70//	0x7FF6351139D0//	0x7FF784E93170//	0x7FF67731F2F0//	0x7FF62E47EB70//	0x7FF6F18FDAF0//	0x7FF6B73EB470//	0x7FF6F3C96C70//	0x7FF61D9F6C60//	0x7FF75C436A40//	0x7FF7718C8150//	0x7FF7E68CA6B0//	0x7FF6214AFCA0//	0x7FF6631710C0//	0x7FF64E63F498//	0x7FF73DBEF508//	0x7FF6C0072AD0//	0x7FF673C12AD0//	0x7FF6B809D058//	0x7FF786E6F340//	0x7FF6EF7AF4A0//	0x7FF6F75E85B0//	0x7FF7B9504030//	0x7FF69DD24030//	0x7FF75FC99AB0//	0x7FF73E8B9AB0//	0x7FF7533BA360//	0x7FF73F3AA360//	0x7FF701AC9310//	0x7FF7633FFD30//	0x7FF6D984FD10//	0x7FF68D091970//	0x7FF7D088DB30//	0x7FF7F9D45E40//	0x7FF72A634CE0//	0x7FF6087AEB80//	0x7FF74CDFF880//	0x7FF6F314BCA0//	0x7FF7A94EBB50//	0x7FF7F103BB50//	0x7FF6C181BB80//	0x7FF6F6A844E0//	0x7FF71B006BC0//	0x7FF7AC876C00//	0x7FF78CB1E290//	0x7FF73AF2E250//	0x7FF6B125CA30//	0x7FF65821AD10//	0x7FF789BAACD0//	0x7FF67B6F00F0//	0x7FF74D11C4B0//	0x7FF620044170//	0x7FF7EA615B80//	0x7FF628909728//	0x7FF65538C668//	0x7FF702333AB8//	0x7FF7B73A30C8//	0x7FF6F86D30C8//0x7FF69D82F1F8//0x7FF6EB902028//0x7FF7B9D34490	0x7FF710A04718	0x7FF6DA4C4708	0x7FF7F6064718	0x7FF6B26089B0	0x7FF6CBB73AA0	0x7FF70D6C82F0	0x7FF71775AD80	0x7FF7F1A45FB0	0x7FF71DBA5860	0x7FF760ABFB60	0x7FF6A02A73C8	0x7FF6750C73A8	0x7FF692DDAA28	//0x7FF6FEE8A178	//0x7FF6A0E8AA20	//0x7FF750B3AA20	//0x7FF75A669180	//0x1433BBCA8//0x1433AD858//
#define ADDR_GETEQUIPITEM				49//0x7FF72FA7B9A0	//0x7FF6ABDBB1B0	//0x7FF7903F9050	//0x7FF701027A40	//0x7FF723F74470	//0x7FF6F3C4FA50	//0x7FF6E67DF9E0	//0x7FF757B8B770	//0x7FF68050B770	//0x7FF6D5599950	//0x7FF669A9E000	//0x7FF760408260	//0x7FF797B08270	//0x7FF68A587BD0	//0x7FF7F6417BD0	//0x7FF793387C60	//0x7FF6A7581BF0	//0x7FF61CB31C10	//0x7FF63A5DAA50//	0x7FF69BFFA9D0//	0x7FF6DEE26040//	0x7FF676E15BD0//	0x7FF7E1C71980//	0x7FF75C02D3C0//	0x7FF7E04FD2D0//	0x7FF6C16AD2A0//	0x7FF65C34BA70//	0x7FF6E45D9D70//	0x7FF675E68870//	0x7FF7290F8860//	0x7FF625C67E20//	0x7FF6710D4EE0//	0x7FF78BE61830//	0x7FF7EB411810//	0x7FF7A236A440//	0x7FF6BEC0A4D0//	0x7FF626CB9310//	0x7FF6A9B41A70//	0x7FF75975FA20//	0x7FF6317DFA50//	0x7FF78157B2B0//	0x7FF673A27B80//	0x7FF62ABB19A0//	0x7FF6EE031660//	0x7FF6B3B38CC0//	0x7FF6F03F66F0//	0x7FF61A156570//	0x7FF758BD2940//	0x7FF76E07D700//	0x7FF7E30AA4D0//	0x7FF61DC8A350//	0x7FF65F9594D0//	0x7FF64AE73820//	0x7FF73A423820//	0x7FF6BC8EF950//	0x7FF67048F930//	0x7FF6B492CF60//	0x7FF7836F8850//	0x7FF6EC0559A0//	0x7FF6F3EA4AC0//	0x7FF7B5DF34C0//	0x7FF69A6134C0//	0x7FF75C5BDCD0//	0x7FF73B1DDCD0//	0x7FF74FD25A20//	0x7FF73BD15A20//	0x7FF6FE441A90//	0x7FF75FDC7E60//	0x7FF6D6217E20//	0x7FF689A91CE0//	0x7FF7CD2CBAB0//	0x7FF7F67A7E80//	0x7FF727097C00//	0x7FF605227F60//	0x7FF749885E70//	0x7FF6EFBB8BC0//	0x7FF7A5F863C0//	0x7FF7EDAD6420//	0x7FF6BE2B6390//	0x7FF6F3534750//	0x7FF717E57650//	0x7FF7A96C7680//	0x7FF7899859C0//	0x7FF737D95990//	0x7FF6AE0E1390//	0x7FF6550C02F0//	0x7FF786A502B0//	0x7FF6786488C0//	0x7FF74A0CDD00//	0x7FF61D03AE50//	0x7FF7E765A1E0//	0x7FF625982C50//	0x7FF652435A70//	0x7FF6FF41EA20//	0x7FF7B44C8D10//	0x7FF6F57F8D50//0x7FF69A974790//0x7FF6E8A4C0F0//0x7FF7B6EA7B70	0x7FF70DB96100	0x7FF6D7656120	0x7FF7F31F5ED0	0x7FF6AF7B2BF0	0x7FF6C8DD3520	0x7FF70A95E1B0	0x7FF714A29D60	0x7FF7EED3AC60	0x7FF71AED91D0	0x7FF75DE30D00	0x7FF69D6885B0	0x7FF6724A85B0	0x7FF6901D6DE0	//0x7FF6FC2A4820	//0x7FF69E2CE5A0	//0x7FF74DF7E590	//0x7FF757ACBCF0	//0x140848B80//0x14081F620//
#define ADDR_ISEQUIPITEMCOMPARE			50//0x7FF72FA8B7A0	//0x7FF6ABDCB000	//0x7FF790408EA0	//0x7FF701037890	//0x7FF723F842C0	//0x7FF6F3C5FC90	//0x7FF6E67EFC20	//0x7FF757B9B9F0	//0x7FF68051B9F0	//0x7FF6D55A9BD0	//0x7FF669AACCF0	//0x7FF760416F50	//0x7FF797B16F60	//0x7FF68A5968C0	//0x7FF7F64268C0	//0x7FF793396950	//0x7FF6A758FDC0	//0x7FF61CB3FDE0	//0x7FF63A5E8C20//	0x7FF69C008BA0//	0x7FF6DEE39840//	0x7FF676E31450//	0x7FF7E1C8CD10//	0x7FF75C048310//	0x7FF7E0518220//	0x7FF6C16C8240//	0x7FF65C3668A0//	0x7FF6E45F4600//	0x7FF675E83040//	0x7FF729113030//	0x7FF625C824B0//	0x7FF6710EEF50//	0x7FF78BE7B7A0//	0x7FF7EB42B780//	0x7FF7A2378FF0//	0x7FF6BEC19080//	0x7FF626CC7EC0//	0x7FF6A9B513A0//	0x7FF75976F3B0//	0x7FF6317EF3E0//	0x7FF78158AB30//	0x7FF673A370E0//	0x7FF62ABC0FE0//	0x7FF6EE0407F0//	0x7FF6B3B47EF0//	0x7FF6F0405900//	0x7FF61A165780//	0x7FF758BE1960//	0x7FF76E08C3D0//	0x7FF7E30BE2A0//	0x7FF61DC9C050//	0x7FF65F96B1D0//	0x7FF64AE85510//	0x7FF73A435510//	0x7FF6BC900220//	0x7FF6704A0200//	0x7FF6B493D6A0//	0x7FF78370F760//	0x7FF6EC06C720//	0x7FF6F3EBB790//	0x7FF7B5E09EF0//	0x7FF69A629EF0//	0x7FF75C5D4520//	0x7FF73B1F4520//	0x7FF74FD3A9E0//	0x7FF73BD2A9E0//	0x7FF6FE456990//	0x7FF75FDD78D0//	0x7FF6D6227890//	0x7FF689AA1750//	0x7FF7CD2DA880//	0x7FF7F67B67F0//	0x7FF7270A6520//	0x7FF605236A90//	0x7FF749894B00//	0x7FF6EFBCB990//	0x7FF7A5F99070//	0x7FF7EDAE90D0//	0x7FF6BE2C9040//	0x7FF6F3547350//	0x7FF717E69DA0//	0x7FF7A96D9DD0//	0x7FF789997FD0//	0x7FF737DA7FA0//	0x7FF6AE0F39A0//	0x7FF6550D2720//	0x7FF786A626E0//	0x7FF67865A310//	0x7FF74A0DF0B0//	0x7FF61D04C6A0//	0x7FF7E766BD10//	0x7FF625994490//	0x7FF65244B9A0//	0x7FF6FF4347B0//	0x7FF7B44DE370//	0x7FF6F580E3B0//0x7FF69A989CE0//0x7FF6E8A5C8E0//0x7FF7B6EB8250	0x7FF70DBA6610	0x7FF6D7666630	0x7FF7F32063E0	0x7FF6AF7C2FA0	0x7FF6C8DE2700	0x7FF70A96D030	0x7FF714A38330	0x7FF7EED49DF0	0x7FF71AEECD50	0x7FF75DE3FF80	0x7FF69D697690	0x7FF6724B7690	0x7FF6901E6260	//0x7FF6FC2B3BC0	//0x7FF69E2DD9D0	//0x7FF74DF8D9C0	//0x7FF757ADAB40	//0x1408577A0//0x14082CD60//
#define ADDR_GETITEMCATEOGORY			51//0x7FF72FA80C50	//0x7FF6ABDC04B0	//0x7FF7903FE350	//0x7FF70102CD40	//0x7FF723F79770	//0x7FF6F3C54DF0	//0x7FF6E67E4D80	//0x7FF757B90B50	//0x7FF680510B50	//0x7FF6D559ED30	//0x7FF669AA24E0	//0x7FF76040C740	//0x7FF797B0C750	//0x7FF68A58C0B0	//0x7FF7F641C0B0	//0x7FF79338C140	//0x7FF6A7585A10	//0x7FF61CB35A30	//0x7FF63A5DE870//	0x7FF69BFFE7F0//	0x7FF6DEE2A3C0//	0x7FF676E1AD50//	0x7FF7E1C76A00//	0x7FF75C032180//	0x7FF7E0502090//	0x7FF6C16B20B0//	0x7FF65C350710//	0x7FF6E45DE5F0//	0x7FF675E6D0F0//	0x7FF7290FD0E0//	0x7FF625C6C6A0//	0x7FF6710D9740//	0x7FF78BE66090//	0x7FF7EB416070//	0x7FF7A236EDB0//	0x7FF6BEC0EE40//	0x7FF626CBDC80//	0x7FF6A9B46200//	0x7FF7597641B0//	0x7FF6317E41E0//	0x7FF78157F970//	0x7FF673A2BF20//	0x7FF62ABB5EA0//	0x7FF6EE0356D0//	0x7FF6B3B3CD30//	0x7FF6F03FA760//	0x7FF61A15A5E0//	0x7FF758BD67C0//	0x7FF76E081580//	0x7FF7E30AE8C0//	0x7FF61DC8DD10//	0x7FF65F95CE90//	0x7FF64AE771D0//	0x7FF73A4271D0//	0x7FF6BC8F2590//	0x7FF670492570//	0x7FF6B492FBA0//	0x7FF7836FBB90//	0x7FF6EC058C40//	0x7FF6F3EA7D40//	0x7FF7B5DF6200//	0x7FF69A616200//	0x7FF75C5C0A10//	0x7FF73B1E0A10//	0x7FF74FD285D0//	0x7FF73BD185D0//	0x7FF6FE444640//	0x7FF75FDCA600//	0x7FF6D621A5C0//	0x7FF689A94480//	0x7FF7CD2CDBF0//	0x7FF7F67A9FC0//	0x7FF727099D40//	0x7FF60522A0A0//	0x7FF749887FB0//	0x7FF6EFBBB430//	0x7FF7A5F88C30//	0x7FF7EDAD8C90//	0x7FF6BE2B8C00//	0x7FF6F3536FC0//	0x7FF717E59EC0//	0x7FF7A96C9EF0//	0x7FF789988210//	0x7FF737D981E0//	0x7FF6AE0E3BE0//	0x7FF6550C2B40//	0x7FF786A52B00//	0x7FF67864AD10//	0x7FF74A0CFDB0//	0x7FF61D03CE70//	0x7FF7E765C0A0//	0x7FF625984B10//	0x7FF652437D10//	0x7FF6FF420CC0//	0x7FF7B44CAFB0//	0x7FF6F57FAFF0//0x7FF69A976A30//0x7FF6E8A4E120//0x7FF7B6EA9B60	0x7FF70DB980F0	0x7FF6D7658110	0x7FF7F31F7EC0	0x7FF6AF7B4BA0	0x7FF6C8DD4DB0	0x7FF70A95FC40	0x7FF714A2B740	0x7FF7EED3C640	0x7FF71AEDAC70	0x7FF75DE32C00	0x7FF69D68A4B0	0x7FF6724AA4B0	0x7FF6901D8CB0	//0x7FF6FC2A66F0	//0x7FF69E2D0470	//0x7FF74DF80460	//0x7FF757ACDB80	//0x140849DE0//0x140820880//
#define ADDR_CLOSEUI					52//0x7FF73006CAA0	//0x7FF6AC3AB2B0	//0x7FF7909E1680	//0x7FF70160DBE0	//0x7FF7245625C0	//0x7FF6F422FF20	//0x7FF6E6DBFE60	//0x7FF75816FBB0	//0x7FF680AEFB40	//0x7FF6D5B7B5A0	//0x7FF66A072A70	//0x7FF7609D9FE0	//0x7FF7980D9FE0	//0x7FF68AB4FD20	//0x7FF7F69DFC00	//0x7FF79394FC90	//0x7FF6A7B3D6C0	//0x7FF61D0ED710	//0x7FF63AB92B70//	0x7FF69C5B2B90//	0x7FF6DF3C57C0//	0x7FF6773F7940//	0x7FF7E2242130//	0x7FF75C5F46F0//	0x7FF7E0AC4570//	0x7FF6C1C74420//	0x7FF65C90FD10//	0x7FF6E4B99310//	0x7FF676424AC0//	0x7FF7296B25F0//	0x7FF6262218F0//	0x7FF671666F20//	0x7FF78C4195D0//	0x7FF7EB9C9490//	0x7FF7A2900F20//	0x7FF6BF1A0FB0//	0x7FF62724B1F0//	0x7FF6AA0C6C90//	0x7FF759CBB420//	0x7FF631D3B3F0//	0x7FF781ACE5E0//	0x7FF673F6F500//	0x7FF62B0E7520//	0x7FF6EE566BC0//	0x7FF6B406F060//	0x7FF6F0925620//	0x7FF61A6854A0//	0x7FF759112A80//	0x7FF76E5B6760//	0x7FF7E35D8870//	0x7FF61E1B83D0//	0x7FF65FE85340//	0x7FF64B393D90//	0x7FF73A943D90//	0x7FF6BCE02E40//	0x7FF6709A2B50//	0x7FF6B4E39A70//	0x7FF783C1F8A0//	0x7FF6EC572F20//	0x7FF6F43BEDA0//	0x7FF7B62BA8C0//	0x7FF69AADA8F0//	0x7FF75CA88F10//	0x7FF73B6A8A20//	0x7FF7501E16A0//	0x7FF73C1D16A0//	0x7FF6FE8F96D0//	0x7FF760247C50//	0x7FF6D6697CA0//	0x7FF689F072C0//	0x7FF7CD73A960//	0x7FF7F6C11680//	0x7FF727500C30//	0x7FF60568CD60//	0x7FF749CE9A50//	0x7FF6F005B1E0//	0x7FF7A6434C20//	0x7FF7EDF84C50//	0x7FF6BE764BC0//	0x7FF6F39A6410//	0x7FF7182AB7B0//	0x7FF7A9B1B7E0//	0x7FF789DD4000//	0x7FF7381E3FB0//	0x7FF6AE5412A0//	0x7FF65551B1D0//	0x7FF786EAB0C0//	0x7FF678A43170//	0x7FF74A4BBB90//	0x7FF61D428480//	0x7FF7E7A2E5B0//	0x7FF625D20030//	0x7FF6527C6280//	0x7FF6FF7C03E0//	0x7FF7B485B360//	0x7FF6F5B8B310//0x7FF69AD02780//0x7FF6E8DBFCB0//0x7FF7B7212A00	0x7FF70DF03F20	0x7FF6D79C3F40	0x7FF7F3563CF0	0x7FF6AFB19490	0x7FF6C91069F0	0x7FF70AC84A00	0x7FF714D45BC0	0x7FF7EF049700	0x7FF71B1ABE10	0x7FF75E0E48E0	0x7FF69D929E70	0x7FF672749E70	0x7FF690471660	//0x7FF6FC553000	//0x7FF69E573320	//0x7FF74E223310	//0x7FF757D6FDB0
#define OFFSET_EVENTITEMINFO				0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000428//	0x000000000428//	0x000000000428//	0x000000000420//	0x000000000420//	0x000000000420//	0x000000000420//0x000000000420//0x000000000420//0x000000000420//0x000000000420	//0x000000000420	//0x000000000420	//0x000000000420	//0x000000000420	//0x000000418//0x000000418//
#define OFFSET_EVENTITEMMAX					0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//	0x000000000014//0x000000000014//0x000000000014//0x000000000014//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000000014	//0x000000014//0x000000014//
#define OFFSET_EVENTITEMCURCNT				0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080	//0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000080//	0x000000000070//0x000000000070//0x000000000070//0x000000000060//0x000000000060	//0x000000000060	//0x000000000060	//0x000000000060	//0x000000000060	//0x000000060//0x000000060//
//											0x7FF73028E904	//0x7FF6AC5CD434	//0x7FF790C021D4	//0x7FF70182E8F4	//0x7FF72478C834	//0x7FF6F4456CE4	//0x7FF6E6FE6C24	//0x7FF758396A94	//0x7FF680D16A24	//0x7FF6D5DA2184	//0x7FF66A2922B4	//0x7FF760C028E4	//0x7FF7983028E4	//0x7FF68AD795E4	//0x7FF7F6C094C4	//0x7FF793B79544	//0x7FF6A7D66784	//0x7FF61D3167D4	//0x7FF63ADB92D4		0x7FF69C7D9244		7FF6DF5F8434//		7FF6775E1D74////	//7FF7E2421054//	//7FF75C791C64//	//7FF7E0C61AE4//	//7FF6C1E119B4//	//7FF65CAAA6A4//	//7FF6E4D338B4//	//7FF6765BEC04//	//7FF72984C224//	//7FF6263B9F24//	//7FF671841EE4//	//7FF78C6004B4//	//7FF7EBBB0374//	//7FF7A2AE6BB4//	//7FF6BF386C44//	//7FF627430D64//	//7FF6AA2AC274//	//7FF759E9F594//	//7FF631F1F2F4//	//7FF781CB29C4//	//7FF67414F524//	//7FF62B2C7374//	//7FF6EE746A04//	//7FF6B4252634//	//7FF6F0B07EC4//	//7FF61A8678B4//	//7FF7592AB7A4//	//7FF76E74E5D4//	//7FF7E3778059//	7FF61E357869//	//7FF6600245E9//	//7FF64B53CFF9//	//7FF73AAECFF9//	//7FF6BCFAF7C9//	//7FF670B4F4D9//	//7FF6B4FE3579//	//7FF783DCA719//	//7FF6EC724FB9//	//7FF6F456D8C6//	//7FF7B645E037//	//7FF69AC7E067//	//7FF75CC29D07//	//7FF73B849817//	//7FF750382857//	//7FF73C372857//	//7FF6FEA9C237//	//7FF7603F57E7//	//7FF6D6845837//	//7FF68A0B8337//	//7FF7CD8E5967//	//7FF7F6DB9FC7//	//7FF7276A9577//	//7FF60582D947//	//7FF749E87B87//	//7FF6F01BA6B7//	//7FF7A65A3877//	//7FF7EE0F37C7//	//7FF6BE8D3717//	//7FF6F3B4C517//	//7FF71844DE77//	//7FF7A9CBDEA7//	//7FF789F75287//	//7FF738385237//	//7FF6AE6A3457//	//7FF65567AF85//	//7FF78700AD15//	//7FF678BAA275//	//7FF74A5DFCE5//	//7FF61D54F5A5//	//7FF7E7B537D5//	//7FF625E39B05//	//7FF6528E16A5//	//7FF6FF8E7455//	//7FF7B4989C64//	//7FF6F5CB9C14////7FF69ADD9FD4////7FF6E8ED9614	//7FF7B73337C4	//7FF70E035114	//7FF6D7AF5134	//7FF7F3694EE4	//7FF6AFC4BAE4	//7FF6C9236394	//7FF70AD60F84	//7FF714E24F64	//7FF7EF1258C4	//7FF71B2CA884	//7FF75E203004	//7FF67281EAC4////7FF690544914	////7FF6FC637D44	////7FF69E651EB4	////7FF74E301EA4	////7FF757E49F54	//140B6C5F4////140B8B906//
													//					//				//                //                      
#define ADDR_SENDMOVEPACKET				53//0x7FF72F8B8760	//0x7FF6ABBF84E0	//0x7FF790237780	//0x7FF700E67030	//0x7FF723DB5C20	//0x7FF6F3A94560	//0x7FF6E66244F0	//0x7FF7579D2F20	//0x7FF680352F20	//0x7FF6D53E15E0	//0x7FF6698FFEA0	//0x7FF76026AC80	//0x7FF79796AC80	//0x7FF68A3EA180	//0x7FF7F627A180	//0x7FF7931EA210	//0x7FF6A73E8400	//0x7FF61C998420	//0x7FF63A4434B0//	0x7FF69BE634A0//	0x7FF6DEC908A0//	0x7FF676CAF500//	0x7FF7E1B0AE30//	0x7FF75BEC8CD0//	0x7FF7E0398C70//	0x7FF6C1548C70//	0x7FF65C1E6E10//	0x7FF6E4475D20//	0x7FF675D05710//	0x7FF728F95260//	0x7FF625B04DC0//	0x7FF670F728E0//	0x7FF78BD01540//	0x7FF7EB2B1520//	0x7FF7A21F0910//	0x7FF6BEA90910//	0x7FF626B40E30//	0x7FF6A99D0E80//	0x7FF7595EFCF0//	0x7FF63166FD20//	0x7FF78140D4D0//	0x7FF6738BA7D0//	0x7FF62AA47F20//	0x7FF6EDEC7CF0//	0x7FF6B39D75D0//	0x7FF6F0296200//	0x7FF619FF6200//	0x7FF758A73F40//	0x7FF76DF225D0//	0x7FF7E2F4F2C0//	0x7FF61DB2D8D0//	0x7FF65F7FCE30//	0x7FF64AD1A2D0//	0x7FF73A2CA2D0//	0x7FF6BC79A2D0//	0x7FF67033A2D0//	0x7FF6B47D8D50//	0x7FF7835D29D0//	0x7FF6EBF311A0//	0x7FF6F3D805C0//	0x7FF7B5CCE4B0//	0x7FF69A4EE4B0//	0x7FF75C49C590//	0x7FF73B0BC590//	0x7FF74FC0A840//	0x7FF73BBFA840//	0x7FF6FE3286D0//	0x7FF75FC925D0//	0x7FF6D60E25A0//	0x7FF6899607A0//	0x7FF7CD1A12D0//	0x7FF7F667EA00//	0x7FF726F6E880//	0x7FF6050FE150//	0x7FF74975C950//	0x7FF6EFAC3CC0//	0x7FF7A5E92920//	0x7FF7ED9E2980//	0x7FF6BE1C2900//	0x7FF6F34416D0//	0x7FF717D6BDF0//	0x7FF7A95DBE20//	0x7FF78989A4F0//	0x7FF737CAA4C0//	0x7FF6ADFF7C40//	0x7FF654FD7780//	0x7FF786967750//	0x7FF6785630F0//	0x7FF749FEBAC0//	0x7FF61CF58BC0//	0x7FF7E753E4A0//	0x7FF625868830//	0x7FF652316C00//	0x7FF6FF303170//	0x7FF7B43AEA40//	0x7FF6F56DEA10//0x7FF69A85DAA0//0x7FF6E8950DD0//0x7FF7B6DB5980	0x7FF70DAA48E0	0x7FF6D75648D0	0x7FF7F31047D0	0x7FF6AF6C2B20	0x7FF6C8CEB100	0x7FF70A8793A0	0x7FF714946F80	0x7FF7EEC536C0	0x7FF71ADF5150	0x7FF75DD40AB0	0x7FF69D59AAC0	0x7FF6723BAAC0	0x7FF6900E9050	//0x7FF6FC1B70B0
#define ADDR_MAKEMOVEPACKET				54//0x7FF72F89C620	//0x7FF6ABBDC470	//0x7FF79021B710	//0x7FF700E4AFC0	//0x7FF723D99BD0	//0x7FF6F3A78B20	//0x7FF6E6608AB0	//0x7FF7579B7510	//0x7FF680337510	//0x7FF6D53C5BF0	//0x7FF6698DC6E0	//0x7FF7602474D0	//0x7FF7979474D0	//0x7FF68A3C69D0	//0x7FF7F62569D0	//0x7FF7931C6A60	//0x7FF6A73C4DC0	//0x7FF61C974DE0	//0x7FF63A420350//	0x7FF69BE40340//	0x7FF6DEC6D7B0//	0x7FF676C8C400//	0x7FF7E1AE7D40//	0x7FF75BEA5BF0//	0x7FF7E0375B90//	0x7FF6C1525B90//	0x7FF65C1C3D80//	0x7FF6E4452F40//	0x7FF675CE2930//	0x7FF728F72580//	0x7FF625AE2150//	0x7FF670F4FFB0//	0x7FF78BCDEC90//	0x7FF7EB28EC70//	0x7FF7A21CDDA0//	0x7FF6BEA6DDA0//	0x7FF626B1E000//	0x7FF6A99AB140//	0x7FF7595CA490//	0x7FF63164A4C0//	0x7FF7813E7CF0//	0x7FF673895030//	0x7FF62AA22940//	0x7FF6EDEA2820//	0x7FF6B39B01B0//	0x7FF6F026F2D0//	0x7FF619FCF2D0//	0x7FF758A4D1B0//	0x7FF76DEFB840//	0x7FF7E2F285B0//	0x7FF61DB06BC0//	0x7FF65F7D6170//	0x7FF64ACF3BF0//	0x7FF73A2A3BF0//	0x7FF6BC770890//	0x7FF670310890//	0x7FF6B47AF0C0//	0x7FF7835A8FB0//	0x7FF6EBF078C0//	0x7FF6F3D56CE0//	0x7FF7B5CA5D40//	0x7FF69A4C5D40//	0x7FF75C473F80//	0x7FF73B093F80//	0x7FF74FBE2310//	0x7FF73BBD2310//	0x7FF6FE3004F0//	0x7FF75FC69640//	0x7FF6D60B9610//	0x7FF689937810//	0x7FF7CD17A6A0//	0x7FF7F66581B0//	0x7FF726F48030//	0x7FF6050D7950//	0x7FF749736390//	0x7FF6EFA97F30//	0x7FF7A5E664C0//	0x7FF7ED9B6520//	0x7FF6BE1964A0//	0x7FF6F3415780//	0x7FF717D45FE0//	0x7FF7A95B6010//	0x7FF7898746D0//	0x7FF737C846A0//	0x7FF6ADFD2090//	0x7FF654FB1C10//	0x7FF786941BE0//	0x7FF67853DB40//	0x7FF749FC69A0//	0x7FF61CF33A20//	0x7FF7E75220B0//	0x7FF62584C630//	0x7FF6522FAA80//	0x7FF6FF2E7590//	0x7FF7B43932F0//	0x7FF6F56C32C0//0x7FF69A8412A0//0x7FF6E8930AE0//0x7FF7B6D95A00	0x7FF70DA848A0	0x7FF6D75448A0	0x7FF7F30E48A0	0x7FF6AF6A2D60	0x7FF6C8CCB6B0	0x7FF70A8599C0	0x7FF7149257E0	0x7FF7EEC320F0	0x7FF71ADCEDC0	0x7FF75DD1AC90	0x7FF69D574FF0	0x7FF672394FF0	0x7FF6900C3680	//0x7FF6FC191B70
#define ADDR_RESETCHARPOS				55//0x7FF731EFD090	//0x7FF6AE238F50	//0x7FF79285DB00	//0x7FF703480C40	//0x7FF7263B61A0	//0x7FF6F6071090	//0x7FF6E8C00FD0	//0x7FF759F8B9E0	//0x7FF68290B970	//0x7FF6D798B7D0	//0x7FF66BE61A60	//0x7FF7627B9B30	//0x7FF799EB9A40	//0x7FF68C91CC50	//0x7FF7F87ACB10	//0x7FF79571CC50	//0x7FF6A98F41E0	//0x7FF61EEA4340	//0x7FF63C93EC30//	0x7FF69E35EBA0//	0x7FF6E116E9D0//	0x7FF6791641A0//	0x7FF7E3F5EAC0//	0x7FF75E2FD510//	0x7FF7E27CD150//	0x7FF6C397D030//	0x7FF65E616090//	0x7FF6E688F360//	0x7FF678118890//	0x7FF72B3A48A0//	0x7FF627F0E440//	0x7FF673369650//	0x7FF78E106BE0//	0x7FF7ED6B6930//	0x7FF7A45CEDF0//	0x7FF6C0E6ED20//	0x7FF628F11610//	0x7FF6ABD72580//	0x7FF75B983050//	0x7FF633A02A20//	0x7FF7837855A0//	0x7FF675C14A60//	0x7FF62CD796B0//	0x7FF6F01F8A50//	0x7FF6B5CEA290//	0x7FF6F2597070//	0x7FF61C2F6A30//	0x7FF75AD3BB90//	0x7FF7701D18D0//	0x7FF7E51D9580//	0x7FF61FDBDF50//	0x7FF661A7DF50//	0x7FF64CF520B0//	0x7FF73C5020A0//	0x7FF6BE98BFD0//	0x7FF67252BCD0//	0x7FF6B69B7210//	0x7FF785790150//	0x7FF6EE0D3990//	0x7FF6F5F0ED10//	0x7FF7B7E2FC70//	0x7FF69C64FC70//	0x7FF75E5CA260//	0x7FF73D1E9D00//	0x7FF751CF6700//	0x7FF73DCE6700//	0x7FF700406020//	0x7FF761D4A4D0//	0x7FF6D819A080//	0x7FF68B9E0540//	0x7FF7CF1E19C0//	0x7FF7F869DD20//	0x7FF728F8CFA0//	0x7FF607106C60//	0x7FF74B758B00//	0x7FF6F1AA9F50//	0x7FF7A7E516A0//	0x7FF7EF9A15F0//	0x7FF6C0181620//	0x7FF6F53EBDC0//	0x7FF719CB6330//	0x7FF7AB526540//	0x7FF78B7D0910//	0x7FF739BE0810//	0x7FF6AFF11F50//	0x7FF656ED5310//	0x7FF788864F80//	0x7FF67A3B4BF0//	0x7FF74BDF27A0//	0x7FF61ED21DF0//	0x7FF7E92FBEE0//	0x7FF6275F6240//	0x7FF65407CC80//	0x7FF70102CB70//	0x7FF7B60A3670//	0x7FF6F73D35F0//0x7FF69C534390//0x7FF6EA609F30//0x7FF7B8A41DD0	0x7FF70F713FF0	0x7FF6D91D4010	0x7FF7F4D73DB0	0x7FF6B131B700	0x7FF6CA8A4BE0	0x7FF70C407090	0x7FF71649F100	0x7FF7F078D7A0	0x7FF71C8F0370	0x7FF75DCC8F00	0x7FF69D523E10	0x7FF672343E10	0x7FF690072830	//0x7FF6FC140F30
#define ADDR_GETSTOREMAXCOUNT			56//0x7FF72FA85660	//0x7FF6ABDC4EC0	//0x7FF790402D60	//0x7FF701031750	//0x7FF723F7E180	//0x7FF6F3C59800	//0x7FF6E67E9790	//0x7FF757B95560	//0x7FF680515560	//0x7FF6D55A3740	//0x7FF669AA7110	//0x7FF760411370	//0x7FF797B11380	//0x7FF68A590CE0	//0x7FF7F6420CE0	//0x7FF793390D70	//0x7FF6A758A640	//0x7FF61CB3A660	//0x7FF63A5E34A0//	0x7FF69C003420//	0x7FF6DEE31A30//	0x7FF676E1E2C0//	0x7FF7E1C79F70//	0x7FF75C0356F0//	0x7FF7E0505600//	0x7FF6C16B5620//	0x7FF65C353C80//	0x7FF6E45E1B60//	0x7FF675E70660//	0x7FF729100650//	0x7FF625C6FC10//	0x7FF6710DCCB0//	0x7FF78BE69600//	0x7FF7EB4195E0//	0x7FF7A2373540//	0x7FF6BEC135D0//	0x7FF626CC2410//	0x7FF6A9B4AC30//	0x7FF759768BE0//	0x7FF6317E8C10//	0x7FF7815843A0//	0x7FF673A30950//	0x7FF62ABBA8D0//	0x7FF6EE03A0F0//	0x7FF6B3B417F0//	0x7FF6F03FF220//	0x7FF61A15F0A0//	0x7FF758BDB280//	0x7FF76E085DB0//	0x7FF7E30B5640//	0x7FF61DC949E0//	0x7FF65F963B60//	0x7FF64AE7DEA0//	0x7FF73A42DEA0//	0x7FF6BC8F9260//	0x7FF670499240//	0x7FF6B4936700//	0x7FF7836FEE80//	0x7FF6EC05BF30//	0x7FF6F3EAB030//	0x7FF7B5DF9220//	0x7FF69A619220//	0x7FF75C5C3A30//	0x7FF73B1E3A30//	0x7FF74FD2B5F0//	0x7FF73BD1B5F0//	0x7FF6FE447660//	0x7FF75FDD0010//	0x7FF6D621FFD0//	0x7FF689A99E90//	0x7FF7CD2D3600//	0x7FF7F67AF9C0//	0x7FF72709F740//	0x7FF60522FAA0//	0x7FF74988D9A0//	0x7FF6EFBBE2E0//	0x7FF7A5F8BAE0//	0x7FF7EDADBB40//	0x7FF6BE2BBAB0//	0x7FF6F3539E70//	0x7FF717E5CD40//	0x7FF7A96CCD70//	0x7FF78998B090//	0x7FF737D9B060//	0x7FF6AE0E6A60//	0x7FF6550C59C0//	0x7FF786A55980//	0x7FF67864DB90//	0x7FF74A0D2C30//	0x7FF61D040080//	0x7FF7E765F2A0//	0x7FF625987D10//	0x7FF65243CC30//	0x7FF6FF425BB0//	0x7FF7B44D0110//	0x7FF6F5800150//0x7FF69A97BB90//0x7FF6E8A50F80//0x7FF7B6EAC9C0	0x7FF70DB9AF50	0x7FF6D765AF70	0x7FF7F31FAD20	0x7FF6AF7B7A00	0x7FF6C8DD7C10	0x7FF70A962AA0	0x7FF714A2E5A0	0x7FF7EED3F7D0	0x7FF71AEDFC70	0x7FF75DE37F80	0x7FF69D68F790
#define ADDR_CHECKMIMIRPOINT			57//0x7FF72FB1AB50	//0x7FF6ABE5A270	//0x7FF790498110	//0x7FF7010C8FA0	//0x7FF724014760	//0x7FF6F3CEFB60	//0x7FF6E687FA80	//0x7FF757C2AA20	//0x7FF6805AAA20	//0x7FF6D5638C40	//0x7FF669B377E0	//0x7FF7604A16A0	//0x7FF797BA16B0	//0x7FF68A620EA0	//0x7FF7F64B0EA0	//0x7FF793420F30	//0x7FF6A76187F0	//0x7FF61CBC8810	//0x7FF63A671910//	0x7FF69C091890//	0x7FF6DEE795C0//	0x7FF676EB9B50//	0x7FF7E1D1C5B0//	0x7FF75C0D53F0//	0x7FF7E05A5330//	0x7FF6C1755330//	0x7FF65C3F3800//	0x7FF6E4680FB0//	0x7FF675F0F340//	0x7FF72919F1C0//	0x7FF625D0E740//	0x7FF67117ACA0//	0x7FF78BF06D00//	0x7FF7EB4B6CE0//	0x7FF7A23FB520//	0x7FF6BEC9B5B0//	0x7FF626CEC0E0//	0x7FF6A9B78A00//	0x7FF759796C10//	0x7FF631816C40//	0x7FF7815B2150//	0x7FF673A5E4C0//	0x7FF62ABE7DF0//	0x7FF6EE0675A0//	0x7FF6B3B6E910//	0x7FF6F042C2C0//	0x7FF61A18C140//	0x7FF758C07F10//	0x7FF76E0B2870//	0x7FF7E3103A90//	0x7FF61DCDFB20//	0x7FF65F9AE650//	0x7FF64AEC87D0//	0x7FF73A4787D0//	0x7FF6BC940FF0//	0x7FF6704E0FD0//	0x7FF6B497DC40//	0x7FF783794180//	0x7FF6EC0F8380//	0x7FF6F3F46970//	0x7FF7B5E8E750//	0x7FF69A6AE750//	0x7FF75C656E60//	0x7FF73B276E60//	0x7FF74FDBBFE0//	0x7FF73BDABFE0//	0x7FF6FE4D7DF0//	0x7FF75FE141E0//	0x7FF6D62641A0//	0x7FF689ADE020//	0x7FF7CD316FB0//	0x7FF7F67F34A0//	0x7FF7270E3100//	0x7FF605272E70//	0x7FF7498D0B00//	0x7FF6EFC530C0//	0x7FF7A60201F0//	0x7FF7EDB70250//	0x7FF6BE3501C0//	0x7FF6F35CD270//	0x7FF717E8ED50//	0x7FF7A96FED80//	0x7FF7899BC640//	0x7FF737DCC610//	0x7FF6AE119790//	0x7FF6550F7B10//	0x7FF786A87AD0//	0x7FF67867C520//	0x7FF74A0FFF30//	0x7FF61D06E2C0//	0x7FF7E768C550//	0x7FF6259B4F70//	0x7FF65247FE80//	0x7FF6FF469E70//	0x7FF7B4512D80//	0x7FF6F5842DC0//0x7FF69A9BE2E0//0x7FF6E8A813D0//0x7FF7B6EDBD30	0x7FF70DBCB040	0x7FF6D768B060	0x7FF7F322AE10	0x7FF6AF7E7AF0	0x7FF6C8E07830
													//					//				//                //              //              	
#define ADDR_GUARD_DATA					58//0x7FF734CC2488	//0x7FF6B0FFD208	//0x7FF795615488	//0x7FF70622F908	//0x7FF72915AA48	//0x7FF6F8E09D88	//0x7FF6EB999D88	//0x7FF75CD19C48	//0x7FF685699C48	//0x7FF6DA70F048	//0x7FF66EBD9188	//0x7FF765521B48	//0x7FF79CC21B48	//0x7FF68F677548	//0x7FF7FB5064C8	//0x7FF7984774C8	//0x7FF6AC6423C8	//0x7FF621BF23C8	//0x7FF63F684908//	0x7FF6A10A4908//	0x7FF6E3EA56C8//	0x7FF67BE87CC8//	0x7FF7E6C5A588//	0x7FF760FE3688//	0x7FF7E54B3688//	0x7FF6C6663688//	0x7FF6612F2648//	0x7FF6E9560748//	0x7FF67ADE6348//	0x7FF72E070FC8//	0x7FF62ABD8CC8//	0x7FF67602B348//	0x7FF790DC1CC8//	0x7FF7F0371CC8//	0x7FF7A727BB88//	0x7FF6C3B1BB08//	0x7FF62BBBA5C8//	0x7FF6AEA0A008//	0x7FF75E6159C8//	0x7FF636695848//	0x7FF786408848//	0x7FF67888CD08//	0x7FF62F9E0848//	0x7FF6F2E5E848//	0x7FF6B893AB88//	0x7FF6F51E2648//	0x7FF61EF42648//	0x7FF75D96F448//	0x7FF772DF8BC8//	0x7FF7E7DEAEC8//	0x7FF6229CF148//	0x7FF6646899C8//	0x7FF64FB42C48//	0x7FF73F0F2C48//	0x7FF6C155B088//	0x7FF6750FB088//	0x7FF6B957E648//	0x7FF788346208//	0x7FF6F0C5B1F0//	0x7FF6F8A90AF0//	0x7FF7BA99F4B0//	0x7FF69F1BF4B0//	0x7FF761126CF0//	0x7FF73FD46CF0//	0x7FF754838AF0//	0x7FF740828AF0//	0x7FF702F3FEB0//	0x7FF764866EF0//	0x7FF6DACB6EF0//	0x7FF68E4E1870//	0x7FF7D1CC93F0//	0x7FF7FB177070//	0x7FF609BD98B0//	0x7FF609BD98B0//	0x7FF74E225130//	0x7FF6F456C770//	0x7FF7AA8FFAF0//	0x7FF7F244FAF0//	0x7FF6C2C2FAF0//	0x7FF6F7E93170//	0x7FF71C37AB70//	0x7FF7ADBEAB70//	0x7FF78DE8ABF0//	0x7FF73C29ABF0//	0x7FF6B25C1CB0//	0x7FF659578CB0//	0x7FF78AF08C70//	0x7FF67CA28270//	0x7FF74E43C3F0//	0x7FF62134DB70//	0x7FF7EB9029B0//	0x7FF629BD5830//	0x7FF65664A0F0//	0x7FF7035DCDB0//	0x7FF7B862AE30//	0x7FF6F995AE30//0x7FF69EAAB530//0x7FF6ECB74F70//0x7FF7BAF9CE70
#define ADDR_GUARD_GETFUNC				59//0x7FF72F3B1130	//0x7FF6AB6F0F80	//0x7FF78FD30100	//0x7FF70095F8C0	//0x7FF7238AECF0	//0x7FF6F358DCF0	//0x7FF6E611DCF0	//0x7FF7574CD0B0	//0x7FF67FE4D0B0	//0x7FF6D4EDC800	//0x7FF6693DCA50	//0x7FF75FD4B310	//0x7FF79744B310	//0x7FF689EC9AA0	//0x7FF7F5D59AA0	//0x7FF792CC9AA0	//0x7FF6A6EC8FF0	//0x7FF61C478FF0	//0x7FF639F287D0//	0x7FF69B9487D0//	0x7FF6DE7772B0//	0x7FF676796260//	0x7FF7E15F4200//	0x7FF75B9B2250//	0x7FF7DFE82250//	0x7FF6C1032250//	0x7FF65BCD1020//	0x7FF6E3F60560//	0x7FF6757F0470//	0x7FF728A801F0//	0x7FF6255F01A0//	0x7FF670A5F7C0//	0x7FF78B7EF110//	0x7FF7EAD9F110//	0x7FF7A1CDE280//	0x7FF6BE57E280//	0x7FF62662E300//	0x7FF6A94BD1D0//	0x7FF7590DCBF0//	0x7FF63115CBF0//	0x7FF780EFB980//	0x7FF6733AB360//	0x7FF62A539A10//	0x7FF6ED9B9A10//	0x7FF6B34C8130//	0x7FF6EFD87B60//	0x7FF619AE7B60//	0x7FF758566040//	0x7FF76DA155C0//	0x7FF7E2A43F40//	0x7FF61D6239D0//	0x7FF65F2F3320//	0x7FF64A811DB0//	0x7FF739DC1DB0//	0x7FF6BC28F1D0//	0x7FF66FE2F1D0//	0x7FF6B42CE9C0//	0x7FF7830CBFD0//	0x7FF6EBA2B3E0//	0x7FF6F387AE80//	0x7FF7B57C9940//	0x7FF699FE9940//	0x7FF75BF985D0//	0x7FF73ABB85D0//	0x7FF74F706D00//	0x7FF73B6F6D00//	0x7FF6FDE25F00//	0x7FF75F7940E0//	0x7FF6D5BE40E0//	0x7FF689462060//	0x7FF7CCCA0C60//	0x7FF7F617F970//	0x7FF604BFF350//	0x7FF604BFF350//	0x7FF74925ED60//	0x7FF6EF5BE4E0//	0x7FF7A599C780//	0x7FF7ED4EC780//	0x7FF6BDCCC780//	0x7FF6F2F4BF60//	0x7FF7178C8460//	0x7FF7A9138460//	0x7FF7893F7490//	0x7FF737807490//	0x7FF6ADB56770//	0x7FF654B363D0//	0x7FF7864C63A0//	0x7FF6780C3E30//	0x7FF749B705C0//	0x7FF61CADDBC0//	0x7FF7E70FB390//	0x7FF625427E60//	0x7FF651ED6490//	0x7FF6FEEC3960//	0x7FF7B3F6FDC0//	0x7FF6F529FDC0//0x7FF69A41ED10//0x7FF6E850DC30//0x7FF7B696CF10
													//				//				//                //              //              	
#define ADDR_SendSecurityLog			60//0x7FF72FC5DA60	//0x7FF6ABF9CFE0	//0x7FF7905D8BE0	//0x7FF701208D40	//0x7FF724168520	//0x7FF6F3E3E3E0	//0x7FF6E69CE300	//0x7FF757D75FD0	//0x7FF6806F5FD0	//0x7FF6D5784000	//0x7FF669C83800	//0x7FF7605EC270	//0x7FF797CEC270	//0x7FF68A7681D0	//0x7FF7F65F80B0	//0x7FF793568140	//0x7FF6A775C370	//0x7FF61CD0C390	//0x7FF63A7B5C60//	0x7FF69C1D5BE0//	0x7FF6DF046020//	0x7FF67700D910//	0x7FF7E1E679E0//	0x7FF75C21F980//	0x7FF7E06EF7D0//	0x7FF6C189F6B0//	0x7FF65C53CDA0//	0x7FF6E47C9360//	0x7FF676056FB0//	0x7FF7292E5990//	0x7FF625E53C00//	0x7FF6712FDA30//	0x7FF78C088320//	0x7FF7EB638270//	0x7FF7A250DC70//	0x7FF6BEDADD00//	0x7FF626E5B3A0//	0x7FF6A9CDCF00//	0x7FF75990E720//	0x7FF63198E6F0//	0x7FF781723B60//	0x7FF673BC60C0//	0x7FF62AD51720//	0x7FF6EE1D0EF0//	0x7FF6B3CD6BC0//	0x7FF6F058FC40//	0x7FF61A2EFA60//	0x7FF758D9FA50//	0x7FF76E2467F0//	0x7FF7E326F5D0//	0x7FF61DE4CE60//	0x7FF65FB1A830//	0x7FF64B02B5E0//	0x7FF73A5DB5E0//	0x7FF6BCA42000//	0x7FF6705E1FE0//	0x7FF6B4AD6200//	0x7FF7838BD310//	0x7FF6EC213300//	0x7FF6F4060320//	0x7FF7B5FA1000//	0x7FF69A7C1030//	0x7FF75C769F80//	0x7FF73B389F70//	0x7FF74FEC9D30//	0x7FF73BEB9D30//	0x7FF6FE5E3BA0//	0x7FF75FF3AA00//	0x7FF6D638AA50//	0x7FF689C03CA0//	0x7FF7CD439CA0//	0x7FF7F6914030//	0x7FF727203C60//	0x7FF605391780//	0x7FF7499EDC20//	0x7FF6EFD021F0//	0x7FF7A60DDF70//	0x7FF7EDC2DFD0//	0x7FF6BE40DF40//	0x7FF6F368ADA0//	0x7FF717F9FCB0//	0x7FF7A980FCE0//	0x7FF789ACB7A0//	0x7FF737EDB770//	0x7FF6AE255390//	0x7FF6552320A0//	0x7FF786BC1F90//	0x7FF6787A4350//	0x7FF74A221950//	0x7FF61D1967F0//	0x7FF7E77A6DA0//	0x7FF625A7B770//	0x7FF65252F510//	0x7FF6FF5474E0//	0x7FF7B45EE3C0//	0x7FF6F591E400//0x7FF69AA97D80//0x7FF6E8B45440//0x7FF7B6F9B310
#define ADDR_SendWindowSizeLog			61//0x7FF72FC5E670	//0x7FF6ABF9DBF0	//0x7FF7905D97F0	//0x7FF701209950	//0x7FF724169310	//0x7FF6F3E3F1D0	//0x7FF6E69CF0F0	//0x7FF757D76FD0	//0x7FF6806F6FD0	//0x7FF6D5785000	//0x7FF669C84800	//0x7FF7605ED270	//0x7FF797CED270	//0x7FF68A7691D0	//0x7FF7F65F90B0	//0x7FF793569140	//0x7FF6A775D370	//0x7FF61CD0D390	//0x7FF63A7B6C60//	0x7FF69C1D6BE0//	0x7FF6DF046A30//	0x7FF67700E700//	0x7FF7E1E689E0//	0x7FF75C220980//	0x7FF7E06F07D0//	0x7FF6C18A06B0//	0x7FF65C53DDA0//	0x7FF6E47CA360//	0x7FF676057FB0//	0x7FF7292E6880//	0x7FF625E54AF0//	0x7FF6712FE950//	0x7FF78C089240//	0x7FF7EB639190//	0x7FF7A250E5F0//	0x7FF6BEDAE680//	0x7FF626E5BD20//	0x7FF6A9CDD880//	0x7FF75990F2A0//	0x7FF63198F270//	0x7FF7817246D0//	0x7FF673BC6B50//	0x7FF62AD52090//	0x7FF6EE1D1860//	0x7FF6B3CD7530//	0x7FF6F05905B0//	0x7FF61A2F03D0//	0x7FF758DA0460//	0x7FF76E247200//	0x7FF7E326FFE0//	0x7FF61DE4D870//	0x7FF65FB1B240//	0x7FF64B02BFF0//	0x7FF73A5DBFF0//	0x7FF6BCA42510//	0x7FF6705E24F0//	0x7FF6B4AD6C10//	0x7FF7838BDD20//	0x7FF6EC213D10//	0x7FF6F4060D30//	0x7FF7B5FA1A10//	0x7FF69A7C1A40//	0x7FF75C76A990//	0x7FF73B38A980//	0x7FF74FECA740//	0x7FF73BEBA740//	0x7FF6FE5E45B0//	0x7FF75FF3B410//	0x7FF6D638B460//	0x7FF689C046B0//	0x7FF7CD43A6B0//	0x7FF7F6914A40//	0x7FF727204670//	0x7FF605392190//	0x7FF7499EE630//	0x7FF6EFD02700//	0x7FF7A60DE8E0//	0x7FF7EDC2E940//	0x7FF6BE40E8B0//	0x7FF6F368B710//	0x7FF717FA0620//	0x7FF7A9810650//	0x7FF789ACC110//	0x7FF737EDC0E0//	0x7FF6AE255DA0//	0x7FF655232AB0//	0x7FF786BC29A0//	0x7FF6787A4D60//	0x7FF74A222360//	0x7FF61D197200//	0x7FF7E77A77B0//	0x7FF625A7BC80//	0x7FF65252FC00//	0x7FF6FF547EF0//	0x7FF7B45EEDD0//	0x7FF6F591EE10//0x7FF69AA98790//0x7FF6E8B45950//0x7FF7B6F9B820
#define ADDR_CheckSecurityDetections	62//0x7FF72FC3A380	//0x7FF6ABF79A30	//0x7FF7905B5840	//0x7FF7011E4A50	//0x7FF724145EC0	//0x7FF6F3E1D2A0	//0x7FF6E69AD1C0	//0x7FF757D52F60	//0x7FF6806D2F60	//0x7FF6D5760FA0	//0x7FF669C5F900	//0x7FF7605C8DC0	//0x7FF797CC8DC0	//0x7FF68A744D20	//0x7FF7F65D4C00	//0x7FF793544C90	//0x7FF6A7739200	//0x7FF61CCE9220	//0x7FF63A792AF0//	0x7FF69C1B2A70//	0x7FF6DEFFE7B0//	0x7FF676FE4900//	0x7FF7E1E412F0//	0x7FF75C1F9C10//	0x7FF7E06C9A60//	0x7FF6C1879940//	0x7FF65C517080//	0x7FF6E47A3640//	0x7FF6760314C0//	0x7FF7292C0110//	0x7FF625E2E460//	0x7FF6712AFB00//	0x7FF78C03A540//	0x7FF7EB5EA490//	0x7FF7A24E6C00//	0x7FF6BED86C90//	0x7FF626E34620//	0x7FF6A9CB6720//	0x7FF7598E7CC0//	0x7FF631967C90//	0x7FF7816FE270//	0x7FF673BA27F0//	0x7FF62AD28710//	0x7FF6EE1A7F10//	0x7FF6B3CADF80//	0x7FF6F0566F10//	0x7FF61A2C6D90//	0x7FF758D59410//	0x7FF76E200270//	0x7FF7E322F690//	0x7FF61DE0B790//	0x7FF65FAD9180//	0x7FF64AFEC510//	0x7FF73A59C510//	0x7FF6BCA17940//	0x7FF6705B7920//	0x7FF6B4A999E0//	0x7FF783875CE0//	0x7FF6EC1D7AB0//	0x7FF6F4024A40//	0x7FF7B5F675E0//	0x7FF69A7875E0//	0x7FF75C72E640//	0x7FF73B34E630//	0x7FF74FE8F0A0//	0x7FF73BE7F0A0//	0x7FF6FE5A8EE0//	0x7FF75FEF9DB0//	0x7FF6D6349E00//	0x7FF689BC3140//	0x7FF7CD3F94C0//	0x7FF7F68D3AE0//	0x7FF7271C3710//	0x7FF605351340//	0x7FF7499AD9C0//	0x7FF6EFCDC830//	0x7FF7A60B5EB0//	0x7FF7EDC05F10//	0x7FF6BE3E5E80//	0x7FF6F3662CF0//	0x7FF717F77900//	0x7FF7A97E7930//	0x7FF789AA34E0//	0x7FF737EB34B0//	0x7FF6AE218470//	0x7FF6551F5180//	0x7FF786B85070//	0x7FF6787684D0//	0x7FF74A1E5E00//	0x7FF61D15F0B0//	0x7FF7E7771580//	0x7FF625A523F0//	0x7FF6525055B0//	0x7FF6FF502D80//	0x7FF7B45AA4D0//	0x7FF6F58DA510//0x7FF69AA54030//0x7FF6E8B1E840//0x7FF7B6F74AA0
#define ADDR_SecurityMgrTick			63//0x7FF72FC65BE0	//0x7FF6ABFA5160	//0x7FF7905E0D60	//0x7FF701211630	//0x7FF7241739E0	//0x7FF6F3E49370	//0x7FF6E69D9290	//0x7FF757D80380	//0x7FF680700380	//0x7FF6D578DCB0	//0x7FF669C8D720	//0x7FF7605F5FC0	//0x7FF797CF5FC0	//0x7FF68A771F00	//0x7FF7F6601DE0	//0x7FF793571E70	//0x7FF6A7765D50	//0x7FF61CD15D70	//0x7FF63A7BF640//	0x7FF69C1DF5C0//	0x7FF6DF04C040//	0x7FF677016C10//	0x7FF7E1E713C0//	0x7FF75C229360//	0x7FF7E06F91B0//	0x7FF6C18A9090//	0x7FF65C5468E0//	0x7FF6E47D2EA0//	0x7FF676060A20//	0x7FF7292EEF50//	0x7FF625E5D160//	0x7FF671305920//	0x7FF78C090280//	0x7FF7EB6401D0//	0x7FF7A2516490//	0x7FF6BEDB6520//	0x7FF626E63BA0//	0x7FF6A9CE54D0//	0x7FF7599186B0//	0x7FF631998680//	0x7FF78172E290//	0x7FF673BCF7F0//	0x7FF62AD59FA0//	0x7FF6EE1D9770//	0x7FF6B3CDF0C0//	0x7FF6F0598130//	0x7FF61A2F7F50//	0x7FF758DA5D00//	0x7FF76E24C940//	0x7FF7E3274B40//	0x7FF61DE52B10//	0x7FF65FB204E0//	0x7FF64B0301F0//	0x7FF73A5E01F0//	0x7FF6BCA4B4D0//	0x7FF6705EB4B0//	0x7FF6B4ADBD20//	0x7FF7838C4DF0//	0x7FF6EC218FF0//	0x7FF6F40663A0//	0x7FF7B5FA6BA0//	0x7FF69A7C6BD0//	0x7FF75C770530//	0x7FF73B390520//	0x7FF74FECFAF0//	0x7FF73BEBFAF0//	0x7FF6FE5E96A0//	0x7FF75FF41020//	0x7FF6D6391070//	0x7FF689C0A2C0//	0x7FF7CD440490//	0x7FF7F691A480//	0x7FF72720A0B0//	0x7FF605397BD0//	0x7FF7499F4070//	0x7FF6EFD0A610//	0x7FF7A60E62B0//	0x7FF7EDC36310//	0x7FF6BE416280//	0x7FF6F36930E0//	0x7FF717FA7F00//	0x7FF7A9817F30//	0x7FF789AD37A0//	0x7FF737EE3770//	0x7FF6AE25AFF0//	0x7FF655237D00//	0x7FF786BC7BF0//	0x7FF6787A9F80//	0x7FF74A2273D0//	0x7FF61D19E4F0//	0x7FF7E77AE6B0//	0x7FF625A849A0//	0x7FF652537AC0//	0x7FF6FF54F650//	0x7FF7B45F6160//	0x7FF6F59261A0//0x7FF69AA9FAE0//0x7FF6E8B4E240//0x7FF7B6FA3F80
													//					//				//                //              //              	
#define ADDR_SELECT_WEAPONSHAPE			64//0x7FF730B13F10	//0x7FF6ACE507F0	//0x7FF791479770	//0x7FF70209F000	//0x7FF724FD82D0	//0x7FF6F4C97AC0	//0x7FF6E7827A00	//0x7FF758BB5890	//0x7FF681535820	//0x7FF6D65BF8A0	//0x7FF66AA99630	//0x7FF7613FD6D0	//0x7FF798AFD6A0	//0x7FF68B533A50	//0x7FF7F73C3930	//0x7FF794333980	//0x7FF6A851AA50	//0x7FF61DACAB50	//0x7FF63B58DE20//	0x7FF69CFADD90//	0x7FF6DFDC2D80//	0x7FF677DBD270//	0x7FF7E2BA0850//	0x7FF75CF6C090//	0x7FF7E143BDF0//	0x7FF6C25EBCC0//	0x7FF65D28BC00//	0x7FF6E54D2A10//	0x7FF676D92C80//	0x7FF72A01FAB0//	0x7FF626B8A840//	0x7FF671FB9300//	0x7FF78CD58DC0//	0x7FF7EC308C80//	0x7FF7A3232E30//	0x7FF6BFAD2EC0//	0x7FF627B76260//	0x7FF6AA9DCDE0//	0x7FF75A600DD0//	0x7FF6326808D0//	0x7FF782407760//	0x7FF67489A780//	0x7FF62B9DEEA0//	0x7FF6EEE5E2B0//	0x7FF6B4961B40//	0x7FF6F1210280//	0x7FF61AF6FC70//	0x7FF7599BD940//	0x7FF76EE59F80//	0x7FF7E3E89D50//	0x7FF61EA67DA0//	0x7FF660734E80//	0x7FF64BC06650//	0x7FF73B1B6640//	0x7FF6BD628FA0//	0x7FF6711C8C70//	0x7FF6B566BC60//	0x7FF78444C2B0//	0x7FF6ECD7E0B0//	0x7FF6F4BBAFB0//	0x7FF7B6B03480//	0x7FF69B323480//	0x7FF75D28C760//	0x7FF73BEAC270//	0x7FF7509CF680//	0x7FF73C9BF680//	0x7FF6FF0E39A0//	0x7FF760A19C70//	0x7FF6D6E69800//	0x7FF68A6B7450//	0x7FF7CDEF4630//	0x7FF7F73830E0//	0x7FF727C72660//	0x7FF605DEDB50//	0x7FF74A441A10//	0x7FF6F07BD560//	0x7FF7A6B5D3F0//	0x7FF7EE6AD340//	0x7FF6BEE8D370//	0x7FF6F41093C0//	0x7FF7189BAF90//	0x7FF7AA22B080//	0x7FF78A4DCF70//	0x7FF7388ECE40//	0x7FF6AEC28550//	0x7FF655BF4650//	0x7FF787584390//	0x7FF6790E2730//	0x7FF74AB16300//	0x7FF61DA75AF0//	0x7FF7E8058DF0//	0x7FF626373680//	0x7FF652DF1650//	0x7FF6FFD86880//	0x7FF7B4E38E60//	0x7FF6F6168E10//0x7FF69B2D42E0//0x7FF6E93AE8B0//
#define ADDR_MOVECOMPONENTTEMPLATE		65//0x7FF733358BD0	//0x7FF6AF694BD0	//0x7FF793CB8950	//0x7FF7048DB850	//0x7FF727811650	//0x7FF6F74CC7C0	//0x7FF6EA05C7C0	//0x7FF75B3E74B0	//0x7FF683D674B0	//0x7FF6D8DE5310	//0x7FF66D2C3F78	//0x7FF763C18D88	//0x7FF79B318D88	//0x7FF68DD7C878	//0x7FF7F9C0B878	//0x7FF796B7C888	//0x7FF6AAD53508	//0x7FF620303508	//0x7FF63DD9D258//	0x7FF69F7BD258//	0x7FF6E25CC978//	0x7FF67A5C2598//	0x7FF7E53BB638//	0x7FF75F759C18//	0x7FF7E3C29C18//	0x7FF6C4DD9C18//	0x7FF65FA72238//	0x7FF6E7CEB078//	0x7FF6795719E0//	0x7FF72C7FD990//	0x7FF629367890//	0x7FF6747C27F8//	0x7FF78F5605D8//	0x7FF7EEB105D8//	0x7FF7A5A28278//	0x7FF6C22C8278//	0x7FF62A36B378//	0x7FF6AD1CBA90//	0x7FF75CDDB868//	0x7FF634E5B868//	0x7FF784BDDE38//	0x7FF67706CD78//	0x7FF62E1D3900//	0x7FF6F1652900//	0x7FF6B71433E8//	0x7FF6F39EF238//	0x7FF61D74F238//	0x7FF75C193E28//	0x7FF771628C28//	0x7FF7E662E838//	0x7FF621213538//	0x7FF662ED3088//	0x7FF64E3A6908//	0x7FF73D956908//	0x7FF6BFDE0428//	0x7FF673980428//	0x7FF6B7E0C128//	0x7FF786BE2448//	0x7FF6EF524138//	0x7FF6F735EF78//	0x7FF7B927EFB8//	0x7FF69DA9EFB8//	0x7FF75FA189B8//	0x7FF73E6389B8//	0x7FF7531442B8//	0x7FF73F1342B8//	0x7FF701854048//	0x7FF763191440//	0x7FF6D95E1420//	0x7FF68CE26F20//	0x7FF7D0628B68//	0x7FF7F9AE47C8//	0x7FF72A3D37A8//	0x7FF60854D6A8//	0x7FF74CB9F5C8//	0x7FF6F2EEFCA0//	0x7FF7A92923C0//	0x7FF7F0DE23C0//	0x7FF6C15C23C0//	0x7FF6F682BE40//	0x7FF71ADB5270//	0x7FF7AC625270//	0x7FF78C8CEFF0//	0x7FF73ACDEFF0//	0x7FF6B100FAB0//	0x7FF657FD2A00//	0x7FF789962A00//	0x7FF67B4B2270//	0x7FF74CEE7080//	0x7FF61FE15A60//	0x7FF7EA3E3998//	0x7FF6286DCDF8//	0x7FF655163B08//	0x7FF702112DA8//	0x7FF7B7188540//	0x7FF6F84B8540//0x7FF69D61AC70//
#define ADDR_GRAPHIC_MANAGER			66//0x7FF735ECAAF0	//0x7FF6B22057F0	//0x7FF79681D870	//0x7FF7074379F0	//0x7FF72A362830	//0x7FF6FA0117F0	//0x7FF6ECBA17F0	//0x7FF75DF21230	//0x7FF6868A1230	//0x7FF6DB916430	//0x7FF66FDE04F0	//0x7FF766728A30	//0x7FF79DE28A30	//0x7FF69087DCF0	//0x7FF7FC70CC70	//0x7FF79967DC70	//0x7FF6AD848830	//0x7FF622DF8830	//0x7FF64088AAF0//	0x7FF6A22AAAF0//	0x7FF6E50AB3B0//	0x7FF67D08D4F0//	0x7FF7E7E5F330//	0x7FF7621E7D30//	0x7FF7E66B7D30//	0x7FF6C7867D30//	0x7FF6624F6930//	0x7FF6EA7646B0//	0x7FF67BFEA330//	0x7FF72F274EF0//	0x7FF62BDDCAF0//	0x7FF67722EFB0//	0x7FF791FC56F0//	0x7FF7F15756F0//	0x7FF7A847F1B0//	0x7FF6C4D1F0F0//	0x7FF62CDBDC70//	0x7FF6AFC0D1B0//	0x7FF75F818930//	0x7FF637898770//	0x7FF78760B370//	0x7FF679A8F630//	0x7FF630BE2BB0//	0x7FF6F4060BB0//	0x7FF6B9B3C9F0//	0x7FF6F63E43B0//	0x7FF6201443B0//	0x7FF75EB70B70//	0x7FF773FFA0B0//	0x7FF7E8FEBEF0//	0x7FF6237CFF30//	0x7FF66548A570//	0x7FF650943030//	0x7FF73FEF3030//	0x7FF6C235AB30//	0x7FF675EFAB30//	0x7FF6BA37DE30//	0x7FF7891443B0//	0x7FF6F1A59248//	0x7FF6F988E9B8//	0x7FF7BB79CDF8//	0x7FF69FFBCDF8//	0x7FF761F24038//	0x7FF740B44038//	0x7FF7556358B8//	0x7FF7416258B8//	0x7FF703D3C9A8//	0x7FF765663398//	0x7FF6DBAB3398//	0x7FF68F2DD558//	0x7FF7D26C4A58//	0x7FF7FBB72288//	0x7FF72C460208//	0x7FF60A5D4948//	0x7FF74EC20008//	0x7FF6F4F67348//	0x7FF7AB2F9F88//	0x7FF7F2E49F88//	0x7FF6C3629F88//	0x7FF6F888D408//	0x7FF71CD73D08//	0x7FF7AE5E3D08//	0x7FF78E883A08//	0x7FF73CC93A08//	0x7FF6B2FBA688//	0x7FF659F71508//	0x7FF78B9014C8//	0x7FF67D420148//	0x7FF74EC334C8//
#define ADDR_GETPLAYERSIMPLEINFO		67//0x7FF73342A710	//0x7FF6AF766710	//0x7FF793D89AB0	//0x7FF7049AB9A0	//0x7FF7278E01A0	//0x7FF6F7598C70	//0x7FF6EA128C70	//0x7FF75B4B33A0	//0x7FF683E333A0	//0x7FF6D8EB0C40	//0x7FF66D387540	//0x7FF763CDB730	//0x7FF79B3DB740	//0x7FF68DE3EE40	//0x7FF7F9CCDE40	//0x7FF796C3EE50	//0x7FF6AAE15A10	//0x7FF6203C5A10	//0x7FF63DE5F840//	0x7FF69F87F840//	0x7FF6E268E320//	0x7FF67A681CD0//	0x7FF7E5479050//	0x7FF75F8162A0//	0x7FF7E3CE62A0//	0x7FF6C4E962A0//	0x7FF65FB2F170//	0x7FF6E7DA7560//	0x7FF6796301D0//	0x7FF72C8BC0F0//	0x7FF629425E00//	0x7FF67487FE70//	0x7FF78F61E180//	0x7FF7EEBCE180//	0x7FF7A5AE4C40//	0x7FF6C2384B70//	0x7FF62A427720//	0x7FF6AD2870B0//	0x7FF75CE96000//	0x7FF634F15F20//	0x7FF784C967B0//	0x7FF677124AE0//	0x7FF62E287D80//	0x7FF6F1706D80//	0x7FF6B71F7710//	0x7FF6F3AA3870//	0x7FF61D803870//	0x7FF75C2475F0//	0x7FF7716DB7A0//	0x7FF7E66E0100//	0x7FF6212C52C0//	0x7FF662F84E90//	0X7FF64AEDEA60//	0x7FF73A48EA60//	0x7FF6BC9555B0//	0x7FF6704F5590//	0x7FF6B4992150//	0x7FF78374C9E0//	0x7FF6EC0AA0A0//	0x7FF6F3EF89F0//	0x7FF7B5E413A0//	0x7FF69A6613A0//	0x7FF75C609E40//	0x7FF73B229E40//	0x7FF74FD6FB50//	0x7FF73BD5FB50//	0x7FF6FE48BE00//	0x7FF75FDD17F0//	0x7FF6D62217B0//	0x7FF689A9B670//	0x7FF7CD2D49E0//	0x7FF7F67B0DA0//	0x7FF7270A0AE0//	0x7FF605230E40//	0x7FF74988ED40//	0x7FF6EFC06CB0//	0x7FF7A5FD3900//	0x7FF7EDB23960//	0x7FF6BE3038D0//	0x7FF6F35811B0//
#define ADDR_ATTENDANCE_EXTENDED_TEMP	68//0x7FF733626F30	//0x7FF6AF962A00	//0x7FF793F85450	//0x7FF704BA5E60	//0x7FF727AD9040	//0x7FF6F778F2F0	//0x7FF6EA31F2F0	//0x7FF75B6A73B0	//0x7FF6840273B0	//0x7FF6D90A3AE0	//0x7FF66D578FE0	//0x7FF763ECD650	//0x7FF79B5CD690	//0x7FF68E02FC40	//0x7FF7F9EBEBF0	//0x7FF796E2FC00	//0x7FF6AB002B70	//0x7FF6205B2B70	//0x7FF63E049D90//	0x7FF69FA69D30//	0x7FF6E2876580//	0x7FF67A8646F0//	0x7FF7E5656948//	0x7FF75F9EDB48//	0x7FF7E3EBDB48//	0x7FF6C506DB28//	0x7FF65FD083E0//	0x7FF6E7F7FD20//	0x7FF6798031B0//	0x7FF72CA8F4C0//	0x7FF6295F8D20//	0x7FF674A51C00//	0x7FF78F7EE7D0//	0x7FF7EED9E7C0//	0x7FF7A5CB3020//	0x7FF6C2552E60//	0x7FF62A5F5780//	0x7FF6AD452260//	0x7FF75D060DB0//	0x7FF6350E0AF0//	0x7FF784E60270//	0x7FF6772F03D0//	0x7FF62E450618//	0x7FF6F18CF598//	0x7FF6B73BCF40//	0x7FF6F3C68740//	0x7FF61D9C8730//	0x7FF75C404000//	0x7FF771895838//	0x7FF7E6897E68//	0x7FF62147D468//	0x7FF66313DED8//	0X7FF64E60C2B8//	0x7FF73DBBC328//	0x7FF6C0040B68//	0x7FF673BE0B68//	0x7FF6B806B358//	0x7FF786E3CAC8//	0x7FF6EF77CE88//	0x7FF6F75B6AC8//	
#define ADDR_ID_HASHVALUE				69// 
												//                                              //
//                                              //
//                                              //
//                                              //
#define OFFSET_INVENWIDGETID				0x00000000006D	//0x00000000006D	//0x00000000006D	//0x00000000006D	//0x00000000006B	//0x00000000006A	//0x00000000006A	//0x000000000069	//0x000000000069	//0x000000000069	//0x000000000069	//0x000000000069	//0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069	//0x000000000069	//0x000000000069		//0x000000000069		//0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000069//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000067//	0x000000000065//	0x000000000065//	0x000000000065//	0x000000000065//	0x000000000065//	0x000000000065//	0x000000000064//	0x000000000063//	0x000000000062//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x000000000060//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E//	0x00000000005E	//0x00000000005E	//0x00000000005E	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005B	//0x00000000005B	//0x00000000005B	//0x000000000059	//0x000000000059	//0x000000000059	//0x000000000058	//0x000000000058	//0x000000000054	//0x000000000053	//0x000000000053	//0x000000000053	//0x000000000053	//0x000000000053	//0x000000000053	//0x000000053//0x000000053//0x000000053//
//											0x7FF72FA01B2D	//0x7FF6ABD4139D	//0x7FF79037F6FD	//0x7FF700FAE27D	//0X7FF723EFB11D	//0x7FF6F3BD792D	//0x7FF6E67678BD	//0x7FF68049390D	//0x7FF6D5522B4D	//0x7FF76039EEFD	//0x7FF76039EEFD	//0x7FF797A9EF0D//	0x7FF7F63AE15D//	0x7FF79331E1ED//	00007FF6A751AC3D	//0x7FF61CACAC7E	//0x7FF63A573CEE		//0x7FF69BF93C6E	//	7FF6DEDBFCAE//	7FF676DDE21D////	7FF7E1C3C93D//	//7FF7E04C8C4D//	//7FF6C1678C1D//	//7FF65C3193BD//	//7FF6E45A76CD//	//7FF675E3515D//	//7FF7290C515D//	//7FF625C3490A//	//7FF6710A3A6A//	//7FF7EB3E07DA//	//7FF7A22FA13B//	//7FF6BEB9A13B//	//7FF626C4904B//	//7FF6A9AD56AB//	//7FF7596F3CFB//	//7FF631773D2B//	//7FF7815106AB//	//7FF6739BD26B//	//7FF62AB480AB//	//7FF6EDFC7DBB//	//7FF6B3ACFB4B//	//7FF6F038DA9B//	//7FF61A0ED91B//	//7FF758B6CCBB//	//7FF76E0195DB//	//7FF7E304491B//	//7FF61DC26D4B//	//7FF65F8F5D9B//	//7FF64AE10A0B//	//7FF73A3C0A0B//	//7FF67042EA1B//	//7FF6B48CC55B//	//7FF7836C4D2B//	//7FF6EC0236FB//	//7FF6F3E7286B//	//7FF7B5DC8612//	//7FF69A5E8612//	//7FF73B1B2F22//	//7FF74FCFC472//	//7FF73BCEC472//	//7FF6FE418AD2//	//7FF6D61AEE7B//	//7FF689A2911B//	//7FF7CD26609B//	//7FF7F674295B//	//7FF7270327AB//	//7FF6051C152B//	//7FF74981FB7B//	//7FF6EFB87CFB//	//7FF7A5F5585B//	//7FF7EDAA58BB//	//7FF6BE28582B//	//7FF6F3503C6B//	//7FF7A969771B//	//7FF78995641B//	//7FF737D663EB//	//7FF6AE0B260B//	//7FF6550924EB//	//7FF786A224BB//	//7FF67861D9AB//	//7FF74A0A397B//	//7FF61D011C4B//	//7FF7E7630462//	//7FF625958FF2	////7FF65240A8FA	////7FF6FF3F534A	////7FF7B449F6DA	////7FF6F57CF71A	////7FF69A94B7DA	////7FF6E8A1A74B	////7FF7B6E788D7	////7FF70DB66B87	////7FF6D7626BA7	////7FF7F31C6957	////7FF6AF7836A7	////7FF6C8DA6427	////7FF70A931027	////7FF7149FEFC7	////7FF7EED0C057	////7FF71AEABE5F	////7FF75DDFE6A6	////7FF672476A56	////7FF6901A4186	////7FF6FC272146	////7FF69E29C706	////7FF74DF4C6F6	////7FF757A99E06	////140819986////1407F0687////1407EBAE7//
#define OFFSET_ITEMCOUNT					0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038		//0x000000000038		//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000038//0x000000038//0x000000038//
//											0x7FF72F5DE800	//0x7FF6AB91E650	//0x7FF78FF5D7D0	//0x7FF700B8CF90	//0x7FF7241C0F60	//0x7FF6E634B570	//0x7FF7576FA930	//0x7FF68007A930	//0x7FF6D51095A0	//0x7FF6696097C0	//0x7FF75FF778B0	//0x7FF7976778B0//	0x7FF7F5F86040//	0x7FF792EF6040//	00007FF6A70F5590	//0x7FF61C6A55C0	//0x7FF63A154AC0		//0x7FF69BB74AC0	//	7FF6DE9A3370//	7FF6769C1F50////	7FF7E181FEF0//	//7FF7E00ADF40//	//7FF6C125DF40//	//7FF65BEFCD10//	//7FF6E418C250//	//7FF675A1C160//	//7FF728CABEE0//	//7FF62581BE90//	//7FF670C8B4B0//	//7FF7EAFCAE00//	//7FF7A1F09F70//	//7FF6BE7A9F70//	//7FF626859FF0//	//7FF6A96E8EC0//	//7FF7593088E0//	//7FF631388910//	//7FF781127670//	//7FF6735D7050//	//7FF62A765700//	//7FF6EDBE5700//	//7FF6B36F3EE0//	//7FF6EFFB3740//	//7FF619D13740//	//7FF758791C20//	//7FF76DC411A0//	//7FF7E2C6FB20//	//7FF61D84F5B0//	//7FF65F51EF00//	//7FF64AA3D990//	//7FF739FED990//	//7FF67005ADB0//	//7FF6B44FA5A0//	//7FF7832F7BB0//	//7FF6EBC57280//	//7FF6F3AA6B50//	//7FF7B59F5610//	//7FF69A215610//	//7FF73ADE42A0//	//7FF74F9329D0//	//7FF73B9229D0//	//7FF6FE051BD0//	//7FF6D620F373//	//7FF689A89233//	//7FF7CD2C3593//	//7FF7F679FC13//	//7FF72708F993//	//7FF60521E353//	//7FF74987CC33//	//7FF6EF7E7D10//	//7FF7A5BC5910//	//7FF7ED715910//	//7FF6BDEF5910//	//7FF6F3175120//	//7FF7A9361560//	//7FF789620560//	//7FF737A30560//	//7FF6ADD7F190//	//7FF654D5EE20//	//7FF7866EEDF0//	//7FF6782EC880//	//7FF749DC59D0//	//7FF61CD32FD0//	//7FF7E7350320//	//7FF62567CD60	////7FF65212B390	////7FF6FF118860	////7FF7B41C46F0	////7FF6F54F46C0	////7FF69A673610	////7FF6E87624C0	////7FF7B6BC16D0	////7FF70D8B0A40	////7FF6D7370A40	////7FF7F2F10A40	////7FF6AF4CFAA0	////7FF6C8AFB380	////7FF70A6899B0	////7FF714755B50	////7FF7EEA64720	////7FF71ABF3130	////7FF75DB40ED0	////7FF6721BC0F0	////7FF68FEEAB90	////7FF6FBFB9340	////7FF69DFE80A0	////7FF74DC980A0	////7FF7577E7030	////140564870////140564120////1405628B0//
#define OFFSET_LHCharacterMgr				0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8	//0x0000000001A8	//0x0000000001A8		//0x0000000001A8		//0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8//	0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000000001A8	//0x0000001A8//0x0000001A8//0x0000001A8//
//											0x7FF72FA987D6	//0x7FF6ABDD8026	//0x7FF790415EC6	//0x7FF7010448B6	//0x7FF723F914A7	//0x7FF6F3C6C3C4	//0x7FF6E67FC2E4	//00007FF757BA7554	//0x7FF680527554	//0x7FF6D55B5734	//0x7FF669AB9124	//0x7FF760423174	//0x7FF797B23184//	0x7FF7F6432A74//	0x7FF7933A2B04//	00007FF6A759BE91	//0x7FF61CB4BEB1	//0x7FF63A5F4FE1		//0x7FF69C014F61	//	7FF6DEE5D4E1//	7FF676E3E3CE////	7FF7E1C9777E//	//7FF7E0522D7F//	//7FF6C16D2D9F//	//7FF65C3712EF//	//7FF6E45FF04F//	//7FF675E8D98F//	//7FF72911D81F//	//7FF625C8CC9F//	//7FF6710F973F//	//7FF7EB435CCF//	//7FF7A2384494//	//7FF6BEC24524//	//7FF626CD3324//	//7FF6A9B5E6A3//	//7FF75977C6B3//	//7FF6317FC6E3//	//7FF781597B63//	//7FF673A4400C//	//7FF62ABCDE8C//	//7FF6EE04D69C//	//7FF6B3B54D9C//	//7FF6F041281C//	//7FF61A17269C//	//7FF758BEE75C//	//7FF76E098F37//	//7FF7E30E138C//	//7FF61DCBDBAC//	//7FF65F98C88C//	//7FF64AEA6A7B//	//7FF73A456A7B//	//7FF6704C167B//	//7FF6B495E58B//	//7FF78371D860//	//7FF6EC078EE0//	//7FF6F3EC7D20//	//7FF7B5E12E6B//	//7FF69A632E6B//	//7FF73B1FCDFB//	//7FF74FD43444//	//7FF73BD33444//	//7FF6FE45F3F1//	//7FF6D6249802//	//7FF689AC36A2//	//7FF7CD2FCAE4//	//7FF7F67D93FB//	//7FF7270C912B//	//7FF6052597FB//	//7FF7498B7C1B//	//7FF6EFBD7E3B//	//7FF7A5FA50D3//	//7FF7EDAF5133//	//7FF6BE2D50A3//	//7FF6F35533C1//	//7FF7A96E4BF1//	//7FF7899A2AD1//	//7FF737DB2AA1//	//7FF6AE0FE211//	//7FF6550DC751//	//7FF786A6C711//	//7FF678662CAC//	//7FF74A0E797C//	//7FF61D055BF7//	//7FF7E7675EC1//	//7FF62599E616	////7FF6524672EA	////7FF6FF44FFBA	////7FF7B44F97EE	////7FF6F582982E	////7FF69A9A4DEE	////7FF6E8A6878E	////7FF7B6EC404E	////7FF70DBB240E	////7FF6D767242E	////7FF7F32121DE	////7FF6AF7CED8E	////7FF6C8DEDCCE	////7FF70A97852E	////7FF714A42F4E	////7FF7EED55C51	////7FF71AF0471B	////7FF75DE58C74	////7FF6724D0195	////7FF6901FF4FC	////7FF6FC2CCACA	////7FF69E2F65D5	////7FF74DFA65C5	////7FF757AF313E	////14086F499////140837659////140831793//
#define OFFSET_ITEMDETAIL					0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028		//0x000000000028		//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
//											0x7FF72F3CBD00	//0x7FF6AB70BB50	//0x7FF78FD4ACD0	//0x7FF70097A490	//0x7FF7238C98C0	//0x7FF6F35A88C0	//0x7FF6E61388C0	//00007FF7574E7C80	//0x7FF67FE67C80	//0x7FF6D4EF73D0	//0x7FF6693F7620	//0x7FF75FD65EE0	//0x7FF797465EE0//	0x7FF7F5D74670//	0x7FF792CE4670//	00007FF6A6EE3BC0	//0x7FF61C493BF0	//0x7FF639F43340		//0x7FF69B963340	//	7FF6DE791E20//	7FF6767B0DD0////	7FF7E160ED70//	//7FF7DFE9CDC0//	//7FF6C104CDC0//	//7FF65BCEBB90//	//7FF6E3F7B0D0//	//7FF67580AFE0//	//7FF728A9AD60//	//7FF62560AD10//	//7FF670A7A330//	//7FF7EADB9C80//	//7FF7A1CF8DF0//	//7FF6BE598DF0//	//7FF626648E70//	//7FF6A94D7D40//	//7FF7590F7760//	//7FF631177790//	//7FF780F164F0//	//7FF6733C5ED0//	//7FF62A554580//	//7FF6ED9D4580//	//7FF6B34E2CA0//	//7FF6EFDA26D0//	//7FF619B026D0//	//7FF758580BB0//	//7FF76DA30130//	//7FF7E2A5EAB0//	//7FF61D63E540//	//7FF65F30DE90//	//7FF64A82C920//	//7FF739DDC920//	//7FF66FE49D40//	//7FF6B42E9530//	//7FF7830E6B40//	//7FF6EBA45FD0//	//7FF6F3895A70//	//7FF7B57E4530//	//7FF69A004530//	//7FF73ABD31C0//	//7FF74F7218F0//	//7FF73B7118F0//	//7FF6FDE40AF0//	//7FF6D5BFECD0//	//7FF68947CC50//	//7FF7CCCBB850//	//7FF7F619A560//	//7FF726A8A440//	//7FF604C19F40//	//7FF749279950//	//7FF6EF5D90D0//	//7FF7A59B7370//	//7FF7ED507370//	//7FF6BDCE7370//	//7FF6F2F66B50//	//7FF7A9153050//	//7FF789412080//	//7FF737822080//	//7FF6ADB71360//	//7FF654B50FC0//	//7FF7864E0F90//	//7FF6780DEA20//	//7FF749B8B1B0//	//7FF61CAF87B0//	//7FF7E7115F80//	//7FF625442A50	////7FF651EF1080	////7FF6FEEDE550	////7FF7B3F8A9B0	////7FF6F52BA9B0	////7FF69A439900	////7FF6E8528820	////7FF7B6987B00	////7FF70D676E70	////7FF6D7136E70	////7FF7F2CD6E70	////7FF6AF2960B0	////7FF6C88C2030	////7FF70A450660	////7FF71451C800	////7FF7EE82B3D0	////7FF71A9B9DE0	////7FF75D907B60	////7FF671F84450	////7FF68FCB2EF0	////7FF6FBD816A0	////7FF69DDB0990	////7FF74DA60990	////7FF7575AFA80	//114032C520///14032BE10////14032A8C0//
#define OFFSET_ITEMLOCKED					0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028		//0x000000000028		//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
#define OFFSET_ITEMBELONG					0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040	//0x000000000040	//0x000000000040		//0x000000000040		//0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040//	0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000030	//0x000000030//0x000000030//0x000000030//
//											0x7FF730788053	//0x7FF6ACAC4C83	//0x7FF7910ED683	//0x7FF701D128D3	//0x7FF724C4DD73	//0x7FF6F4912163	//0x7FF6E74A20A3	//00007FF7588212B3	//0x7FF6811A1243	//0x7FF6D6225563	//0x7FF66A7032D3	//0x7FF761079C73	//0x7FF798779C43//	0x7FF7F707BA53//	0x7FF793FEBAD3//	00007FF6A81D3C43	//0x7FF61D783D43	//0x7FF63B1E32D3		//0x7FF69CC03243	//	7FF6DFA1F8D3//	7FF677A56293////	7FF7E2846043//	//7FF7E10EBD23//	//7FF6C229BBF3//	//7FF65CF3C503//	//7FF6E51CBD03//	//7FF676A440E3//	//7FF729CD11A3//	//7FF62683CC83//	//7FF671CB03A3//	//7FF7EBFFEB43//	//7FF7A2F1EB93//	//7FF6BF7BEC23//	//7FF627863563//	//7FF6AA6CCA53//	//7FF75A2E20D3//	//7FF632361DD3//	//7FF7820E9D23//	//7FF674583F53//	//7FF62B6B3DE3//	//7FF6EEB33333//	//7FF6B4641FB3//	//7FF6F0EF3F73//	//7FF61AC53963//	//7FF7596A3903//	//7FF76EB40D21//	//7FF7E3B63FB1//	//7FF61E745111//	//7FF66040EEE1//	//7FF64B931DC1//	//7FF73AEE1DB1//	//7FF670EEBE11//	//7FF6B537DD41//	//7FF784168781//	//7FF6ECADCC91//	//7FF6F491FB24//	//7FF7B6814894//	//7FF69B034894//	//7FF73BC13FB4//	//7FF750732D04//	//7FF73C722D04//	//7FF6FEE47624//	//7FF6D6BD1ED4//	//7FF68A4211C4//	//7FF7CDC0BD74//	//7FF7F70DABC4//	//7FF7279CA144//	//7FF605B4F434//	//7FF74A1A7CA4//	//7FF6F051E6F4//	//7FF7A68B75F4//	//7FF7EE407544//	//7FF6BEBE7574//	//7FF6F3E76FA4//	//7FF7A9FD6404//	//7FF78A287E34//	//7FF738697D24//	//7FF6AE9C8894//	//7FF6559972F4//	//7FF787327084//	//7FF678E89984//	//7FF74A8B2B74//	//7FF61D821E54//	//7FF7E7DE9484//	//7FF6261191C4	////7FF652B76CF4	////7FF6FFB6B374	////7FF7B4BD8454	////7FF6F5F08404	////7FF69B074064	////7FF6E915BD04	////7FF7B75BEEE4	////7FF70E274B84	////7FF6D7D34BA4	////7FF7F38D4944	////7FF6AFE86874	////7FF6C94738B4	////7FF70AFF4C54	////7FF7150758A4	////7FF7EF36DF34	////7FF71B50E084	////7FF75E3FDB24	////7FF672A62B52	////7FF69078EFE2	////7FF6FC837072	////7FF69E854FA2	////7FF74E504F82	////7FF758043032	////140D6E892////140D973A2////140D535E2//
#define OFFSET_UNPACKITEMMAXCOUNT			0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC	//0x0000000004CC	//0x0000000004CC		//0x0000000004CC		//0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x000000000494//	0x000000000494//	0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000484//0x000000484//0x000000484//
#define OFFSET_UNPACKITEMCURCOUNT			0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8	//0x0000000004C8	//0x0000000004C8		//0x0000000004C8		//0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000490//	0x000000000490//	0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000480//0x000000480//0x000000480//
//											0x7FF730786BB1	//0x7FF6ACAC37E1	//0x7FF7910EC1E1	//0x7FF701D11431	//0x7FF724C4C8D1	//0x7FF6F4910CC1	//0x7FF6E74A0C01	//00007FF7588205C1	//0x7FF6811A0551	//0x7FF6D6224871	//0x7FF66A7025E1	//0x7FF761078901	//0x7FF7987788D1//	0x7FF7F707A6E1//	0x7FF793FEA761//	00007FF6A81D28D1	//0x7FF61D7829D1	//0x7FF63B1E2351		//0x7FF69CC022C1	//	7FF6DFA1E951//	7FF677A555A1////	7FF7E28450C1//	//7FF7E10EB031//	//7FF6C229AF01//	//7FF65CF3B821//	//7FF6E51CA9A1//	//7FF676A43401//	//7FF729CD04C1//	//7FF62683BFA1//	//7FF671C64AF1//	//7FF7EBFFD741//	//7FF7A2F1D791//	//7FF6BF7BD821//	//7FF627862161//	//7FF6AA680631//	//7FF75A295BD1//	//7FF6323158D1//	//7FF78209D831//	//7FF674539CA1//	//7FF62B6B2E71//	//7FF6EEB323C1//	//7FF6B4641041//	//7FF6F0EF3001//	//7FF61AC529F1//	//7FF7596A2991//	//7FF76EB3FDC1//	//7FF7E3B630E1//	//7FF61E744421//	//7FF66040E1F1//	//7FF64B8E6311//	//7FF73AE96301//	//7FF670EEAEB1//	//7FF6B537CDE1//	//7FF784167A91//	//7FF6ECA919A1//	//7FF6F48D4211//	//7FF7B6813951//	//7FF69B033951//	//7FF73BBC6670//	//7FF7506E5CE0//	//7FF73C6D5CE0//	//7FF6FEDFAD40//	//7FF6D6BD1220//	//7FF68A420510//	//7FF7CDC0ADA0//	//7FF7F70D9BF0//	//7FF7279C9170//	//7FF605B4E6D0//	//7FF74A1A6F40//	//7FF6F051D2F0//	//7FF7A68B6890//	//7FF7EE4067E0//	//7FF6BEBE6810//	//7FF6F3E762F0//	//7FF7A9FD4A40//	//7FF78A286470//	//7FF738696360//	//7FF6AE9C74D0//	//7FF655995970//	//7FF787325700//	//7FF678E88150//	//7FF74A8B1BE0//	//7FF61D820620//	//7FF7E7DE8760//	//7FF6261179C0	////7FF652B75D60	////7FF6FFB69B70	////7FF7B4BD74C0	////7FF6F5F07470	////7FF69B0730D0	////7FF6E915AFE0	////7FF7B75BD700	////7FF70E273BF0	////7FF6D7D33C10	////7FF7F38D39B0	////7FF6AFE85970	////7FF6C94720A0	////7FF70AFA5650	////7FF715074B80	////7FF7EF36D220	////7FF71B4BF490	////7FF75E3FCBA0	////7FF672A61340	////7FF69078D800	////7FF6FC8363E0	////7FF69E8537C0	////7FF74E5037A0	////7FF758041850	////140D6CB00////140D960A0////140D525A0//
#define OFFSET_ENCHANTSELECTEDITEM			0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0	//0x0000000005D0	//0x0000000005D0		//0x0000000005D0		//0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x0000000005A0//	0x000000000598//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000580//	0x000000000580//	0x000000000580	//0x000000000578	//0x000000000570	//0x000000000570	//0x000000000570	//0x000000000570	//0x000000000570	//0x000000000570	//0x000000000570	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000000550	//0x000000548//0x000000548//0x000000548//
#define OFFSET_ENCHANTSELECTEDSCROLLITEM	0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8	//0x0000000005D8	//0x0000000005D8		//0x0000000005D8		//0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005D8//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A0//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000588//	0x000000000588//	0x000000000588	//0x000000000580	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000550//0x000000550//0x000000550//
//											0x7FF7306F334E	//0x7FF6ACA2FF7E	//0x7FF79105BC3E	//0x7FF701C80E6E	//0x7FF724BB73AE	//0x7FF6F487C84E	//0x7FF6E740C78E	//00007FF7587CB52E	//0x7FF68114B4BE	//0x7FF6D61CF7DE	//0x7FF66A6AF1FE	//0x7FF760FE0DFE	//0x7FF7986E0DCE//	0x7FF7F6FEB2BE//	0x7FF793F5B33E//	00007FF6A81436AE	//0x7FF61D6F37AE	//0x7FF63B19CE5E		//0x7FF69CBBCDCE	//	7FF6DF9D965E//	7FF677A01E1E////	7FF7E280071E//	//7FF7E1098BAE//	//7FF6C2248A7E//	//7FF65CEE9EEE//	//7FF6E5132D9E//	//7FF6769F278E//	//7FF729C7F62E//	//7FF6267EB33E//	//7FF671C24FAE//	//7FF7EBF669CE//	//7FF7A2E8952E//	//7FF6BF7295BE//	//7FF6277D400E//	//7FF6AA641E8E//	//7FF75A2574CE//	//7FF6322D71CE//	//7FF78205F0EE//	//7FF6744FA8AE//	//7FF62B66EAAE//	//7FF6EEAEDFFE//	//7FF6B45F4BAE//	//7FF6F0EA6E7E//	//7FF61AC0686E//	//7FF75965E62E//	//7FF76EAFD00A//	//7FF7E3B18D2A//	//7FF61E6FBA0A//	//7FF6603C57FA//	//7FF64B89C5CA//	//7FF73AE4C5BA//	//7FF670EA0AEA//	//7FF6B5332DCA//	//7FF78411F31A//	//7FF6ECA4643A//	//7FF6F487990A//	//7FF7B67C872A//	//7FF69AFE872A//	//7FF73BB6A84A//	//7FF750690FEA//	//7FF73C680FEA//	//7FF6FEDAAABA//	//7FF6D6B844BA//	//7FF68A3D5FAA//	//7FF7CDBAFB9A//	//7FF7F707E9AA//	//7FF72796DF2A//	//7FF605B0898A//	//7FF74A16160A//	//7FF6F04D935A//	//7FF7A687433A//	//7FF7EE3C428A//	//7FF6BEBA42BA//	//7FF6F3E2C5CA//	//7FF7A9F9026A//	//7FF78A241D7A//	//7FF738651D2A//	//7FF6AE97BECA//	//7FF65595131A//	//7FF7872E10AA//	//7FF678E4327A//	//7FF74A86BD0A//	//7FF61D7D906A//	//7FF7E7DA484A//	//7FF6260D1DCA	////7FF652B2705A	////7FF6FFB234DA	////7FF7B4B8543A	////7FF6F5EB53EA	////7FF69B02367A	////7FF6E91188AA	////7FF7B7576AAD	////7FF6D7CE7C7D	////7FF7F3887A1D	////7FF6AFE42EFD	////7FF6C942CF3D	////7FF70AFA4D9D	////7FF7150303CD	////7FF7EF329CAD	////7FF71B4BEBDD	////7FF75E3B508D	////7FF672A1D33D	////7FF6907450BD	////7FF6FC7EFF1D	////7FF69E80C70D	////7FF74E4BC6ED	////7FF757FFB03D	////140D6C25D////140D4A0D6////140CFF56D//
#define OFFSET_QUESTTABLE					0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028		//0x000000000028		//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
//											0x7FF730596811	//0x7FF6AC8D3831	//0x7FF790EFD0A1	//0x7FF701B22881	//0x7FF724A83F61	//0x7FF6F474C981	//0x7FF6E72DC8C1	//00007FF758647F21	//0x7FF680FC7EB1	//0x7FF6D6055611	//0x7FF66A53F0A1	//0x7FF760EAD771	//0x7FF7985AD741//	0x7FF7F6EC9021//	0x7FF793E390A1//	00007FF6A8021521	//0x7FF61D5D1571	//0x7FF63B06F831		//0x7FF69CA8F7A1	//	7FF6DF8AD091//	7FF67788FD31////	7FF7E26D4901//	//7FF7E0F28501//	//7FF6C20D83D1//	//7FF65CDB12E1//	//7FF6E50384A1//	//7FF6768B4761//	//7FF729B420A1//	//7FF6266AED11//	//7FF671AFB171//	//7FF7EBE3AE41//	//7FF7A2D5D3A1//	//7FF6BF5FD431//	//7FF6276AA731//	//7FF6AA51CBB1//	//7FF75A12DB41//	//7FF6321AD841//	//7FF781F37281//	//7FF6743D2AF1//	//7FF62B544A61//	//7FF6EE9C4001//	//7FF6B44CDFB1//	//7FF6F0D7F771//	//7FF61AADF161//	//7FF759569111//	//7FF76EA08701//	//7FF7E39F1B31//	//7FF61E5CEDA1//	//7FF660298D61//	//7FF64B7ACE91//	//7FF73AD5CE81//	//7FF670D7FD21//	//7FF6B5212C51//	//7FF783FF7191//	//7FF6EC956FF1//	//7FF6F478AA61//	//7FF7B66CAED1//	//7FF69AEEAF01//	//7FF73BA798E1//	//7FF7505A4C21//	//7FF73C594C21//	//7FF6FECC4711//	//7FF6D6A794E1//	//7FF68A298731//	//7FF7CDAC0741//	//7FF7F6F94CD4//	//7FF727884254//	//7FF605A0DF24//	//7FF74A067CF4//	//7FF6F03D6684//	//7FF7A677BE84//	//7FF7EE2CBDD4//	//7FF6BEAABE04//	//7FF6F3D24C54//	//7FF7A9E91454//	//7FF78A144DE4//	//7FF738554D94//	//7FF6AE888824//	//7FF6558581B4//	//7FF7871E7F44//	//7FF678D43374//	//7FF74A775294//	//7FF61D6E1E24//	//7FF7E7CAC0B4//	//7FF625FD5794	////7FF652A73D94	////7FF6FFA2CC34	////7FF7B4ACED14	////7FF6F5DFECC4	////7FF69AF70954	////7FF6E902AFD5	////7FF7B7488895	////7FF70E178CD5	////7FF6D7C38CF5	////7FF7F37D8A95	////7FF6AFD8DC15	////7FF6C9381D0C	////7FF70AEB270C	////7FF714F7596C	////7FF7EF2746FC	////7FF71B3CD96C	////7FF75E2FF6AC	////7FF67296D07C	////7FF6906968AC	////7FF6FC73753C	////7FF69E75286C	////7FF74E40284C	////7FF757F448CC	////140CBEAEC////140C91A5C////140C92B2C//
#define OFFSET_QUESTINFO					0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028		//0x000000000028		//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000028//0x000000028//0x000000028//
//											0x7FF730596848	//0x7FF6AC8D3868	//0x7FF790EFD0D8	//0x7FF701B228B8	//0x7FF724A83F98	//0x7FF6F474C9B8	//0x7FF6E72DC8F8	//00007FF758647F58	//0x7FF680FC7EE8	//0x7FF6D6055648	//0x7FF66A53F0D8	//0x7FF760EAD7A8	//0x7FF7985AD778//	0x7FF7F6EC9058//	0x7FF793E390D8//	00007FF6A8021558	//0x7FF61D5D15A8	//0x7FF63B06F868		//0x7FF69CA8F7D8	//	7FF6DF8AD0C8//	7FF67788FD68////	7FF7E26D4938//	//7FF7E0F28538//	//7FF6C20D8408//	//7FF65CDB1318//	//7FF6E50384D8//	//7FF6768B4798//	//7FF729B420D8//	//7FF6266AED48//	//7FF671AFB1A8//	//7FF7EBE3AE78//	//7FF7A2D5D3D8//	//7FF6BF5FD468//	//7FF6276AA768//	//7FF6AA51CBE8//	//7FF75A12DB78//	//7FF6321AD878//	//7FF781F372B8//	//7FF6743D2B28//	//7FF62B544A98//	//7FF6EE9C4038//	//7FF6B44CDFE8//	//7FF6F0D7F7A8//	//7FF61AADF198//	//7FF759569148//	//7FF76EA08738//	//7FF7E39F1B68//	//7FF61E5CEDD8//	//7FF660298D98//	//7FF64B7ACEC8//	//7FF73AD5CEB8//	//7FF670D7FD58//	//7FF6B5212C88//	//7FF783FF71C8//	//7FF6EC957028//	//7FF6F478AA98//	//7FF7B66CAF08//	//7FF69AEEAF38//	//7FF73BA79918//	//7FF7505A4C58//	//7FF73C594C58//	//7FF6FECC4748//	//7FF6D6A79518//	//7FF68A298768//	//7FF7CDAC0778//	//7FF7F6F94D0B//	//7FF72788428B//	//7FF605A0DF5B//	//7FF74A067D2B//	//7FF6F03D66BB//	//7FF7A677BEBB//	//7FF7EE2CBE0B//	//7FF6BEAABE3B//	//7FF6F3D24C8B//	//7FF7A9E9148B//	//7FF78A144E1B//	//7FF738554DCB//	//7FF6AE88885B//	//7FF6558581EB//	//7FF7871E7F7B//	//7FF678D433AB//	//7FF74A7752CB//	//7FF61D6E1E5B//	//7FF7E7CAC0EB//	//7FF625FD57CB	////7FF652A73DCB	////7FF6FFA2CC6B	////7FF7B4ACED4A	////7FF6F5DFECFA	////7FF69AF7098A	////7FF6E902B00B	////7FF7B74888CB	////7FF70E178D0B	////7FF6D7C38D2B	////7FF7F37D8ACB	////7FF6AFD8DC4B	////7FF6C9381D42	////7FF70AEB2742	////7FF714F759A2	////7FF7EF274732	////7FF71B3CD9A2	////7FF75E2FF6E2	////7FF67296D0B2	////7FF6906968E2	////7FF6FC737572	////7FF69E7528A2	////7FF74E402882	////7FF757F44902	////140CBEB22////140C91A92////140C92B62//
#define OFFSET_QUESTSTATE					0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005	//0x000000000005	//0x000000000005		//0x000000000005		//0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005//	0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000000005	//0x000000005//0x000000005//0x000000005//
//											0x7FF73094EB5D	//0x7FF6ACC8B6ED	//0x7FF7912B4F06	//0x7FF701EDA716	//0x7FF724E172A6	//0x7FF6F4AD8286	//0x7FF6E76681C6	//00007FF7589F9036	//0x7FF681378FC6	//0x7FF6D6405976	//0x7FF66A8DFAF6	//0x7FF761244AC6	//0x7FF798944A96//	00007FF7F72462F6//	0x7FF7941B6346//	00007FF6A8354576	//0x7FF61D904676	//0x7FF63B3B6036		//0x7FF69CDD5FA6	//	7FF6DFBF1E36//	7FF677BE1866////	7FF7E29D7F16//	//7FF7E1281486//	//7FF6C2431356//	//7FF65D0D1766//	//7FF6E5352376//	//7FF676BD8DA6//	//7FF729E65F66//	//7FF6269D1206//	//7FF671DF9856//	//7FF7EC149266//	//7FF7A306AC90//	//7FF6BF90AD20//	//7FF6279AEE00//	//7FF6AA8164A0//	//7FF75A429470//	//7FF6324A8F90//	//7FF782230C20//	//7FF6746C7630//	//7FF62B844BB0//	//7FF6EECC4000//	//7FF6B47E6E30//	//7FF6F1097B70//	//7FF61ADF7560//	//7FF759830E60//	//7FF76ECDE270//	//7FF7E3D0C510//	//7FF61E8E4A10//	//7FF660564550//	//7FF64BA87230//	//7FF73B037220//	//7FF67103E390//	//7FF6B54D4A50//	//7FF7842BE490//	//7FF6ECC37AD0//	//7FF6F4A7764D//	//7FF7B6971ACD//	//7FF69B191ACD//	//7FF73BD1D6CD//	//7FF75083BA9D//	//7FF73C82BA9D//	//7FF6FEF4FECD//	//7FF6D6D2B6A7//	//7FF68A5798D7//	//7FF7CDD6FF97//	//7FF7F7240B57//	//7FF727B300D7//	//7FF605CACA97//	//7FF74A303847//	//7FF6F06271D7//	//7FF7A6A13D47//	//7FF7EE563C97//	//7FF6BED43CC7//	//7FF6F3F7D4D7//	//7FF7AA0D6C17//	//7FF78A3881E7//	//7FF7387980B7//	//7FF6AEACAE57//	//7FF655A9C317//	//7FF78742C057//	//7FF678F8C5B7//	//7FF74AA17837//	//7FF61D92D617//	//7FF7E7EFB8B7//	//7FF62622A907	////7FF652C8E4F7	////7FF6FFC7B717	////7FF7B4CED997	////7FF6F601D947	////7FF69B187757	////7FF6E9264DF7	////7FF7B76CC927	////7FF70E385247	////7FF6D7E45267	////7FF7F39E5007	////7FF6AFF97FF7	////7FF6C9582CB7	////7FF70B107067	////7FF71517E397	////7FF7EF475007	////7FF71B5D03C7	////7FF75E5139C7	////7FF672B24E67	////7FF69084A727	////7FF6FC8F9117	////7FF69E916F27	////7FF74E5C6F07	////7FF758100E07	////140E77B97////140E56317////140E187E7//
#define OFFSET_PLAYERAUTOSTATE				0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0	//0x0000000000D0	//0x0000000000D0		//0x0000000000D0		//0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000D0//0x0000000D0//0x0000000D0//
//											0x7FF730560B63	//0x7FF6AC89DB83	//0x7FF790EC7873	//0x7FF701AED363	//0x7FF724A567D3	//0x7FF6F471E5C3	//0x7FF6E72AE503	//00007FF758613883	//0x7FF680F93813	//0x7FF6D6023813	//0x7FF66A50D933	//0x7FF760E7BE93	//0x7FF79857BE93//	00007FF7F6E98983//	0x7FF793E08A03//	00007FF6A7FF0A33	//0x7FF61D5A0A83	//0x7FF63B03F443		//0x7FF69CA5F3B3	//	7FF6DF87D013//	7FF67785C223////	7FF7E26A48D3//	//7FF7E0EF4A53//	//7FF6C20A4923//	//7FF65CD750D3//	//7FF6E4FFC293//	//7FF676884903//	//7FF729B12333//	//7FF62667EF83//	//7FF671AC8DC3//	//7FF7EBE080B3//	//7FF7A2D2A813//	//7FF6BF5CA8A3//	//7FF627679DD3//	//7FF6AA4EC8E3//	//7FF75A0FB703//	//7FF63217B423//	//7FF781F04E13//	//7FF6743A0983//	//7FF62B512B23//	//7FF6EE9920C3//	//7FF6B449E0B3//	//7FF6F0D51B63//	//7FF61AAB1553//	//7FF759532DD3//	//7FF76E9D28FC//	//7FF7E39BE6DC//	//7FF61E59BFD0//	//7FF660266011//	//7FF64B77D086//	//7FF73AD2D076//	//7FF670D4D4A6//	//7FF6B51E06D6//	//7FF783FC5266//	//7FF6EC920836//	//7FF6F4757386//	//7FF7B6696516//	//7FF69AEB6546//	//7FF73BA477A6//	//7FF750573B86//	//7FF73C563B86//	//7FF6FEC8EB86//	//7FF6D6A3E356//	//7FF68A260696//	//7FF7CDA8E896//	//7FF7F6F64526//	//7FF727853AA6//	//7FF6059D8536//	//7FF74A032606//	//7FF6F03A3636//	//7FF7A6749816//	//7FF7EE299766//	//7FF6BEA79796//	//7FF6F3CF2CB6//	//7FF7A9E5F176//	//7FF78A112CA6//	//7FF738522C56//	//7FF6AE856D56//	//7FF655824B76//	//7FF7871B4906//	//7FF678D10456//	//7FF74A73BF56//	//7FF61D6AF326//	//7FF7E7C73166//	//7FF625FA2216	////7FF652A3DF46	////7FF6FF9FA9F6	////7FF7B4A9A986	////7FF6F5DCA936	////7FF69AF3C6C6	////7FF6E8FEED06	////7FF7B74512E6	////7FF70E144EB6	////7FF6D7C04ED6	////7FF7F37A4C76	////7FF6AFD57DD6	////7FF6C9343306	////7FF70AE77FF6	////7FF714F40B06	////7FF7EF241FC6	////7FF71B38CA56	////7FF75E2C4BD6	////7FF672931E16	////7FF69065A846	////7FF6FC6F8F36	////7FF69E71EC86	////7FF74E3CEC66	////7FF757F12E56	////140C829D6////140C5DAE6////140C55FB6//
#define OFFSET_INVENCURQUICKITEM			0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488	//0x000000000488	//0x000000000488		//0x000000000488		//0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000480//	0x000000000478//	0x000000000478//	0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000470//0x000000470//0x000000470//
//											0x7FF73073AFAF	//0x7FF6ACA77BDF	//0x7FF7910A061F	//0x7FF701CC586F	//0x7FF724C0074F	//0x7FF6F48C503F	//0x7FF6E7454F7F	//00007FF75882666F	//0x7FF6811A65FF	//0x7FF6D622A91F	//0x7FF66A70868F	//0x7FF76102CF3F	//0x7FF79872CF0F//	00007FF7F702F05F//	0x7FF793F9F0DF//	00007FF6A81875CF	//0x7FF61D7376CF	//0x7FF63B1E5D8F		//0x7FF69CC05CFF	//	7FF6DFA223CF//	7FF677A5B67F////	7FF7E2848B5F//	//7FF7E10F112F//	//7FF6C22A0FFF//	//7FF65CF4190F//	//7FF6E5180F8F//	//7FF676A494EF//	//7FF729CD655F//	//7FF62684201F//	//7FF671C6729F//	//7FF7EBFB3EDF//	//7FF7A2ED436F//	//7FF6BF7743FF//	//7FF627818A1F//	//7FF6AA682DDF//	//7FF75A29837F//	//7FF63231807F//	//7FF78209FFDF//	//7FF67453C44F//	//7FF62B6B68AF//	//7FF6EEB35DFF//	//7FF6B46460CF//	//7FF6F0EF808F//	//7FF61AC57A7F//	//7FF7596A63BF//	//7FF76EB4372F//	//7FF7E3B67E9F//	//7FF61E748ACF//	//7FF66041289F//	//7FF64B8E8B3F//	//7FF73AE98B2F//	//7FF670EEFAAF//	//7FF6B53819DF//	//7FF78416C10F//	//7FF6ECA941BF//	//7FF6F48D69FF//	//7FF7B68185DF//	//7FF69B0385DF//	//7FF73BBC906F//	//7FF7506E87BF//	//7FF73C6D87BF//	//7FF6FEDFD73F//	//7FF6D6BD658F//	//7FF68A4254BF//	//7FF7CDC0FE6F//	//7FF7F70DECBF//	//7FF7279CE23F//	//7FF605B52DBF//	//7FF74A1AB29F//	//7FF6F04DC52F//	//7FF7A68BAA9F//	//7FF7EE40A9EF//	//7FF6BEBEAA1F//	//7FF6F3E7AF5F//	//7FF7A9F9343F//	//7FF78A244F4F//	//7FF738654EFF//	//7FF6AE9CC35F//	//7FF6559544EF//	//7FF7872E427F//	//7FF678E4632F//	//7FF74A8B658F//	//7FF61D7DC10F//	//7FF7E7DEC74F//	//7FF6260D525F	////7FF652B7A70F	////7FF6FFB269AF	////7FF7B4BDBDDF	////7FF6F5F0BD8F	////7FF69B0779DF	////7FF6E915F3DF	////7FF7B7579CBF	////7FF70E2782DF	////7FF6D7D382FF	////7FF7F38D809F	////7FF6AFE89FBF	////7FF6C9476E8F	////7FF70AFA853F	////7FF715078E0F	////7FF7EF37147F	////7FF71B4C237F	////7FF75E4010CF	////7FF672A660EF	////7FF6907482BF	////7FF6FC83ADCF	////7FF69E858C6F	////7FF74E508C4F	////7FF758046A6F	////140D715DF////140D9AA6F////140D5741F//
#define OFFSET_QUICKSLOTCOMMONLIST			0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398	//0x000000000398	//0x000000000398		//0x000000000398		//0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398//	0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000000398	//0x000000398//0x000000398//0x000000398//
//											0x7FF7306ADF14	//0x7FF6AC9EAB44	//0x7FF791014571	//0x7FF701C397A1	//0x7FF724B6CC44	//0x7FF6F48337D4	//0x7FF6E73C3714	//00007FF7587330E4	//0x7FF6810B3074	//0x7FF6D61375F4	//0x7FF66A625CC4	//0x7FF760F964B4	//0x7FF798696484//	00007FF7F6FA71E4//	0x7FF793F17264//	00007FF6A80FF5E4	//0x7FF61D6AF734	//0x7FF63B11FFD4		//0x7FF69CB3FF44	//	7FF6DF95C794//	7FF6779741E4////	7FF7E2783CC4//	//7FF7E100BE64//	//7FF6C21BBD34//	//7FF65CE5BEA4//	//7FF6E50E6134//	//7FF67695F414//	//7FF729BEC9B4//	//7FF6267588D4//	//7FF671BDFAC4//	//7FF7EBF1AB04//	//7FF7A2E3F134//	//7FF6BF6DF1C4//	//7FF62778D044//	//7FF6AA5FE1B4//	//7FF75A2121D4//	//7FF632291ED4//	//7FF782019F94//	//7FF6744B5334//	//7FF62B626F74//	//7FF6EEAA64E4//	//7FF6B45B44F4//	//7FF6F0E66B14//	//7FF61ABC6504//	//7FF759617884//	//7FF76EAB6AE4//	//7FF7E3AD96E4//	//7FF61E6B6864//	//7FF6603807A4//	//7FF64B855304//	//7FF73AE052F4//	//7FF670E60024//	//7FF6B52F3EC4//	//7FF7840DCFD4//	//7FF6ECA00C14//	//7FF6F4834504//	//7FF7B6779304//	//7FF69AF99334//	//7FF73BB27C74//	//7FF75064FB84//	//7FF73C63FB84//	//7FF6FED6DA94//	//7FF6D6AAE7D4//	//7FF68A309474//	//7FF7CDB33234//	//7FF7F7005514//	//7FF7278F4A94//	//7FF605A442A4//	//7FF74A09DDD4//	//7FF6F040A474//	//7FF7A67B2D54//	//7FF7EE302CA4//	//7FF6BEAE2CD4//	//7FF6F3D606F4//	//7FF7A9ECCD54//	//7FF78A1806A4//	//7FF738590654//	//7FF6AE8BEB64//	//7FF6558913F4//	//7FF787221184//	//7FF678D7F124//	//7FF74A7ED884//	//7FF61D71B764//	//7FF7E7D21ED4//	//7FF62600A424	////7FF652AA54E4	////7FF6FFA61814	////7FF7B4B05514	////7FF6F5E354C4	////7FF69AFA6E14	////7FF6E909D364	////7FF7B74BDF24	////7FF70E1ADD84	////7FF6D7C6DDA4	////7FF7F380DB44	////7FF6AFDC52C4	////7FF6C93AD054	////7FF70AF2A454	////7FF714FB0334	////7FF7EF2AB9C4	////7FF71B441264	////7FF75E377AC3	////7FF67299B304	////7FF6906C4BE4	////7FF6FC76E914	////7FF69E789BF4	////7FF74E439BD4	////7FF757F78BE4	////140CEC8B4////140CC5234////140CC0984//
#define OFFSET_TARGETFINDER_MANUALSEL		0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054	//0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054	//0x000000000054	//0x000000000054		//0x000000000054		//0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x000000000054//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C//	0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x00000000004C	//0x000000048//0x000000048//0x000000048//
//											0x7FF72F86B379	//0x7FF6ABBAB1C9	//0x7FF7901EA469	//0x7FF700E19E39	//0x7FF723D68D29	//0x7FF6F3A47B39	//0x7FF6E65D7B39	//00007FF757986CA9	//0x7FF680306CA9	//0x7FF6D5395339	//0x7FF6698AAA5A	//0x7FF7602158FA	//0x7FF7979158FA//	00007FF7F6224DFA//	0x7FF793194E8A//	00007FF6A739355A	//0x7FF61C94358A	//0x7FF63A3EF92A		//0x7FF69BE0F92A	//	7FF6DEC3CFCA//	7FF676C5C0BA////	7FF7E1AB7B0A//	//7FF7E034595A//	//7FF6C14F595A//	//7FF65C193F9A//	//7FF6E442337A//	//7FF675CB2CCA//	//7FF728F4292A//	//7FF625AB286A//	//7FF670F20AAA//	//7FF7EB2619AA//	//7FF7A2153E69//	//7FF6BE9F3E69//	//7FF626AF0DEA//	//7FF6A997E3EA//	//7FF75959DCDA//	//7FF63161DD0A//	//7FF781370BF9//	//7FF67381F689//	//7FF62A9ADC49//	//7FF6EDE2DC39//	//7FF6B3939679//	//7FF6F01F8E49//	//7FF619F58E49//	//7FF7589D72C9//	//7FF76DE858F9//	//7FF7E2EB2F29//	//7FF61DA91779//	//7FF65F760E49//	//7FF64AC7F489//	//7FF73A22F489//	//7FF67029C509//	//7FF6B473B9D9//	//7FF783538F39//	//7FF6EBE98FB9//	//7FF6F3CE87B9//	//7FF7B5C36BF9//	//7FF69A456BF9//	//7FF73B0271B9//	//7FF74FB75819//	//7FF73BB65819//	//7FF6FE294179//	//7FF6D604EAE9//	//7FF6898CCA69//	//7FF7CD10D2E9//	//7FF7F65EBEF9//	//7FF726EDBD79//	//7FF60506B879//	//7FF7496CAD79//	//7FF6EFA2C549//	//7FF7A5DFADC9//	//7FF7ED94AE29//	//7FF6BE12ADC9//	//7FF6F33AA209//	//7FF7A9548EB9//	//7FF789807DA9//	//7FF737C17D79//	//7FF6ADF66719//	//7FF654F463C9//	//7FF7868D6399//	//7FF6784D5C19//	//7FF749F60899//	//7FF61CECDA89//	//7FF7E74EBA99//	//7FF625818719	////7FF6522C6B99	////7FF6FF2B3B09	////7FF7B4360399	////7FF6F5690369	////7FF69A8107F9	////7FF6E88FFB39	////7FF7B6D608B9	////7FF70DA4F8C9	////7FF6D750F8C9	////7FF7F30AF8C9	////7FF6AF66F129	////7FF6C8C9A429	////7FF70A828999	////7FF7148F49D9	////7FF7EEC01CB9	////7FF71ADA2BBA	////7FF75DCF5DBA	////7FF67237092A	////7FF69009F25A	////7FF6FC16D79A	////7FF69E19AD2A	////7FF74DE4AD1A	////7FF757998F0A	//
#define OFFSET_TARGETFINDER_AUTOTARGET		0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064	//0x000000000064	//0x000000000064		//0x000000000064		//0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x000000058//0x000000058//0x000000058//
//											0x7FF72F8923C5	//0x7FF6ABBD2215	//0x7FF7902114B5	//0x7FF700E40D65	//0x7FF723D8F8D5	//0x7FF6F3A6EA15	//0x7FF6E65FE9C5	//00007FF7579AD865	//0x7FF68032D865	//0x7FF6D53BBF45	//0x7FF6698D1B75	//0x7FF76023C975	//0x7FF79793C975//	00007FF7F624BE75//	0x7FF7931BBF05//	00007FF6A73BA285	//0x7FF61C96A2A5	//0x7FF63A415F75		//0x7FF69BE35F75	//	7FF6DEC63465//	7FF676C824E5////	7FF7E1ADDE95//	//7FF7E036BCE5//	//7FF6C151BCE5//	//7FF65C1BA265//	//7FF6E4449465//	//7FF675CD8E65//	//7FF728F68AB5//	//7FF625AD8655//	//7FF670F46625//	//7FF7EB285DF5//	//7FF7A2188CA5//	//7FF6BEA28CA5//	//7FF626B15065//	//7FF6A99A20E5//	//7FF7595C17C5//	//7FF6316417F5//	//7FF7813A5105//	//7FF673853965//	//7FF62A9E1A15//	//7FF6EDE619D5//	//7FF6B396D2B5//	//7FF6F022C7F5//	//7FF619F8C7F5//	//7FF758A0ACB5//	//7FF76DEB9355//	//7FF7E2EE6655//	//7FF61DAC4E25//	//7FF65F794505//	//7FF64ACB2C25//	//7FF73A262C25//	//7FF6702CF795//	//7FF6B476E615//	//7FF78356A9A5//	//7FF6EBEC97C5//	//7FF6F3D18D45//	//7FF7B5C66985//	//7FF69A486985//	//7FF73B0558E5//	//7FF74FBA3EC5//	//7FF73BB93EC5//	//7FF6FE2C2825//	//7FF6D607C145//	//7FF6898FA4E5//	//7FF7CD13AB95//	//7FF7F661A405//	//7FF726F0A285//	//7FF605099BA5//	//7FF7496F8D85//	//7FF6EFA5B775//	//7FF7A5E2AC05//	//7FF7ED97AC65//	//7FF6BE15ABE5//	//7FF6F33D9F55//	//7FF7A9577675//	//7FF789835E55//	//7FF737C45E25//	//7FF6ADF93AC5//	//7FF654F73705//	//7FF7869036D5//	//7FF678502465//	//7FF749F8B2D5//	//7FF61CEF84D5//	//7FF7E7518605//	//7FF625842B85	////7FF6522F0FD5	////7FF6FF2DDD95	////7FF7B4389C55	////7FF6F56B9C25	////7FF69A837F55	////7FF6E89274B5	////7FF7B6D8BA35	////7FF70DA7A7C5	////7FF6D753A7C5	////7FF7F30DA7C5	////7FF6AF698DA5	////7FF6C8CC2235	////7FF70A850545	////7FF71491C3E5	////7FF7EEC28CE5	////7FF71ADC6C75	////7FF75DD13F65	////7FF67238E2F5	////7FF6900BC985	////7FF6FC18AE75	////7FF69E1B8455	////7FF74DE68445	////7FF7579B66B5	//
#define OFFSET_TARGETFINDER_AUTOINTER		0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C	//0x00000000006C	//0x00000000006C		//0x00000000006C		//0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064//	0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000000064	//0x000000060//0x000000060//0x000000060//
//											0x7FF72F892488	//0x7FF6ABBD22D8	//0x7FF790211578	//0x7FF700E40E28	//0x7FF723D8F998	//0x7FF6F3A6EAD8	//0x7FF6E65FEA88	//00007FF7579AD928	//0x7FF68032D928	//0x7FF6D53BC008	//0x7FF6698D1C38	//0x7FF76023CA38	//0x7FF79793CA38//	00007FF7F624BF38//	0x7FF7931BBFC8//	00007FF6A73BA348	//0x7FF61C96A368	//0x7FF63A416038		//0x7FF69BE36038	//	7FF6DEC63528//	7FF676C825A8////	7FF7E1ADDF58//	//7FF7E036BDA8//	//7FF6C151BDA8//	//7FF65C1BA328//	//7FF6E4449528//	//7FF675CD8F28//	//7FF728F68B78//	//7FF625AD8718//	//7FF670F466E8//	//7FF7EB285EB8//	//7FF7A2188D68//	//7FF6BEA28D68//	//7FF626B15128//	//7FF6A99A21A8//	//7FF7595C1888//	//7FF6316418B8//	//7FF7813A51C8//	//7FF673853A28//	//7FF62A9E1AD8//	//7FF6EDE61A98//	//7FF6B396D378//	//7FF6F022C8B8//	//7FF619F8C8B8//	//7FF758A0AD78//	//7FF76DEB9418//	//7FF7E2EE6718//	//7FF61DAC4EE8//	//7FF65F7945C8//	//7FF64ACB2CE8//	//7FF73A262CE8//	//7FF6702CF858//	//7FF6B476E6D8//	//7FF78356AA68//	//7FF6EBEC9888//	//7FF6F3D18E08//	//7FF7B5C66A48//	//7FF69A486A48//	//7FF73B0559A8//	//7FF74FBA3F88//	//7FF73BB93F88//	//7FF6FE2C28E8//	//7FF6D607C208//	//7FF6898FA5A8//	//7FF7CD13AC53//	//7FF7F661A4C3//	//7FF726F0A343//	//7FF605099C63//	//7FF7496F8E43//	//7FF6EFA5B833//	//7FF7A5E2ACC3//	//7FF7ED97AD23//	//7FF6BE15ACA3//	//7FF6F33DA013//	//7FF7A9577733//	//7FF789835F13//	//7FF737C45EE3//	//7FF6ADF93B83//	//7FF654F737C3//	//7FF786903793//	//7FF678502523//	//7FF749F8B393//	//7FF61CEF8593//	//7FF7E75186C3//	//7FF625842C43	////7FF6522F1093	////7FF6FF2DDE53	////7FF7B4389D13	////7FF6F56B9CE3	////7FF69A838013	////7FF6E8927573	////7FF7B6D8BAF3	////7FF70DA7A883	////7FF6D753A883	////7FF7F30DA883	////7FF6AF698E63	////7FF6C8CC22F3	////7FF70A850603	////7FF71491C4A3	////7FF7EEC28DA3	////7FF71ADC6D33	////7FF75DD14023	////7FF67238E3B3	////7FF6900BCA43	////7FF6FC18AF33	////7FF69E1B8513	////7FF74DE68503	////7FF7579B6773	//
#define OFFSET_TARGETFINDER_BOSSTARGET		0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074	//0x000000000074	//0x000000000074		//0x000000000074		//0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C//	0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x00000000006C	//0x000000068//0x000000068//0x000000068//
//											0x7FF72F88254F	//0x7FF6ABBC239F	//0x7FF79020163F	//0x7FF700E30F0F	//0x7FF723D7FBCF	//0x7FF6F3A5EA3F	//0x7FF6E65EEA3F	//00007FF75799DB5F	//0x7FF68031DB5F	//0x7FF6D53AC1DF	//0x7FF6698BAA2F	//0x7FF76022586F	//0x7FF79792586F//	00007FF7F6234D6F//	0x7FF7931A4DFF//	00007FF6A73A34DF	//0x7FF61C9534FF	//0x7FF63A3FF48F		//0x7FF69BE1F48F	//	7FF6DEC4CB2F//	7FF676C6BC0F////	7FF7E1AC764F//	//7FF7E035549F//	//7FF6C150549F//	//7FF65C1A3A6F//	//7FF6E4432E4F//	//7FF675CC286F//	//7FF728F524CF//	//7FF625AC23FF//	//7FF670F3061F//	//7FF7EB270DAF//	//7FF7A21796DF//	//7FF6BEA196DF//	//7FF626B0019F//	//7FF6A998D87F//	//7FF7595AD0DF//	//7FF63162D10F//	//7FF781395F0C//	//7FF67384497C//	//7FF62A9D2D6C//	//7FF6EDE52D5C//	//7FF6B395E6BC//	//7FF6F021DC4C//	//7FF619F7DC4C//	//7FF7589FBFEC//	//7FF76DEAA57C//	//7FF7E2ED7A1C//	//7FF61DAB61EC//	//7FF65F7858EC//	//7FF64ACA3A1C//	//7FF73A253A1C//	//7FF6702C07BC//	//7FF6B475F9EC//	//7FF78355C4CC//	//7FF6EBEBB80C//	//7FF6F3D0AE7C//	//7FF7B5C58CBC//	//7FF69A478CBC//	//7FF73B04815C//	//7FF74FB9673C//	//7FF73BB8673C//	//7FF6FE2B509C//	//7FF6D606F34C//	//7FF6898ED72C//	//7FF7CD12E07C//	//7FF7F660D8FC//	//7FF726EFD77C//	//7FF60508D1DC//	//7FF7496EC59C//	//7FF6EFA4C63C//	//7FF7A5E1BCAC//	//7FF7ED96BD0C//	//7FF6BE14BC8C//	//7FF6F33CB0CC//	//7FF7A956887C//	//7FF7898273CC//	//7FF737C3739C//	//7FF6ADF8503C//	//7FF654F64CAC//	//7FF7868F4C7C//	//7FF6784F324C//	//7FF749F7CBEC//	//7FF61CEE9DEC//	//7FF7E750816C//	//7FF625832BDC	////7FF6522E102C	////7FF6FF2CDFEC	////7FF7B4379DEC	////7FF6F56A9DBC	////7FF69A82887C	////7FF6E8917E4C	////7FF7B6D7A68C	////7FF70DA694AC	////7FF6D75294AC	////7FF7F30C94AC	////7FF6AF6879DC	////7FF6C8CB146C	////7FF70A83F5DC	////7FF71490B5DC	////7FF7EEC1852C	////7FF71ADB103C	////7FF75DD023BC	////7FF67237C96C	////7FF6900AAFFC	////7FF6FC17953C	////7FF69E1A6A3C	////7FF74DE56A2C	////7FF7579A4C1C	//
#define OFFSET_SELECTEDTAB					0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4	//0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4	//0x0000000001F4	//0x0000000001F4		//0x0000000001F4		//0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001F4//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC//	0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000000001DC	//0x0000001DC//0x0000001DC//0x0000001DC//
//											0x7FF730A9ECF8	//0x7FF6ACDDB698	//0x7FF791404DB8	//0x7FF70202A688	//0x7FF724F64098	//0x7FF6F4C24468	//0x7FF6E77B43A8	//00007FF758B42698	//0x7FF6814C2628	//0x7FF6D654CE78	//0x7FF66AA27008	//0x7FF76138C1F8	//0x7FF798A8C1C8//	00007FF7F7396838//	0x7FF794306888//	00007FF6A84ED528	//0x7FF61DA9D628	//0x7FF63B51BC38		//0x7FF69CF3BBA8	//	7FF6DFD50D08//	7FF677D4C0F8////	7FF7E2B70AA8//	//7FF7E13CA7B8//	//7FF6C257A688//	//7FF65D21A6A8//	//7FF6E549A7D8//	//7FF676D217F8//	//7FF729FAE618//	//7FF626B193A8//	//7FF671F8C2F8//	//7FF7EC2DBC08//	//7FF7A3205BF8//	//7FF6BFAA5C88//	//7FF627B49088//	//7FF6AA9B06B8//	//7FF75A5CC338//	//7FF63264BE38//	//7FF7823D2CC8//	//7FF6748673F8//	//7FF62B9A8908//	//7FF6EEE27D28//	//7FF6B4933628//	//7FF6F11E2368//	//7FF61AF41D58//	//7FF759990BC8//	//7FF76EE2C2B8//	//7FF7E3E11A98//	//7FF61EA337E8//	//7FF6606BF2B8//	//7FF64BBD3778//	//7FF73B183768//	//7FF671194518//	//7FF6B563AD38//	//7FF78441B448//	//7FF6ECD4A788//	//7FF6F4B88118//	//7FF7B6ACF5B8//	//7FF69B2EF5B8//	//7FF73BE77A68//	//7FF75099D9F8//	//7FF73C98D9F8//	//7FF6FF0B1D48//	//7FF6D6E35418//	//7FF68A6830A8//	//7FF7CDE7D698//	//7FF7F734ED08//	//7FF727C3E288//	//7FF605DB9958//	//7FF74A40D878//	//7FF6F078B758//	//7FF7A6B2C788//	//7FF7EE67C6D8//	//7FF6BEE5C708//	//7FF6F40D8B28//	//7FF7AA1F831A//	//7FF78A4A85DA//	//7FF7388B84AA//	//7FF6AEBF072A//	//7FF655BBD07A//	//7FF78754CDBA//	//7FF6790AB35A//	//7FF74AAE03BA//	//7FF61DA461BA//	//7FF7E8027F5A//	//7FF6262F996A	////7FF652DBF6AA	////7FF6FFD472AA	////7FF7B4E09B3A	////7FF6F6139AEA	////7FF69B2A2E2A	////7FF6E937E6CA	////7FF7B779B59A	////7FF70E49E9EA	////7FF6D7F5EA0A	////7FF7F3AFE7AA	////7FF6B00ACCFA	////7FF6C964BF9A	////7FF70B1C7DBA	////7FF71524E58A	////7FF7EF544DDA	////7FF71B69E4CA	////7FF75E5DC59A	////7FF672BE931A	////7FF690910FBA	////7FF6FC9BAE2A	////7FF69E9E029A	////7FF74E69027A	////7FF7581C890A	////140F4404A////140F2AE2A////140EDC9AA//
#define OFFSET_SHOPITEMINFO					0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0	//0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0	//0x0000000004D0	//0x0000000004D0		//0x0000000004D0		//0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004B0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A8//	0x0000000004A8//	0x0000000004A0//	0x0000000004A0//	0x000000000498//	0x000000000498//	0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000490//0x000000490//0x000000490//
//											0x7FF73086B3CD	//0x7FF6ACBA7FED	//0x7FF7911D0D5D	//0x7FF701DF5E2D	//0x7FF724D3031D	//0x7FF6F49F1C1D	//0x7FF6E7581B5D	//00007FF75891292D	//0x7FF6812928BD	//0x7FF6D631CB7D	//0x7FF66A7F7DDD	//0x7FF76116378D	//0x7FF79886375D//	00007FF7F716540D//	0x7FF7940D548D//	00007FF6A82BCCED	//0x7FF61D86CDED	//0x7FF63B2C5C1D		//0x7FF69CCE5B8D	//	7FF6DFB0239D//	7FF677B4839D////	7FF7E292760D//	//7FF7E11DCA9D//	//7FF6C238C96D//	//7FF65D02D03D//	//7FF6E52B477D//	//7FF676B3494D//	//7FF729DC199D//	//7FF62692CF6D//	//
#define OFFSET_SHOPBUYTEDCOUNT				0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC	//0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC	//0x0000000004CC	//0x0000000004CC		//0x0000000004CC		//0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004CC//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004C4//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x0000000004AC//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x00000000049C//	0x000000000494//	0x000000000494//	0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x000000000494	//0x00000048C//0x00000048C//0x00000048C//
//											0x7FF73086B58D	//0x7FF6ACBA81AD	//0x7FF7911D0F1D	//0x7FF701DF5FED	//0x7FF724D304DD	//0x7FF6F49F1DDD	//0x7FF6E7581D1D	//00007FF758912AED	//0x7FF681292A7D	//0x7FF6D631CD3D	//0x7FF66A7F7F9D	//0x7FF76116394D	//0x7FF79886391D//	00007FF7F71655CD//	0x7FF7940D564D//	00007FF6A82BCEAD	//0x7FF61D86CFAD	//0x7FF63B2C5DDD		//0x7FF69CCE5D4D	//	7FF6DFB0255D//	7FF677B4855D////	7FF7E29277CD//	//7FF7E11DCC5D//	//7FF6C238CB2D//	//7FF65D02D1FD//	//7FF6E52B493D//	//7FF676B34B0D//	//7FF729DC1B5D//	//7FF62692D12D//	//7FF671D978F0//	//7FF7EC0E7480//	//7FF7A3006A40//	//7FF6BF8A6AD0//	//7FF62794AAE0//	//7FF6AA7B2920//	//7FF75A3C8CB0//	//7FF6324487D0//	//7FF7821D0630//	//7FF674667BA0//	//7FF62B7920BB//	//7FF6EEC1153B//	//7FF6B473871B//	//7FF6F0FEB28B//	//7FF61AD4AC7B//	//7FF7597827EB//	//7FF76EC30C8B//	//7FF7E3C6460B//	//7FF61E83D34B//	//7FF660508F3B//	//7FF64B9D7C5B//	//7FF73AF87C4B//	//7FF670FE1A90//	//7FF6B5477FF0//	//7FF78420C4C0//	//7FF6ECB8A420//	//7FF6F49CAAA0//	//7FF7B68C16A0//	//7FF69B0E16A0//	//7FF73BCC3CF0//	//7FF7507E2E80//	//7FF73C7D2E80//	//7FF6FEEF7790//	//7FF6D6C7A460//	//7FF68A4C8BE0//	//7FF7CDCB9380//	//7FF7F718EBA0//	//7FF727A7E120//	//7FF605BFB850//	//7FF74A252800//	//7FF6F05D3050//	//7FF7A696125F//	//7FF7EE4B11AF//	//7FF6BEC911DF//	//7FF6F3F20CEF//	//7FF7AA0882DF//	//7FF78A33988F//	//7FF73874975F//	//7FF6AEA7289F//	//7FF655A4B91F//	//7FF7873DB68F//	//7FF678F3F0DF//	//7FF74A96873F//	//7FF61D8CC7C0//	//7FF7E7E9D26F//	//7FF6261C34B0	////7FF652C3065F	////7FF6FFC144E0	////7FF7B4C902EF	////7FF6F5FC029F	////7FF69B129EFF	////7FF6E920AA3F	////7FF7B76158CF	////7FF70E32CCDF	////7FF6D7DECCFF	////7FF7F398CA9F	////7FF6AFF3E0DF	////7FF6C951E240	////7FF70B04FF5F	////7FF71512BAEF	////7FF7EF4230FF	////7FF71B56A8DF	////7FF75E4B8F7F	////7FF672AC150F	////7FF6907EDEAF	////7FF6FC8D9730	////7FF69E8B7D4F	////7FF74E567D2F	////7FF7580A440F	////140E24E0F////140DFB97F////140DFAB30//
#define OFFSET_PURCHAGECOUNT				0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8	//0x0000000004D8	//0x0000000004D8		//0x0000000004D8		//0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004C8//	0x0000000004C8//	0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000000004C8	//0x0000004C0//0x0000004C0//0x0000004C0//
#define OFFSET_PURCHAGEMAXCOUNT				0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8	//0x0000000004E8	//0x0000000004E8		//0x0000000004E8		//0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000004D0//0x0000004D0//0x0000004D0//
//											0x7FF73086BF90	//0x7FF6ACBA8B40	//0x7FF7911D18B0	//0x7FF701DF6950	//0x7FF724D30E40	//0x7FF6F49F2740	//0x7FF6E7582680	//00007FF758913450	//0x7FF6812933E0	//0x7FF6D631D6A0	//0x7FF66A7F8900	//0x7FF761164260	//0x7FF798864230//	00007FF7F7165EE0//	0x7FF7940D5F60//	00007FF6A82BD7C0	//0x7FF61D86D8C0	//0x7FF63B326370		//0x7FF69CD462E0	//	7FF6DFB63B10//	7FF677B48EC0////	7FF7E2989340//	//7FF7E11DD5C0//	//7FF6C238D490//	//7FF65D02DB60//	//7FF6E52B5250//	//7FF676B35470//	//7FF729DC24C0//	//7FF62692DA90//	//7FF671DA8A60//	//7FF7EC0F8540//	//7FF7A3017B80//	//7FF6BF8B7C10//	//7FF62795BC00//	//7FF6AA7C3A20//	//7FF75A3D9E50//	//7FF632459970//	//7FF7821E1A30//	//7FF674678CB0//	//7FF62B792AE0//	//7FF6EEC11F60//	//7FF6B4739400//	//7FF6F0FEBDC0//	//7FF61AD4B7B0//	//7FF759783210//	//7FF76EC316B0//	//7FF7E3C65140//	//7FF61E83DE80//	//7FF660509A70//	//7FF64B9D8940//	//7FF73AF88930//	//7FF670FF4150//	//7FF6B548B9D0//	//7FF784274100//	//7FF6ECB8AD90//	//7FF6F49CB410//	//7FF7B68C21A0//	//7FF69B0E21A0//	//7FF73BCC4660//	//7FF7507E37F0//	//7FF73C7D37F0//	//7FF6FEEF8100//	//7FF6D6C7AF80//	//7FF68A4C9700//	//7FF7CDCB9E80//	//7FF7F718F400//	//7FF727A7E980//	//7FF605BFC0B0//	//7FF74A253060//	//7FF6F05D39C0//	//7FF7A6961AC0//	//7FF7EE4B1A10//	//7FF6BEC91A40//	//7FF6F3F21630//	//7FF7AA088C20//	//7FF78A33A1D0//	//7FF73874A100//	//7FF6AEA73240//	//7FF655A4C2F0//	//7FF7873DC060//	//7FF678F3F8E0//	//7FF74A969170//	//7FF61D8DF240//	//7FF7E7E9DC50//	//7FF6261D5E70	////7FF652C31040	////7FF6FFC26CA0	////7FF7B4C90CD0	////7FF6F5FC0C80	////7FF69B12A8E0	////7FF6E920B420	////7FF7B767B6C0	////7FF70E32D940	////7FF6D7DED960	////7FF7F398D700	////7FF6AFF3ED40	////7FF6C9531A60	////7FF70B050B20	////7FF71512C750	////7FF7EF423D60	////7FF71B56B760	////7FF75E4B97B0	////7FF672AC20D0	////7FF6907EED30	////7FF6FC8EAB10	////7FF69E8B8BD0	////7FF74E568BB0	////7FF7580A5290	////140E25A50////140DFC800////140E0A830//
#define OFFSET_SELLITEMLIST					0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590	//0x000000000590	//0x000000000590		//0x000000000590		//0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000550//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000518//	0x000000000518//	0x000000000500//	0x000000000500//	0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x0000004F8//0x0000004F8//0x0000004F8//
//											0x7FF73086C816	//0x7FF6ACBA93C6	//0x7FF7911D2136	//0x7FF701DF71D6	//0x7FF724D316C6	//0x7FF6F49F2FC6	//0x7FF6E7582F06	//00007FF758913CD6	//0x7FF681293C66	//0x7FF6D631DF26	//0x7FF66A7F9186	//0x7FF761164A16	//0x7FF7988649E6//	00007FF7F7166696//	0x7FF7940D6716//	00007FF6A82BDF76	//0x7FF61D86E076	//0x7FF63B2C6CC6		//0x7FF69CCE6C36	//	7FF6DFB03446//	7FF677B49746////	7FF7E29286B6//	//7FF7E11DDE46//	//7FF6C238DD16//	//7FF65D02E3D6//	//7FF6E52B59F6//	//7FF676B35CE6//	//7FF729DC2D36//	//7FF62692E306//	//7FF671D46326//	//7FF7EC095F36//	//7FF7A2FB5626//	//7FF6BF8556B6//	//7FF6278F9C96//	//7FF6AA762106//	//7FF75A3778C6//	//7FF6323F74B6//	//7FF78217F126//	//7FF6746173E6//	//7FF62B793666//	//7FF6EEC12AE6//	//7FF6B4739E96//	//7FF6F0FEC856//	//7FF61AD4C246//	//7FF759783D96//	//7FF76EC32226//	//7FF7E3C659B6//	//7FF61E83E6F6//	//7FF66050A246//	//7FF64B9D93C6//	//7FF73AF893B6//	//7FF670F957F6//	//7FF6B542A1B6//	//7FF78420D646//	//7FF6ECB8B816//	//7FF6F49CBE96//	//7FF7B68C2C76//	//7FF69B0E2C76//	//7FF73BCC4ED6//	//7FF7507E4146//	//7FF73C7D4146//	//7FF6FEEF8A56//	//7FF6D6C7BA46//	//7FF68A4CA1C6//	//7FF7CDCBAA36//	//7FF7F718FFB6//	//7FF727A7F536//	//7FF605BFCC66//	//7FF74A253C16//	//7FF6F05D4316//	//7FF7A6962676//	//7FF7EE4B25C6//	//7FF6BEC925F6//	//7FF6F3F22096//	//7FF7AA089436//	//7FF78A33A9E6//	//7FF73874A8B6//	//7FF6AEA73A96//	//7FF655A4CAB6//	//7FF7873DC826//	//7FF678F40126//	//7FF74A969C96//	//7FF61D87CFB6//	//7FF7E7E9E4D6//	//7FF626173A56	////7FF652C318C6	////7FF6FFBC53E6	////7FF7B4C91556	////7FF6F5FC1506	////7FF69B12B076	////7FF6E920BBB6	////7FF7B76169B6	////7FF70E32E0D6	////7FF6D7DEE0F6	////7FF7F398DE96	////7FF6AFF3F4D6	////7FF6C94CE4B6	////7FF70B051346	////7FF71512CF06	////7FF7EF424516	////7FF71B56BF86	////7FF75E4B9DB6	////7FF672AC2C46	////7FF6907EF676	////7FF6FC889D66	////7FF69E8B9746	////7FF74E569726	////7FF7580A5E06	////140E261C6////140DFD166////140DADD86//
#define OFFSET_MYSCROLLBOXITEM				0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898	//0x000000000898	//0x000000000898		//0x000000000898		//0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898//	0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000000898	//0x000000898//0x000000898//0x000000898//
#define OFFSET_MYSCROLLBOX_ISEMPTY			0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C	//0x00000000088C	//0x00000000088C		//0x00000000088C		//0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C//	0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000000088C	//0x00000088C//0x00000088C//0x00000088C//
#define OFFSET_MYSCROLLBOXITEMCOUNT			0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008		//0x000000000008		//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000008//0x000000008//0x000000008//
#define OFFSET_MYSCROLLBOXITEMCHECK			0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C	//0x00000000000C	//0x00000000000C		//0x00000000000C		//0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C//	0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C
//											0x7FF7302E069F	//0x7FF6AC61F1AF	//0x7FF790C53F4F	//0X7FF70188065F	//0x7FF724797EB0	//0x7FF6F4460951	//0x7FF6E6FF0891	00007FF7583A08CA	//0x7FF680D2085A	//0x7FF6D5DABFBA	//0x7FF66A1F67CA	//0x7FF760B62F7A	//0x7FF798262F7A//	00007FF7F6B6AA51//	0x7FF793ADAAD1//	00007FF6A7CC7991	//0x7FF61D278151	//0x7FF63AD19021		//0x7FF69C738F91	//	7FF6DF5555A1//	7FF67759F171////	7FF7E23DCDD2//	//7FF7E0C6C042//	//7FF6C1E1BF12//	//7FF65CAB4FB2//	//7FF6E4D3E1C2//	//7FF6765C9512//	//7FF729856B32//	//7FF6263C4832//	//7FF671802B4A//	//7FF7EBB71BB2//	//7FF7A2A9E222//	//7FF6BF33E2B2//	//7FF6273E8432//	//7FF6AA263B32//	//7FF759E59A4A//	//7FF631ED97AA//	//7FF781C6B69A//	//7FF67410828A//	//7FF62B2800DA//	//7FF6EE6FF76A//	//7FF6B42072EA//	//7FF6F0ABCD1A//	//7FF61A81C70A//	//7FF7592B4F5A//	//7FF76E757D8A//	//7FF7E371DACA//	//7FF61E2FD37A//	//7FF65FFCA1FA//	//7FF64B4F730A//	//7FF73AAA730A//	//7FF670B0540A//	//7FF6B4F9BB1A//	//7FF783D8359A//	//7FF6EC6DBC8A//	//7FF6F452490A//	//7FF7B6467A4A//	//7FF69AC87A7A//	//7FF73B7F181A//	//7FF75033A84A//	//7FF73C32A84A//	//7FF6FEA52B6A//	//7FF6D67FDECA//	//7FF68A06D8DA//	//7FF7CD89B1EA//	//7FF7F6D6F84A//	//7FF72765EDFA//	//7FF6057E37EA//	//7FF749E3E0BA//	//7FF6F016543A//	//7FF7A655AF0A//	//7FF7EE0AAF3A//	//7FF6BE88AEAA//	//7FF6F3B03B6A//	//7FF7A9C7396A//	//7FF789F2A6FA//	//7FF73833A6AA//	//7FF6AE64B67A//	//7FF6556207BA//	//7FF786FB054A//	//7FF678B5EBEA//	//7FF74A584AFA//	//7FF61D5009BA//	//7FF7E7B0885A//	//7FF625E40A5A	////7FF652886CEA	////7FF6FF89867A	////7FF7B4935D7A	////7FF6F5C65D2A	////7FF69ADE136A	////7FF6E8E7F43A	////7FF7B72E830A	////7FF70DFE33CA	////7FF6D7AA33EA	////7FF7F364319A	////7FF6AFBFAB1A	////7FF6C91E3DCA	////7FF70AD07FDA	////7FF714DC5F2A	////7FF7EF0CD2FA	////7FF71B27C16A	////7FF75E1B20DA	////7FF6727C95CA	////7FF6904EF14A	////7FF6FC5E75AA	////7FF69E60814A	////7FF74E2B813A	////7FF757DFEF7A	////140B767FA////140B92FFA////140B42ABA//
#define OFFSET_STOREITEMINVENLIST			0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540	//0x000000000540	//0x000000000540		//0x000000000540		//0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000540//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000538//	0x000000000530//	0x000000000530//	0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000528//0x000000528//0x000000528//
//											0x7FF7307887CE	//0x7FF6ACAC53FE	//0x7FF7910EDDFE	//0x7FF701D1304E	//0x7FF724C4E4EE	//0x7FF6F49128DE	//0x7FF6E74A281E	//00007FF758821FCE	//0x7FF6811A1F5E	//0x7FF6D622627E	//0x7FF66A703FEE	//0x7FF76107A3FE	//0x7FF79877A3CE//	00007FF7F707C1DE//	0x7FF793FEC25E//	00007FF6A81D43CE	//0x7FF61D7844CE	//0x7FF63B1E3F1E		//0x7FF69CC03E8E	//	7FF6DFA2051E//	7FF677A56FAE////	7FF7E2846C8E//	//7FF7E10ECA3E//	//7FF6C229C90E//	//7FF65CF3D21E//	//7FF6E51CC48E//	//7FF676A44DFE//	//7FF729CD1EBE//	//7FF62683D99E//	//7FF671CB0AEE//	//7FF7EBFFF2CE//	//7FF7A2F1F31E//	//7FF6BF7BF3AE//	//7FF627863CEE//	//7FF6AA6CD19E//	//7FF75A2E281E//	//7FF63236251E//	//7FF7820EA46E//	//7FF67458469E//	//7FF62B6B4A2E//	//7FF6EEB33F7E//	//7FF6B4642D3E//	//7FF6F0EF4CFE//	//7FF61AC546EE//	//7FF7596A454E//	//7FF76EB4195E//	//7FF7E3B64D2E//	//7FF61E745E8E//	//7FF66040FC5E//	//7FF64B9324FE//	//7FF73AEE24EE//	//7FF670EECB8E//	//7FF6B537EABE//	//7FF7841694FE//	//7FF6ECADD3CE//	//7FF6F492025E//	//7FF7B681560E//	//7FF69B03560E//	//7FF73BC1467E//	//7FF7507333CE//	//7FF73C7233CE//	//7FF6FEE47CEE//	//7FF6D6BD2BDE//	//7FF68A421ECE//	//7FF7CDC0CAEE//	//7FF7F70DB93E//	//7FF7279CAEBE//	//7FF605B501AE//	//7FF74A1A8A1E//	//7FF6F051F35E//	//7FF7A68B836E//	//7FF7EE4082BE//	//7FF6BEBE82EE//	//7FF6F3E77CAE//	//7FF7A9FD706E//	//7FF78A288A9E//	//7FF73869898E//	//7FF6AE9C959E//	//7FF655997F5E//	//7FF787327CEE//	//7FF678E8A5EE//	//7FF74A8B37CE//	//7FF61D822ABE//	//7FF7E7DEA0DE//	//7FF626119C2E	////7FF652B7794E	////7FF6FFB6BDDE	////7FF7B4BD903E	////7FF6F5F08FEE	////7FF69B074C3E	////7FF6E915C8DE	////7FF7B75BF8CE	////7FF70E27575E	////7FF6D7D3577E	////7FF7F38D551E	////7FF6AFE8744E	////7FF6C947449E	////7FF70AFF529E	////7FF71507647E	////7FF7EF36EB0B	////7FF71B50E6CB	////7FF75E3FE6FB	////7FF672A6373B	////7FF69078F9CB	////7FF6FC837C7B	////7FF69E855BBB	////7FF74E505B9B	////7FF758043C3B	////140D6F3EB////140D97FBB////140D541DB//
#define OFFSET_SOTREITEMLIST				0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530	//0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530	//0x000000000530	//0x000000000530		//0x000000000530		//0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000530//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000520//	0x000000000520//	0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000000520	//0x000000518//0x000000518//0x000000518//
//											0x7FF730788ABE	//0x7FF6ACAC56EE	//0x7FF7910EE0EE	//0x7FF701D1333E	//0x7FF724C4E7DE	//0x7FF6F4912BCE	//0x7FF6E74A2B0E	//00007FF7588222BE	//0x7FF6811A224E	//0x7FF6D622656E	//0x7FF66A7042DE	//0x7FF76107A6EE	//0x7FF79877A6BE//	00007FF7F707C4CE//	0x7FF793FEC54E//	00007FF6A81D46BE	//0x7FF61D7847BE	//0x7FF63B1E420E		//0x7FF69CC0417E	//	7FF6DFA2082E//	7FF677A572BE////	7FF7E2846F9E//	//7FF7E10ECD4E//	//7FF6C229CC1E//	//7FF65CF3D52E//	//7FF6E51CC79E//	//7FF676A4510E//	//7FF729CD21CE//	//7FF62683DCAE//	//7FF671CB0DFE//	//7FF7EBFFF5DE//	//7FF7A2F1F62E//	//7FF6BF7BF6BE//	//7FF627863FFE//	//7FF6AA6CD4AE//	//7FF75A2E2B2E//	//7FF63236282E//	//7FF7820EA77E//	//7FF6745849AE//	//7FF62B6B4D3E//	//7FF6EEB3428E//	//7FF6B464304E//	//7FF6F0EF500E//	//7FF61AC549FE//	//7FF7596A485E//	//7FF76EB41C6E//	//7FF7E3B6503E//	//7FF61E74619E//	//7FF66040FF6E//	//7FF64B932C9E//	//7FF73AEE2C8E//	//7FF670EECE9E//	//7FF6B537EDCE//	//7FF78416980E//	//7FF6ECADDB6E//	//7FF6F49209FE//	//7FF7B681591E//	//7FF69B03591E//	//7FF73BC14E0E//	//7FF750733B5E//	//7FF73C723B5E//	//7FF6FEE4847E//	//7FF6D6BD2EEE//	//7FF68A4221DE//	//7FF7CDC0CDFE//	//7FF7F70DBC4E//	//7FF7279CB1CE//	//7FF605B504BE//	//7FF74A1A8D2E//	//7FF6F051F66E//	//7FF7A68B867E//	//7FF7EE4085CE//	//7FF6BEBE85FE//	//7FF6F3E77FBE//	//7FF7A9FD77FE//	//7FF78A28922E//	//7FF73869911E//	//7FF6AE9C98AE//	//7FF6559986EE//	//7FF78732847E//	//7FF678E8AC1E//	//7FF74A8B3ADE//	//7FF61D8230EE//	//7FF7E7DEA3EE//	//7FF62611A25E	////7FF652B77C5E	////7FF6FFB6C40E	////7FF7B4BD934E	////7FF6F5F092FE	////7FF69B074F4E	////7FF6E915CBEE	////7FF7B75BFEFE	////7FF70E275A6E	////7FF6D7D35A8E	////7FF7F38D582E	////7FF6AFE8775E	////7FF6C9474ACE	////7FF70AFF58CE	////7FF71507678E	////7FF7EF36EE0B	////7FF71B50ECEB	////7FF75E3FE9FB	////7FF672A63D5B	////7FF69078FFEB	////7FF6FC837F7B	////7FF69E85620B	////7FF74E5061EB	////7FF75804428B	////140D6F6EB////140D985FB////140D544CB//
#define OFFSET_QUICKSLOTINFO				0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008		//0x000000000008		//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000008//0x000000008//0x000000008//
//											0x7FF730654A9E	//0x7FF6AC9916CE	//0x7FF790FBA31E	//0x7FF701BDF72E	//0x7FF724B0C3DE	//0x7FF6F47D6C6E	//0x7FF6E7366BAE	//00007FF7586CF82E	//0x7FF68104F7BE	//0x7FF6D60D74BE	//0x7FF66A5C557E	//0x7FF760F358EE	//0x7FF7986358BE//	00007FF7F6F4AB8E//	0x7FF793EBAC0E//	00007FF6A80A322E	//0x7FF61D65327E	//0x7FF63B0F7C2E		//0x7FF69CB17B9E	//	7FF6DF9344BE//	7FF67791280E////	7FF7E275BC1E//	//7FF7E0FAA9AE//	//7FF6C215A87E//	//7FF65CDFA03E//	//7FF6E508707E//	//7FF67693B2BE//	//7FF729BC887E//	//7FF62673479E//	//7FF671B8437E//	//7FF7EBEBDE1E//	//7FF7A2DE0BBE//	//7FF6BF680C4E//	//7FF6277301CE//	//7FF6AA5A101E//	//7FF75A1B3A1E//	//7FF63223371E//	//7FF781FBBA3E//	//7FF67445701E//	//7FF62B5C897E//	//7FF6EEA47EFE//	//7FF6B4554F7E//	//7FF6F0E0744E//	//7FF61AB66E3E//	//7FF7595B09BE//	//7FF76EA4FDEE//	//7FF7E3A78D5E//	//7FF61E655F8E//	//7FF66031FEFE//	//7FF64B7F5C4E//	//7FF73ADA5C3E//	//7FF670E0589E//	//7FF6B5298F9E//	//7FF78407D3DE//	//7FF6EC9DD9CE//	//7FF6F4810FCE//	//7FF7B6719E9E//	//7FF69AF39ECE//	//7FF73BB01A9E//	//7FF75062BD7E//	//7FF73C61BD7E//	//7FF6FED4AD1E//	//7FF6D6AC778E//	//7FF68A31FCCE//	//7FF7CDB4B0EE//	//7FF7F701D1EE//	//7FF72790C76E//	//7FF605A969AE//	//7FF74A0EF23E//	//7FF6F0422D0E//	//7FF7A67C83BE//	//7FF7EE31830E//	//7FF6BEAF833E//	//7FF6F3D7898E//	//7FF7A9EE48EE//	//7FF78A19823E//	//7FF7385A81EE//	//7FF6AE8D3E0E//	//7FF6558A802E//	//7FF787237DBE//	//7FF678D97119//	//7FF74A8063D9//	//7FF61D732009//	//7FF7E7D3A789//	//7FF62601EB19	////7FF652ABCC09	////7FF6FFA75ED9	////7FF7B4B1B0F9	////7FF6F5E4B0A9	////7FF69AFBC999	////7FF6E90B5569	////7FF7B74D3039	////7FF70E1C3C29	////7FF6D7C83C49	////7FF7F38239E9	////7FF6AFDDC0E9	////7FF6C93C6A89	////7FF70AF40DB9	////7FF714FC74A9	////7FF7EF2C2179	////7FF71B459F19	////7FF75E38E4F9	////7FF6729B4B69	////7FF6906DE8B9	////7FF6FC785499	////7FF69E7A3286	////7FF74E453266	////7FF757F90F06	////140D02FB6////140CDC386////140CD6F56//
#define OFFSET_CURRENTSUMINFO				0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8	//0x0000000000B8	//0x0000000000B8		//0x0000000000B8		//0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000B8//	0x0000000000A0//	0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x0000000000A0	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000000090	//0x000000090//0x000000090//0x000000090//		
//											0x7FF72FD057A1	//0x7FF6AC044201	//0x7FF79067F401	//0X7FF7012AB2C1	//0x7FF7241CF0B1	//0x7FF6F3EA4411	//0x7FF6E6A34331	//00007FF757DDE9D1	//0x7FF68075E9D1	//0x7FF6D57EC0E1	//0x7FF669CE8BC1	//0x7FF760650C91	//0x7FF797D50C91//	00007FF7F665C7F1//	0x7FF7935CC881//	00007FF6A77BF3C1	//0x7FF61CD6F3E1	//0x7FF63A817521		//0x7FF69C2374A1	//	7FF6DF07B521//	7FF6770732E1////	7FF7E1ECB551//	//7FF7E0752EF1//	//7FF6C1902DD1//	//7FF65C59FA91//	//7FF6E482B351//	//7FF6760B84B1//	//7FF729346631//	//7FF625EB4741//	//7FF671335751//	//7FF7EB671A51//	//7FF7A25A45B1//	//7FF6BEE44641//	//7FF626EEF161//	//7FF6A9D70B61//	//7FF75996FE01//	//7FF6319EFDD1//	//7FF7817866F1//	//7FF673C27AC1//	//7FF62ADAEA61//	//7FF6EE22E231//	//7FF6B3D337A1//	//7FF6F05EC7D1//	//7FF61A34C5F1//	//7FF758DD6211//	//7FF76E27CCD1//	//7FF7E32A4691//	//7FF61DE828D1//	//7FF65FB50241//	//7FF64B05FD51//	//7FF73A60FD51//	//7FF670645011//	//7FF6B4B0A001//	//7FF7838F50E1//	//7FF6EC248BC1//	//7FF6F4094B91//	//7FF7B5FD4881//	//7FF69A7F48B1//	//7FF73B38D191//	//7FF74FECCBC1//	//7FF73BEBCBC1//	//7FF6FE5E6A31//	//7FF6D63BF7C1//	//7FF689C37001//	//7FF7CD46C871//	//7FF7F6946601//	//7FF727236231//	//7FF6053C3D01//	//7FF749A21801//	//7FF6EFD5E921//	//7FF7A6136DD1//	//7FF7EDC86E31//	//7FF6BE466DA1//	//7FF6F36E38F1//	//7FF7A9865AD1//	//7FF789B21311//	//7FF737F312E1//	//7FF6AE2874D1//	//7FF6552641E1//	//7FF786BF40D1//	//7FF6787D6B31//	//7FF74A2591B1//	//7FF61D19A5D1//	//7FF7E77AA941//	//7FF625AD3F01	////7FF6525874C1	////7FF6FF581538	////7FF7B4627048	////7FF6F5957088	////7FF69AAD06F8	////7FF6E8B9D168	////7FF7B6FF2498	////7FF70DCE49D8	////7FF6D77A49F8	////7FF7F33447A8	////7FF6AF8FF048	////7FF6C90724E8	////7FF70ABF2188	////7FF714CB3258	////7FF7EEE4B3E8	////7FF71AFE3E18	////7FF75DF29597	////7FF6725A19F7	////7FF6902CBE27	////7FF6FC4B5CA8	////7FF69E4D73E8	////7FF74E1873D8	////7FF757CCF6B8	////140A44C88////14091C418////140918588//
#define OFFSET_BTNSTATE						0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3	//0x0000000000C3	//0x0000000000C3		//0x0000000000C3		//0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3//	0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000000C3	//0x0000000C3//0x0000000C3//0x0000000C3//
//											0x7FF731D44EAE	//0x7FF6AE080D6E	//0x7FF7926A591E	//0x7FF7032C8A9E	//0x7FF7261FDFEE	//0x7FF6F5EB8EDE	//0x7FF6E8A48E1E	//00007FF759DD36BE	//0x7FF68275364E	//0x7FF6D77D344E	//0x7FF66BCA972E	//0x7FF76260227E	//0x7FF799D0215E//	00007FF7F85F521E//	0x7FF79556535E//	00007FF6A973C8EE	//0x7FF61ECECA4E	//0x7FF63C7873AE		//0x7FF69E1A731E	//	7FF6E0FB717E//	7FF678FAC94E////	7FF7E3DA728E//	//7FF7E261590E//	//7FF6C37C57EE//	//7FF65E45E9DE//	//7FF6E66D7CAE//	//7FF677F6101E//	//7FF72B1ECFFE//	//7FF627D56BDE//	//7FF6731B1F9E//	//7FF7ED4FF26E//	//7FF7A441776E//	//7FF6C0CB769E//	//7FF628D59F8E//	//7FF6ABBBAC0E//	//7FF75B7CB6DE//	//7FF63384B0AE//	//7FF7835CDC8E//	//7FF675A5D0BE//	//7FF62CBC1CBE//	//7FF6F004105E//	//7FF6B5B3278E//	//7FF6F23DF58E//	//7FF61C13EF4E//	//7FF75AB8421E//	//7FF77001A00E//	//7FF7E5021CAE//	//7FF61FC0667E//	//7FF6618C666E//	//7FF64CD9A64E//	//7FF73C34A63E//	//7FF67237422E//	//7FF6B67FF75E//	//7FF7855D853E//	//7FF6EDF1BDCE//	//7FF6F5D5714E//	//7FF7B7C7808E//	//7FF69C49808E//	//7FF73D03215E//	//7FF751B3EB1E//	//7FF73DB2EB1E//	//7FF70024E43E//	//7FF6D7FE25AE//	//7FF68B827C1E//	//7FF7CF02904E//	//7FF7F84E530E//	//7FF728DD458E//	//7FF606F4E24E//	//7FF74B5A00AE//	//7FF6F18F14DE//	//7FF7A7C98A9E//	//7FF7EF7E89BE//	//7FF6BFFC8A1E//	//7FF6F52331AE//	//7FF7AB36D91E//	//7FF78B617CEE//	//7FF739A27BEE//	//7FF6AFD5932E//	//7FF656D1C6DE//	//7FF7886AC34E//	//7FF67A1FBF1E//	//7FF74BC39ACE//	//7FF61EB6925E//	//7FF7E914333E//	//7FF62743D69E	////7FF653EC3F7E	////7FF700E73E5E	////7FF7B5EEA95E	////7FF6F721A8DE	////7FF69C37B62E	////7FF6EA45139E	////7FF7B888923E	////7FF70F55B30E	////7FF6D901B32E	////7FF7F4BBB0CE	////7FF6B1162B8E	////7FF6CA6EB47E	////7FF70C24DA8E	////7FF7162E594E	////7FF7F05D3F4E	////7FF71C736DDE	////7FF75F65627E	////7FF673C6AE2E	////7FF69198040E	////7FF6FDA3483E	////7FF69FA3881E	////7FF74F6E873E	////7FF759219A1E	////141F6DA8E////141F5D21E////141F2917E//
#define OFFSET_AVATARALLOPENED				0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA	//0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA	//0x0000000005EA	//0x0000000005EA		//0x0000000005EA		//0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005DA//	0x0000000005D2//	0x0000000005D2//	0x0000000005D2//	0x0000000005D2//	0x0000000005D2//	0x0000000005CA//	0x0000000005CA//	0x0000000005CA	//0x0000000005CA	//0x0000000005CA	//0x0000000005BA	//0x0000000005BA	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x0000000005A2	//0x00000000059A	//0x00000000059A	//0x00000000059A	//0x000000592//0x000000592//0x000000592//
//											0x7FF7306413FE	//0x7FF6AC97E02E	//0x7FF790FA6C7E	//0x7FF701BCC03E	//0x7FF724AF874E	//0x7FF6F47C612E	//0x7FF6E735606E	//0x7FF7586F720E	//0x7FF68107719E	//0x7FF6D610002E	//0x7FF66A5EDDEE	//0x7FF760F2282E	//0x7FF7986227FE//	00007FF7F6F39EEE//	0x7FF793EA9F6E//	00007FF6A809273E	//0x7FF61D64278E	//0x7FF63B0E415E		//0x7FF69CB040CE	//	7FF6DF92129E//	7FF67793E39E////	7FF7E2748BCE//	//7FF7E0FD628E//	//7FF6C218615E//	//7FF65CE22DDE//	//7FF6E50AF74E//	//7FF67692726E//	//7FF729BB482E//	//7FF6267208DE//	//7FF671B70A8E//	//7FF7EBEE40C1//	//7FF7A2E06581//	//7FF6BF6A6611//	//7FF62771DEB1//	//7FF6AA58EF01//	//7FF75A19FE81//	//7FF63221FB81//	//7FF781FA8BE1//	//7FF6744441F1//	//7FF62B5B5B81//	//7FF6EEA35101//	//7FF6B4542171//	//7FF6F0DF4641//	//7FF61AB54031//	//7FF7595DDFC1//	//7FF76EA7D3A1//	//7FF7E3A65FF1//	//7FF61E643221//	//7FF66030D2F1//	//7FF64B81FEE1//	//7FF73ADCFED1//	//7FF670DF2D11//	//7FF6B5286531//	//7FF78406A971//	//7FF6EC9C92F1//	//7FF6F47FC941//	//7FF7B6703F21//	//7FF69AF23F51//	//7FF73BAEDAD1//	//7FF750617611//	//7FF73C607611//	//7FF6FED368E1//	//7FF6D6AB19B1//	//7FF68A30C251//	//7FF7CDB35E91//	//7FF7F7007F91//	//7FF7278F7511//	//7FF605A829B1//	//7FF74A0DB7F1//	//7FF6F040D651//	//7FF7A67F1381//	//7FF7EE3412D1//	//7FF6BEB21301//	//7FF6F3DA2BB1//	//7FF7A9F0FAB1//	//7FF78A1C2A71//	//7FF7385D2A21//	//7FF6AE8FD6F1//	//7FF6558D3971//	//7FF787263701//	//7FF678DC3AF1//	//7FF74A7F0B91//	//7FF61D75E1E1//	//7FF7E7D24F81//	//7FF62604CC01	////7FF652AA82E1	////7FF6FFAA2FD1	////7FF7B4B450E1	////7FF6F5E75091	////7FF69AFE6551	////7FF6E90A03D1	////7FF7B74FECF1	////7FF70E1EBBB1	////7FF6D7CABBD1	////7FF7F384B971	////7FF6AFDC80A1	////7FF6C93AFAF1	////7FF70AF2C2F1	////7FF714FF03C1	////7FF7EF2EA5D1	////7FF71B443711	////7FF75E379691	////7FF67299DCA1	////7FF6906C75F1	////7FF6FC7AD2B1	////7FF69E78C8E1	////7FF74E43C8C1	////7FF757F7B791	////140CEF041////140CC8021////140CC3111//
#define OFFSET_SKILLLEVEL					0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438	//0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438	//0x000000000438	//0x000000000438		//0x000000000438		//0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000430//	0x000000000428//	0x000000000428//	0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000000428	//0x000000420//0x000000420//0x000000420//
#define OFFSET_SKILLLISTITEMID				0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C	//0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C	//0x00000000043C	//0x00000000043C		//0x00000000043C		//0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x00000000042C//	0x00000000042C//	0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x00000000042C	//0x000000424//0x000000424//0x000000424//
#define OFFSET_SKILLLEVELLEARN				0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449	//0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449	//0x000000000449	//0x000000000449		//0x000000000449		//0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000449//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000441//	0x000000000439//	0x000000000439//	0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000439	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x000000000435	//0x00000042D//0x00000042D//0x00000042D//
//											0x7FF7306B660D	//0x7FF6AC9F323D	//0x7FF79101D2DD	//0x7FF701C4250D	//0x7FF724B746FD	//0x7FF6F483B15D	//0x7FF6E73CB09D	//00007FF7587839ED	//0x7FF68110397D	//0x7FF6D6187BDD	//0x7FF66A628F2D	//0x7FF760F9AD6D	//0x7FF79869AD3D//	00007FF7F6FAD29D//	0x7FF793F1D31D//	00007FF6A810569D	//0x7FF61D6B57ED	//0x7FF63B161C9D		//0x7FF69CB81C0D	//	7FF6DF99E45D//	7FF677978CCD////	7FF7E27C58ED//	//7FF7E101094D//	//7FF6C21C081D//	//7FF65CE61CDD//	//7FF6E50EA42D//	//7FF6769ADEFD//	//7FF729C3B04D//	//7FF6267A6FCD//	//7FF671BE5B9D//	//7FF7EBF1EDFD//	//7FF7A2E4388D//	//7FF6BF6E391D//	//7FF627791B5D//	//7FF6AA602BCD//	//7FF75A216DAD//	//7FF632296AAD//	//7FF78201EB6D//	//7FF6744B9F0D//	//7FF62B62BB4D//	//7FF6EEAAB0BD//	//7FF6B45BA11D//	//7FF6F0E6C73D//	//7FF61ABCC12D//	//7FF75961C45A//	//7FF76EABB6BA//	//7FF7E3ADF7AD//	//7FF61E6BC92A//	//7FF66038687A//	//7FF64B8599AB//	//7FF73AE0999B//	//7FF670E6578B//	//7FF6B52F8C1B//	//7FF7840E1E2B//	//7FF6ECA4C5EB//	//7FF6F487FACB//	//7FF7B677D540//	//7FF69AF9D570//	//7FF73BB6FD80//	//7FF750696500//	//7FF73C686500//	//7FF6FED53A1E//	//7FF6D6B324A0//	//7FF68A3884C0//	//7FF7CDBB5120//	//7FF7F7083EC0//	//7FF727973440//	//7FF605A9F73E//	//7FF74A0F7F6E//	//7FF6F048ADC0//	//7FF7A680D21E//	//7FF7EE35D16E//	//7FF6BEB3D19E//	//7FF6F3DDC270//	//7FF6F3DDC290//	//7FF7A9F50FE0//	//7FF78A202DB0//	//7FF738612D60//	//7FF6AE91B1D7//	//7FF655912B90//	//7FF7872A2920//	//7FF678E024A0//	//7FF74A80DAF7//	//7FF61D79BF60//	//7FF7E7D42267//	//7FF62608F910	////7FF652B2C330	////7FF6FFAE1DC0	////7FF7B4B8B2F0	////7FF6F5EBB297	////7FF69B028657	////7FF6E90BC4CE	////7FF7B75380B7	////7FF70E22C407	////7FF6D7CEC427	////7FF7F388C1C7	////7FF6AFE470A7	////7FF6C93CE3AE	////7FF70AF66BCC	////7FF715035A4C	////7FF7EF32F1EC	////7FF71B46200E	////7FF75E3B9A1C	////7FF6729BE11E	////7FF6906E6F0E	////7FF6FC78F7AE	////7FF69E7ACE7E	////7FF74E45CE5E	////7FF757F9AAEE	////140D2CBAB////140CE529B////140D0456B//
#define OFFSET_ITEMDETAILINFO				0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0	//0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0	//0x0000000000E0	//0x0000000000E0		//0x0000000000E0		//0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000F0//	0x0000000000F0//	0x0000000000F0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000E0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0//	0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000C8	//0x0000000000C8	//0x0000000000C8	//0x0000000000C0	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000000B8	//0x0000000B8//0x0000000B8//0x0000000B8//
//											0x7FF7307A7386	//0x7FF6ACAE3FA6	//0x7FF79110C9F6	//0x7FF701D31C46	//0x7FF724C6CAC6	//0x7FF6F4930B06	//0x7FF6E74C0A46	//00007FF75884BD06	//0x7FF6811CBC96	//0x7FF6D624FFB6	//0x7FF66A72DAD6	//0x7FF76109D214	//0x7FF79879D1E4//	00007FF7F709ED14//	0x7FF79400ED94//	00007FF6A81F6E64	//0x7FF61D7A6F64	//0x7FF63B250254		//0x7FF69CC701C4	//	7FF6DFA8C644//	7FF677A80A54////	7FF7E28B2434//	//7FF7E1115C14//	//7FF6C22C5AE4//	//7FF65CF66214//	//7FF6E51EEAE4//	//7FF676A6DE7B//	//7FF729CFAEEB//	//7FF6268669AB//	//7FF671CD227B//	//7FF7EC0218FB//	//7FF7A2F415DB//	//7FF6BF7E166B//	//7FF627885EFB//	//7FF6AA6EE4EB//	//7FF75A3037EB//	//7FF6323834EB//	//7FF78210B3FB//	//7FF6745A51FB//	//7FF62B72019B//	//7FF6EEB9F61B//	//7FF6B4678E5B//	//7FF6F0F2AF5B//	//7FF61AC8A94B//	//7FF75970F67B//	//7FF76EBABE6B//	//7FF7E3B9827B//	//7FF61E77184B//	//7FF66043B56B//	//7FF64B953EDB//	//7FF73AF03ECB//	//7FF670F1ECEB//	//7FF6B53B088B//	//7FF78419402B//	//7FF6ECAFE11B//	//7FF6F4940FFB//	//7FF7B68471FB//	//7FF69B0671FB//	//7FF73BC35B7B//	//7FF75075480B//	//7FF73C74480B//	//7FF6FEE690BB//	//7FF6D6BF58EB//	//7FF68A44474B//	//7FF7CDC41B3B//	//7FF7F711093B//	//7FF7279FFEBB//	//7FF605B7DB9B//	//7FF74A1D509B//	//7FF6F0543F4B//	//7FF7A68E474B//	//7FF7EE43469B//	//7FF6BEC146CB//	//7FF6F3E99A4B//	//7FF7A9FF990B//	//7FF78A2AB2EB//	//7FF7386BB1BB//	//7FF6AE9EB3E3//	//7FF6559BA773//	//7FF78734A503//	//7FF678EAD7B3//	//7FF74A8E5013//	//7FF61D845E93//	//7FF7E7E14B23//	//7FF62613CFB3	////7FF652BA8D53	////7FF6FFB8EF03	////7FF7B4C0A081	////7FF6F5F3A031	////7FF69B0A5BB1	////7FF6E91851A1	////7FF7B75E21E1	////7FF70E2A4E41	////7FF6D7D64E61	////7FF7F3904C01	////7FF6AFEB6151	////7FF6C94993C1	////7FF70B015E41	////7FF71509E821	////7FF7EF396DF1	////7FF71B52E921	////7FF75E42B611	////7FF672A86F51	////7FF6907B1F21	////7FF6FC85B661	////7FF69E879F21	////7FF74E529F01	////7FF758066631	////140DE3331////140DBEA11////140D7F9D1//
#define OFFSET_SHOPITEINFORECORD			0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8	//0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8	//0x0000000004D8	//0x0000000004D8		//0x0000000004D8		//0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004D0//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004B0//	0x0000000004B0//	0x0000000004A8//	0x0000000004A8//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x000000498//0x000000498//0x000000498//
//											0x7FF730877AE7	//0x7FF6ACBB4686	//0x7FF7911DD3F6	//0x7FF701E02496	//0x7FF724D3C926	//0x7FF6F49FE186	//0x7FF6E758E0C6	//00007FF75891E7D6	//0x7FF68129E766	//0x7FF6D6328FA6	//0x7FF66A804206	//0x7FF76116EDB6	//0x7FF79886ED86//	00007FF7F7170A36//	0x7FF7940E0AB6//	00007FF6A82C8246	//0x7FF61D878346	//0x7FF63B2D2D66		//0x7FF69CCF2CD6	//	7FF6DFB0F4E6//	7FF677B547B6////	7FF7E2934756//	//7FF7E11E8D86//	//7FF6C2398C56//	//7FF65D039306//	//7FF6E52C0A76//	//7FF676B40C16//	//7FF729DCDC66//	//7FF626939086//	//7FF671DB32D6//	//7FF7EC102DB6//	//7FF7A3022396//	//7FF6BF8C2426//	//7FF627966416//	//7FF6AA7CE216//	//7FF75A3E4666//	//7FF632464186//	//7FF7821EC156//	//7FF674683416//	//7FF62B79F796//	//7FF6EEC1EC16//	//7FF6B4745586//	//7FF6F0FF78F6//	//7FF61AD572E6//	//7FF75978FE56//	//7FF76EC3E516//	//7FF7E3C6FBC6//	//7FF61E848986//	//7FF660515386//	//7FF64B9E4A96//	//7FF73AF94A86//	//7FF670FFF456//	//7FF6B5496926//	//7FF784219F36//	//7FF6ECB962B6//	//7FF6F49D63A6//	//7FF7B68CFAB7//	//7FF69B0EFAB7//	//7FF73BCD0197//	//7FF7507EF2B7//	//7FF73C7DF2B7//	//7FF6FEF03AD7//	//7FF6D6C87097//	//7FF68A4D5817//	//7FF7CDCC78A7//	//7FF7F719C157//	//7FF727A8B6D7//	//7FF605C08DD7//	//7FF74A25FD37//	//7FF6F05DF627//	//7FF7A696E667//	//7FF7EE4BE5B7//	//7FF6BEC9E5E7//	//7FF6F3F2A737//	//7FF7AA094747//	//7FF78A345D17//	//7FF738755BE7//	//7FF6AEA7CBD7//	//7FF655A57F07//	//7FF7873E7C77//	//7FF678F4B237//	//7FF74A973DE7//	//7FF61D8E7A07//	//7FF7E7EA7CE7//	//7FF6261DE357	////7FF652C3B097	////7FF6FFC2F147	////7FF7B4C9AC86	////7FF6F5FCAC36	////7FF69B134816	////7FF6E9214A66	////7FF7B76257A6	////7FF70E337236	////7FF6D7DF7256	////7FF7F3996FF6	////7FF6AFF47EF6	/////7FF6C953A6B6	////7FF70B05CF56	////7FF715138DB6	////7FF7EF430376	////7FF71B5765E6	////7FF75E4C66B6	////7FF672AD1BB6	////7FF6907FB296	////7FF6FC8F6486	////7FF69E8C7376	////7FF74E577356	////7FF7580B3A36	////140E32346////140E091E6////140E15B36//
#define OFFSET_OPTION_EQUIPGETGRADE			0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073	//0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073	//0x000000000073	//0x000000000073		//0x000000000073		//0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	0x000000000073//	
#define OFFSET_OPTION_TARGETRANGE/**/		0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074	//0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074	//0x000000000074	//0x000000000074		//0x000000000074		//0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C//	0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000000005C	//0x00000005C//0x00000005C//0x00000005C//
#define OFFSET_OPTION_HPPOTION/**/			0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075	//0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075	//0x000000000075	//0x000000000075		//0x000000000075		//0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x000000000075//	0x00000000005D//	0x00000000005D//	0x00000000005D//	0x00000000005D//	0x00000000005D//	0x00000000005D//	0x00000000005D//	0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000000005D	//0x00000005D//0x00000005D//0x00000005D//
//											0x7FF72FAB9D49	//0x7FF6ABDF9599	//0x7FF790437779	//0x7FF701065909	//0x7FF723FB2509	//0x7FF6F3C8DA29	//0x7FF6E681D949	//00007FF757BC87A9	//0x7FF6805487A9	//0x7FF6D55D6999	//0x7FF669ADA499	//0x7FF760444569	//0x7FF797B44579//	00007FF7F6453E09//	0x7FF7933C3E99//	00007FF6A75BD169	//0x7FF61CB6D189	//0x7FF63A6161F9		//0x7FF69C036179	//	7FF6DEE81BF9//	7FF676E5FEA9////	7FF7E1CBC739//	//7FF7E0547049//	//7FF6C16F7069//	//7FF65C395499//	//7FF6E46231B9//	//7FF675EB1C29//	//7FF729141AA9//	//7FF625CB0F29//	//7FF67111D899//	//7FF7EB459D59//	//7FF7A23A38A9//	//7FF6BEC43939//	//7FF626CF3279//	//7FF6A9B80329//	//7FF75979E539//	//7FF63181E569//	//7FF7815B9A29//	//7FF673A65C09//	//7FF62ABEF4C9//	//7FF6EE06EC79//	//7FF6B3B75FE9//	//7FF6F0433999//	//7FF61A193819//	//7FF758C0F5E9//	//7FF76E0B9E49//	//7FF7E310F9A9//	//7FF61DCEBA39//	//7FF65F9BA569//	//7FF64AED46A9//	//7FF73A4846A9//	//7FF6704EB719//	//7FF6B4988389//	//7FF783740459//	//7FF6EC09D949//	//7FF6F3EEC299//	//7FF7B5E34C69//	//7FF69A654C69//	//7FF73B21DCF9//	//7FF74FD63D99//	//7FF73BD53D99//	//7FF6FE480049//	//7FF6D626CF69//	//7FF689AE6DE0//	//7FF7CD3208A9//	//7FF7F67FCD99//	//7FF7270EC9F9//	//7FF60527B079//	//7FF7498D8AE9//	//7FF6EFBFB399//	//7FF7A5FC81D9//	//7FF7EDB18239//	//7FF6BE2F81A9//	//7FF6F3575A39//	//7FF7A97049B9//	//7FF7899C2269//	//7FF737DD2239//	//7FF6AE1201B9//	//7FF6550FE525//	//7FF786A8E4E5//	//7FF678682F85//	//7FF74A106685//	//7FF61D0752F5//	//7FF7E7693205//	//7FF6259BBB15	////7FF652485D65	////7FF6FF470BC5	////7FF7B4519AB5	////7FF6F5849AF5	////7FF69A9C4D65	////7FF6E8A87D55	////7FF7B6EE2685	////7FF70DBD1A05	////7FF6D7691A25	////7FF7F32317D5
#define OFFSET_OPTION_MANNERMODE/**/		0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079	//0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079	//0x000000000079	//0x000000000079		//0x000000000079		//0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000079//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061//	0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000000061	//0x000000061//0x000000061//0x000000061//
//											0x7FF72F880821	//0x7FF6ABBC0671	//0x7FF7901FF911	//0x7FF700E2F251	//0x7FF723D7DF11	//0x7FF6F3A5CD81	//0x7FF6E65ECD81	//00007FF75799BEA1	//0x7FF68031BEA1	//0x7FF6D53AA521	//0x7FF6698B8D71	//0x7FF760223BB1	//0x7FF797923BB1//	00007FF7F62330B1//	0x7FF7931A3141//	00007FF6A73A1821	//0x7FF61C951841	//0x7FF63A3FD7D1		//0x7FF69BE1D7D1	//	7FF6DEC4AE71//	7FF676C69F51////	7FF7E1AC5991//	//7FF7E03537E1//	//7FF6C15037E1//	//7FF65C1A1DB1//	//7FF6E4431191//	//7FF675CC0BB1//	//7FF728F50811//	//7FF625AC0741//	//7FF670F2E961//	//7FF7EB26F0F1//	//7FF7A21779B1//	//7FF6BEA179B1//	//7FF626AFE4E1//	//7FF6A998BBC1//	//7FF7595AB421//	//7FF63162B451//	//7FF7813941E1//	//7FF673842C51//	//7FF62A9D1061//	//7FF6EDE51051//	//7FF6B395C9B1//	//7FF6F021BF41//	//7FF619F7BF41//	//7FF7589FA2E1//	//7FF76DEA8871//	//7FF7E2ED5D11//	//7FF61DAB44E1//	//7FF65F783BE1//	//7FF64ACA1D11//	//7FF73A251D11//	//7FF6702BEAB1//	//7FF6B475DCF1//	//7FF78355A7D1//	//7FF6EBEB9B11//	//7FF6F3D09181//	//7FF7B5C56C01//	//7FF69A476C01//	//7FF73B0460A1//	//7FF74FB94681//	//7FF73BB84681//	//7FF6FE2B2FE1//	//7FF6D606D291//	//7FF6898EB671//	//7FF7CD12BFC1//	//7FF7F660B871//	//7FF726EFB6F1//	//7FF60508B151//	//7FF7496EA511//	//7FF6EFA4A681//	//7FF7A5E1965B//	//7FF7ED9696BB//	//7FF6BE14963B//	//7FF6F33C8A7B//	//7FF7A956643B//	//7FF789824F87//	//7FF737C34F57//	//7FF6ADF8310D//	//7FF654F62D7D//	//7FF7868F2D4D//	//7FF6784F131D//	//7FF749F7ACBD//	//7FF61CEE7EBD//	//7FF7E750623D//	//7FF625830CAD	////7FF6522DF0FD	////7FF6FF2CC0BD	////7FF7B4377EBD	////7FF6F56A7E8D	////7FF69A82694D	////7FF6E8915F93	////7FF7B6D787D3	////7FF70DA675F3	////7FF6D75275F3	////7FF7F30C75F3	//7FF6C9093721	////7FF70AC12D31	////7FF714CD3921	////7FF7EEFD4CE1	////7FF71B0E6E63	////7FF75E025043	////7FF672694223	////7FF6903BC003	////7FF6FC4D093D	////7FF69E4F1A5D	////7FF74E1A1A4D	////7FF757CE9E1D	////140A5C47D////1409FF6B0////1409F5030//
#define OFFSET_LHCHARACTER_TARGET			0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888	//0x000000000888//	0x000000000888//	0x000000000888//	0x000000000888	//0x000000000888	//0x000000000888		//0x000000000888		//0x000000000888//	0x000000000888//	0x000000000888//	0x000000000888//	0x000000000888//	0x000000000888//	0x000000000888//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000870//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000868//	0x000000000860//	0x000000000860//	0x000000000860//	0x000000000860//	0x000000000860//	0x000000000860//	0x000000000840//	0x000000000840//	0x000000000840//	0x000000000840//	0x000000000840	//0x000000000840	//0x000000000840	//0x000000000840	//0x000000000840	//0x000000000838	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000000828	//0x000000828//0x000000828//0X000000828//
//											0x7FF72F845A7A	//0x7FF6ABB858CA	//0x7FF7901C4A0A	//0x7FF700DF525A	//0x7FF723D4449A	//0x7FF6F3A232DA	//0x7FF6E65B32DA	//00007FF75796244A	//0x7FF6802E244A	//0x7FF6D5370AFA	//0x7FF669870E1A	//0x7FF7601DBE8A	//0x7FF7978DBE8A//	00007FF7F61EB14A//	0x7FF79315B1AA//	00007FF6A7359E9A	//0x7FF61C909ECA	//0x7FF63A3B865A		//0x7FF69BDD865A	//	7FF6DEC0701A//	7FF676C25B9A////	7FF7E1A81BBA//	//7FF7E030FA3A//	//7FF6C14BFA3A//	//7FF65C15E15A//	//7FF6E43ED5EA//	//7FF675C7CFBA//	//7FF728F0CC5A//	//7FF625A7CBFA//	//7FF670EEB7DA//	//7FF7EB22D7BA//	//7FF7A217D84A//	//7FF6BEA1D84A//	//7FF626ABCC5A//	//7FF6A994B99A//	//7FF75956B1DA//	//7FF6315EB20A//	//7FF781399F2A//	//7FF6738486EA//	//7FF62A9D683A//	//7FF6EDE5682A//	//7FF6B396218A//	//7FF6F022171A//	//7FF619F8171A//	//7FF7589FFAAA//	//7FF76DEAE03A//	//7FF7E2EDB4DA//	//7FF61DAB9CAA//	//7FF65F7893AA//	//7FF64ACA74DA//	//7FF73A2574DA//	//7FF6702C427A//	//7FF6B47631AA//	//7FF78355FB1A//	//7FF6EBEBEE5A//	//7FF6F3D0E4CA//	//7FF7B5C5C2AA//	//7FF69A47C2AA//	//7FF73B04B72A//	//7FF74FB99D0A//	//7FF73BB89D0A//	//7FF6FE2B866A//	//7FF6D607288A//	//7FF6898F0C6A//	//7FF7CD1315BA//	//7FF7F6610E2A//	//7FF726F00CAA//	//7FF60509070A//	//7FF7496EFACA//	//7FF6EFA50996//	//7FF7A5E20006//	//7FF7ED970066//	//7FF6BE14FFE6//	//7FF6F33CF426//	//7FF7A956CB66//	//7FF78982B346//	//7FF737C3B316//	//7FF6ADF88FB6//	//7FF654F68BF6//	//7FF7868F8BC6//	//7FF6784F7806//	//7FF749F811A6//	//7FF61CEEE3A6//	//7FF7E750CAC6//	//7FF625837536	////7FF6522E5986	////7FF6FF2D2766	////7FF7B437E876	////7FF6F56AE846	////7FF69A82D306	////7FF6E891C8D6	////7FF7B6D7F886	////7FF70DA6E686	////7FF6D752E686	////7FF7F30CE686	////7FF6AF68CBE6	////7FF6C8CB64E6	////7FF70A844656	////7FF714910656	////7FF7EEC1D7A6	////7FF71ADB7B66	////7FF75DD4475E	////7FF6723BE75E	////7FF6900ECCEE	////7FF6FC1BACFE	////7FF69E1E774E	////7FF74DE9773E	////7FF7579E569E	////14076366E////1407275BE////14072503E//
#define OFFSET_CASHSHOP_MAINCATEGORY		0x00000000051C	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524	//0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524	//0x000000000524	//0x000000000524		//0x000000000524		//0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x000000000524//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x00000000051C//	0x000000000514//	0x000000000514//	0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x000000000514	//0x00000050C//0x00000050C//0x00000050C//
//											0x7FF73020A8D1	//0x7FF6AC549761	//0x7FF790B7E681	//0x7FF7017AABA1	//0x7FF724718661	//0x7FF6F43E53F1	//0x7FF6E6F75331	//00007FF7582CFC71	//0x7FF680C4FC01	//0x7FF6D5CDB411	//0x7FF66A1D2101	//0x7FF760B3EB31	//0x7FF79823EB31//	00007FF7F6B448E1//	0x7FF793AB4961//	00007FF6A7CA1D71	//0x7FF61D251DC1	//0x7FF63ACF4971		//0x7FF69C7148E1	//	7FF6DF52F001//	7FF67756C821////	7FF7E2358841//	//7FF7E0BDD971//	//7FF6C1D8D841//	//7FF65CA2ABC1//	//7FF6E4CB3DE1//	//7FF67653F131//	//7FF7297CCB91//	//7FF62633AAD1//	//7FF671786061//	//7FF7EBAEFEF1//	//7FF7A2A1C1D1//	//7FF6BF2BC261//	//7FF627366401//	//7FF6AA1E17C1//	//7FF759E29441//	//7FF631EA91A1//	//7FF781C3B4B1//	//7FF6740DA7F1//	//7FF62B2526F1//	//7FF6EE6D1D81//	//7FF6B418A077//	//7FF6F0A3FCB7//	//7FF61A79F6A7//	//7FF75922A361//	//7FF76E6CD1A1//	//7FF7E36F2851//	//7FF61E2D2111//	//7FF65FF9F031//	//7FF64B4C8A71//	//7FF73AA78A71//	//7FF670A81121//	//7FF6B4F18481//	//7FF783CFDE21//	//7FF6EC655CC1//	//7FF6F449EDA1//	//7FF7B63DC881//	//7FF69ABFC8B1//	//7FF73B7C6F01//	//7FF75030ED81//	//7FF73C2FED81//	//7FF6FEA26741//	//7FF6D67CD531//	//7FF68A03C9B1//	//7FF7CD86AAE1//	//7FF7F6D40661//	//7FF72762FC11//	//7FF6057B6E41//	//7FF749E12A21//	//7FF6F013FE41//	//7FF7A652B781//	//7FF7EE07B7B1//	//7FF6BE85B721//	//7FF6F3AD4831//	//7FF7A9C46971//	//7FF789EFD8D1//	//7FF73830D881//	//7FF6AE623431//	//7FF6555F6311//	//7FF786F862D1//	//7FF678AD6587//	//7FF74A553A51//	//7FF61D4D50A1//	//7FF7E7ADDD21//	//7FF625DB1167	////7FF6528578AF	////7FF6FF86C86F	////7FF7B4909A0F	////7FF6F5C399BF	////7FF69AD52F57	////7FF6E8E5033F	////7FF7B72BA04F	////7FF70DFB7F4F	////7FF6D7A77F6F	////7FF7F3617D1F	////7FF6AFBCE88F	////7FF6C91B87BF	////7FF70ACD864F	////7FF714D96D0F	////7FF7EF09D59F	////7FF71B2516BF	////7FF75E1889DF	////7FF67279A37F	////7FF6904C087F	////7FF6FC5B8DEF	////7FF69E5D526F	////7FF74E28525F	////7FF757DD14EF	////140B4A46F////140B045AF////140B12F6F//
#define OFFSET_CASHSHOP_SUBCATEGORY			0x000000000520	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528	//0x000000000528	//0x000000000528		//0x000000000528		//0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000520//	0x000000000518//	0x000000000518//	0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000510//0x000000510//0x000000510//
//											0x7FF73020BF03	//0x7FF6AC54AD93	//0x7FF790B7FCB3	//0x7FF7017AC1D3	//0x7FF724719AC3	//0x7FF6F43E6853	//0x7FF6E6F76793	//00007FF7582D1D23	//0x7FF680C51CB3	//0x7FF6D5CDD4C3	//0x7FF66A1D41B3	//0x7FF760B40BE3	//0x7FF798240BE3//	00007FF7F6B46993//	0x7FF793AB6A13//	00007FF6A7CA3E23	//0x7FF61D253E73	//0x7FF63ACF6A23		//0x7FF69C716993	//	7FF6DF5310B3//	7FF67756DCD3////	7FF7E235A8F3//	//7FF7E0BDEEF3//	//7FF6C1D8EDC3//	//7FF65CA2C143//	//7FF6E4CB5363//	//7FF6765406B3//	//7FF7297CE113//	//7FF62633C053//	//7FF6717887A3//	//7FF7EBAF1FA3//	//7FF7A2A1E283//	//7FF6BF2BE313//	//7FF6273684B3//	//7FF6AA1E3873//	//7FF759E2A8F3//	//7FF631EAA653//	//7FF781C3C963//	//7FF6740DBCA3//	//7FF62B253BA3//	//7FF6EE6D3233//	//7FF6B418BAE3//	//7FF6F0A4172A//	//7FF61A7A111A//	//7FF75922BF3A//	//7FF76E6CED7A//	//7FF7E36F3D8A//	//7FF61E2D364A//	//7FF65FFA056A//	//7FF64B4C9F3A//	//7FF73AA79F3A//	//7FF670A833FA//	//7FF6B4F1A75A//	//7FF783D000EA//	//7FF6EC657CEA//	//7FF6F44A0DCA//	//7FF7B63DE96A//	//7FF69ABFE99A//	//7FF73B7C896A//	//7FF75031014A//	//7FF73C30014A//	//7FF6FEA27B0A//	//7FF6D67CECBA//	//7FF68A03E12A//	//7FF7CD86C01A//	//7FF7F6D41A7A//	//7FF72763102A//	//7FF6057B81FA//	//7FF749E13DDA//	//7FF6F0141D9A//	//7FF7A652CCBA//	//7FF7EE07CCEA//	//7FF6BE85CC5A//	//7FF6F3AD5D6A//	//7FF7A9C47EAA//	//7FF789EFEE0A//	//7FF73830EDBA//	//7FF6AE6253DA//	//7FF6555F814A//	//7FF786F8810A//	//7FF678AD80FA//	//7FF74A55542A//	//7FF61D4D64EA//	//7FF7E7ADF11A//	//7FF625DB248A	////7FF65285932A	////7FF6FF86DB4A	////7FF7B490ACEA	////7FF6F5C3AC9A	////7FF69AD541DA	////7FF6E8E51BCA	////7FF7B72BB3BA	////7FF70DFB922A	////7FF6D7A7924A	////7FF7F3618FFA	////7FF6AFBCFB6A	////7FF6C91B9A9A	////7FF70ACD9DFA	////7FF714D984BA	////7FF7EF09ED4A	////7FF71B252A2A	////7FF75E189D4A	////7FF67279BB2A	////7FF6904C202A	////7FF6FC5BA4BA	////7FF69E5D68DA	////7FF74E2868CA	////7FF757DD2B1A	////140B4B7DA////140B05D5A////140B1471A//
#define OFFSET_CASHSHOP_BUYLIMIT1			0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0	//0x0000000005D0	//0x0000000005D0		//0x0000000005D0		//0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x000000000580//	0x000000000580//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000558//	0x000000000550//	0x000000000550//	0x000000000550	//0x000000000550	//0x000000000550	//0x000000000548	//0x000000000548	//0x000000000548	//0x000000000548	//0x000000000548	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000000540	//0x000000538//0x000000538//0x000000538//
//											0x7FF7301483E8	//0x7FF6AC486BA8	//0x7FF790ABBC38	//0x7FF7016E7B78	//0x7FF724645C58	//0x7FF6F4312E58	//0x7FF6E6EA2D98	//00007FF758209128	//0x7FF680B890B8	//0x7FF6D5C14B08	//0x7FF66A10CAA8	//0x7FF760A74018	//0x7FF798174018//	00007FF7F6A79898//	0x7FF7939E9918//	00007FF6A7BD639B	//0x7FF61D1863EB	//0x7FF63AC2937B		//0x7FF69C6492EB	//	7FF6DF461C2B//	7FF6774923EB////	7FF7E229129B//	//7FF7E0B1A8CB//	//7FF6C1CCA77B//	//7FF65C967B4B//	//7FF6E4BF114B//	//7FF67647C8FB//	//7FF72970A3BB//	//7FF6262782CB//	//7FF671701EEB//	//7FF7EBA22B4B//	//7FF7A29516CB//	//7FF6BF1F175B//	//7FF62729B99B//	//7FF6AA116F4B//	//7FF759D4F53B//	//7FF631DCF32B//	//7FF781B6151B//	//7FF6740010AB//	//7FF62B17923B//	//7FF6EE5F88CB//	//7FF6B41051EB//	//7FF6F09BB1DB//	//7FF61A71ABCB//	//7FF75915FBAB//	//7FF76E60282B//	//7FF7E362525B//	//7FF61E204DBB//	//7FF65FED1D1B//	//7FF64B3EC70B//	//7FF73A99C70B//	//7FF6709F9143//	//7FF6B4E90052//	//7FF783C76FA2//	//7FF6EC5C92C2//	//7FF6F4413152//	//7FF7B634ED92//	//7FF69AB6EDC2//	//7FF73B7406E2//	//7FF750279062//	//7FF73C269062//	//7FF6FE991022//	//7FF6D672FA72//	//7FF689F9EFD2//	//7FF7CD7D0492//	//7FF7F6CA6CD2//	//7FF727596282//	//7FF605720882//	//7FF749D7E8C2//	//7FF6F00B3652//	//7FF7A648EA12//	//7FF7EDFDEA42//	//7FF6BE7BE9B2//	//7FF6F3A3A012//	//7FF7A9BAEF12//	//7FF789E661B2//	//7FF738276162//	//7FF6AE599B32//	//7FF65556D782//	//7FF786EFD672//	//7FF678A923C2//	//7FF74A50D522//	//7FF61D483A32//	//7FF7E7A8CB22//	//7FF625D6D91D	////7FF652813832	////7FF6FF81CCEB	////7FF7B48B9448	////7FF6F5BE93F8	////7FF69AD64968	////7FF6E8E0D828	////7FF7B7267B28	////7FF70DF694A8	////7FF6D7A294C8	////7FF7F35C9278	////7FF6AFB7E3E8	////7FF6C9168A88	////7FF70ACEB3E8	////7FF714DA9418	////7FF7EF055B98	////7FF71B1FF748	////7FF75E138458	////7FF6727AC9B8	////7FF6904D2A28	////7FF6FC55DF38	////7FF69E57E788	////7FF74E22E778	////7FF757D7CFF8	////140AF8C28////140AC05E8////140AB5D88//
#define OFFSET_CASHSHOP_BUYLIMIT2			0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028		//0x000000000028		//0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028//	0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000000027	//0x000000027//0x000000027//0x000000027//
//											0x7FF72FAAF5BD	//0x7FF6ABDEEE0D	//0x7FF79042CFED	//0x7FF70105B24D	//0x7FF723FA7E4D	//0x7FF6F3C8336D	//0x7FF6E681328D	//00007FF757BBE13D	//0x7FF68053E13D	//0x7FF6D55CC30D	//0x7FF669AD063D	//0x7FF76043A70D	//0x7FF797B3A71D//	00007FF7F6449BED//	0x7FF7933B9C7D//	00007FF6A75B2F4D	//0x7FF61CB62F6D	//0x7FF63A60BFDD		//0x7FF69C02BF5D	//	7FF6DEE74D0D//	7FF676EB33DE////	7FF7E1CAFFC2//	//7FF7E053B0F2//	//7FF6C16EB112//	//7FF65C389572//	//7FF6E46172A2//	//7FF675EA5D12//	//7FF729135B92//	//7FF625CA5012//	//7FF671111982//	//7FF7EB44DEB2//	//7FF7A239A3ED//	//7FF6BEC3A47D//	//7FF626CE925D//	//7FF6A9B746BD//	//7FF7597928CD//	//7FF6318128FD//	//7FF7815ADE0D//	//7FF673A5A18D//	//7FF62ABE3C5D//	//7FF6EE06340D//	//7FF6B3B6A7ED//	//7FF6F042819D//	//7FF61A18801D//	//7FF758C03DED//	//7FF76E0AE74D//	//7FF7E30FC7BE//	//7FF61DCD884E//	//7FF65F9A737E//	//7FF64AEC152E//	//7FF73A47152E//	//7FF6704DABDE//	//7FF6B497784E//	//7FF783734A02//	//7FF6EC0928FD//	//7FF6F3EE1305//	//7FF7B5E29CB5//	//7FF69A649CB5//	//7FF73B2137B5//	//7FF74FD597C5//	//7FF73BD497C5//	//7FF6FE475BC5//	//7FF6D625F345//	//7FF689AD91D5//	//7FF7CD3120F5//	//7FF7F67EE4E5//	//7FF7270DE145//	//7FF60526E1A5//	//7FF7498CC855//	//7FF6EFBF0D85//	//7FF7A5FBDEC5//	//7FF7EDB0DF25//	//7FF6BE2EDE95//	//7FF6F356BBF5//	//7FF7A96FA829//	//7FF7899B7F69//	//7FF737DC7F39//	//7FF6AE113ED9//	//7FF6550F2259//	//7FF786A82219//	//7FF678676CE9//	//7FF74A0FA759//	//7FF61D068DE9//	//7FF7E7688C99//	//7FF6259B1649	////7FF65247AF39	////7FF6FF4643F3	////7FF7B450D403	////7FF6F583D443	////7FF69A9B8963	////7FF6E8A7C443	////7FF7B6ED6E9E	////7FF70DBC60BE	////7FF6D76860DE	////7FF7F3225E8E	////7FF6AF7E2B7E	////7FF6C8E02C1F	////7FF70A98CDFF	////7FF714A56D3F	////7FF7EED6C56F	////7FF71AF1A51F	////7FF75DE1BCAF	////7FF6724935EF	////7FF6901C10BF	////7FF6FC28EC4F	////7FF69E2B8CFF	////7FF74DF68CEF	////7FF757AB62DF	////14083428F////14084EC7F////140848C2F//
#define OFFSET_QUESTCONTAINERQUESTID		0x000000000588	//0x000000000588	//0x000000000588	//0x000000000588	//0x000000000588	//0x000000000588	//0x000000000588	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580	//0x000000000580	//0x000000000580		//0x000000000580		//0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000580//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000568//	0x000000000560//	0x000000000560//	0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000000560	//0x000000558//0x000000558//0x000000558//
//											0x7FF730576FD1	//0x7FF6AC8B3FF1	//0x7FF790EDD9A1	//0x7FF701B031C1	//0x7FF724A6BDF1	//0x7FF6F4734701	//0x7FF6E72C4641	//00007FF758629391	//0x7FF680FA9321	//0x7FF6D6037221	//0x7FF66A520ED1	//0x7FF760E90F31	//0x7FF798590F31//	00007FF7F6EAF7D1//	0x7FF793E1F851//	00007FF6A8007E11	//0x7FF61D5B7E61	//0x7FF63B0561C1		//0x7FF69CA76131	//	7FF6DF893A41//	7FF677871641////	7FF7E26BB291//	//7FF7E0F09E51//	//7FF6C20B9D21//	//7FF65CD93611//	//7FF6E501A7D1//	//7FF67689B161//	//7FF729B28937//	//7FF6266955A7//	//7FF671ADE120//	//7FF7EBE1D170//	//7FF7A2D3F8E0//	//7FF6BF5DF970//	//7FF62768D030//	//7FF6AA4FFA50//	//7FF75A1107F0//	//7FF632190510//	//7FF781F19EE0//	//7FF6743B5890//	//7FF62B527A30//	//7FF6EE9A6FD0//	//7FF6B44B20F0//	//7FF6F0D64270//	//7FF61AAC3C60//	//7FF75954E9E0//	//7FF76E9EE000//	//7FF7E39D2E10//	//7FF61E5B0700//	//7FF66027A720//	//7FF64B794370//	//7FF73AD44360//	//7FF670D61AC0//	//7FF6B51F4C90//	//7FF783FD9770//	//7FF6EC938C10//	//7FF6F476E1F0//	//7FF7B66B16B0//	//7FF69AED16E0//	//7FF73BA5BEA0//	//7FF750589BB0//	//7FF73C579BB0//	//7FF6FECA7070//	//7FF6D6A5CB80//	//7FF68A277B00//	//7FF7CDAA3A80//	//7FF7F6F7A010//	//7FF727869590//	//7FF6059F0F40//	//7FF74A04AEA0//	//7FF6F03BE790//	//7FF7A6760A60//	//7FF7EE2B09B0//	//7FF6BEA909E0//	//7FF6F3D0AC90//	//7FF7A9E76E00//	//7FF78A12A8E0//	//7FF73853A890//	//7FF6AE86D670//	//7FF65583CFE0//	//7FF7871CCD70//	//7FF678D27F90//	//7FF74A7532D0//	//7FF61D6C7460//	//7FF7E7C8A4E0//	//7FF625FB93A0	////7FF652A59EA0	////7FF6FFA11240	////7FF7B4AB31F0	////7FF6F5DE31A0	////7FF69AF54D40	////7FF6E90078A0	////7FF7B7469BF0	////7FF70E15DA50	////7FF6D7C1DA70	////7FF7F37BD810	////7FF6AFD71280	////7FF6C9363A50	////7FF70AE90A80	////7FF714F58780	////7FF7EF259C30	////7FF71B3A7FF0	////7FF75E2DD840	////7FF67294F780	////7FF690678E10	////7FF6FC714ED0	////7FF69E736E10	////7FF74E3E6DF0	////7FF757F2A9E0	////140CA1D60////140C764E0////140C76020//
#define OFFSET_ACHIEVEMENTMGR_LISTCNT		0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038		//0x000000000038		//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000038//0x000000038//0x000000038//
//											0x7FF72FAB190C	//0x7FF6ABDF115C	//0x7FF79042F33C	//0x7FF70105D53C	//0x7FF723FAA13C	//0x7FF6F3C8565C	//0x7FF6E681557C	//00007FF757BC03FC	//0x7FF6805403FC	//0x7FF6D55CE5CC	//0x7FF669AD28AC	//0x7FF76043C97C	//0x7FF797B3C98C//	00007FF7F644BFCC//	0x7FF7933BC05C//	00007FF6A75B532C	//0x7FF61CB6534C	//0x7FF63A60E3BC		//0x7FF69C02E33C	//	7FF6DEE78C3C//	7FF676E571EC////	7FF7E1CB2D9C//	//7FF7E053DDAC//	//7FF6C16EDDCC//	//7FF65C38C21C//	//7FF6E4619F3C//	//7FF675EA89AC//	//7FF72913882C//	//7FF625CA7CAC//	//7FF67111461C//	//7FF7EB450B3C//	//7FF7A239C73C//	//7FF6BEC3C7CC//	//7FF626CEB94C//	//7FF6A9B77F9D//	//7FF7597961AD//	//7FF6318161DD//	//7FF7815B16ED//	//7FF673A5DA6D//	//7FF62ABE739D//	//7FF6EE066B4D//	//7FF6B3B6DEED//	//7FF6F042B89D//	//7FF61A18B71D//	//7FF758C074ED//	//7FF76E0B1E4D//	//7FF7E310313C//	//7FF61DCDF1CC//	//7FF65F9ADCFC//	//7FF64AEC7E7C//	//7FF73A477E7C//	//7FF6704E067C//	//7FF6B497D2EC//	//7FF78373763C//	//7FF6EC0955AC//	//7FF6F3EE3F2C//	//7FF7B5E2C8BC//	//7FF69A64C8BC//	//7FF73B21647C//	//7FF74FD5C2DC//	//7FF73BD4C2DC//	//7FF6FE4786CC//	//7FF6D6263ABC//	//7FF689ADD93C//	//7FF7CD3168CC//	//7FF7F67F2DCC//	//7FF7270E2A2C//	//7FF60521B09C//	//7FF749879D3C//	//7FF6EFBF388C//	//7FF7A5FC087C//	//7FF7EDB108DC//	//7FF6BE2F084C//	//7FF6F356E5AC//	//7FF7A96FD42C//	//7FF7899BACEC//	//7FF737DCACBC//	//7FF6AE117C7C//	//7FF6550F5FFC//	//7FF786A85FBC//	//7FF67867AA2C//	//7FF74A0FE43C//	//7FF61D06C86C//	//7FF7E768BDCC//	//7FF6259B47EC	////7FF65247F5AD	////7FF6FF46958D	////7FF7B451249D	////7FF6F58424DD	////7FF69A9BD9FD	////7FF6E8A7FC2C	////7FF7B6EDA58C	////7FF70DBC989C	////7FF6D76898BC	////7FF7F322966C	////7FF6AF7E63F4	////7FF6C8E06108	////7FF70A9900D8	////7FF714A59D58	////7FF7EED704C8	////7FF71AECC208	////7FF75DE206B8	////7FF672498027	////7FF6901C5AF7	////7FF6FC293587	////7FF69E2BD5C8	////7FF74DF6D5B8	////7FF757ABACE8	////140838838////140856108////140850138//
#define OFFSET_ACHIEVEMENTMGR_LIST/*아래*/	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000030//0x000000030//0x000000030//
//											0x7FF72FAB1941	//0x7FF6ABDF1191	//0x7FF79042F371	//0x7FF70105D571	//0x7FF723FAA171	//0x7FF6F3C85691	//0x7FF6E68155B1	//00007FF757BC0431	//0x7FF680540431	//0x7FF6D55CE601	//0x7FF669AD28E1	//0x7FF76043C9B1	//0x7FF797B3C9C1//	00007FF7F644C001//	0x7FF7933BC091//	00007FF6A75B5361	//0x7FF61CB65381	//0x7FF63A60E3F1		//0x7FF69C02E371	//	7FF6DEE78C71//	7FF676E57221////	7FF7E1CB2DD1//	//7FF7E053DDE1//	//7FF6C16EDE01//	//7FF65C38C251//	//7FF6E4619F71//	//7FF675EA89E1//	//7FF729138861//	//7FF625CA7CE1//	//7FF671114651//	//7FF7EB450B71//	//7FF7A239C771//	//7FF6BEC3C801//	//7FF626CEB981//	//7FF6A9B77FD7//	//7FF7597961E7//	//7FF631816217//	//7FF7815B1727//	//7FF673A5DAA7//	//7FF62ABE73D7//	//7FF6EE066B87//	//7FF6B3B6DF27//	//7FF6F042B8D7//	//7FF61A18B757//	//7FF758C07527//	//7FF76E0B1E87//	//7FF7E3103171//	//7FF61DCDF201//	//7FF65F9ADD31//	//7FF64AEC7EB1//	//7FF73A477EB1//	//7FF6704E06B1//	//7FF6B497D321//	//7FF783737671//	//7FF6EC0955E1//	//7FF6F3EE3F61//	//7FF7B5E2C8F1//	//7FF69A64C8F1//	//7FF73B2164B1//	//7FF74FD5C311//	//7FF73BD4C311//	//7FF6FE478701//	//7FF6D6263AF1//	//7FF689ADD971//	//7FF7CD316901//	//7FF7F67F2E01//	//7FF7270E2A61//	//7FF60521B0D1//	//7FF749879D71//	//7FF6EFBF38C1//	//7FF7A5FC08B1//	//7FF7EDB10911//	//7FF6BE2F0881//	//7FF6F356E5E1//	//7FF7A96FD461//	//7FF7899BAD21//	//7FF737DCACF1//	//7FF6AE117CB1//	//7FF6550F6031//	//7FF786A85FF1//	//7FF67867AA61//	//7FF74A0FE471//	//7FF61D06C8A1//	//7FF7E768BE01//	//7FF6259B4821	////7FF65247F6EB	////7FF6FF4696CB	////7FF7B45125DB	////7FF6F584261B	////7FF69A9BDB3B	//
#define OFFSET_ACHIEVEMENT_SIZE				0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048		//0x000000000048		//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000006	//0x000000000006	//0x000000000006	//0x000000000006	//0x000000000006	//0x00000000001C	//0x00000000001C	//0x00000000001C	//0x000000000018	//0x000000000018	//0x000000000018
#define OFFSET_ACHIEVEMENT_PROGRESS/*아래*/	0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010	//0x000000000010	//0x000000000010		//0x000000000010		//0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000000C	//0x00000000C//0x00000000C//0x00000000C//
//											0x7FF72FAB194C	//0x7FF6ABDF119C	//0x7FF79042F37C	//0x7FF70105D57C	//0x7FF723FAA17C	//0x7FF6F3C8569C	//0x7FF6E68155BC	//00007FF757BC043C	//0x7FF68054043C	//0x7FF6D55CE60C	//0x7FF669AD28EC	//0x7FF76043C9BC	//0x7FF797B3C9CC//	00007FF7F644C00C//	0x7FF7933BC09C//	00007FF6A75B536C	//0x7FF61CB6538C	//0x7FF63A60E3FC		//0x7FF69C02E37C	//	7FF6DEE78C7C//	7FF676E5722C////	7FF7E1CB2DDC//	//7FF7E053DDEC//	//7FF6C16EDE0C//	//7FF65C38C25C//	//7FF6E4619F7C//	//7FF675EA89EC//	//7FF72913886C//	//7FF625CA7CEC//	//7FF67111465C//	//7FF7EB450B7C//	//7FF7A239C77C//	//7FF6BEC3C80C//	//7FF626CEB98C//	//7FF6A9B77FE7//	//7FF7597961F7//	//7FF631816227//	//7FF7815B1737//	//7FF673A5DAB7//	//7FF62ABE73E7//	//7FF6EE066B97//	//7FF6B3B6DF37//	//7FF6F042B8E7//	//7FF61A18B767//	//7FF758C07537//	//7FF76E0B1E97//	//7FF7E310317C//	//7FF61DCDF20C//	//7FF65F9ADD3C//	//7FF64AEC7EBC//	//7FF73A477EBC//	//7FF6704E06BC//	//7FF6B497D32C//	//7FF78373767C//	//7FF6EC0955EC//	//7FF6F3EE3F6C//	//7FF7B5E2C8FC//	//7FF69A64C8FC//	//7FF73B2164BC//	//7FF74FD5C31C//	//7FF73BD4C31C//	//7FF6FE47870C//	//7FF6D6263AFC//	//7FF689ADD97C//	//7FF7CD31690C//	//7FF7F67F2E0C//	//7FF7270E2A6C//	//7FF60521B0DC//	//7FF749879D7C//	//7FF6EFBF38CC//	//7FF7A5FC08BC//	//7FF7EDB1091C//	//7FF6BE2F088C//	//7FF6F356E5EC//	//7FF7A96FD46C//	//7FF7899BAD2C//	//7FF737DCACFC//	//7FF6AE117CBC//	//7FF6550F603C//	//7FF786A85FFC//	//7FF67867AA6C//	//7FF74A0FE47C//	//7FF61D06C8AC//	//7FF7E768BE0C//	//7FF6259B482C	////7FF65247F739	////7FF6FF469719	////7FF7B4512629	////7FF69A9BDB89	////7FF6E8A7FD2B	////7FF7B6EDA68B	////7FF70DBC999B	////7FF6D76899BB	////7FF7F322976B	////7FF6AF7E647B	//7FF6C8E06203	////7FF70A9901D3	////7FF714A59E53	////7FF7EED705C3	////7FF71AECC303	////7FF75DE207B3	////7FF6724980F3	////7FF6901C5BC3	////7FF6FC293653	////7FF69E2BD6BA	////7FF74DF6D6AA	////7FF757ABADDA	////14083893F////14085620F////14085023F//
#define OFFSET_ENCHANTSELECTEDTAB			0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620	//0x000000000620	//0x000000000620		//0x000000000620		//0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005E0//	0x0000000005E0//	0x0000000005D8//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005D0//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0	//0x0000000005B8	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000000590	//0x000000588//0x000000588//0x000000588//
//											0x7FF7306F00DA	//0x7FF6ACA2CD0A	//0x7FF791058A1A	//0x7FF701C7DC4A	//0x7FF724BB370A	//0x7FF6F4878BAA	//0x7FF6E7408AEA	//00007FF7587C88EA	//0x7FF68114887A	//0x7FF6D61CCB9A	//0x7FF66A6AC5BA	//0x7FF760FDD11A	//0x7FF7986DD0EA//	00007FF7F6FE80BA//	0x7FF793F5813A//	00007FF6A814049A	//0x7FF61D6F059A	//0x7FF63B19A38A		//0x7FF69CBBA2FA	//	7FF6DF9D6B8A//	7FF6779FF1DA////	//7FF7E27FDC4A//	//7FF7E1095FEA//	//7FF6C2245EBA//	//7FF65CEE756A//	//7FF6E512F35A//	//7FF6769EFDFA//	//7FF729C7CC9A//	//7FF6267E89CA//	//7FF671C220CA//	//7FF7EBF62FEA//	//7FF7A2E85B6A//	//7FF6BF725BFA//	//7FF6277D05BA//	//7FF6AA63EE3A//	//7FF75A25447A//	//7FF6322D417A//	//7FF78205C09A//	//7FF6744F785A//	//7FF62B66BB5A//	//7FF6EEAEB0AA//	//7FF6B45F240A//	//7FF6F0EA47BA//	//7FF61AC041AA//	//7FF75965B7BA//	//7FF76EAFA20A//	//7FF7E3B1676A//	//7FF61E6F944A//	//7FF6603C323A//	//7FF64B8993CA//	//7FF73AE493BA//	//7FF670E9E44A//	//7FF6B533072A//	//7FF78411CD6A//	//7FF6ECA43A0A//	//7FF6F4876EFA//	//7FF7B67C615A//	//7FF69AFE615A//	//7FF73BB67E3A//	//7FF75068E6CA//	//7FF73C67E6CA//	//7FF6FEDA819A//	//7FF6D6B81F0A//	//7FF68A3D3A2A//	//7FF7CDBAD27A//	//7FF7F707C08A//	//7FF72796B60A//	//7FF605B05E4A//	//7FF74A15EACA//	//7FF6F04D676A//	//7FF7A68717FA//	//7FF7EE3C174A//	//7FF6BEBA177A//	//7FF6F3E2903A//	//7FF7A9F8D67A//	//7FF78A23F18A//	//7FF73864F13A//	//7FF6AE97883A//	//7FF65594E8BA//	//7FF7872DE64A//	//7FF678E408EA//	//7FF74A86923A//	//7FF61D7D66DA//	//7FF7E7DA1B5A//	//7FF6260CEF4A	////7FF652B246FA	////7FF6FFB2065A	////7FF7B4B8272A	////7FF6F5EB26DA	////7FF69B02096A	////7FF6E9115BCA	////7FF7B7573B6A	////7FF70E224FAA	////7FF6D7CE4FCA	////7FF7F3884D6A	////7FF6AFE405EA	////7FF6C942997A	////7FF70AFA1E8A	////7FF71502D96A	////7FF7EF32719A	////7FF71B4BBCDA	////7FF75E3B247A	////7FF672A19DAA	////7FF69074135A	////7FF6FC7ED42A	////7FF69E8094BA	////7FF74E4B949A	////7FF757FF7DEA	////140D6957A////140D4664A////140CFC8DA//
#define OFFSET_REPEATEQUESTFINISHCNT		0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388	//0x000000000388	//0x000000000388		//0x000000000388		//0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388//	0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000000388	//0x000000388//0x000000388//0x000000388//
//											0x7FF730962F19	//0x7FF6ACC9FAA9	//0x7FF7912C92C9	//0x7FF701EEEAD9	//0x7FF724E2B599	//0x7FF6F4AEC029	//0x7FF6E767BF69	00007FF758A0D479	//0x7FF68138D409	//0x7FF6D641E269	//0x7FF66A8F83E9	//0x7FF76125C659	//0x7FF79895C629//	00007FF7F725DE89//	0x7FF7941CDED9//	00007FF6A83C5609	//0x7FF61D975709	//0x7FF63B429AB9		//0x7FF69CE49A29	//	7FF6DFC09D39//	7FF677C58D69////	//7FF7E2A48FD9//	//7FF7E12978E9//	//7FF6C24477B9//	//7FF65D0E7A99//	//7FF6E53695A9//	//7FF676BEF099//	//7FF729E7BB49//	//7FF6269E6DC9//	//7FF671E62FF9//	//7FF7EC1B2A59//	//7FF7A30DEE49//	//7FF6BF97EED9//	//7FF627A22C39//	//7FF6AA889E39//	//7FF75A49C179//	//7FF63251BC99//	//7FF7822A2DA9//	//7FF6747394B9//	//7FF62B8BB539//	//7FF6EED3A959//	//7FF6B47FF3F9//	//7FF6F10B0139//	//7FF61AE0FB29//	//7FF7598A7059//	//7FF76ECF4119//	//7FF7E3D25EF9//	//7FF61E8FE299//	//7FF6605D5FF9//	//7FF64BA9F459//	//7FF73B04F449//	//7FF6710AEF19//	//7FF6B554D629//	//7FF7842D7F59//	//7FF6ECC524E9//	//7FF6F4A92028//	//7FF7B6988FF8//	//7FF69B1A8FF8//	//7FF73BD906B8//	//7FF7508B1048//	//7FF73C8A1048//	//7FF6FEFC552D//	//7FF6D6D4C78D//	//7FF68A59A9BD//	//7FF7CDD8CCED//	//7FF7F7260DDD//	//7FF727B5035D//	//7FF605CCCACD//	//7FF74A322C4D//	//7FF6F06A2EAD//	//7FF7A6A3380D//	//7FF7EE58375D//	//7FF6BED6378D//	//7FF6F3FED07D//	//7FF7AA14DECD//	//7FF78A3FF4BD//	//7FF73880F38D//	//7FF6AEB4699D//	//7FF655B1309D//	//7FF7874A2DDD//	//7FF67900289D//	//7FF74AA3930D//	//7FF61D94AC9D//	//7FF7E7F7592D//	//7FF626245BBD	////7FF652D07DFD	////7FF6FFC96B2D	////7FF7B4D671AD	////7FF6F609715D	////7FF69B2001ED	////7FF6E92DD00D	////7FF7B76EC2ED	////7FF70E3FD1CD	////7FF6D7EBD1ED	////7FF7F3A5CF8D	////7FF6B000C57D	////7FF6C95A391D	////7FF70B1271BD	////7FF7151F6D28	////7FF7EF4EE9D8	////7FF71B6478E8	////7FF75E531812	////7FF672B90882	////7FF6908BAC02	////7FF6FC960DF2	////7FF69E989302	////7FF74E6392E2	////7FF758172342	////140E97482////140E72282////140E86BD2//
#define OFFSET_REPEATQUESTID				0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0	//0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0	//0x0000000004A0	//0x0000000004A0		//0x0000000004A0		//0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000488//	0x000000000488//	0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000480//0x000000480//0x000000480//
#define OFFSET_SELECTEDREPEATQUEST			0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8	//0x0000000005C8	//0x0000000005C8		//0x0000000005C8		//0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x000000000610//	0x000000000610//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000580//	0x000000000580//	0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000580	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000570//0x000000570//0x000000570//
//											0x7FF7309429DC	//0x7FF6ACC7F56C	//0x7FF7912A8DEC	//0x7FF701ECE65C	//0x7FF724E0AF9C	//0x7FF6F4ACBD9C	//0x7FF6E765BCDC	//00007FF7589ED08C	//0x7FF68136D01C	//0x7FF6D63F9FAC	//0x7FF66A8D412C	//0x7FF76123A96C	//0x7FF79893A93C//	00007FF7F723C19C//	0x7FF7941AC1EC//	00007FF6A83A105C	//0x7FF61D95115C	//0x7FF63B408B1C		//0x7FF69CE28A8C	//	7FF6DFBE695C//	7FF677C3648C////	//7FF7E2A249DC//	//7FF7E127562C//	//7FF6C24254FC//	//7FF65D0C59DC//	//7FF6E534692C//	//7FF676BCD01C//	//7FF729E58FCC//	//7FF6269C426C//	//7FF671E3EFBC//	//7FF7EC18E9DC//	//7FF7A30B8E0C//	//7FF6BF958E9C//	//7FF6279FCC3C//	//7FF6AA863E3C//	//7FF75A47617C//	//7FF6324F5C9C//	//7FF78227CDAC//	//7FF6747134BC//	//7FF62B898E7C//	//7FF6EED1829C//	//7FF6B47D981C//	//7FF6F108A54C//	//7FF61ADE9F3C//	//7FF75988558C//	//7FF76ECD279C//	//7FF7E3D004BC//	//7FF61E8D89BC//	//7FF6605B057C//	//7FF64BA79FBC//	//7FF73B029FAC//	//7FF67108B30C//	//7FF6B552BFAC//	//7FF7842B2D1C//	//7FF6ECC2C24C//	//7FF6F4A6BDCC//	//7FF7B696645C//	//7FF69B18645C//	//7FF73BD6A35C//	//7FF75088794C//	//7FF73C87794C//	//7FF6FEF9BCEC//	//7FF6D6D1E76C//	//7FF68A56C99C//	//7FF7CDD6460C//	//7FF7F72341DC//	//7FF727B2375C//	//7FF605CA029C//	//7FF74A2F704C//	//7FF6F067762C//	//7FF7A6A0749C//	//7FF7EE5573EC//	//7FF6BED3741C//	//7FF6F3FC205C//	//7FF7AA12749C//	//7FF78A3D8A8C//	//7FF7387E895C//	//7FF6AEB1BB4C//	//7FF655AF0EDC//	//7FF787480C1C//	//7FF678FE068C//	//7FF74AA0BE9C//	//7FF61D9219DC//	//7FF7E7F4AC2C//	//7FF62621E4DC	////7FF652CDD0FC	////7FF6FFC6F2EC	////7FF7B4D3C4EC	////7FF6F606C49C	////7FF69B1D62AC	////7FF6E92B30CC	////7FF7B76C0A1C	////7FF70E3D32AC	////7FF6D7E932CC	////7FF7F3A3306C	////7FF6AFFE5ADC	////7FF6C957777C	////7FF70B0FB00C	////7FF7151D39BC	////7FF7EF4CBFEC	////7FF71B61F11C	////7FF75E5079DC	////7FF672B6A6DC	////7FF69089787C	////7FF6FC93509C	////7FF69E964D7C	////7FF74E614D5C	////7FF75814DE2C	////140E6BAAC////140E485AC////140E5D87C//
#define OFFSET_REPEATEQUESTINFO				0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000030//0x000000030//0x000000030//
//											0x7FF73094B7FA	//0x7FF6ACC8838A	//0x7FF7912B1BEA	//0x7FF701ED73FA	//0x7FF724E13F8A	//0x7FF6F4AD4D0A	//0x7FF6E7664C4A	//00007FF7589F5ABA	//0x7FF681375A4A	//0x7FF6D6401C4A	//0x7FF66A8DBDCA	//0x7FF76124212A	//0x7FF7989420FA//	00007FF7F724395A//	0x7FF7941B39AA//	00007FF6A83A800A	//0x7FF61D95810A	//0x7FF63B40FD7A		//0x7FF69CE2FCEA	//	7FF6DFBEE25A//	7FF677C3D8CA////	//7FF7E2A2B9EA//	//7FF7E127DF0A//	//7FF6C242DDDA//	//7FF65D0CE29A//	//7FF6E534EEAA//	//7FF676BD58DA//	//7FF729E62A9A//	//7FF6269CDD3A//	//7FF671E46A8A//	//7FF7EC19647A//	//7FF7A30C11FA//	//7FF6BF96128A//	//7FF627A0502A//	//7FF6AA86C22A//	//7FF75A47E56A//	//7FF6324FE08A//	//7FF78228519A//	//7FF67471B8AA//	//7FF62B8A154A//	//7FF6EED2096A//	//7FF6B47E368A//	//7FF6F10943BA//	//7FF61ADF3DAA//	//7FF75988DCCA//	//7FF76ECDACCA//	//7FF7E3D08DAA//	//7FF61E8E12AA//	//7FF6605B88FA//	//7FF64BA83B3A//	//7FF73B033B2A//	//7FF671092F7A//	//7FF6B5533D0A//	//7FF7842BA9BA//	//7FF6ECC34ACA//	//7FF6F4A7464A//	//7FF7B696E5CA//	//7FF69B18E5CA//	//7FF73BD720CA//	//7FF75088F6BA//	//7FF73C87F6BA//	//7FF6FEFA3A5A//	//7FF6D6D27D9A//	//7FF68A575FCA//	//7FF7CDD6CE7A//	//7FF7F723D29A//	//7FF727B2C81A//	//7FF605CA9169//	//7FF74A2FFF19//	//7FF6F0680AF9//	//7FF7A6A10419//	//7FF7EE560369//	//7FF6BED40399//	//7FF6F3FC9639//	//7FF7AA12FA09//	//7FF78A3E0FF9//	//7FF7387F0EC9//	//7FF6AEB25019//	//7FF655AF83A9//	//7FF7874880E9//	//7FF678FE7B49//	//7FF74AA145C9//	//7FF61D92A149//	//7FF7E7F54319//	//7FF6262277B9	////7FF652CE67E9	////7FF6FFC785C9	////7FF7B4D45BD9	////7FF6F6075B89	////7FF69B1DF999	////7FF6E92BC7B9	////7FF7B76C97D9	////7FF70E3DC999	////7FF6D7E9C9B9	////7FF7F3A3C759	////7FF6AFFEE6A9	////7FF6C957FD89	////7FF70B103E29	////7FF7151DB5D9	////7FF7EF4D38D9	////7FF71B627D69	////7FF75E5105C9	////7FF672B72919	////7FF69089FE79	////7FF6FC93D419	////7FF69E96D059	////7FF74E61D039	////7FF7581561C9	////140E74499////140E50ED9////140E67009//
#define OFFSET_REPEATEQUETITEMCNT			0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018	//0x000000000018		//0x000000000018		//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000018//0x000000018//0x000000018//
#define OFFSET_REPEATEQUETITEMSIZE			0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//
#define OFFSET_REPEATEQUESTITEM				0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010	//0x000000000010	//0x000000000010		//0x000000000010		//0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010//	0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000000010	//0x000000010//0x000000010//0x000000010//
//											0x7FF73096B478	//0x7FF6ACCA8008	//0x7FF7912D1838	//0x7FF701EF6F08	//0x7FF724E339C8	//0x7FF6F4AF43E8	//0x7FF6E7684328	//00007FF758A154B8	//0x7FF681395448	//0x7FF6D6425D58	//0x7FF66A8FFED8	//0x7FF761264928	//0x7FF7989648F8//	00007FF7F7266158//	0x7FF7941D61A8//	00007FF6A83C9668	//0x7FF61D979768	//0x7FF63B42EF98		//0x7FF69CE4EF08	//	7FF6DFC120E8//	7FF677C5EC88////	//7FF7E2A4D028//	//7FF7E129F6F8//	//7FF6C244F5C8//	//7FF65D0EF8A8//	//7FF6E53713B8//	//7FF676BF6EA8//	//7FF729E83958//	//7FF6269EEBD8//	//7FF671E6B798//	//7FF7EC1BB1F8//	//7FF7A30E3068//	//7FF6BF9830F8//	//7FF627A265C8//	//7FF6AA88D7C8//	//7FF75A49FB08//	//7FF63251F608//	//7FF7822A66F8//	//7FF67473CE08//	//7FF62B8C0918//	//7FF6EED3FD38//	//7FF6B4806798//	//7FF6F10B74D8//	//7FF61AE16EC8//	//7FF7598AC428//	//7FF76ECFB5B8//	//7FF7E3D2DA58//	//7FF61E905DF8//	//7FF6605D9938//	//7FF64BAA67F8//	//7FF73B0567E8//	//7FF6710B2C38//	//7FF6B5552B88//	//7FF7842E04E8//	//7FF6ECC5A308//	//7FF6F4A99DC8//	//7FF7B6990308//	//7FF69B1B0308//	//7FF73BD94338//	//7FF7508B1418//	//7FF73C8A1418//	//7FF6FEFC5908//	//7FF6D6D4CB68//	//7FF68A59AD98//	//7FF7CDD8D0C8//	//7FF7F72611B8//	//7FF727B50738//	//7FF605CA97C7//	//7FF74A300577//	//7FF6F0681157//	//7FF7A6A10A77//	//7FF7EE5609C7//	//7FF6BED409F7//	//7FF6F3FC9C97//	//7FF7AA130067//	//7FF78A3E1657//	//7FF7387F1527//	//7FF6AEB25677//	//7FF655AF8A07//	//7FF787488747//	//7FF678FE81A7//	//7FF74AA14C27//	//7FF61D92A7A7//	//7FF7E7F54977//	//7FF626227E17	////7FF652CE6E47	////7FF6FFC78C27	////7FF7B4D46237	////7FF6F60761E7	////7FF69B1DFFF7	////7FF6E92BCE17	////7FF7B76C9E37	////7FF70E3DCFF7	////7FF6D7E9D017	////7FF7F3A3CDB7	////7FF6AFFEED07	////7FF6C95803E7	////7FF70B104487	////7FF7151DBC34	////7FF7EF4D3F34	////7FF71B6283C4	////7FF75E510C24	////7FF672B72F74	////7FF6908A04D4	////7FF6FC93DA74	////7FF69E96D604	////7FF74E61D5E4	////7FF758156774	////140E74A44////140E51484////140E675B4//
#define OFFSET_REPEATEQUESTRCVED			0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8	//0x0000000004A8	//0x0000000004A8		//0x0000000004A8		//0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A8//	0x0000000004A0//	0x0000000004A0//	0x0000000004A0//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000490//	0x000000000490//	0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000488//0x000000488//0x000000488//
//											0x7FF73096B5CE	//0x7FF6ACCA815E	//0x7FF7912D198E	//0x7FF701EF705E	//0x7FF724E33B1E	//0x7FF6F4AF453E	//0x7FF6E768447E	//00007FF758A1560E	//0x7FF68139559E	//0x7FF6D6425EAE	//0x7FF66A90002E	//0x7FF761264A7E	//0x7FF798964A4E//	00007FF7F72662AE//	0x7FF7941D62FE//	00007FF6A83C9FAE	//0x7FF61D97A0AE	//0x7FF63B3D4D8E		//0x7FF69CDF4CFE	//	7FF6DFC1223E//	7FF677C5F5CE////	//7FF7E2A4D96E//	//7FF7E129F84E//	//7FF6C244F71E//	//7FF65D0EF9FE//	//7FF6E537150E//	//7FF676BF6FFE//	//7FF729E83AAE//	//7FF6269EED2E//	//7FF671E6C0DE//	//7FF7EC1BBB3E//	//7FF7A30E39EE//	//7FF6BF983A7E//	//7FF627A26F4E//	//7FF6AA88E14E//	//7FF75A4A048E//	//7FF63251FF8E//	//7FF7822A707E//	//7FF67473D78E//	//7FF62B8C129E//	//7FF6EED406BE//	//7FF6B480692E//	//7FF6F10B766E//	//7FF61AE1705E//	//7FF759850D1E//	//7FF76ECFB74E//	//7FF7E3D2E3DE//	//7FF61E90677E//	//7FF6605DA2BE//	//7FF64BAA698E//	//7FF73B05697E//	//7FF6710B35BE//	//7FF6B555350E//	//7FF7842E067E//	//7FF6ECC5AC8E//	//7FF6F4A9A6EE//	//7FF7B699044E//	//7FF69B1B044E//	//7FF73BD94C5E//	//7FF7508B1D3E//	//7FF73C8A1D3E//	//7FF6FEFC622E//	//7FF6D6D4D48E//	//7FF68A59B6BE//	//7FF7CDD8D20E//	//7FF7F72612FE//	//7FF727B5087E//	//7FF605CCCE8E//	//7FF74A32300E//	//7FF6F06A3A4E//	//7FF7A6A33BCE//	//7FF7EE583B1E//	//7FF6BED63B4E//	//7FF6F3FEDC1E//	//7FF7AA14EA6E//	//7FF78A40005E//	//7FF73880FF2E//	//7FF6AEB4753E//	//7FF655B13A2E//	//7FF7874A376E//	//7FF67900322E//	//7FF74AA39EAE//	//7FF61D94B05E//	//7FF7E7F764CE//	//7FF626245F7E	////7FF652D0899E	////7FF6FFC96EEE	////7FF7B4D67D4E	////7FF6F6097CFE	////7FF69B200D8E	////7FF6E92DDBAE	////7FF7B76EC6AE	////7FF70E3FDD6E	////7FF6D7EBDD8E	////7FF7F3A5DB2E	////7FF6B000D11E	////7FF6C95A3CDE	////7FF70B127D5E	////7FF71519E77E	////7FF7EF49538E	////7FF71B64847E	////7FF75E531BCE	////7FF672B9141E	////7FF6908BBBAE	////7FF6FC96198E	////7FF69E98A2AE	////7FF74E63A28E	////7FF7581732EE	////140E9783E////140E72E3E////140E8776E//
#define OFFSET_REFRESHREPEATEQCOUNT			0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8	//0x0000000005F8	//0x0000000005F8		//0x0000000005F8		//0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x000000000640//	0x000000000640//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005A8	//0x0000000005A8	//0x0000000005A8	//0x0000005A0//0x0000005A0//0x0000005A0//
//											0x7FF730942819	//0x7FF6ACC7F3A9	//0x7FF7912A8C29	//0x7FF701ECE499	//0x7FF724E0ADD9	//0x7FF6F4ACBBD9	//0x7FF6E765BB19	//00007FF7589ECEC9	//0x7FF68136CE59	//0x7FF6D63F9DE9	//0x7FF66A8D3F69	//0x7FF76123A7A9	//0x7FF79893A779//	00007FF7F723BFD9//	0x7FF7941AC029//	00007FF6A83A0E99	//0x7FF61D950F99	//0x7FF63B408849		//0x7FF69CE287B9	//	7FF6DFBE6799//	7FF677C361B9////	//7FF7E2A24819//	//7FF7E1275469//	//7FF6C2425339//	//7FF65D0C5819//	//7FF6E5346769//	//7FF676BCCE59//	//7FF729E58E09//	//7FF6269C40A9//	//7FF671E3EDF9//	//7FF7EC18E819//	//7FF7A30B8C49//	//7FF6BF958CD9//	//7FF6279FCA79//	//7FF6AA863C79//	//7FF75A475FB9//	//7FF6324F5AD9//	//7FF78227CBE9//	//7FF6747132F9//	//7FF62B898BA9//	//7FF6EED17FC9//	//7FF6B47D9659//	//7FF6F108A389//	//7FF61ADE9D79//	//7FF7598852B9//	//7FF76ECD25D9//	//7FF7E3D002F9//	//7FF61E8D87F9//	//7FF6605B03B9//	//7FF64BA79DF9//	//7FF73B029DE9//	//7FF67108B149//	//7FF6B552BCD9//	//7FF7842B2B59//	//7FF6ECC2C089//	//7FF6F4A6BC06//	//7FF7B6966296//	//7FF69B186296//	//7FF73BD6A196//	//7FF750887786//	//7FF73C877786//	//7FF6FEF9BB26//	//7FF6D6D1E5A6//	//7FF68A56C7D6//	//7FF7CDD64446//	//7FF7F7234016//	//7FF727B23596//	//7FF605CA00D6//	//7FF74A2F6E86//	//7FF6F0676E56//	//7FF7A6A072D6//	//7FF7EE557226//	//7FF6BED37256//	//7FF6F3FC1E96//	//7FF7AA126CC6//	//7FF78A3D82B6//	//7FF7387E8186//	//7FF6AEB1B376//	//7FF655AF0476//	//7FF7874801B6//	//7FF678FDFC26//	//7FF74AA0BCD6//	//7FF61D921816//	//7FF7E7F4A456//	//7FF62621E316	////7FF652CDC926	////7FF6FFC6F126	////7FF7B4D3BD16	////7FF6F606BCC6	////7FF69B1D5AD6	////7FF6E92B28F6	////7FF7B76C0856	////7FF70E3D2AD6	////7FF6D7E92AF6	////7FF7F3A32896	////7FF6AFFE5306	////7FF6C95775B6	////7FF70B0FAE46	////7FF7151D2891	////7FF7EF4CAED1	////7FF71B61E951	////7FF75E507815	////7FF672B69C05	////7FF690896945	////7FF6FC934AA5	////7FF69E963E39	////7FF74E613E19	////7FF75814CEE9	////140E6B8E9////140E483E9////140E5C939//
#define OFFSET_BUFFINFO						0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048		//0x000000000048		//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000040//0x000000040//0x000000040//
//											0x7FF72F955943	//0x7FF6AC8DCCCF	//0x7FF790F06521	//0x7FF701B2BAF1	//0x7FF724A54101	//0x7FF6F471BEF1	//0x7FF6E72ABE31	//00007FF7586511D1	//0x7FF680FD1161	//0x7FF6D6020431	//0x7FF66A50A551	//0x7FF760E79771	//0x7FF798579771//	00007FF7F6E9694B//	0x7FF793E069CB//	00007FF6A7FEE9CA	//0x7FF61D59EA1A	//0x7FF63B03D3EA		//0x7FF69CA5D35A	//	7FF6DF87AFBA//	7FF677898DEA////	//7FF7E26A294B//	//7FF7E0F316CB//	//7FF6C20E159B//	//7FF65CD730EB//	//7FF6E4FFA2AB//	//7FF676882A0B//	//7FF729B1043B//	//7FF62667D15F//	//7FF671AC6DC3//	//7FF7EBE446D3//	//7FF7A2D67A4A//	//7FF6BF607ADA//	//7FF6276771BE//	//7FF6AA4E9CCE//	//7FF75A137FFA//	//7FF6321B7CFA//	//7FF781F4260A//	//7FF6743DDE7A//	//7FF62B54FF5A//	//7FF6EE9CF4FF//	//7FF6B449B723//	//7FF6F0D4EF73//	//7FF61AAAE963//	//7FF759530EB3//	//7FF76E9D09E3//	//7FF7E39BBBA3//	//7FF61E5994FF//	//7FF6602634DF//	//7FF64B77B13F//	//7FF73AD2B12F//	//7FF670D4AA0F//	//7FF6B51DDDD6//	//7FF783FC29C6//	//7FF6EC91EAB6//	//7FF6F4755626//	//7FF7B6694876//	//7FF69AEB48A6//	//7FF73BA44F26//	//7FF750571785//	//7FF73C561785//	//7FF6FEC8D0B5//	//7FF6D6A3C7F8//	//7FF68A2A4CF8//	//7FF7CDA8C548//	//7FF7F6F621D8//	//7FF727851758//	//7FF6059D61E8//	//7FF74A0302B8//	//7FF6F03A1E35//	//7FF7A67476A5//	//7FF7EE2975F5//	//7FF6BEA77625//	//7FF6F3CF14D5//	//7FF7A9E5D9A5//	//7FF78A1114D5//	//7FF738521485//	//7FF6AE854CA5//	//7FF655823395//	//7FF7871B3125//	//7FF678D0EBC5//	//7FF74A7822A5//	//7FF61D6ADCFF//	//7FF7E7CB835C//	//7FF625FA030F	////7FF652A3C80F	////7FF6FF9F8AEF	////7FF7B4A9935F	////7FF6F5DC930F	////7FF69AF3B09F	////7FF6E903691C	////7FF7B744F3FF	////7FF70E1438AF	////7FF6D7C038CF	////7FF7F37A366F	////7FF6AFD567CF	////7FF6C9342139	////7FF70AE75CA0	////7FF714F3F2A3	////7FF7EF240A6A	////7FF71B3D925A	////7FF75E2C2EBA	////7FF672930FCA	////7FF6906599FA	////7FF6FC6F734E	////7FF69E71D93E	////7FF74E3CD91E	////7FF757F11AEE	////140C81FAE////140C5C77E////140C5558E//
#define OFFSET_DUNGEONLIST_PARTY			0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000030//0x000000030//0x000000030//
#define OFFSET_DUNGEONLIST_PARTYSIZE		0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018	//0x000000000018		//0x000000000018		//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//
//											0x7FF7304FBFF9	//0x7FF6AC839149	//0x7FF790E631B9	//0x7FF701A8AB89	//0x7FF7249AD8A9	//0x7FF6F4676169	//0x7FF6E72060A9	//00007FF7585B08C9	//0x7FF680F30859	//0x7FF6D5F7DF59	//0x7FF66A467229	//0x7FF760DDDB69	//0x7FF7984DDB69//	00007FF7F6DEF469//	0x7FF793D5F4E9//	00007FF6A7F47C59	//0x7FF61D4F7CA9	//0x7FF63AF96849		//0x7FF69C9B67B9	//	7FF6DF7D4899//	7FF6777FAEA9////	//7FF7E25FC849//	//7FF7E0E85BC9//	//7FF6C2035A99//	//7FF65CCD4709//	//7FF6E4F5B949//	//7FF6767E4DC9//	//7FF729A720C9//	//7FF6265DEFE9//	//7FF671A28C39//	//7FF7EBD9AA09//	//7FF7A2CBED69//	//7FF6BF55EDF9//	//7FF627611289//	//7FF6AA48A3B9//	//7FF75A0886C9//	//7FF6321083E9//	//7FF781E93CF9//	//7FF6743301A9//	//7FF62B4A4AB9//	//7FF6EE924089//	//7FF6B443CCB9//	//7FF6F0CF0049//	//7FF61AA4FA39//	//7FF759491F89//	//7FF76E9328A9//	//7FF7E39541F9//	//7FF61E531F99//	//7FF6601FC439//	//7FF64B6DA7A9//	//7FF73AC8A799//	//7FF670CE1D99//	//7FF6B5177019//	//7FF783F5BEE9//	//7FF6EC8BF879//	//7FF6F46F9119//	//7FF7B65F2449//	//7FF69AE12479//	//7FF73B9DD1A9//	//7FF750512DA9//	//7FF73C502DA9//	//7FF6FEC2ED79//	//7FF6D69DA4D9//	//7FF68A2031A9//	//7FF7CDA267C9//	//7FF7F6EFB949//	//7FF7277EAEF9//	//7FF605970AB9//	//7FF749FCACB9//	//7FF6F0301EF9//	//7FF7A66E58E9//	//7FF7EE235839//	//7FF6BEA15869//	//7FF6F3C93B59//	//7FF7A9E01969//	//7FF78A0B64E9//	//7FF7384C6499//	//7FF6AE7F2A59//	//7FF6557C7FD9//	//7FF787157D69//	//7FF678CA7219//	//7FF74A722B39//	//7FF61D64CAD9//	//7FF7E7C59129//	//7FF625F85B59	////7FF6529DC469	////7FF6FF9DE379	////7FF7B4A7F7F9	////7FF6F5DAF7A9	////7FF69AF215A9	////7FF6E8FD6D29	////7FF7B7434159	////7FF70E129CC9	////7FF6D7BE9CE9	////7FF7F3789A89	////7FF6AFD3CC39	////7FF6C92E37E9	////7FF70AE5F949	////7FF714F25989	////7FF7EF2257A9	////7FF71B376579	////7FF75E2AD9F9	////7FF672917F39	////7FF690640689	////7FF6FC6E0AB9	////7FF69E7047B9	////7FF74E3B47A9	////7FF757EF7D16	////140C695F6////140C434D6////140C3D006//
#define OFFSET_DUNGEONLIST_ELITE			0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050	//0x000000000050	//0x000000000050		//0x000000000050		//0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000050//0x000000050//0x000000050//
#define OFFSET_DUNGEONLIST_ELITESIZE		0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050	//0x000000000050	//0x000000000050		//0x000000000050		//0x000000000050//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000030	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000028	//0x000000000014	//0x000000010//0x000000010//
//											0x7FF7304F2DC5	//0x7FF6AC82FF15	//0x7FF790E59F85	//0x7FF701A81955	//0x7FF72499E145	//0x7FF6F4666BE5	//0x7FF6E71F6B25	//00007FF7585A7695	//0x7FF680F27625	//0x7FF6D5F719A5	//0x7FF66A45AC85	//0x7FF760DCD335	//0x7FF7984CD335//	00007FF7F6DDEB55//	0x7FF793D4EBD5//	00007FF6A7F38465	//0x7FF61D4E84B5	//0x7FF63AF87085		//0x7FF69C9A6FF5	//	7FF6DF7C50D5//	7FF6777F3165////	//7FF7E25ED105//	//7FF7E0E7A285//	//7FF6C202A155//	//7FF65CCC9355//	//7FF6E4F505D5//	//7FF6767D9A55//	//7FF729A66D65//	//7FF6265D3C85//	//7FF671A18E35//	//7FF7EBD8FF05//	//7FF7A2CB41A8//	//7FF6BF554238//	//7FF627609DA8//	//7FF6AA482EF8//	//7FF75A079D38//	//7FF6320F9A58//	//7FF781E87228//	//7FF674323808//	//7FF62B498118//	//7FF6EE9176E8//	//7FF6B4435518//	//7FF6F0CE93E8//	//7FF61AA48DD8//	//7FF759482FB8//	//7FF76E9238D8//	//7FF7E3947AA8//	//7FF61E525848//	//7FF6601F05C8//	//7FF64B6CEE98//	//7FF73AC7EE88//	//7FF670CD40A8//	//7FF6B516A8E8//	//7FF783F4F7E8//	//7FF6EC8B5698//	//7FF6F46F2868//	//7FF7B65E4655//	//7FF69AE04685//	//7FF73B9CFC05//	//7FF750509605//	//7FF73C4F9605//	//7FF6FEC25105//	//7FF6D69D37B5//	//7FF68A1F4208//	//7FF7CDA19998//	//7FF7F6EF0088//	//7FF7277DF638//	//7FF605964E18//	//7FF749FBF018//	//7FF6F02F5658//	//7FF7A66D9CF8//	//7FF7EE229C48//	//7FF6BEA09C78//	//7FF6F3C87F58//	//7FF7A9DF5D68//	//7FF78A0ABB98//	//7FF7384BBB48//	//7FF6AE7E50E8//	//7FF6557BBEB8//	//7FF78714BC48//	//7FF678C97D88//	//7FF74A719368//	//7FF61D63DC68//	//7FF7E7C4C7D8//	//7FF625F7FF38	////7FF6529CB238	////7FF6FF9D8778	////7FF7B4A79DD8	////7FF6F5DA9D88	////7FF69AF1BBF8	////7FF6E8FC8C78	////7FF7B7428908	////7FF70E1240A8	////7FF6D7BE40C8	////7FF7F3783E68	////7FF6AFD37018	////7FF6C92D2858	////7FF714F1A942	////7FF7EF21ACE2	////7FF71B365DE2	////7FF75E2A1CB2	////7FF672911542	////7FF69063A7A2	////7FF6FC6D4DD2	////7FF69E6F8842	////7FF74E3A8832	////7FF757EEC652	////140C63E86////140C36786////140C351F3//
#define OFFSET_INTERACTIONTYPE				0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000458	//0x000000000458	//0x000000000458	//0x000000000458	//0x000000000458	//0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458	//0x000000000458	//0x000000000458		//0x000000000458		//0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000448//	0x000000000448//	0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000440//0x000000440//0x000000440//
//											0x7FF7306002D2	//0x7FF6AC93CF02	//0x7FF790F663E2	//0X7FF701B8BA12	//0x7FF724AF73C2	//0x7FF6F47C4F92	//0x7FF6E7354ED2	//00007FF7586B6B92	//0x7FF681036B22	//0x7FF6D60C20D2	//0x7FF66A5B16A2	//0x7FF760F21712	//0x7FF7986216E2//	00007FF7F6F38B62//	0x7FF793EA8BE2//	00007FF6A80913B2	//0x7FF61D641402	//0x7FF63B0E2DD2		//0x7FF69CB02D42	//	7FF6DF91FF12//	7FF6778FC3E2////	//7FF7E2747842//	//7FF7E0F94582//	//7FF6C2144452//	//7FF65CDE4382//	//7FF6E5070DA2//	//7FF6768E7FA2//	//7FF729B75562//	//7FF6266E1D22//	//7FF671B6F302//	//7FF7EBEA9542//	//7FF7A2DCD192//	//7FF6BF66D222//	//7FF62771CDA2//	//7FF6AA58DDF2//	//7FF75A19ED72//	//7FF63221EA72//	//7FF781FA7AD2//	//7FF6744430E2//	//7FF62B5B4A72//	//7FF6EEA33FF2//	//7FF6B45409F2//	//7FF6F0DF2EC2//	//7FF61AB528B2//	//7FF75959C1D2//	//7FF76EA3B6E1//	//7FF7E3A64891//	//7FF61E641AC1//	//7FF66030BBB1//	//7FF64B7E18F1//	//7FF73AD918E1//	//7FF670DF1691//	//7FF6B5284EB1//	//7FF7840692F1//	//7FF6EC98C691//	//7FF6F47BFD91//	//7FF7B67025C1//	//7FF69AF225F1//	//7FF73BAEC2A1//	//7FF750615F31//	//7FF73C605F31//	//7FF6FECF9D01//	//7FF6D6AB0051//	//7FF68A30AED1//	//7FF7CDB347B1//	//7FF7F7006A91//	//7FF7278F6011//	//7FF605A44C61//	//7FF74A09E791//	//7FF6F040BCF1//	//7FF7A67B37F1//	//7FF7EE303741//	//7FF6BEAE3771//	//7FF6F3D620D1//	//7FF7A9ECE701//	//7FF78A182051//	//7FF738592001//	//7FF6AE8BF601//	//7FF655892CE1//	//7FF787222A71//	//7FF678D80981//	//7FF74A7EF361//	//7FF61D71CF61//	//7FF7E7D23751//	//7FF62600AEC1	////7FF652AA6961	////7FF6FFA62291	////7FF7B4B06A31	////7FF6F5E369E1	////7FF69AFA8331	////7FF6E909EBC1	////7FF7B74BE9A1	////7FF70E1AF2A1	////7FF6D7C6F2C1	////7FF7F380F061	////7FF6AFDC6741	////7FF6C93AE7B1	////7FF70AF2B541	////7FF714FB1951	////7FF7EF2ACFE1	////7FF71B4423D1	////7FF75E3386B1	////7FF67299C961	////7FF6906C62B1	////7FF6FC76FD11	////7FF69E78AFF1	////7FF74E43AFD1	////7FF757F79F21	////140CEDD51////140CC64E1////140CC1E21//
#define OFFSET_SELECTEDWORLDID				0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474	//0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474	//0x000000000474	//0x000000000474		//0x000000000474		//0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x000000000474//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x00000000046C//	0x000000000464//	0x000000000464//	0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x000000000464	//0x00000045C//0x00000045C//0x00000045C//
//											0x7FF730B46FFC	//0x7FF6ACE838DC	//0x7FF7914AC49C	//0x7FF7020D1D2C	//0x7FF72500AC8C	//0x7FF6F4CC98FC	//0x7FF6E785983C	//00007FF758BE761C	//0x7FF6815675AC	//0x7FF6D65C9A5C	//0x7FF66AAA314C	//0x7FF761407B7C	//0x7FF798B07B4C//	00007FF7F740E61C//	0x7FF79437E66C//	00007FF6A855E7BC	//0x7FF61DB0E8BC	//0x7FF63B59831C		//0x7FF69CFB828C	//	7FF6DFDCD27C//	7FF677DC782C////	//7FF7E2BE271C//	//7FF7E14463AC//	//7FF6C25F627C//	//7FF65D2961AC//	//7FF6E552206C//	//7FF676D9D1FC//	//7FF72A02A02C//	//7FF626B94DBC//	//7FF67200310C//	//7FF7EC3524CC//	//7FF7A327336C//	//7FF6BFB133FC//	//7FF627BB6C7C//	//7FF6AAA1CE6C//	//7FF75A6332EC//	//7FF6326B2DEC//	//7FF782439B9C//	//7FF6748CCAAC//	//7FF62BA2CC1C//	//7FF6EEEAC02C//	//7FF6B49A857C//	//7FF6F125664C//	//7FF61AFB603C//	//7FF759A02F9C//	//7FF76EE9D5BC//	//7FF7E3E9457C//	//7FF61EA99BEC//	//7FF66073FB6C//	//7FF64BC37DBC//	//7FF73B1E7DAC//	//7FF671210B1C//	//7FF6B56A60BC//	//7FF78448615C//	//7FF6ECDC37EC//	//7FF6F4C0081C//	//7FF7B6B31EAC//	//7FF69B351EAC//	//7FF73BEEEE3C//	//7FF750A059FC//	//7FF73C9F59FC//	//7FF6FF119CCC//	//7FF6D6EAFD3C//	//7FF68A6FD98C//	//7FF7CDF007DC//	//7FF7F73C960C//	//7FF727CB8B8C//	//7FF605E33BBC//	//7FF74A487ADC//	//7FF6F07E997C//	//7FF7A6B9224C//	//7FF7EE6E219C//	//7FF6BEEC21CC//	//7FF6F411454C//	//7FF7AA26B0BC//	//7FF78A51B20C//	//7FF73892B0DC//	//7FF6AEC60A7C//	//7FF655C294FC//	//7FF7875B923C//	//7FF679116C3C//	//7FF74AB5827C//	//7FF61DA813BC//	//7FF7E808726C//	//7FF62637F6AC	////7FF652DFCA3C	////7FF6FFDC956C	////7FF7B4E4469C	////7FF6F617464C	////7FF69B2E08DC	////7FF6E93BAB4C	////7FF7B78058BC	////7FF70E4D910C	////7FF6D7F9912C	////7FF7F3B38ECC	////7FF6B00E489C	////7FF6C967FC99	////7FF70B1F0149	////7FF71528EE32	////7FF7EF584202	////7FF71B703B02	////7FF75E60BCC2	////7FF672C28B12	////7FF6909487B2	////7FF6FC9FDFB2	////7FF69EA10F22	////7FF74E6C0F02	////7FF7581F8E02	////140F5FC72////140F4E7D2////140F15322//
#define OFFSET_SELECTEDVOLUMAREA			0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528	//0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528	//0x000000000528	//0x000000000528		//0x000000000528		//0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000528//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F8//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004E8//	0x0000000004E8//	0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004E8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000000004A8	//0x0000004A0//0x0000004A0//0x0000004A0//
//											0x7FF730B15F7A	//0x7FF6ACE5285A	//0x7FF79147B7DA	//0x7FF7020A106A	//0x7FF724FDA33A	//0x7FF6F4C99A6A	//0x7FF6E78299AA	//00007FF758BB780A	//0x7FF68153779A	//0x7FF6D65C1DAA	//0x7FF66AA9BAEA	//0x7FF7613FFE1A	//0x7FF798AFFDEA//	00007FF7F74053FA//	0x7FF79437544A//	00007FF6A855546A	//0x7FF61DB0556A	//0x7FF63B59050A		//0x7FF69CFB047A	//	7FF6DFDC546A//	7FF677DBF95A////	//7FF7E2BD948A//	//7FF7E143E4DA//	//7FF6C25EE3AA//	//7FF65D28E2DA//	//7FF6E5518CAA//	//7FF676D9535A//	//7FF72A02218A//	//7FF626B8CF1A//	//7FF671FF9D3A//	//7FF7EC3490FA//	//7FF7A326A0CA//	//7FF6BFB0A15A//	//7FF627BADD6A//	//7FF6AAA13F5A//	//7FF75A60168A//	//7FF63268118A//	//7FF78240801A//	//7FF67489B03A//	//7FF62BA23C1A//	//7FF6EEEA302A//	//7FF6B499F5EA//	//7FF6F124D84A//	//7FF61AFAD23A//	//7FF7599FA26A//	//7FF76EE949FA//	//7FF7E3E8C07A//	//7FF61EA698CA//	//7FF66073732A//	//7FF64BC0811A//	//7FF73B1B810A//	//7FF67120818A//	//7FF6B569E7CA//	//7FF78447EA8A//	//7FF6ECDBB06A//	//7FF6F4BF80FA//	//7FF7B6B04F4A//	//7FF69B324F4A//	//7FF73BEE675A//	//7FF7509CFF1A//	//7FF73C9BFF1A//	//7FF6FF0E423A//	//7FF6D6EA76DA//	//7FF68A6F532A//	//7FF7CDEF771A//	//7FF7F73C0F8A//	//7FF727CB050A//	//7FF605E2B58A//	//7FF74A47F4AA//	//7FF6F07BF94A//	//7FF7A6B5EE4A//	//7FF7EE6AED9A//	//7FF6BEE8EDCA//	//7FF6F410BAAA//	//7FF7AA262A5A//	//7FF78A512C1A//	//7FF738922AEA//	//7FF6AEC5958A//	//7FF655BF4EEA//	//7FF787584C2A//	//7FF6790E2FCA//	//7FF74AB4FDEA//	//7FF61DA781DA//	//7FF7E805ABFA//	//7FF62637665A	////7FF652DF3D2A	////7FF6FFDC119A	////7FF7B4E3B4DA	////7FF6F616B48A	////7FF69B2D762A	////7FF6E93B18AA	////7FF7B77D43AA	////7FF70E4D07AA	////7FF6D7F907CA	////7FF7F3B3056A	////7FF6B00DC3DA	////7FF6C9678960	////7FF70B1EA080	////7FF7152873B0	////7FF7EF57CB10	////7FF71B6DE9E0	////7FF75E605790	////7FF672C21490	////7FF690941310	////7FF6FC9F6030	////7FF69EA0A750	////7FF74E6BA730	////7FF7581F2880	////140F31250////140F48D20////140F0E200//
#define OFFSET_WORLDMAPID					0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498	//0x000000000498	//0x000000000498		//0x000000000498		//0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000480//	0x000000000480//	0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000458//0x000000458//0x000000458//
//											0x7FF730B29034	//0x7FF6ACE65914	//0x7FF79148E5C4	//0x7FF7020B3E64	//0x7FF724FECDD4	//0x7FF6F4CAC284	//0x7FF6E783C1C4	//00007FF758BC9FA4	//0x7FF681549F34	//0x7FF6D65D5974	//0x7FF66AAAF034	//0x7FF761414414	//0x7FF798B143E4//	00007FF7F7421654//	0x7FF7943916A4//	00007FF6A85702E4	//0x7FF61DB203E4	//0x7FF63B5A45A4		//0x7FF69CFC4514	//	7FF6DFDD9504//	7FF677DD4064////	//7FF7E2BF3044//	//7FF7E1452BE4//	//7FF6C2602AB4//	//7FF65D2A2944//	//7FF6E55357F4//	//7FF676DA9A14//	//7FF72A036844//	//7FF626BA15D4//	//7FF672015B74//	//7FF7EC364F34//	//7FF7A3283C64//	//7FF6BFB23CF4//	//7FF627BC7734//	//7FF6AAA2D494//	//7FF75A60FB84//	//7FF63268F684//	//7FF7824164F4//	//7FF6748A9414//	//7FF62BA3FF94//	//7FF6EEEBF3A4//	//7FF6B49B9DA4//	//7FF6F1267DF4//	//7FF61AFC77E4//	//7FF759A145F4//	//7FF76EEAD9F4//	//7FF7E3EA1E64//	//7FF61EA7D284//	//7FF66074CDB4//	//7FF64BC1B6A4//	//7FF73B1CB694//	//7FF671223874//	//7FF6B56B4924//	//7FF784493CF4//	//7FF6ECDD5144//	//7FF6F4C12F84//	//7FF7B6B169D4//	//7FF69B3369D4//	//7FF73BEFD934//	//7FF750A12DE4//	//7FF73CA02DE4//	//7FF6FF1270B4//	//7FF6D6EC0174//	//7FF68A70DDC4//	//7FF7CDF11DE4//	//7FF7F73D9A44//	//7FF727CC8FC4//	//7FF605E43DF4//	//7FF74A497D14//	//7FF6F07D3444//	//7FF7A6B76A14//	//7FF7EE6C6964//	//7FF6BEEA6994//	//7FF6F4120E84//	//7FF7AA2795A4//	//7FF78A528A24//	//7FF7389388F4//	//7FF6AEC6DBB4//	//7FF655C07B04//	//7FF787597844//	//7FF6790F5924//	//7FF74AB66F24//	//7FF61DA8DE64//	//7FF7E806FFB4//	//7FF62638E1B4	////7FF652E09324	////7FF6FFDD7AB4	////7FF7B4E528DE	////7FF6F618288E	////7FF69B2F0B6E	////7FF6E93CACAE	////7FF7B77EB45E	////7FF70E4E80FE	////7FF6D7FA811E	////7FF7F3B47EBE	////7FF6B00F3CEE	////7FF6C968F48E	////7FF70B1F954E	////7FF7152A04FE	////7FF7EF595A5E	////7FF71B6F6B4E	////7FF75E61900E	////7FF672C39DCE	////7FF690957CEE	////7FF6FCA0E93E	////7FF69EA1DB0E	////7FF74E6CDAEE	////7FF75820481E	////140F47D7E////140F5542E////140F2356E//
#define OFFSET_VOLUMEAREAINFO				0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000030//0x000000030//0x000000030//
//											0x7FF730B290AA	//0x7FF6ACE6598A	//0x7FF79148E63A	//0x7FF7020B3EDA	//0x7FF724FECE4A	//0x7FF6F4CAC2FA	//0x7FF6E783C23A	//0x7FF758BCA01A	//0x7FF681549FAA	//0x7FF6D65D59EA	//0x7FF66AAAF0AA	//0x7FF76141448A	//0x7FF798B1445A//	00007FF7F74216CA//	0x7FF79439171A//	00007FF6A857035A	//0x7FF61DB2045A	//0x7FF63B5A461A		//0x7FF69CFC458A	//	7FF6DFDD957A//	7FF677DD40DA////	//7FF7E2BF30BA//	//7FF7E1452C5A//	//7FF6C2602B2A//	//7FF65D2A29BA//	//7FF6E553586A//	//7FF676DA9A8A//	//7FF72A0368BA//	//7FF626BA164A//	//7FF672015BEA//	//7FF7EC364FAA//	//7FF7A3283CDA//	//7FF6BFB23D6A//	//7FF627BC77AA//	//7FF6AAA2D50A//	//7FF75A60FBFA//	//7FF63268F6FA//	//7FF78241656A//	//7FF6748A948A//	//7FF62BA4000A//	//7FF6EEEBF41A//	//7FF6B49B9E1A//	//7FF6F1267E6A//	//7FF61AFC785A//	//7FF759A1466A//	//7FF76EEADA6A//	//7FF7E3EA1EDA//	//7FF61EA7D2FA//	//7FF66074CE2A//	//7FF64BC1B71A//	//7FF73B1CB70A//	//7FF6712238EA//	//7FF6B56B499A//	//7FF784493D6A//	//7FF6ECDD51BA//	//7FF6F4C12FFA//	//7FF7B6B16A4A//	//7FF69B336A4A//	//7FF73BEFD9AA//	//7FF750A12E5A//	//7FF73CA02E5A//	//7FF6FF12712A//	//7FF6D6EC01EA//	//7FF68A70DE3A//	//7FF7CDF11E5A//	//7FF7F73D9ABA//	//7FF727CC903A//	//7FF605E43E6A//	//7FF74A497D8A//	//7FF6F07D34BA//	//7FF7A6B76A8A//	//7FF7EE6C69DA//	//7FF6BEEA6A0A//	//7FF6F4120EFA//	//7FF7AA27961A//	//7FF78A528A9A//	//7FF73893896A//	//7FF6AEC6DC2A//	//7FF655C07B7A//	//7FF7875978BA//	//7FF6790F599A//	//7FF74AB66F9A//	//7FF61DA8DEDA//	//7FF7E807002A//	//7FF62638E22A	////7FF652E0939A	////7FF6FFDD7B2A	////7FF7B4E52959	////7FF6F6182909	////7FF69B2F0BE9	////7FF6E93CAD29	////7FF7B77EB4D9	////7FF70E4E8179	////7FF6D7FA8199	////7FF7F3B47F39	////7FF6B00F3D69	////7FF6C968F509	////7FF70B1F95C9	////7FF7152A0579	////7FF7EF595AD9	////7FF71B6F6BC9	////7FF75E619089	////7FF672C39E49	////7FF690957D69	////7FF6FCA0E9B9	////7FF69EA1DB89	////7FF74E6CDB69	////7FF758204899	////140F47DF9////140F554A9////140F235E9//
#define OFFSET_PARTYDUNGEONFREECOUNT		0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0	//0x0000000002B0//	0x0000000002B0//	0x0000000002B0//	0x0000000002B0	//0x0000000002B0	//0x0000000002B0		//0x0000000002B0		//0x0000000002B0//	0x0000000002B0//	0x0000000002B0//	0x0000000002B0//	0x0000000002B0//	0x0000000002B0//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000298//	0x000000000290//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000240//	0x000000000228//	0x000000000228//	0x000000000228//	0x000000000228//	0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x000000000228	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001E8	//0x0000001E0//0x0000001C0//0x0000001C0//
//											0x7FF73050D4B5	//0x7FF6AC84A605	//0x7FF790E74675	//0x7FF701A9A215	//0x7FF7249C0295	//0x7FF6F4688BC5	//0x7FF6E7218B05	//00007FF7585C1D85	//0x7FF680F41D15	//0x7FF6D5F8AAC5	//0x7FF66A473D95	//0x7FF760DED645	//0x7FF7984ED645//	00007FF7F6E03285//	0x7FF793D73305//	00007FF6A7F5BA75	//0x7FF61D50BAC5	//0x7FF63AFAA5F5		//0x7FF69C9CA565	//	7FF6DF7E8505//	7FF677809CB5////	//7FF7E2610425//	//7FF7E0E96C55//	//7FF6C2046B25//	//7FF65CCE5025//	//7FF6E4F6C265//	//7FF6767F56E5//	//7FF729A829E5//	//7FF6265EF905//	//7FF671A37865//	//7FF7EBDAB775//	//7FF7A2CD0395//	//7FF6BF570425//	//7FF627622D15//	//7FF6AA49BC75//	//7FF75A09BF05//	//7FF63211BC25//	//7FF781EA58D5//	//7FF674341905//	//7FF62B4B6215//	//7FF6EE9357E5//	//7FF6B444E105//	//7FF6F0D014D5//	//7FF61AA60EC5//	//7FF7594A0D75//	//7FF76E941685//	//7FF7E3965575//	//7FF61E543295//	//7FF66020D635//	//7FF64B6E62A5//	//7FF73AC96295//	//7FF670CF4885//	//7FF6B5188045//	//7FF783F6CEF5//	//7FF6EC8D1325//	//7FF6F470AC65//	//7FF7B6602C65//	//7FF69AE22C95//	//7FF73B9EEEF5//	//7FF750523C25//	//7FF73C513C25//	//7FF6FEC3FD75//	//7FF6D69EAA95//	//7FF68A211895//	//7FF7CDA38405//	//7FF7F6F0D565//	//7FF7277FCB15//	//7FF605983CA5//	//7FF749FDDEA5//	//7FF6F030DCC5//	//7FF7A66F7DF5//	//7FF7EE247D45//	//7FF6BEA27D75//	//7FF6F3CA51D5//	//7FF7A9E12AE5//	//7FF78A0C6835//	//7FF7384D67E5//	//7FF6AE8054D5//	//7FF6557D99B5//	//7FF787169745//	//7FF678CB55D5//	//7FF74A730D75//	//7FF61D65A295//	//7FF7E7C69075//	//7FF625F93EB5	////7FF6529E8AD5	////7FF6FF9EC715	////7FF7B4A8CB55	////7FF6F5DBCB05	////7FF69AF2E895	////7FF6E8FE4695	////7FF7B7444915	////7FF70E1370A5	////7FF6D7BF70C5	////7FF7F3796E65	////7FF6AFD49FC5	////7FF6C92EFD65	////7FF70AE6D083	////7FF714F35393	////7FF7EF235283	////7FF71B381B63	////7FF75E2BBDAC	////7FF672925FCA	////7FF69064E23A	////7FF6FC6EF65A	////7FF69E7157FA	////7FF74E3C57DA	////7FF757F08C4A	////140C770F9////140C53F2A////140C4B15A//
#define OFFSET_SELECTEDQUESTLISTITEM		0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0	//0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0	//0x0000000005F0	//0x0000000005F0		//0x0000000005F0		//0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C8//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B0//	0x0000000005B0//	0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000000005B0	//0x0000005A8//0x0000005A8//0x0000005A8//
//											0x7FF730942167	//0x7FF6ACC7ECF7	//0x7FF7912A8577	//0x7FF701ECDDE7	//0x7FF724E0A727	//0x7FF6F4ACB527	//0x7FF6E765B467	//0x7FF7589EC817	//0x7FF68136C7A7	//0x7FF6D63F9737	//0x7FF66A8D38B7	//0x7FF76123A0F7	//0x7FF79893A0C7//	00007FF7F723B927//	0x7FF7941AB977//	00007FF6A8348E37	//0x7FF61D8F8F37	//0x7FF63B3AAA87		//0x7FF69CDCA9F7	//	7FF6DFBE60E7//	7FF677BD6157////	//7FF7E29CC7D7//	//7FF7E1274DB7//	//7FF6C2424C87//	//7FF65D0C5167//	//7FF6E53460B7//	//7FF676BCC7A7//	//7FF729E58757//	//7FF6269C39F7//	//7FF671E3E747//	//7FF7EC18E167//	//7FF7A305FB47//	//7FF6BF8FFBD7//	//7FF6279A3CB7//	//7FF6AA80B407//	//7FF75A41E747//	//7FF63249E267//	//7FF782225EF7//	//7FF6746BC997//	//7FF62B839DB7//	//7FF6EECB9207//	//7FF6B47D8FA7//	//7FF6F1089CD7//	//7FF61ADE96C7//	//7FF759826097//	//7FF76ECD1F27//	//7FF7E3CFFC47//	//7FF61E8D8147//	//7FF660557617//	//7FF64BA79747//	//7FF73B029737//	//7FF671033CF7//	//7FF6B54C98C7//	//7FF7842B24A7//	//7FF6ECC2B9D7//	//7FF6F4A6B557//	//7FF7B6965BE7//	//7FF69B185BE7//	//7FF73BD10DC7//	//7FF75082F4A7//	//7FF73C81F4A7//	//7FF6FEF438D7//	//7FF6D6D1DEF7//	//7FF68A56C127//	//7FF7CDD63D97//	//7FF7F7233967//	//7FF727B22EE7//	//7FF605C9FA27//	//7FF74A2F67D7//	//7FF6F061B3E7//	//7FF7A6A06C27//	//7FF7EE556B77//	//7FF6BED36BA7//	//7FF6F3FC17E7//	//7FF7AA0CC917//	//7FF78A37DEE7//	//7FF73878DDD3//	//7FF6AEABEC63//	//7FF655A90523//	//7FF787420263//	//7FF678F80C63//	//7FF74AA0B643//	//7FF61D921183//	//7FF7E7EEE0F3//	//7FF62621DC83	////7FF652C81183	////7FF6FFC6EA93	////7FF7B4CE0633	////7FF6F60105E3	////7FF69B17A0F3	////7FF6E9257AF3	////7FF7B76C01C3	////7FF70E3788D3	////7FF6D7E388F3	////7FF7F39D8693	////7FF6AFF8AD43	////7FF6C9576F23	////7FF70B0FA7B3	////7FF7151729E3	////7FF7EF469633	////7FF71B5C3303	////7FF75E5071E3	////7FF672B18723	////7FF69083BF63	////7FF6FC934233	////7FF69E908963	////7FF74E5B8943	////7FF7580F32E3	////140E6B313////140E47E13////140E0BDD3//
#define OFFSET_QUESTCONTAINERQUESTRECORD	0x0000000004F8	//0x0000000004F8	//0x0000000004F8	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0	//0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0	//0x0000000004F0	//0x0000000004F0		//0x0000000004F0		//0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004F0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004E0//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004D8//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004C0//	0x0000000004B8//	0x0000000004B8//	0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000000004B8	//0x0000004B0//0x0000004B0//0x0000004B0//
//											0x7FF73094E78C	//0x7FF6ACC8B31C	//0x7FF7912B4B4C	//0x7FF701EDA35C	//0x7FF724E16EEC	//0x7FF6F4AD7ECC	//0x7FF6E7667E0C	//00007FF7589F8C7C	//0x7FF681378C0C	//0x7FF6D64055BC	//0x7FF66A8DF73C	//0x7FF76124470C	//0x7FF7989446DC//	00007FF7F7245F3C//	0x7FF7941B5F8C//	00007FF6A83541BC	//0x7FF61D9042BC	//0x7FF63B3B5C7C		//0x7FF69CDD5BEC	//	7FF6DFBF1A7C//	7FF677BE14AC////	//7FF7E29D7B5C//	//7FF7E12810CC//	//7FF6C2430F9C//	//7FF65D0D13AC//	//7FF6E5351FBC//	//7FF676BD89EC//	//7FF729E65BAC//	//7FF6269D0E4C//	//7FF671DF949C//	//7FF7EC148EAC//	//7FF7A306A8DC//	//7FF6BF90A96C//	//7FF6279AEA4C//	//7FF6AA8160EC//	//7FF75A4290BC//	//7FF6324A8BDC//	//7FF78223086C//	//7FF6746C727C//	//7FF62B8447FC//	//7FF6EECC3C4C//	//7FF6B47E6A7C//	//7FF6F10977BC//	//7FF61ADF71AC//	//7FF759830AAC//	//7FF76ECDDEBC//	//7FF7E3D0C15C//	//7FF61E8E465C//	//7FF66056419C//	//7FF64BA86E7C//	//7FF73B036E6C//	//7FF67103DFDC//	//7FF6B54D469C//	//7FF7842BE0DC//	//7FF6ECC3771C//	//7FF6F4A7729C//	//7FF7B697171C//	//7FF69B19171C//	//7FF73BD1D31C//	//7FF75083B6EC//	//7FF73C82B6EC//	//7FF6FEF4FB1C//	//7FF6D6D2B2FC//	//7FF68A57952C//	//7FF7CDD6FBEC//	//7FF7F72407AC//	//7FF727B2FD2C//	//7FF605CAC6EC//	//7FF74A30349C//	//7FF6F0626E2C//	//7FF7A6A1399C//	//7FF7EE5638EC//	//7FF6BED4391C//	//7FF6F3F7D12C//	//7FF7AA0D686C//	//7FF78A387E3C//	//7FF738797D0C//	//7FF6AEACAAAC//	//7FF655A9BF6C//	//7FF78742BCAC//	//7FF678F8C20C//	//7FF74AA1748C//	//7FF61D92D26C//	//7FF7E7EFB50C//	//7FF62622A55C	////7FF652C8E14C	////7FF6FFC7B36C	////7FF7B4CED5EC	////7FF6F601D59C	////7FF69B1873AC	////7FF6E9264A4C	////7FF7B76CC57C	////7FF70E384E9C	////7FF6D7E44EBC	////7FF7F39E4C5C	////7FF6AFF97C4C	////7FF6C958290C	////7FF70B106CBC	////7FF71517DFEC	////7FF7EF474C5C	////7FF71B5D001C	////7FF75E51361C	////7FF672B24ABC	////7FF69084A37C	////7FF6FC8F8D6C	////7FF69E916B7C	////7FF74E5C6B5C	////7FF758100A5C	////140E777EC////140E55F6C////140E1843C//
#define OFFSET_ITEMCOLLECTIONANME			0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518	//0x000000000518	//0x000000000518		//0x000000000518		//0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000508//	0x000000000508//	0x000000000508	//0x000000000508	//0x000000000508	//0x000000000508	//0x000000000508	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000004B8//0x0000004B8//0x0000004B8//
//											0x7FF7307E3174	//0x7FF6ACB1FD94	//0x7FF7911487F4	//0x7FF701D6DE14	//0x7FF724CAA174	//0x7FF6F496D5B4	//0x7FF6E74FD4F4	//00007FF75888B014	//0x7FF68120AFA4	//0x7FF6D628F294	//0x7FF66A76CBE4	//0x7FF7610DB004	//0x7FF7987DAFD4//	00007FF7F70DCD14//	0x7FF79404CD94//	00007FF6A8234B24	//0x7FF61D7E4C24	//0x7FF63B298984		//0x7FF69CCB88F4	//	7FF6DFAD5244//	7FF677ABF734////	//7FF7E28FB0D4//	//7FF7E1154184//	//7FF6C2304054//	//7FF65CFA46A4//	//7FF6E522CA54//	//7FF676AAC944//	//7FF729D399C4//	//7FF6268A5394//	//7FF671D0FD24//	//7FF7EC05F944//	//7FF7A2F7FD14//	//7FF6BF81FDA4//	//7FF6278C4BF4//	//7FF6AA72EA54//	//7FF75A343DE4//	//7FF6323C3A84//	//7FF78214B6F4//	//7FF6745E3D84//	//7FF62B764484//	//7FF6EEBE3904//	//7FF6B46B7AA4//	//7FF6F0F69B24//	//7FF61ACC9514//	//7FF759754BF4//	//7FF76EBF7B54//	//7FF7E3BDAED4//	//7FF61E7B40F4//	//7FF66047DBB4//	//7FF64B99E204//	//7FF73AF4E1F4//	//7FF670F611C4//	//7FF6B53F73E4//	//7FF7841DA464//	//7FF6ECB4B6A4//	//7FF6F498F264//	//7FF7B6890D44//	//7FF69B0B0D44//	//7FF73BC8B124//	//7FF7507A9464//	//7FF73C799464//	//7FF6FEEBE244//	//7FF6D6C3D414//	//7FF68A48BA54//	//7FF7CDC87D64//	//7FF7F7156214//	//7FF727A45794//	//7FF605BC30E4//	//7FF74A21A124//	//7FF6F05951B4//	//7FF7A6929424//	//7FF7EE479374//	//7FF6BEC593A4//	//7FF6F3EE4814//	//7FF7AA048024//	//7FF78A2F95C4//	//7FF738709494//	//7FF6AEA373B4//	//7FF655A08854//	//7FF7873985E4//	//7FF678EFE724//	//7FF74A92B3D4//	//7FF61D89BA64//	//7FF7E7E5AD94//	//7FF626192354	////7FF652BEE4F4	////7FF6FFBE39F4	////7FF7B4C4F9E4	////7FF6F5F7F994	////7FF69B0EAB67	////7FF6E91CB967	////7FF7B7635367	////7FF70E2ECBE7	////7FF6D7DACC07	////7FF7F394C9A7	////7FF6AFEFDB47	////7FF6C94EB097	////7FF70B010157	////7FF7150E72B7	////7FF7EF3DEE97	////7FF71B528DE7	////7FF75E4744C7	////7FF672AE0447	////7FF6907AC377	////7FF6FC8A9D47	////7FF69E8D61C7	////7FF74E5861A7	////7FF7580C2887	////140DDD047////140E171B7////140DCD487//
#define OFFSET_ITEMCONTAINERLV				0x0000000005D4	//0x0000000005D4	//0x0000000005D4	//0x0000000005D4	//0x0000000005CC	//0x0000000005CC	//0x0000000005CC	//0x0000000005CC	//0x0000000005C4	//0x0000000005C4	//0x0000000005C4	//0x0000000005C4//	0x0000000005C4//	0x0000000005C4//	0x0000000005C4	//0x0000000005C4	//0x0000000005C4		//0x0000000005C4		//0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005BC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x0000000005AC//	0x00000000059C//	0x00000000059C//	0x00000000059C//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x00000000059C//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x000000000594//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x00000000058C//	0x000000000584//	0x00000000057C//	0x00000000057C//	0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x00000000057C	//0x000000000574	//0x00000000056C	//0x00000000056C	//0x00000000056C	//0x00000000056C	//0x000000564//0x000000564//0x000000564//
//											0x7FF7307D2F93	//0x7FF6ACB0FBB3	//0x7FF7911385E3	//0x7FF701D5DC03	//0x7FF724C99BC3	//0x7FF6F495D0A3	//0x7FF6E74ECFE3	//00007FF758879583	//0x7FF6811F9513	//0x7FF6D627D833	//0x7FF66A75B183	//0x7FF761080F53	//0x7FF798780F23//	00007FF7F7082D23//	0x7FF793FF2DA3//	00007FF6A81DAF23	//0x7FF61D78B023	//0x7FF63B2358D3		//0x7FF69CC55843	//	7FF6DFA71F13//	7FF677AAE173////	//7FF7E2897D93//	//7FF7E1143033//	//7FF6C22F2F03//	//7FF65CF93553//	//7FF6E51D3023//	//7FF676A9B803//	//7FF729D28883//	//7FF6268941A3//	//7FF671CB7313//	//7FF7EC005DA3//	//7FF7A2F25BE3//	//7FF6BF7C5C73//	//7FF62786A613//	//7FF6AA6D37F3//	//7FF75A2E8F83//	//7FF632368C83//	//7FF7820F0B93//	//7FF67458ADC3//	//7FF62B706CE3//	//7FF6EEB86163//	//7FF6B46A93B3//	//7FF6F0F5B463//	//7FF61ACBAE53//	//7FF7596F6213//	//7FF76EB93243//	//7FF7E3BCC993//	//7FF61E7A5CE3//	//7FF66046F823//	//7FF64B938F13//	//7FF73AEE8F03//	//7FF670F52F23//	//7FF6B53E8333//	//7FF7841CB573//	//7FF6ECAE3CE3//	//7FF6F4926B43//	//7FF7B68811F3//	//7FF69B0A11F3//	//7FF73BC1B743//	//7FF75073A3A3//	//7FF73C72A3A3//	//7FF6FEE4EDA3//	//7FF6D6C2C1B3//	//7FF68A47A7F3//	//7FF7CDC78C53//	//7FF7F7146443//	//7FF727A359C3//	//7FF605BB33F3//	//7FF74A2098F3//	//7FF6F0525833//	//7FF7A6918BF3//	//7FF7EE468B43//	//7FF6BEC48B73//	//7FF6F3ED2F83//	//7FF7A9FDCE53//	//7FF78A28E843//	//7FF73869E733//	//7FF6AEA27483//	//7FF65599DD23//	//7FF78732DAB3//	//7FF678E90573//	//7FF74A919AF3//	//7FF61D8289A3//	//7FF7E7E49733//	//7FF62611FB73	////7FF652BDCE03	////7FF6FFB71B63	////7FF7B4C3E5B3	////7FF6F5F6E563	////7FF69B0D9A53	////7FF6E91BB233	////7FF7B75C5B63	////7FF70E2DB1D3	////7FF6D7D9B1F3	////7FF7F393AF93	////7FF6AFEEBEF3	////7FF6C947A4B3	////7FF70AFFC753	////7FF7150D6703	////7FF7EF3CE823	////7FF71B515A83	////7FF75E463E53	////7FF672A690A3	////7FF6907972F3	////7FF6FC895B83	////7FF69E85C8E3	////7FF74E50C8C3	////7FF758049883	////140DCA253////140DA0693////140DB8CC4//
#define OFFSET_CHECKPOPUPCHECKER			0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460	//0x000000000460	//0x000000000460		//0x000000000460		//0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000450//	0x000000000450//	0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000448//0x000000448//0x000000448//
//											0x7FF730207F70	//0x7FF6AC546E00	//0x7FF790B7BD20	//0x7FF7017A8240	//0x7FF7246BE9B0	//0x7FF6F438D850	//0x7FF6E6F1D790	//00007FF7582CC360	//0x7FF680C4C2F0	//0x7FF6D5CD7B00	//0x7FF66A1CE440	//0x7FF760B3B8C0	//0x7FF79823B8C0//	00007FF7F6B41470//	0x7FF793AB14F0//	00007FF6A7C9E900	//0x7FF61D24E950	//0x7FF63ACF1500		//0x7FF69C711470	//	7FF6DF52B1B0//	7FF67755FF70////	//7FF7E2354AD0//	//7FF7E0BDAFD0//	//7FF6C1D8AEA0//	//7FF65CA28060//	//7FF6E4CB1280//	//7FF67653C5D0//	//7FF7297CA0D0//	//7FF626338010//	//7FF671781670//	//7FF7EBAEC4B0//	//7FF7A2A187B0//	//7FF6BF2B8840//	//7FF6273629E0//	//7FF6AA1DDDA0//	//7FF759E1CD50//	//7FF631E9CAB0//	//7FF781C2EDC0//	//7FF6740CE1F0//	//7FF62B2460F0//	//7FF6EE6C5780//	//7FF6B4184F00//	//7FF6F0A3AB50//	//7FF61A79A540//	//7FF759227450//	//7FF76E6CA290//	//7FF7E36F0030//	//7FF61E2CF8F0//	//7FF65FF9C810//	//7FF64B4BC520//	//7FF73AA6C520//	//7FF670A7B890//	//7FF6B4F12BF0//	//7FF783CF8470//	//7FF6EC64FF80//	//7FF6F4499090//	//7FF7B63D7C00//	//7FF69ABF7C30//	//7FF73B7C3DE0//	//7FF750302B40//	//7FF73C2F2B40//	//7FF6FEA1A500//	//7FF6D67C0E50//	//7FF68A0302E0//	//7FF7CD85E560//	//7FF7F6D34940//	//7FF727623EF0//	//7FF6057AB250//	//7FF749E06EC0//	//7FF6F013B760//	//7FF7A651F820//	//7FF7EE06F850//	//7FF6BE84F7C0//	//7FF6F3AC88D0//	//7FF7A9C3ADE0//	//7FF789EF1D40//	//7FF738301CF0//	//7FF6AE61EAF0//	//7FF6555F23E0//	//7FF786F821F0//	//7FF678AD2750//	//7FF74A54FA90//	//7FF61CD47850//	//7FF7E7364BA0//	//7FF6256915E0	////7FF65213FC10	////7FF6FF12D0E0	////7FF7B41D8F70	////7FF6F5508F40	////7FF69A687E90	////7FF6E8776D40	////7FF7B6BD5F50	////7FF70D8C52C0	////7FF6D73852C0	////7FF7F2F252C0	////7FF6AF4E4320	////7FF6C8B0FC00	////7FF70A69E230	////7FF71476A3D0	////7FF7EEA78FA0	////7FF71AC079B0	////7FF75DB55750	////7FF6721D0970	////7FF68FEFF410	////7FF6FBFCDBC0	////7FF69DFFC920	////7FF74DCAC920	////7FF7577FB8B0	////140B3D7A0////140B00880////140B05D90//
#define OFFSET_EXCHANGEDEPTH				0x000000000618	//0x000000000618	//0x000000000618	//0x000000000618	//0x000000000618	//0x000000000618	//0x000000000618	//0x000000000610	//0x000000000610	//0x000000000608	//0x000000000608	//0x000000000608	//0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608	//0x000000000608	//0x000000000608		//0x000000000608		//0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000600//	0x0000000005F8//	0x0000000005F8//	0x0000000005F8//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005F0//	0x0000000005E8//	0x0000000005E8//	0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005E8	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x000000000598	//0x000000590//0x000000590//0x000000590//
//											0x7FF73033232C	//0x7FF6AC670E3C	//0x7FF790CA5BDC	//0x7FF7018D235C	//0x7FF72482EC2C	//0x7FF6F44F83DC	//0x7FF6E708831C	//00007FF7583F478C	//0x7FF680D7471C	//0x7FF6D5DFFD8C	//0x7FF66A2EF98C	//0x7FF760C641AC	//0x7FF7983641AC//	00007FF7F6C6AE6C//	0x7FF793BDAEEC//	00007FF6A7DC441C	//0x7FF61D37446C	//0x7FF63AE1305C		//0x7FF69C832FCC	//	7FF6DF65086C//	7FF6776380BC////	//7FF7E247943C//	//7FF7E0CFF19C//	//7FF6C1EAF06C//	//7FF65CB4A01C//	//7FF6E4DD18BC//	//7FF67665CC0C//	//7FF7298EA09C//	//7FF626457BFC//	//7FF671899CDC//	//7FF7EBC0BCDC//	//7FF7A2B386EC//	//7FF6BF3D877C//	//7FF62748180C//	//7FF6AA2FFD3C//	//7FF759EF3C0C//	//7FF631F7396C//	//7FF781D1039C//	//7FF6741AC9FC//	//7FF62B32484C//	//7FF6EE7A3EDC//	//7FF6B42ADF4C//	//7FF6F0B6325C//	//7FF61A8C2C4C//	//7FF75934A6CC//	//7FF76E7EC47C//	//7FF7E37CA6CC//	//7FF61E3A998C//	//7FF66007629C//	//7FF64B59590C//	//7FF73AB458FC//	//7FF670BA60FC//	//7FF6B503A02C//	//7FF783E2118C//	//7FF6EC77954C//	//7FF6F45C411C//	//7FF7B64B151C//	//7FF69ACD154C//	//7FF73B8A0CCC//	//7FF7503D977C//	//7FF73C3C977C//	//7FF6FEAF174C//	//7FF6D689C33C//	//7FF68A10D9EC//	//7FF7CD93AFFC//	//7FF7F6E0FF6C//	//7FF7276FF51C//	//7FF605883BDC//	//7FF749EDDDCC//	//7FF6F021167C//	//7FF7A65FC62B//	//7FF7EE14C57B//	//7FF6BE92C4CB//	//7FF6F3BA56BB//	//7FF7A9D137AB//	//7FF789FCA3FB//	//7FF7383DA3AB//	//7FF6AE6FA9EB//	//7FF6556D1DCB//	//7FF787061B5B//	//7FF678BAFAAB//	//7FF74A633B8B//	//7FF61D55388B//	//7FF7E7B57BFB//	//7FF625E9295B	////7FF65293847B	////7FF6FF8EB66B	////7FF7B498D8DB	////7FF6F5CBD88B	////7FF69AE3346B	////7FF6E8F3234B	////7FF7B733772B	////7FF70E038E5B	////7FF6D7AF8E7B	////7FF7F3698C2B	////7FF6AFC4F35B	////7FF6C9239C0B	////7FF70ADC105B	////7FF714E874FB	////7FF7EF186C6B	////7FF71B2CE26B	////7FF75E20688B	////7FF67288226B	////7FF6905A79EB	////7FF6FC63B5DB	////7FF69E655D6B	////7FF74E305D5B	////7FF757E4D6E4	////140BCB894////140B8F6D4////140B96834//
#define OFFSET_EXCHANGEITEMCONID			0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000650	//0x000000000650	//0x000000000648	//0x000000000648	//0x000000000648	//0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648	//0x000000000648	//0x000000000648		//0x000000000648		//0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000640//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000620//	0x000000000620//	0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x000000000620	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F8	//0x0000000005F0	//0x0000000005F0	//0x0000000005C8	//0x0000005C0//0x0000005C0//0x0000005C0//
#define OFFSET_EXCHANGEITEMENCHANT			0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000658	//0x000000000658	//0x000000000650	//0x000000000650	//0x000000000650	//0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650	//0x000000000650	//0x000000000650		//0x000000000650		//0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000648//	0x000000000638//	0x000000000638//	0x000000000638//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000628//	0x000000000628//	0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x0000000005F8	//0x0000000005F8	//0x0000000005D0	//0x0000005C8//0x0000005C8//0x0000005C8//
//											0x7FF73032CBC7	//0x7FF6AC66B6D7	//0x7FF790CA0477	//0x7FF7018CBD87	//0x7FF72482C287	//0x7FF6E7085A11	//00007FF7583EE041	//0x7FF680D6DFD1	//0x7FF6D5DF9717	//0x7FF66A2E9317	//0x7FF760C5DA47	//0x7FF79835DA47//	00007FF7F6C64707//	0x7FF793BD4787//	00007FF6A7DBDB77	//0x7FF61D36DBC7	//0x7FF63AE0CD57		//0x7FF69C82CCC7	//	7FF6DF64A567//	7FF6776318F7////	//7FF7E2473137//	//7FF7E0CFAA17//	//7FF6C1EAA8E7//	//7FF65CB455F7//	//7FF6E4DCCE97//	//7FF6766581E7//	//7FF7298E5677//	//7FF626453217//	//7FF671893767//	//7FF7EBC06847//	//7FF7A2B33D57//	//7FF6BF3D3DE7//	//7FF62747CE77//	//7FF6AA2FB627//	//7FF759EED757//	//7FF631F6D4B7//	//7FF781D0A1D7//	//7FF6741A6837//	//7FF62B31E687//	//7FF6EE79DD17//	//7FF6B42A7F57//	//7FF6F0B5D267//	//7FF61A8BCC57//	//7FF759346D47//	//7FF76E7E91F4//	//7FF7E37C47D4//	//7FF61E3A3A94//	//7FF6600703A4//	//7FF64B590684//	//7FF73AB40644//	//7FF670BA1644//	//7FF6B5035574//	//7FF783E1C6D4//	//7FF6EC7757C4//	//7FF6F45BFC14//	//7FF7B64AB6B4//	//7FF69ACCB6E4//	//7FF73B89B7A4//	//7FF7503D4464//	//7FF73C3C4464//	//7FF6FEAED1E4//	//7FF6D6897DE4//	//7FF68A109054//	//7FF7CD936664//	//7FF7F6E0B5E4//	//7FF7276FAB94//	//7FF60587F2A4//	//7FF749ED9494//	//7FF6F020BB04//	//7FF7A65F7E44//	//7FF7EE147D94//	//7FF6BE927CE4//	//7FF6F3BA0EB4//	//7FF7A9D0EF84//	//7FF789FC5BD4//	//7FF7383D5B84//	//7FF6AE6F5654//	//7FF6556CDBC4//	//7FF78705D954//	//7FF678BA8B84//	//7FF74A62F7B4//	//7FF61D54DEB4//	//7FF7E7B520E4//	//7FF625E8E014	////7FF652934AB4	////7FF6FF8E5D64	////7FF7B4988574	////7FF6F5CB8524	////7FF69AE2EC14	////7FF6E8F2F344	////7FF7B73320D4	////7FF70E033A24	////7FF6D7AF3A44	////7FF7F36937F4	////7FF6AFC4A3F4	////7FF6C9234CA4	////7FF70ADBD614	////7FF714E844F4	////7FF7EF183C64	////7FF71B2C9194	////7FF75E201914	////7FF67287F264	////7FF6905A5104	////7FF6FC636654	////7FF69E6507C4	////7FF74E3007B4	////7FF757E48EC4	////140BC7A04////140B8A864////140B92026//
#define OFFSET_EXCHANGEITEMSELLINGCOUNT		0x000000000638	//0x000000000638	//0x000000000638	//0x000000000638	//0x000000000638	//0x000000000638	//0x000000000638	//0x000000000630	//0x000000000630	//0x000000000628	//0x000000000628	//0x000000000628	//0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628	//0x000000000628	//0x000000000628		//0x000000000628		//0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000620//	0x000000000610//	0x000000000610//	0x000000000610//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000600//	0x000000000600//	0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x000000000600	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D8	//0x0000000005D4	//0x0000000005D4	//0x0000000005AC	//0x0000005A4//0x0000005A4//0x0000005A4//
//											0x7FF73033244B	//0x7FF6AC670F5B	//0x7FF790CA5CFB	//0x7FF7018D247B	//0x7FF72482ED4B	//0x7FF6F44F84FB	//0x7FF6E708843B	//00007FF7583F48AB	//0x7FF680D7483B	//0x7FF6D5DFFEAB	//0x7FF66A2EFAAB	//0x7FF760C642CB	//0x7FF7983642CB//	00007FF7F6C6AF8B//	0x7FF793BDB00B//	00007FF6A7DC453B	//0x7FF61D37458B	//0x7FF63AE1317B		//0x7FF69C8330EB	//	7FF6DF65098B//	7FF6776381DB////	//7FF7E247955B//	//7FF7E0CFF2BB//	//7FF6C1EAF18B//	//7FF65CB4A13B//	//7FF6E4DD19DB//	//7FF67665CD2B//	//7FF7298EA1BB//	//7FF626457D1B//	//7FF671899DFB//	//7FF7EBC0BDFB//	//7FF7A2B3880B//	//7FF6BF3D889B//	//7FF62748192B//	//7FF6AA2FFE5B//	//7FF759EF3D2B//	//7FF631F73A8B//	//7FF781D104BB//	//7FF6741ACB1B//	//7FF62B32496B//	//7FF6EE7A3FFB//	//7FF6B42AE06B//	//7FF6F0B6337B//	//7FF61A8C2D6B//	//7FF75934A7EB//	//7FF76E7EC59B//	//7FF7E37CA7EB//	//7FF61E3A9AAB//	//7FF6600763BB//	//7FF64B595A2B//	//7FF73AB45A1B//	//7FF670BA621B//	//7FF6B503A14B//	//7FF783E212AB//	//7FF6EC77966B//	//7FF6F45C4238//	//7FF7B64B1638//	//7FF69ACD1668//	//7FF73B8A0DE8//	//7FF7503D9898//	//7FF73C3C9898//	//7FF6FEAF1868//	//7FF6D689C458//	//7FF68A10DB08//	//7FF7CD93B118//	//7FF7F6E10088//	//7FF7276FF638//	//7FF605883CF8//	//7FF749EDDEE8//	//7FF6F0211798//	//7FF7A65FC73D//	//7FF7EE14C68D//	//7FF6BE92C5DD//	//7FF6F3BA57CD//	//7FF7A9D138BD//	//7FF789FCA50D//	//7FF7383DA4BD//	//7FF6AE6FAAFD//	//7FF6556D1EDD//	//7FF787061C6D//	//7FF678BAFBBD//	//7FF74A633C9D//	//7FF61D55399D//	//7FF7E7B57D0D//	//7FF625E92A6D	////7FF65293858D	////7FF6FF8EB77D	////7FF7B498D9ED	////7FF6F5CBD99D	////7FF69AE3357D	////7FF6E8F3245D	////7FF7B733783D	////7FF70E038F6D	////7FF6D7AF8F8D	////7FF7F3698D3D	////7FF6AFC4F46D	////7FF6C9239D1D	////7FF70ADC116D	////7FF714E8760D	////7FF7EF186D7D	////7FF71B2CE37D	////7FF75E20699D	////7FF67288237D	////7FF6905A7AFD	////7FF6FC63B6ED	////7FF69E655E7D	////7FF74E305E6D	////7FF757E4D7F6	////140BCB9A6////140B8F7E6////140B96946//
#define OFFSET_EXCHANGEITEMTOTALTPRICE		0x0000000006B0	//0x0000000006B0	//0x0000000006B0	//0x0000000006B0	//0x0000000006B0	//0x0000000006B0	//0x0000000006B0	//0x0000000006A8	//0x0000000006A8	//0x0000000006A0	//0x0000000006A0	//0x0000000006A0	//0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0	//0x0000000006A0	//0x0000000006A0		//0x0000000006A0		//0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x0000000006A0//	0x000000000690//	0x000000000690//	0x000000000688//	0x000000000678//	0x000000000678//	0x000000000678//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000670//	0x000000000668//	0x000000000668//	0x000000000668	//0x000000000668	//0x000000000668	//0x000000000668	//0x000000000668	//0x000000000668	//0x000000000668	//0x000000000668	//0x000000000658	//0x000000000658	//0x000000000630	//0x000000000630	//0x000000000630	//0x000000000630	//0x000000000630	//0x000000000630	//0x000000000630	//0x000000000628	//0x000000000618	//0x000000000618	//0x0000000005F0	//0x0000005E8//0x0000005E8//0x0000005E8//
//											0x7FF73033257A	//0x7FF6AC67108A	//0x7FF790CA5E2A	//0x7FF7018D25AA	//0x7FF72482EE7A	//0x7FF6F44F862A	//0x7FF6E708856A	//00007FF7583F49DA	//0x7FF680D7496A	//0x7FF6D5DFFFDA	//0x7FF66A2EFBDA	//0x7FF760C643FA	//0x7FF7983643FA//	00007FF7F6C6B0BA//	0x7FF793BDB13A//	00007FF6A7DC466A	//0x7FF61D3746BA	//0x7FF63AE132AA		//0x7FF69C83321A	//	7FF6DF650ABA //	7FF67763830A////	//7FF7E247968A//	//7FF7E0CFF3EA//	//7FF6C1EAF2BA//	//7FF65CB4A26A//	//7FF6E4DD1B0A//	//7FF67665CE5A//	//7FF7298EA2EA//	//7FF626457E4A//	//7FF671899F2A//	//7FF7EBC0BF2A//	//7FF7A2B3893A//	//7FF6BF3D89CA//	//7FF627481A5A//	//7FF6AA2FFF8A//	//7FF759EF3E5A//	//7FF631F73BBA//	//7FF781D105EA//	//7FF6741ACC4A//	//7FF62B324A9A//	//7FF6EE7A412A//	//7FF6B42AE19A//	//7FF6F0B634AA//	//7FF61A8C2E9A//	//7FF75934A91A//	//7FF76E7EC6CA//	//7FF7E37CA91A//	//7FF61E3A9BDA//	//7FF6600764EA//	//7FF64B595B5A//	//7FF73AB45B4A//	//7FF670BA634A//	//7FF6B503A27A//	//7FF783E213DA//	//7FF6EC77979A//	//7FF6F45C438D//	//7FF7B64B178D//	//7FF69ACD17BD//	//7FF73B8A0F3D//	//7FF7503D99ED//	//7FF73C3C99ED//	//7FF6FEAF19BD//	//7FF6D689C5AD//	//7FF68A10DC5D//	//7FF7CD93B26D//	//7FF7F6E101DD//	//7FF7276FF78D//	//7FF605883E4D//	//7FF749EDE03D//	//7FF6F02118ED//	//7FF7A65FC842//	//7FF7EE14C792//	//7FF6BE92C6E2//	//7FF6F3BA58D2//	//7FF7A9D139C2//	//7FF789FCA612//	//7FF7383DA5C2//	//7FF6AE6FAC02//	//7FF6556D1FE2//	//7FF787061D72//	//7FF678BAFCC2//	//7FF74A633DA2//	//7FF61D553AA2//	//7FF7E7B57E12//	//7FF625E92B72	////7FF652938692	////7FF6FF8EB882	////7FF7B498DAF2	////7FF6F5CBDAA2	////7FF69AE33682	////7FF6E8F32562	////7FF7B7337942	////7FF70E039072	////7FF6D7AF9092	////7FF7F3698E42	////7FF6AFC4F572	////7FF6C9239E1E	////7FF70ADC126E	////7FF714E8770E	////7FF7EF186E7E	////7FF71B2CE47E	////7FF75E206A9E	////7FF67288247E	////7FF6905A7BFE	////7FF6FC63B7EE	////7FF69E655F7E	////7FF74E305F6E	////7FF757E4D8F3	////140BCBAA3////140B8F8E3////140B96A43//
#define OFFSET_EXCHANGEITEMBUNCHCOUNT		0x00000000065C	//0x00000000065C	//0x00000000065C	//0x00000000065C	//0x00000000065C	//0x00000000065C	//0x00000000065C	//0x000000000654	//0x000000000654	//0x00000000064C	//0x00000000064C	//0x00000000064C	//0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C	//0x00000000064C	//0x00000000064C		//0x00000000064C		//0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x00000000064C//	0x000000000644//	0x000000000634//	0x000000000634//	0x000000000634//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x00000000062C//	0x000000000624//	0x000000000624//	0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x000000000624	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005FC	//0x0000000005F4	//0x0000000005F4	//0x0000000005CC	//0x0000005C4//0x0000005C4//0x0000005C4//
//											0x7FF730332584	//0x7FF6AC671094	//0x7FF790CA5E34	//0x7FF7018D25B4	//0x7FF72482EE84	//0x7FF6F44F8634	//0x7FF6E7088574	//00007FF7583F49E4	//0x7FF680D74974	//0x7FF6D5DFFFE4	//0x7FF66A2EFBE4	//0x7FF760C64404	//0x7FF798364404//	00007FF7F6C6B0C4//	0x7FF793BDB144//	00007FF6A7DC4674	//0x7FF61D3746C4	//0x7FF63AE132B4		//0x7FF69C833224	//	7FF6DF650AC4//	7FF677638314////	//7FF7E2479694//	//7FF7E0CFF3F4//	//7FF6C1EAF2C4//	//7FF65CB4A274//	//7FF6E4DD1B14//	//7FF67665CE64//	//7FF7298EA2F4//	//7FF626457E54//	//7FF671899F34//	//7FF7EBC0BF34//	//7FF7A2B38944//	//7FF6BF3D89D4//	//7FF627481A64//	//7FF6AA2FFF94//	//7FF759EF3E64//	//7FF631F73BC4//	//7FF781D105F4//	//7FF6741ACC54//	//7FF62B324AA4//	//7FF6EE7A4134//	//7FF6B42AE1A4//	//7FF6F0B634B4//	//7FF61A8C2EA4//	//7FF75934A924//	//7FF76E7EC6D4//	//7FF7E37CA924//	//7FF61E3A9BE4//	//7FF6600764F4//	//7FF64B595B64//	//7FF73AB45B54//	//7FF670BA6354//	//7FF6B503A284//	//7FF783E213E4//	//7FF6EC7797A4//	//7FF6F45C4371//	//7FF7B64B1771//	//7FF69ACD17A1//	//7FF73B8A0F21//	//7FF7503D99D1//	//7FF73C3C99D1//	//7FF6FEAF19A1//	//7FF6D689C591//	//7FF68A10DC41//	//7FF7CD93B251//	//7FF7F6E101C1//	//7FF7276FF771//	//7FF605883E31//	//7FF749EDE021//	//7FF6F02118D1//	//7FF7A65FC90B//	//7FF7EE14C85B//	//7FF6BE92C7AB//	//7FF6F3BA599B//	//7FF7A9D13A8B//	//7FF789FCA6DB//	//7FF7383DA68B//	//7FF6AE6FACCB//	//7FF6556D20AB//	//7FF787061E3B//	//7FF678BAFD8B//	//7FF74A633E6B//	//7FF61D553B6B//	//7FF7E7B57EDB//	//7FF625E92C3B	////7FF65293875B	////7FF6FF8EB94B	////7FF7B498DBBB	////7FF6F5CBDB6B	////7FF69AE3374B	////7FF6E8F3262B	////7FF7B7337A0B	////7FF70E03913B	////7FF6D7AF915B	////7FF7F3698F0B	////7FF6AFC4F63B	////7FF6C9239EE7	////7FF70ADC1337	////7FF714E877D7	////7FF7EF186F47	////7FF71B2CE547	////7FF75E206B67	////7FF672882547	////7FF6905A7CC7	////7FF6FC63B8B7	////7FF69E65604B	////7FF74E30603B	////7FF757E4D96A	////140BCBB1A////140B8F95A////140B96AC2//
#define OFFSET_EXCHANGEITEMPIRCE			0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000660	//0x000000000650	//0x000000000650	//0x000000000650	//0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650	//0x000000000650	//0x000000000650		//0x000000000650		//0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000650//	0x000000000640//	0x000000000640//	0x000000000640//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000624//	0x000000000624//	0x000000000624//	0x000000000624//	0x000000000624//	0x000000000624//	0x000000000624//	0x000000000624//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x00000000060C//	0x00000000060C//	0x00000000060C//	0x00000000060C//	0x00000000060C//	0x00000000061C//	0x00000000061C//	0x00000000061C//	0x000000000574//	0x000000000574//	0x000000000574//	0x000000000574//	0x000000000564//	0x00000000055C//	0x00000000055C//	0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x00000000055C	//0x000000554//0x00000053C//0x000000524//
//											0x7FF7303044C6	//0x7FF6AC642FD6	//0x7FF790C77D76	//0x7FF7018A4486	//0x7FF7247AF146	//0x7FF6F44793C6	//0x7FF6E7009306	//00007FF7583C1F56	//0x7FF680D41EE6	//0x7FF6D5DCD646	//0x7FF66A2BD246	//0x7FF760C32676	//0x7FF798332676//	00007FF7F6C39256//	0x7FF793BA92D6//	00007FF6A7D952D6	//0x7FF61D345326	//0x7FF63ADE6DC6		//0x7FF69C806D36	//	7FF6DF625576//	7FF677608476////	//7FF7E244E196//	//7FF7E0CD8786//	//7FF6C1E88656//	//7FF65CB21006//	//7FF6E4DA9B76//	//7FF676634EC6//	//7FF7298C3076//	//7FF626430A86//	//7FF67186A3C6//	//7FF7EBBE11D6//	//7FF7A2B11346//	//7FF6BF3B13D6//	//7FF62745AC66//	//7FF6AA2D8B36//	//7FF759EC4926//	//7FF631F44686//	//7FF781CE0516//	//7FF67417CED6//	//7FF62B2F4D26//	//7FF6EE7743B6//	//7FF6B4281586//	//7FF6F0B36806//	//7FF61A8961F6//	//7FF7592D05B6//	//7FF76E773266//	//7FF7E379C0F6//	//7FF61E37B7E6//	//7FF660048396//	//7FF64B568066//	//7FF73AB17FE6//	//7FF670B7C6A6//	//7FF6B50105D6//	//7FF783DF7736//	//7FF6EC6F5986//	//7FF6F453E606//	//7FF7B6483F96//	//7FF69ACA3FC6//	//7FF73B870756//	//7FF7503AE3D6//	//7FF73C39E3D6//	//7FF6FEAC84C6//	//7FF6D6872D46//	//7FF68A0E4A46//	//7FF7CD912076//	//7FF7F6DE68C6//	//7FF7276D5E76//	//7FF60585A4C6//	//7FF749EB46D6//	//7FF6F01E1BE6//	//7FF7A65D1216//	//7FF7EE121166//	//7FF6BE9010B6//	//7FF6F3B79E86//	//7FF7A9CE8C66//	//7FF789F9FDB6//	//7FF7383AFD66//	//7FF6AE6CBEC6//	//7FF6556A7F06//	//7FF787037C96//	//7FF678B7F006//	//7FF74A6097E6//	//7FF61D5247F6//	//7FF7E7B2AED6//	//7FF625E64E66	////7FF65290AFE6	////7FF6FF8BCBA6	////7FF7B495C6A6	////7FF6F5C8C656	////7FF69AE05D36	////7FF6E8F02F66	////7FF7B730A856	////7FF70E008F86	////7FF6D7AC8FA6	////7FF7F3668D56	////7FF6AFC1FD36	////7FF6C920A7B6	////7FF70AD8EBE6	////7FF714E53D66	////7FF7EF153F46	////7FF71B2A1536	////7FF75E1D8126	////7FF67284DA76	////7FF690574566	////7FF6FC60D1B6	////7FF69E627536	////7FF74E2D7526	////7FF757E1F006	////140B9AA56////140B5F9D6////140B66E20//
#define OFFSET_EXCHANGEITEMCOUNT			0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000658	//0x000000000648	//0x000000000648	//0x000000000648	//0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648	//0x000000000648	//0x000000000648		//0x000000000648		//0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000648//	0x000000000638//	0x000000000638//	0x000000000638//	0x000000000628//	0x000000000628//	0x000000000628//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000620//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000608//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000570//	0x000000000560//	0x000000000558//	0x000000000558//	0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000000558	//0x000000550//0x000000538//0x000000520//
//											0x7FF730304586	//0x7FF6AC643096	//0x7FF790C77E36	//0x7FF7018A4546	//0x7FF7247AF206	//0x7FF6F4479486	//0x7FF6E70093C6	//00007FF7583C2016	//0x7FF680D41FA6	//0x7FF6D5DCD706	//0x7FF66A2BD306	//0x7FF760C32736	//0x7FF798332736//	00007FF7F6C39316//	0x7FF793BA9396//	00007FF6A7D95396	//0x7FF61D3453E6	//0x7FF63ADE6E86		//0x7FF69C806DF6	//	7FF6DF625636//	7FF677608536////	//7FF7E244E256//	//7FF7E0CD8846//	//7FF6C1E88716//	//7FF65CB210C6//	//7FF6E4DA9C36//	//7FF676634F86//	//7FF7298C3136//	//7FF626430B46//	//7FF67186A486//	//7FF7EBBE1296//	//7FF7A2B11406//	//7FF6BF3B1496//	//7FF62745AD26//	//7FF6AA2D8BF6//	//7FF759EC49E6//	//7FF631F44746//	//7FF781CE05D6//	//7FF67417CF96//	//7FF62B2F4DE6//	//7FF6EE774476//	//7FF6B4281646//	//7FF6F0B368C6//	//7FF61A8962B6//	//7FF7592D0676//	//7FF76E773326//	//7FF7E379C1B6//	//7FF61E37B8A6//	//7FF660048456//	//7FF64B568126//	//7FF73AB180A6//	//7FF670B7C766//	//7FF6B5010696//	//7FF783DF77F6//	//7FF6EC6F5A46//	//7FF6F453E6C6//	//7FF7B6484056//	//7FF69ACA4086//	//7FF73B870816//	//7FF7503AE496//	//7FF73C39E496//	//7FF6FEAC8586//	//7FF6D6872E06//	//7FF68A0E4B06//	//7FF7CD912136//	//7FF7F6DE6986//	//7FF7276D5F36//	//7FF60585A586//	//7FF749EB4796//	//7FF6F01E1C16//	//7FF7A65D1246//	//7FF7EE121196//	//7FF6BE9010E6//	//7FF6F3B79EB6//	//7FF7A9CE8C96//	//7FF789F9FDE6//	//7FF7383AFD96//	//7FF6AE6CBEF6//	//7FF6556A7F36//	//7FF787037CC6//	//7FF678B7F036//	//7FF74A609816//	//7FF61D524826//	//7FF7E7B2AF06//	//7FF625E64E96	////7FF65290B016	////7FF6FF8BCBD6	////7FF7B495C6D6	////7FF6F5C8C686	////7FF69AE05D66	////7FF6E8F02F96	////7FF7B730A886	////7FF70E008FB6	////7FF6D7AC8FD6	////7FF7F3668D86	////7FF6AFC1FD66	////7FF6C920A7E6	////7FF70AD8EC16	////7FF714E53D96	////7FF7EF153F76	////7FF71B2A1566	////7FF75E1D8156	////7FF67284DAA6	////7FF690574596	////7FF6FC60D1E6	////7FF69E627566	////7FF74E2D7556	////7FF757E1F036	////140B9AA86////140B5FA06////140B670C0//
#define OFFSET_SEARCHEXCHANGEOPTION			0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460	//0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460	//0x000000000460	//0x000000000460		//0x000000000460		//0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000450//	0x000000000450//	0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000000450	//0x000000448//0x000000448//0x000000448//
//											0x7FF73030D745	//0x7FF6AC64C255	//0x7FF790C80FF5	//0x7FF7018AD705	//0x7FF724812495	//0x7FF6F44DBF55	//0x7FF6E706BE95	//00007FF7583CCC15	//0x7FF680D4CBA5	//0x7FF6D5DD8305	//0x7FF66A2C7F05	//0x7FF760C3C515	//0x7FF79833C515//	00007FF7F6C431D5//	0x7FF793BB3255//	00007FF6A7D9E815	//0x7FF61D34E865	//0x7FF63ADEFC05		//0x7FF69C80FB75	//	7FF6DF62DED5//	7FF677612565////	//7FF7E2456AB5//	//7FF7E0CE0895//	//7FF6C1E90765//	//7FF65CB2A345//	//7FF6E4DB2E55//	//7FF67663E1A5//	//7FF7298CC2B5//	//7FF626439CB5//	//7FF671873E95//	//7FF7EBBEAAE5//	//7FF7A2B19E75//	//7FF6BF3B9F05//	//7FF627463615//	//7FF6AA2E1DE5//	//7FF759ECE305//	//7FF631F4E065//	//7FF781CEAC65//	//7FF674187605//	//7FF62B2FF455//	//7FF6EE77EAE5//	//7FF6B428B145//	//7FF6F0B40505//	//7FF61A89FEF5//	//7FF7592DA625//	//7FF76E77D075//	//7FF7E37A55E5//	//7FF61E384A85//	//7FF660051595//	//7FF64B572655//	//7FF73AB225D5//	//7FF670B85BC5//	//7FF6B5019AF5//	//7FF783E00C55//	//7FF6EC758285//	//7FF6F45A1C25//	//7FF7B648D6C5//	//7FF69ACAD6F5//	//7FF73B87AB85//	//7FF7503B86A5//	//7FF73C3A86A5//	//7FF6FEAD2545//	//7FF6D687CDC5//	//7FF68A0EDBA5//	//7FF7CD91B1D5//	//7FF7F6DEFA25//	//7FF7276DEFD5//	//7FF6058635E5//	//7FF749EBD7F5//	//7FF6F01EC0C5//	//7FF7A65DA235//	//7FF7EE12A185//	//7FF6BE90A0D5//	//7FF6F3B82ED5//	//7FF7A9CF18B5//	//7FF789FA8AD5//	//7FF7383B8A85//	//7FF6AE6D5FD5//	//7FF6556B1EE5//	//7FF787041C75//	//7FF678B88815//	//7FF74A612335//	//7FF61D52E525//	//7FF7E7B340E5//	//7FF625E6D875	////7FF652912285	////7FF6FF8C6E45	////7FF7B4966185	////7FF6F5C96135	////7FF69AE0E615	////7FF6E8F0C3C5	////7FF7B7312A45	////7FF70E0117C5	////7FF6D7AD17E5	////7FF7F3671595	////7FF6AFC27B85	////7FF6C92128F5	////7FF70AD99A55	////7FF714E5F405	////7FF7EF15F5F5	////7FF71B2A9935	////7FF75E1DFB65	////7FF672858E55	////7FF69057FEA5	////7FF6FC615665	////7FF69E62FAA5	////7FF74E2DFA95	////7FF757E274F5	////140BA44D5////140B70955////140B6F365//
#define	OFFSET_WARNINGCOUNT					0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478	//0x000000000478	//0x000000000478		//0x000000000478		//0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000468//	0x000000000468//	0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000468//0x000000468//0x000000468//
//											0x7FF73087EB7E	//0x7FF6ACBBB70E	//0x7FF7911E447E	//0x7FF701E0950E	//0x7FF724D4399E	//0x7FF6F4A050AE	//0x7FF6E7594FEE	//00007FF75892561E	//0x7FF6812A55AE	//0x7FF6D633074E	//0x7FF66A80B9AE	//0x7FF761123B6E	//0x7FF798823B3E//	00007FF7F712587E//	0x7FF7940958FE//	00007FF6A827D82E	//0x7FF61D82D92E	//0x7FF63B2E2BBE		//0x7FF69CD02B2E	//	7FF6DFB1F3BE//	7FF677B5C11E////	//7FF7E29443EE//	//7FF7E11F06AE//	//7FF6C23A057E//	//7FF65D040C2E//	//7FF6E527532E//	//7FF676B4850E//	//7FF729DD555E//	//7FF62694097E//	//7FF671D6166E//	//7FF7EC0B123E//	//7FF7A2FD08BE//	//7FF6BF87094E//	//7FF62791498E//	//7FF6AA77C7CE//	//7FF75A391FAE//	//7FF632411ACE//	//7FF7821997BE//	//7FF674630FCE//	//7FF62B7AFE7E//	//7FF6EEC2F2EE//	//7FF6B4750BDE//	//7FF6F1002FEE//	//7FF61AD629DE//	//7FF7597A04BE//	//7FF76EC4CD7E//	//7FF7E3C7738E//	//7FF61E801C9E//	//7FF6604CC34E//	//7FF64B9F197E//	//7FF73AFA196E//	//7FF670FAED0E//	//7FF6B544310E//	//7FF78422975E//	//7FF6ECBA041E//	//7FF6F49E034B//	//7FF7B68DEC0B//	//7FF69B0FEC0B//	//7FF73BCD668B//	//7FF7507F58DB//	//7FF73C7E58DB//	//7FF6FEF09D0B//	//7FF6D6C930CB//	//7FF68A4E140B//	//7FF7CDCD648B//	//7FF7F71A9A2B//	//7FF727A98FAB//	//7FF605C1663B//	//7FF74A26D59B//	//7FF6F05E54CB//	//7FF7A697B51B//	//7FF7EE4CB46B//	//7FF6BECAB49B//	//7FF6F3F3484B//	//7FF7AA045D3B//	//7FF78A2F72DB//	//7FF7387071AB//	//7FF6AEA866DB//	//7FF655A0656B//	//7FF7873962FB//	//7FF678EFC71B//	//7FF74A97E02B//	//7FF61D8989AB//	//7FF7E7EB295B//	//7FF62618F29B	////7FF652C45C2B	////7FF6FFBE09EB	////7FF7B4CA55FB	////7FF6F5FD55AB	////7FF69B13F0FB	////7FF6E921E94B	////7FF7B763219B	////7FF70E3411CB	////7FF6D7E011EB	////7FF7F39A0F8B	////7FF6AFF51D2B	////7FF6C94E811B	////7FF70B069A9B	////7FF7151425DB	////7FF7EF4399AB	////7FF71B581DFB	////7FF75E4D1F1B	////7FF672ADD11B	////7FF690805FAB	////7FF6FC8A766B	////7FF69E8D1CEB	////7FF74E581CCB	////7FF7580BE3AB	////140E3C64B////140E13C5B////140DCA21B//
#define OFFSET_WARNINGINFO					0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440	//0x000000000440	//0x000000000440		//0x000000000440		//0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000430//	0x000000000430//	0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000430//0x000000430//0x000000430//
//											0x7FF73083B0C0	//0x7FF7911A06C0	//0x7FF7911A06C0	//0x7FF701DC5790	//0x7FF724CFFB60	//0x7FF6F49C1500	//0x7FF6E7551440	//00007FF7588E1FB0	//0x7FF681261F40	//0x7FF6D62E6250	//0x7FF66A7C3B90	//0x7FF7610E4290	//0x7FF7987E4260//	00007FF7F70E5F80//	0x7FF794056000//	00007FF6A823DE10	//0x7FF61D7EDF10	//0x7FF63B2A1BE0		//0x7FF69CCC1B50	//	7FF6DFADE380//	7FF677B15740////	//7FF7E2904330//	//7FF7E11AA010//	//7FF6C2359EE0//	//7FF65CFFA490//	//7FF6E5235CD0//	//7FF676B01DA0//	//7FF729D8EDF0//	//7FF6268FA7C0//	//7FF671D19DA0//	//7FF7EC0699C0//	//7FF7A2F89C10//	//7FF6BF829CA0//	//7FF6278CEAF0//	//7FF6AA7387A0//	//7FF75A34DB30//	//7FF6323CD7D0//	//7FF782155440//	//7FF6745EDBF0//	//7FF62B76D840//	//7FF6EEBECCC0//	//7FF6B4709240//	//7FF6F0FBD1C0//	//7FF61AD1CBB0//	//7FF75975DF90//	//7FF76EC021D0//	//7FF7E3C33610//	//7FF61E7C0DA0//	//7FF66048A030//	//7FF64B9A6FC0//	//7FF73AF56FB0//	//7FF670F6DB00//	//7FF6B54032B0//	//7FF7841E6340//	//7FF6ECB54730//	//7FF6F4997AD0//	//7FF7B689AFB0//	//7FF69B0BAFB0//	//7FF73BC91CF0//	//7FF7507AFF20//	//7FF73C79FF20//	//7FF6FEEC4C80//	//7FF6D6C47CA0//	//7FF68A4961C0//	//7FF7CDC92440//	//7FF7F7160270//	//7FF727A4F7F0//	//7FF605BCCF20//	//7FF74A223F60//	//7FF6F059F2B0//	//7FF7A6932CC0//	//7FF7EE482C10//	//7FF6BEC62C40//	//7FF6F3EEECB0//	//7FF7AA005B70//	//7FF78A2B7560//	//7FF7386C7430//	//7FF6AEA3F8B0//	//7FF6559C67D0//	//7FF787356560//	//7FF678EB9820//	//7FF74A9344F0//	//7FF61D851F30//	//7FF7E7E642C0//	//7FF626148A50	////7FF652BF7990	////7FF6FFB9A9A0	////7FF7B4C58D50	////7FF6F5F88D00	////7FF69B0F40A0	////7FF6E91D5450	////7FF7B75ED9B0	////7FF70E2F6560	////7FF6D7DB6580	////7FF7F3956320	////7FF6AFF07CE0	////7FF6C94A5790	////7FF70B01FEB0	////7FF7150F4190	////7FF7EF3EBD80	////7FF71B5376D0	////7FF75E4807E0	////7FF672A933E0	////7FF6907BBE70	////7FF6FC866E70	////7FF69E8850F0	////7FF74E5350D0	////7FF758071800	////140DEC410////140DC9440////140D8AF00//
#define OFFSET_PLAYERSERVERNAME				0x000000000DC8	//0x000000000DC8	//0x000000000DC8	//0x000000000DB0	//0x000000000DB0	//0x000000000DB0	//0x000000000DB0	//0x000000000DA8	//0x000000000DA8	//0x000000000DA8	//0x000000000DA8	//0x000000000DA8	//0x000000000DA8//	0x000000000DA8//	0x000000000DA8//	0x000000000DA8	//0x000000000DA8	//0x000000000DA8		//0x000000000DA8		//0x000000000DA8//	0x000000000DA8//	0x000000000DA8//	0x000000000DA8//	0x000000000DA8//	0x000000000DA8//	0x000000000DA0//	0x000000000D88//	0x000000000D88//	0x000000000D88//	0x000000000D80//	0x000000000D70//	0x000000000D70//	0x000000000D70//	0x000000000D70//	0x000000000D68//	0x000000000D68//	0x000000000D68//	0x000000000D60//	0x000000000D60//	0x000000000D50//	0x000000000D50//	0x000000000D50//	0x000000000D50//	0x000000000D50//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D20//	0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D18//	0x000000000D20//	0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D08//	0x000000000D00//	0x000000000D00//	0x000000000D00//	0x000000000D00//	0x000000000D00//	0x000000000D00//	0x000000000CE0//	0x000000000CE0//	0x000000000CB0//	0x000000000CB0//	0x000000000CB0	//0x000000000CB0	//0x000000000CB0	//0x000000000CB0	//0x000000000CB0	//0x000000000CA8	//
//											0x7FF73059A742	//0x7FF6AC8D7762	//0x7FF790F00FB2	//0x7FF701B26582	//0x7FF724A88AA2	//0x7FF6F475148D	//0x7FF6E72E13CD	//00007FF75864B94D	//0x7FF680FCB8DD	//0x7FF6D60588CD	//0x7FF66A54235D	//0x7FF760EB207D	//0x7FF7985B204D//	00007FF7F6ECD94D//	0x7FF793E3D9CD//	00007FF6A8025EDD	//0x7FF61D5D5F2D	//0x7FF63B0743DD		//0x7FF69CA9434D	//	7FF6DF8B157D//	7FF6778936ED////	//7FF7E26D8DED//	//7FF7E0F2BEBD//	//7FF6C20DBD8D//	//7FF65CDB76ED//	//7FF6E503E8AD//	//7FF6768B8C4D//	//7FF729B4620D//	//7FF6266B2E7D//	//7FF671AFF28D//	//7FF7EBE3E40D//	//7FF7A2D6087C//	//7FF6BF60090C//	//7FF6276AD49C//	//7FF6AA51F890//	//7FF75A130F90//	//7FF6321B0C90//	//7FF781F3A790//	//7FF6743D6000//	//7FF62B547F70//	//7FF6EE9C7510//	//7FF6B44D11C0//	//7FF6F0D824C0//	//7FF61AAE1EB0//	//7FF75956CC23//	//7FF76EA0C213//	//7FF7E39F52F3//	//7FF61E5D2563//	//7FF66029C523//	//7FF64B7B0A63//	//7FF73AD60A53//	//7FF670D834E3//	//7FF6B52163B3//	//7FF783FFA8E3//	//7FF6EC95AD83//	//7FF6F478E803//	//7FF7B66CEC63//	//7FF69AEEEC93//	//7FF73BA7D054//	//7FF7505A9415//	//7FF73C599415//	//7FF6FECC83B6//	//7FF6D6A7D196//	//7FF68A2DE536//	//7FF7CDAC4756//	//7FF7F6F999D6//	//7FF727888F56//	//7FF605A12746//	//7FF74A06C4A6//	//7FF6F03DA386//	//7FF7A6780466//	//7FF7EE2D03B6//	//7FF6BEAB03E6//	//7FF6F3D28EC6//	//7FF7A9E956C6//	//7FF78A149056//	//7FF738559006//	//7FF6AE88D19F//	//7FF65585C20F//	//7FF7871EBF9F//	//7FF678D4738F//	//7FF74A7C40CF//	//7FF61D6E5C6F//	//7FF7E7CF8DCF//	//7FF625FDA29F	////7FF652A7791F	////7FF6FFA31719	////7FF7B4AD2B29	////7FF6F5E02AD9	////7FF69AF74769	//
#define OFFSET_PLAYERGUILDNAME				0x000000000D30	//0x000000000D30	//0x000000000D30	//0x000000000D30	//0x000000000D18	//0x000000000D18	//0x000000000D18	//0x000000000D10	//0x000000000D10	//0x000000000D10	//0x000000000D10	//0x000000000D10	//0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D10	//0x000000000D10	//0x000000000D10		//0x000000000D10		//0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D10//	0x000000000D08//	0x000000000CF0//	0x000000000CF0//	0x000000000CF0//	0x000000000CE8//	0x000000000CD8//	0x000000000CD8//	0x000000000CD8//	0x000000000CD8//	0x000000000CD0//	0x000000000CD0//	0x000000000CD0//	0x000000000CC8//	0x000000000CC8//	0x000000000CB8//	0x000000000CB8//	0x000000000CB8//	0x000000000CB8//	0x000000000CB8//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C88//	0x000000000C78//	0x000000000C78//	0x000000000C78//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C80//	0x000000000C88//	0x000000000C78//	0x000000000C78//	0x000000000C78//	0x000000000C78//	0x000000000C70//	0x000000000C70//	0x000000000C70//	0x000000000C70//	0x000000000C70//	0x000000000C70//	0x000000000C50//	0x000000000C50//	0x000000000C20//	0x000000000C20//	0x000000000C20	//0x000000000C20	//0x000000000C20	//0x000000000C20	//0x000000000C20	//0x000000000C18	//0x000000000C08	//0x000000000C08	//0x000000000C08	//0x000000000C28	//0x000000000C28	//0x000000000C28	//0x000000000C28	//0x000000000C28	//0x000000000C28	//0x000000000C18	//0x000000000C10	//0x000000000C10	//0x000000000C10	//0x000000000C10	//0x000000000BC8	//0x000000BC8//0x000000BB8//0x000000BA0//
//											0x7FF73059A88C	//0x7FF6AC8D78AC	//0x7FF790F010FC	//0x7FF701B266CC	//0x7FF724A88BEC	//0x7FF6F47515DA	//0x7FF6E72E151A	//00007FF75864BA9A	//0x7FF680FCBA2A	//0x7FF6D6058A1A	//0x7FF66A5424AA	//0x7FF760EB21CA	//0x7FF7985B219A//	00007FF7F6ECDA9A//	0x7FF793E3DB1A//	00007FF6A802602A	//0x7FF61D5D607A	//0x7FF63B07452A		//0x7FF69CA9449A	//	7FF6DF8B16CA//	7FF67789383A////	//7FF7E26D8F3A//	//7FF7E0F2C00A//	//7FF6C20DBEDA//	//7FF65CDB783A//	//7FF6E503E9FA//	//7FF6768B8D9A//	//7FF729B4635A//	//7FF6266B2FCA//	//7FF671AFF3DA//	//7FF7EBE3E55A//	//7FF7A2D609C1//	//7FF6BF600A51//	//7FF6276AD5E1//	//7FF6AA51F9CE//	//7FF75A1310CE//	//7FF6321B0DCE//	//7FF781F3A8CE//	//7FF6743D613E//	//7FF62B5480AE//	//7FF6EE9C764E//	//7FF6B44D12FE//	//7FF6F0D825FE//	//7FF61AAE1FEE//	//7FF75956CD6D//	//7FF76EA0C35D//	//7FF7E39F543D//	//7FF61E5D26AD//	//7FF66029C66D//	//7FF64B7B0BAD//	//7FF73AD60B9D//	//7FF670D8362D//	//7FF6B52164FD//	//7FF783FFAA2D//	//7FF6EC95AECD//	//7FF6F478E94D//	//7FF7B66CEDAD//	//7FF69AEEEDDD//	//7FF73BA7D19E//	//7FF7505A9552//	//7FF73C599552//	//7FF6FECC84F3//	//7FF6D6A7D2D3//	//7FF68A2DE673//	//7FF7CDAC4893//	//7FF7F6F99B13//	//7FF727889093//	//7FF605A12883//	//7FF74A06C5E3//	//7FF6F03DA4C3//	//7FF7A67805A3//	//7FF7EE2D04F3//	//7FF6BEAB0523//	//7FF6F3D29003//	//7FF7A9E95803//	//7FF78A149193//	//7FF738559143//	//7FF6AE88D2DC//	//7FF65585C34C//	//7FF7871EC0DC//	//7FF678D474CC//	//7FF74A7C420C//	//7FF61D6E5DAC//	//7FF7E7CF8F0C//	//7FF625FDA3DC	////7FF652A77A5C	////7FF6FFA31856	////7FF7B4AD2C66	////7FF6F5E02C16	////7FF69AF748A6	////7FF6E9075296	////7FF7B748DF06	////7FF70E17CD06	////7FF6D7C3CD26	////7FF7F37DCAC6	////7FF6AFD91BF6	////7FF6C9385726	////7FF70AEB77A6	////7FF714F7A946	////7FF7EF279376	////7FF71B419FD6	////7FF75E304AD8	////7FF672970B37	////7FF690699FB7	////7FF6FC73C917	////7FF69E757964	////7FF74E407944	////7FF757F490E4	////140CC234B////140C963DB////140C9687B//
#define OFFSET_REPEATQUESTPAPERITEMID		0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005D0	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C8	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0	//0x0000000005C0//	0x0000000005C0//	0x0000000005C0//	0x0000000005C0	//0x0000000005C0	//0x0000000005C0		//0x0000000005C0		//0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005B8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x0000000005A8//	0x000000000598//	0x000000000598//	0x000000000598//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000598//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000590//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000588//	0x000000000580//	0x000000000578//	0x000000000578//	0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000578	//0x000000000570	//0x000000000568	//0x000000000568	//0x000000000568	//0x000000000568	//0x000000560//0x000000560//0x000000560//
//											0x7FF7307C888E	//0x7FF6ACB054AE	//0x7FF79112DEDE	//0x7FF701D5358E	//0x7FF724C8EE5E	//0x7FF6F4952BAE	//0x7FF6E74E2AEE	//00007FF75886F08E	//0x7FF6811EF01E	//0x7FF6D627333E	//0x7FF66A750E5E	//0x7FF761077E6E	//0x7FF798777E3E//	00007FF7F7079C4E//	0x7FF793FE9CCE//	00007FF6A81D1E3E	//0x7FF61D781F3E	//0x7FF63B22D5EE		//0x7FF69CC4D55E	//	7FF6DFA69C2E//	7FF677AA3FEE////	//7FF7E288FAAE//	//7FF7E113906E//	//7FF6C22E8F3E//	//7FF65CF89668//	//7FF6E51C9E68//	//7FF676A91918//	//7FF729D1E9A8//	//7FF62688A328//	//7FF671CAE698//	//7FF7EBFFCC08//	//7FF7A2F1CC58//	//7FF6BF7BCCE8//	//7FF627861628//	//7FF6AA6CAD48//	//7FF75A2E03C8//	//7FF6323600C8//	//7FF7820E8018//	//7FF674582248//	//7FF62B6FE678//	//7FF6EEB7DAF8//	//7FF6B469F2E8//	//7FF6F0F51398//	//7FF61ACB0D88//	//7FF7596EDCF8//	//7FF76EB8ADC8//	//7FF7E3BBF848//	//7FF61E798DA8//	//7FF660462A28//	//7FF64B92FAF8//	//7FF73AEDFAE8//	//7FF670F46558//	//7FF6B53DAD38//	//7FF7841BE038//	//7FF6ECADA9D8//	//7FF6F491D878//	//7FF7B68734A3//	//7FF69B0934A3//	//7FF73BC12066//	//7FF750730DB6//	//7FF73C720DB6//	//7FF6FEE456D6//	//7FF6D6C1E4E6//	//7FF68A46CB26//	//7FF7CDC6B6E6//	//7FF7F713C076//	//7FF727A2B5F6//	//7FF605BA9026//	//7FF74A1FF2F6//	//7FF6F051C7E6//	//7FF7A690E936//	//7FF7EE45E886//	//7FF6BEC3E8B6//	//7FF6F3EC8406//	//7FF7A9FD3F36//	//7FF78A285966//	//7FF738695856//	//7FF6AEA1CA56//	//7FF655994E66//	//7FF787324BF6//	//7FF678E87646//	//7FF74A910686//	//7FF61D81FB16//	//7FF7E7E40306//	//7FF626117076	////7FF652BD3C96	////7FF6FFB69226	////7FF7B4C350E6	////7FF6F5F65096	////7FF69B0D07F6	////7FF6E91B1CE6	////7FF7B75BCDB6	////7FF70E2D1656	////7FF6D7D91676	////7FF7F3931416	////7FF6AFEE2456	////7FF6C9471596	////7FF70AFF2E86	////7FF7150CDA16	////7FF7EF3C5C66	////7FF71B50C346	////7FF75E45ABB6	////7FF672A60926	////7FF69078CF6D	////7FF6FC88990D	////7FF69E852D6D	////7FF74E502D4D	////7FF758040DFD	////140DC0DCD////140D9561D////140DAD92D//
#define OFFSET_CURPRESET					0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038		//0x000000000038		//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000038//0x000000038//
//											0x7FF72FA7BBB7	//0x7FF6ABDBB417	//0x7FF7903F92B7	//0x7FF701027CA7	//0x7FF723F746D7	//0x7FF6F3C4FCB7	//0x7FF6E67DFC47	//00007FF757B8B9D7	//0x7FF68050B9D7	//0x7FF6D5599BB7	//0x7FF669A9E267	//0x7FF7604084C7	//0x7FF797B084D7//	00007FF7F6417E37//	0x7FF793387EC7//	00007FF6A7581E57	//0x7FF61CB31E77	//0x7FF63A5DACB7		//0x7FF69BFFAC37	//	7FF6DEE262A7//	7FF676E15E37////	//7FF7E1C71BE7//	//7FF7E04FD537//	//7FF6C16AD507//	//7FF65C34BCD7//	//7FF6E45D9FD7//	//7FF675E68AD7//	//7FF7290F8AC7//	//7FF625C68087//	//7FF6710D5147//	//7FF7EB411A77//	//7FF7A236A6A7//	//7FF6BEC0A737//	//7FF626CB9577//	//7FF6A9B41CD7//	//7FF75975FC87//	//7FF6317DFCB7//	//7FF78157B447//	//7FF673A27D17//	//7FF62ABB1B37//	//7FF6EE0317F7//	//7FF6B3B38E57//	//7FF6F03F6887//	//7FF61A156707//	//7FF758BD2AD7//	//7FF76E07D897//	//7FF7E30AA667//	//7FF61DC8A4E7//	//7FF65F959667//	//7FF64AE739B7//	//7FF73A4239B7//	//7FF67048FAC7//	//7FF6B492D0F7//	//7FF7836F89E7//	//7FF6EC055B37//	//7FF6F3EA4C57//	//7FF7B5DF3657//	//7FF69A613657//	//7FF73B1DDE67//	//7FF74FD25BB7//	//7FF73BD15BB7//	//7FF6FE441C27//	//7FF6D6217FB7//	//7FF689A91E77//	//7FF7CD2CBC47//	//7FF7F67A8017//	//7FF727097D97//	//7FF6052280F7//	//7FF749886007//	//7FF6EFBB8D57//	//7FF7A5F86557//	//7FF7EDAD65B7//	//7FF6BE2B6527//	//7FF6F35348E7//	//7FF7A96C7817//	//7FF789985B57//	//7FF737D95B27//	//7FF6AE0E1527//	//7FF6550C0487//	//7FF786A50447//	//7FF678648A57//	//7FF74A0CDE97//	//7FF61D03AFE7//	//7FF7E765A377//	//7FF625982DE7	////7FF652435C07	////7FF6FF41EBB7	////7FF7B44C8EA7	////7FF6F57F8EE7	////7FF69A974927	////7FF6E8A4C287	////7FF7B6EA7D07	////7FF70DB96297	////7FF6D76562B7	////7FF7F31F6067	////7FF6AF7B2D87	////7FF6C8DD36B7	////7FF70A95E347	////7FF714A29EF7	////7FF7EED3ADF7	////7FF71AED9367	////7FF75DE30E97	////7FF6724A8747	////7FF6901D6F77	////7FF6FC2A49B7	////7FF69E2CE737	////7FF74DF7E727	////7FF757ACBE87	////140848D17////14081F7B7//
#define OFFSET_DELETEITEMINFO				0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498	//0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498	//0x000000000498	//0x000000000498		//0x000000000498		//0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000498//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000488//	0x000000000488//	0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000000488	//0x000000480//0x000000480//
#define OFFSET_DELETEITEMCURCOUNT			0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490	//0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490	//0x000000000490	//0x000000000490		//0x000000000490		//0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000490//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000488//	0x000000000480//	0x000000000480//	0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000478//0x000000478//
//											0x7FF730737120	//0x7FF6ACA73D50	//0x7FF79109C790	//0x7FF701CC1A00	//0x7FF724BFC8E0	//0x7FF6F48C11D0	//0x7FF6E7451110	//00007FF75881B470	//0x7FF68119B400	//0x7FF6D621F720	//0x7FF66A6FD680	//0x7FF7610292A0	//0x7FF798729270//	00007FF7F702B3C0//	0x7FF793F9B440//	00007FF6A81837B0	//0x7FF61D7338B0	//0x7FF63B1E07A0		//0x7FF69CC00710	//	7FF6DFA1CDA0//	7FF677A50640////	//7FF7E2844EF0//	//7FF7E10EAE60//	//7FF6C229AD30//	//7FF65CF3B650//	//7FF6E517EAA0//	//7FF676A43230//	//7FF729CD02F0//	//7FF62683BDD0//	//7FF671C64920//	//7FF7EBFB19F0//	//7FF7A2ED1E80//	//7FF6BF771F10//	//7FF627816530//	//7FF6AA680460//	//7FF75A295A00//	//7FF632315700//	//7FF78209D660//	//7FF674539AD0//	//7FF62B6B2CA0//	//7FF6EEB321F0//	//7FF6B4640E70//	//7FF6F0EF2E30//	//7FF61AC52820//	//7FF7596A27C0//	//7FF76EB3FBF0//	//7FF7E3B62F10//	//7FF61E744250//	//7FF66040E020//	//7FF64B8E6140//	//7FF73AE96130//	//7FF670EEACE0//	//7FF6B537CC10//	//7FF7841678C0//	//7FF6ECA917D0//	//7FF6F48D4040//	//7FF7B6813780//	//7FF69B033780//	//7FF73BBC64D0//	//7FF7506E5B40//	//7FF73C6D5B40//	//7FF6FEDFABA0//	//7FF6D6BD1080//	//7FF68A420370//	//7FF7CDC0AC00//	//7FF7F70D9A50//	//7FF7279C8FD0//	//7FF605B4E530//	//7FF74A1A6DA0//	//7FF6F051D150//	//7FF7A68B66F0//	//7FF7EE406640//	//7FF6BEBE6670//	//7FF6F3E76150//	//7FF7A9FD48A0//	//7FF78A2862D0//	//7FF7386961C0//	//7FF6AE9C7330//	//7FF6559957D0//	//7FF787325560//	//7FF678E87FB0//	//7FF74A8B1A40//	//7FF61D820480//	//7FF7E7DE85C0//	//7FF6260D2860	////7FF652B75BC0	////7FF6FFB23F70	////7FF7B4BD7320	////7FF6F5F072D0	////7FF69B072F30	////7FF6E915AE40	////7FF7B75772A0	////7FF70E273A50	////7FF6D7D33A70	////7FF7F38D3810	////7FF6AFE857D0	////7FF6C9471F00	////7FF70AFA54B0	////7FF7150749E0	////7FF7EF36D080	////7FF71B4BF2F0	////7FF75E3FCA00	////7FF672A611A0	////7FF6907457D0	////7FF6FC8363B8	////7FF69E853798	////7FF74E503778	////7FF758041828	////140D6CAD8////140D96078//
#define OFFSET_PACKAGE_SELECTEDTAP			0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0	//0x0000000008A0//	0x0000000008A0//	0x0000000008A0//	0x0000000008B0	//0x0000000008B0	//0x0000000008B0		//0x0000000008B0		//0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000008B0//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F8//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x0000000006F0//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000630//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000618//	0x000000000610//	0x000000000610//	0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000000610	//0x000000608//0x000000608//
//											0x7FF73013D41F	//0x7FF6AC47BBDF	//0x7FF790AB0C6F	//0x7FF7016DCBAF	//0x7FF7245F24BF	//0x7FF6F42BF92F	//0x7FF6E6E4F86F	//00007FF7581FD10F	//0x7FF680B7D09F	//0x7FF6D5C08AEF	//0x7FF66A10086F	//0x7FF760A67DDF	//0x7FF798167DDF//	00007FF7F6A6D7DF//	0x7FF7939DD85F//	00007FF6A7BCAF56	//0x7FF61D17AFA6	//0x7FF63AC1DF36		//0x7FF69C63DEA6	//	7FF6DF457076//	7FF677487D56////	//7FF7E2286FC6//	//7FF7E0B0EF46//	//7FF6C1CBEDF6//	//7FF65C95C186//	//7FF6E4BE5786//	//7FF676470F36//	//7FF7296FEA66//	//7FF62626C976//	//7FF6716B1936//	//7FF7EBA19536//	//7FF7A29480B6//	//7FF6BF1E8146//	//7FF627292386//	//7FF6AA10DDD6//	//7FF759D44646//	//7FF631DC4456//	//7FF781B565F6//	//7FF673FF6186//	//7FF62B16E316//	//7FF6EE5ED9A6//	//7FF6B40FB486//	//7FF6F09B1506//	//7FF61A710EF6//	//7FF759156486//	//7FF76E5F9376//	//7FF7E361B936//	//7FF61E1FB496//	//7FF65FEC83F6//	//7FF64B3E1546//	//7FF73A991546//	//7FF6709EED36//	//7FF6B4E85C56//	//7FF783C6CAE6//	//7FF6EC5BEA76//	//7FF6F44091D6//	//7FF7B6345026//	//7FF69AB65056//	//7FF73B6F0BC6//	//7FF750227596//	//7FF73C217596//	//7FF6FE93F576//	//7FF6D67226F6//	//7FF689F91D16//	//7FF7CD7C3956//	//7FF7F6C99DF6//	//7FF7275893A6//	//7FF6056D2DE6//	//7FF749D2FB06//	//7FF6F00AB1E6//	//7FF7A6480FC6//	//7FF7EDFD0FF6//	//7FF6BE7B0F66//	//7FF6F3A2D806//	//7FF7A9BA2A36//	//7FF789E59D66//	//7FF738269D16//	//7FF6AE592276//	//7FF655565F16//	//7FF786EF5E06//	//7FF678A8A556//	//7FF74A503D46//	//7FF61D42F616//	//7FF7E7A34EA6//	//7FF625D663B6	////7FF65280BB06	////7FF6FF7C6096	////7FF7B4861016	////7FF6F5B90FC6	////7FF69AD080F6	////7FF6E8E05C86	////7FF7B725CE96	////7FF70DF5B5C6	////7FF6D7A1B5E6	////7FF7F35BB396	////7FF6AFB704C6	////7FF6C915AB86	////7FF70AC85FF6	////7FF714D474B6	////7FF7EF04B009	////7FF71B1F2709	////7FF75E12AFA9	////7FF67274B489	////7FF690472CD9	////7FF6FC5559E9	////7FF69E576139	////7FF74E226129	////7FF757D732F9	////140AEBF29////140AB57D9//
#define OFFSET_PARTYDUNGEON_DIFFICULTY		0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434	//0x000000000434	//0x000000000434		//0x000000000434		//0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x000000000434//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x00000000042C//	0x000000000424//	0x000000000424//	0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424	//0x000000000424
//											0x7FF7304E2914	//0x7FF6AC81FA64	//0x7FF790E49AD4	//0x7FF701A71C34	//0x7FF72498B3B4	//0x7FF6F4653E54	//0x7FF6E71E3D94	//00007FF7585971E4	//0x7FF680F17174	//0x7FF6D5FA4124	//0x7FF66A48E2A4	//0x7FF760DB8A44	//0x7FF7984B8A44//	00007FF7F6DCAF54//	0x7FF793D3AFD4//	00007FF6A7F24804	//0x7FF61D4D4854	//0x7FF63AF73434		//0x7FF69C9933A4	//	7FF6DF7B15C4//	7FF6777E2E44////	//7FF7E25D9A14//	//7FF7E0E67C44//	//7FF6C2017B14//	//7FF65CCB9864//	//7FF6E4F40AF4//	//7FF6767C9F74//	//7FF729A57284//	//7FF6265C41A4//	//7FF671A55524//	//7FF7EBD7D544//	//7FF7A2CA24D4//	//7FF6BF542564//	//7FF6275F64B4//	//7FF6AA46F9A4//	//7FF75A067674//	//7FF6320E7394//	//7FF781E764E4//	//7FF674312B64//	//7FF62B4874E4//	//7FF6EE906AE4//	//7FF6B4421144//	//7FF6F0CD5154//	//7FF61AA34B44//	//7FF75946D9D4//	//7FF76E90E344//	//7FF7E3935E44//	//7FF61E513CF4//	//7FF6601DF304//	//7FF64B705134//	//7FF73ACB5124//	//7FF670CC2424//	//7FF6B51591C4//	//7FF783F3E094//	//7FF6EC8A1414//	//7FF6F46DD8D4//	//7FF7B6620D54//	//7FF69AE40D84//	//7FF73B9BEA34//	//7FF7504F7CC4//	//7FF73C4E7CC4//	//7FF6FEC115E4//	//7FF6D69C1A34//	//7FF68A1DEE24//	//7FF7CDA08D94//	//7FF7F6EDF094//	//7FF7277CE644//	//7FF605951D34//	//7FF749FABF34//	//7FF6F032D2E4//	//7FF7A66C8C74//	//7FF7EE218BC4//	//7FF6BE9F8BF4//	//7FF6F3C74EA4//	//7FF7A9DE3284//	//7FF78A0990D4//	//7FF7384A9084//	//7FF6AE7D2B04//	//7FF6557A5D14//	//7FF787135AA4//	//7FF678C83224//	//7FF74A705674//	//7FF61D67E1A4//	//7FF7E7C37154//	//7FF625F69A04	////7FF652A0BB34	////7FF6FF9C2114	////7FF7B4A66134	////7FF6F5D960E4	////7FF69AF08004	////7FF6E8FB4024	////7FF7B7413604	////7FF70E110854	////7FF6D7BD0874	////7FF7F3770624	////7FF6AFD23EF4	////7FF6C92BF034	////7FF70AE3DC44	////7FF714F078A4	////7FF7EF20AA99	////7FF71B356CC9	////7FF75E291BF9	////7FF672900BF9	////7FF690629529	////7FF6FC6C5109	////7FF69E6E5729	////7FF74E395719	////7FF757ED9F36
#define OFFSET_DUNGEONPARTY_MEMBERCNT		0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440	//0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440	//0x000000000440	//0x000000000440		//0x000000000440		//0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000440//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000438//	0x000000000430//	0x000000000430//	0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//0x000000000430	//
//											0x7FF7304E7E2F	//0x7FF6AC824F7F	//0x7FF790E4EFEF	//0x7FF701A76FAF	//0x7FF724991FEF	//0x7FF6F465AA8F	//0x7FF6E71EA9CF	//00007FF75859C6FF	//0x7FF680F1C68F	//0x7FF6D5FA9C0F	//0x7FF66A493D8F	//0x7FF760E0DBAF	//0x7FF79850DBAF//	00007FF7F6DD1D6F//	0x7FF793D41DEF//	00007FF6A7F2B66F	//0x7FF61D4DB6BF	//0x7FF63AF7A29F		//0x7FF69C99A20F	//	7FF6DF7B834F//	7FF6777E822F////	//7FF7E25E078F//	//7FF7E0E6D63F//	//7FF6C201D50F//	//7FF65CCBE71F//	//7FF6E4F459AF//	//7FF6767CEE2F//	//7FF729A5C13F//	//7FF6265C905F//	//7FF671A5AB5F//	//7FF7EBD830EF//	//7FF7A2CA7B9F//	//7FF6BF547C2F//	//7FF6275FC37F//	//7FF6AA47550F//	//7FF75A06E01F//	//7FF6320EDD3F//	//7FF781E7C39F//	//7FF6743188DF//	//7FF62B48D25F//	//7FF6EE90C84F//	//7FF6B4426C7F//	//7FF6F0CDAC1F//	//7FF61AA3A60F//	//7FF7594C236F//	//7FF76E96375F//	//7FF7E393C58F//	//7FF61E51A43F//	//7FF6601E570F//	//7FF64B70A40F//	//7FF73ACBA3FF//	//7FF670CC8B6F//	//7FF6B515F90F//	//7FF783F447DF//	//7FF6EC8A6E8F//	//7FF6F46E387F//	//7FF7B66256FF//	//7FF69AE4572F//	//7FF73B9C522F//	//7FF7504FD0DF//	//7FF73C4ED0DF//	//7FF6FEC16F3F//	//7FF6D69C6E8F//	//7FF68A234CEF//	//7FF7CDA0F27F//	//7FF7F6EE551F//	//7FF7277D4ACF//	//7FF60595871F//	//7FF749FB291F//	//7FF6F033230F//	//7FF7A66CE03F//	//7FF7EE21DF8F//	//7FF6BE9FDFBF//	//7FF6F3C7A53F//	//7FF7A9DE844F//	//7FF78A09E29F//	//7FF7384AE24F//	//7FF6AE7D929F//	//7FF6557ACA3F//	//7FF78713C7CF//	//7FF678CDF04F//	//7FF74A70A68F//	//7FF61D6830BF//	//7FF7E7C3D80F//	//7FF625F6F3BF	////7FF652A1008F	////7FF6FF9C7ACF	////7FF7B4A6AE4F	////7FF6F5D9ADFF	////7FF69AF0CD1F	////7FF6E8FB94BF	////7FF7B74187FF	////7FF70E11546F	////7FF6D7BD548F	////7FF7F377522F	////7FF6AFD28AAF	////7FF6C9314E1F	////7FF70AE4301F	////7FF714F0C585	////7FF7EF20D715	////7FF71B3A9285	////7FF75E2945A5	////7FF672903375	////7FF69062BC85	////7FF6FC6C7AA5	////7FF69E6E8875	////7FF74E398865	//
#define OFFSET_DUNGEONPARTY_DIFFICULTY		0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444	//0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444	//0x000000000444	//0x000000000444		//0x000000000444		//0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x000000000444//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x00000000043C//	0x000000000434//	0x000000000434//	0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//0x000000000434	//
//											0x7FF7304E8AE9	//0x7FF6AC825C39	//0x7FF790E4FCA9	//0x7FF701A77C69	//0x7FF724992CA9	//0x7FF6F465B749	//0x7FF6E71EB689	//00007FF75859D3B9	//0x7FF680F1D349	//0x7FF6D5FAA8C9	//0x7FF66A494A49	//0x7FF760E0E199	//0x7FF79850E199//	00007FF7F6DD2A29//	0x7FF793D42AA9//	00007FF6A7F2C329	//0x7FF61D4DC379	//0x7FF63AF7AF59		//0x7FF69C99AEC9	//	7FF6DF7B9009//	7FF6777E8EE9////	//7FF7E25E1449//	//7FF7E0E6E2F9//	//7FF6C201E1C9//	//7FF65CCBF3D9//	//7FF6E4F46669//	//7FF6767CFAE9//	//7FF729A5CDF9//	//7FF6265C9D19//	//7FF671A5B819//	//7FF7EBD83DA9//	//7FF7A2CA8859//	//7FF6BF5488E9//	//7FF6275FD039//	//7FF6AA4761C9//	//7FF75A06ECD9//	//7FF6320EE9F9//	//7FF781E7D059//	//7FF674319599//	//7FF62B48DF19//	//7FF6EE90D4F9//	//7FF6B4427929//	//7FF6F0CDB8C9//	//7FF61AA3B2B9//	//7FF7594C2959//	//7FF76E963D49//	//7FF7E393D239//	//7FF61E51B0E9//	//7FF6601E63B9//	//7FF64B70B0B9//	//7FF73ACBB0A9//	//7FF670CC9819//	//7FF6B51605B9//	//7FF783F45489//	//7FF6EC8A7B39//	//7FF6F46E4509//	//7FF7B6626389//	//7FF69AE463B9//	//7FF73B9C5EB9//	//7FF7504FDD60//	//7FF73C4EDD60//	//7FF6FEC17BC0//	//7FF6D69C7B10//	//7FF68A2352D0//	//7FF7CDA0FF00//	//7FF7F6EE61A0//	//7FF7277D5750//	//7FF6059593A0//	//7FF749FB35A0//	//7FF6F0332F90//	//7FF7A66CECC0//	//7FF7EE21EC10//	//7FF6BE9FEC40//	//7FF6F3C7B1C0//	//7FF7A9DE90D0//	//7FF78A09EF20//	//7FF7384AEED0//	//7FF6AE7D9F20//	//7FF6557AD6C0//	//7FF78713D450//	//7FF678CDF630//	//7FF74A70B310//	//7FF61D683D40//	//7FF7E7C3E490//	//7FF625F70040	////7FF652A10D10	////7FF6FF9C8750	////7FF7B4A6BACF	////7FF6F5D9BA7F	////7FF69AF0D99F	////7FF6E8FBA0AF	////7FF7B741947F	////7FF70E1160EF	////7FF6D7BD610F	////7FF7F3775EAF	////7FF6AFD2972F	////7FF6C93153FF	////7FF70AE43C0F	////7FF714F0D0BF	////7FF7EF20E24F	////7FF71B3A971F	////7FF75E2950DF	////7FF672903EAF	////7FF69062C7BF	////7FF6FC6C85CF	////7FF69E6E939F	////7FF74E39938F	//
#define OFFSET_GETPLAYERLEVERECORD			0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030		//0x000000000030		//0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030//	0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030	//0x000000000030
//											0x7FF730074806	//0x7FF6AC3B3016	//0x7FF7909E93E6	//0x7FF701615916	//0x7FF72456A2B6	//0x7FF6F4237C16	//0x7FF6E6DC7B56	//00007FF75817B2E6	//0x7FF680AFB276	//0x7FF6D5B86CD6	//0x7FF66A07E186	//0x7FF7609E56F6	//0x7FF7980E56F6//	00007FF7F69EB306//	0x7FF79395B396//	00007FF6A7B488A6	//0x7FF61D0F88F6	//0x7FF63AB9E766		//0x7FF69C5BE796	//	7FF6DF3CDCA6//	7FF677406276////	//7FF7E2251046//	//7FF7E0AD1D16//	//7FF6C1C81BC6//	//7FF65C91EA16//	//7FF6E4BA8016//	//7FF6764337C6//	//7FF7296C12F6//	//7FF6261E7216//	//7FF671671956//	//7FF7EB9D72D6//	//7FF7A290E136//	//7FF6BF1AE1C6//	//7FF627258406//	//7FF6AA0D3E26//	//7FF759CC28D6//	//7FF631D428A6//	//7FF781AD5BE6//	//7FF673F778D6//	//7FF62B0EF8F6//	//7FF6EE56EF96//	//7FF6B40782C6//	//7FF6F092EDC6//	//7FF61A68E7B6//	//7FF759120066//	//7FF76E5C3ED6//	//7FF7E35E61A6//	//7FF61E1C5D06//	//7FF65FE92C76//	//7FF64B3A0EA6//	//7FF73A950EA6//	//7FF6709B14F6//	//7FF6B4E48416//	//7FF783C2C8A6//	//7FF6EC581896//	//7FF6F43855E6//	//7FF7B62C1F16//	//7FF69AAE1F46//	//7FF73B6B27F6//	//7FF7501EBCD6//	//7FF73C1DBCD6//	//7FF6FE903D06//	//7FF6D669FDC6//	//7FF689F0F3E6//	//7FF7CD742986//	//7FF7F6C19CB6//	//7FF727509266//	//7FF605694E96//	//7FF749CF22B6//	//7FF6F0066CE6//	//7FF7A64419F6//	//7FF7EDF91A26//	//7FF6BE771996//	//7FF6F39AD486//	//7FF7A9B22F86//	//7FF789DDB856//	//7FF7381EB806//	//7FF6AE550296//	//7FF655527BF6//	//7FF786EB7AE6//	//7FF678A4C356//	//7FF74A4C60D6//	//7FF61D432A86//	//7FF7E7A38086//	//7FF625D27AD6	////7FF6527D06B6	////7FF6FF7CA4F6	////7FF7B4865483	////7FF6F5B95433	////7FF69AD0D163	////7FF6E8DC9663	////7FF7B721CA53	////7FF70DF0D303	////7FF6D79CD323	////7FF7F356D0D3	////7FF6AFB22633	////7FF6C910F572	////7FF70AC8C862	////7FF714D4E612	////7FF7EF052B62	////7FF71B1B4992	////7FF75E0ED462	////7FF67275193D	////7FF6904791AD	////7FF6FC55B0CD	////7FF69E591400	////7FF74E2413F0	////7FF757D90000
#define OFFSET_COLLECTIONDETAILINFOCOUNT	0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008		//0x000000000008		//0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008//	0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008	//0x000000000008
#define OFFSET_COLLECTIONDETAILINFO			0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518	//0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518	//0x000000000518	//0x000000000518		//0x000000000518		//0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000518//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000510//	0x000000000508//	0x000000000508//	0x000000000508	//0x000000000508	//0x000000000508	//0x000000000508	//0x000000000508	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0	//0x0000000004C0
#define OFFSET_COLLECTIONDETAILINFO1		0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070	//0x000000000070	//0x000000000070		//0x000000000070		//0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068
//											0x7FF7307D118D	//0x7FF6ACB0DDAD	//0x7FF7911367DD	//0x7FF701D5BDFD	//0x7FF724C97DBD	//0x7FF6F495B2CD	//0x7FF6E74EB20D	//00007FF7588777AD	//0x7FF6811F773D	//0x7FF6D627BA5D	//0x7FF66A7593AD	//0x7FF7610CA53D	//0x7FF7987CA50D//	00007FF7F70CC26D//	0x7FF79403C2ED//	00007FF6A822421D	//0x7FF61D7D431D	//0x7FF63B283B9D		//0x7FF69CCA3B0D	//	7FF6DFAC045D//	7FF677AAC3AD////	//7FF7E28E62ED//	//7FF7E114126D//	//7FF6C22F113D//	//7FF65CF9178D//	//7FF6E521C68D//	//7FF676A99A3D//	//7FF729D26ABD//	//7FF6268923CD//	//7FF671CFEE1D//	//7FF7EC04EA3D//	//7FF7A2F6EFCD//	//7FF6BF80F05D//	//7FF6278B3F0D//	//7FF6AA71D72D//	//7FF75A332ABD//	//7FF6323B275D//	//7FF78213A3ED//	//7FF6745D2FCD//	//7FF62B75178D//	//7FF6EEBD0C0D//	//7FF6B46A79BD//	//7FF6F0F59A6D//	//7FF61ACB945D//	//7FF75974364D//	//7FF76EBE575D//	//7FF7E3BCAF5D//	//7FF61E7A42AD//	//7FF66046DDED//	//7FF64B98F51D//	//7FF73AF3F50D//	//7FF670F5161D//	//7FF6B53E63AD//	//7FF7841C960D//	//7FF6ECB3B9CD//	//7FF6F497F43D//	//7FF7B687F37D//	//7FF69B09F37D//	//7FF73BC76D9D//	//7FF7507956DD//	//7FF73C7856DD//	//7FF6FEEAA4CD//	//7FF6D6C2A22D//	//7FF68A47886D//	//7FF7CDC76E2D//	//7FF7F71444FD//	//7FF727A33A7D//	//7FF605BB14AD//	//7FF74A2079AD//	//7FF6F0581A2D//	//7FF7A6916CBD//	//7FF7EE466C0D//	//7FF6BEC46C3D//	//7FF6F3ED104D//	//7FF7AA03602D//	//7FF78A2E766D//	//7FF7386F753D//	//7FF6AEA2558D//	//7FF6559F68FD//	//7FF78738668D//	//7FF678EEC1AD//	//7FF74A917D8D//	//7FF61D886B9D//	//7FF7E7E479CD//	//7FF62617D54D	////7FF652BDB09D	////7FF6FFBCEE3D	////7FF7B4C3C84D	////7FF6F5F6C7FD	////7FF69B0D7D0D	////7FF6E91B94ED	////7FF7B762001D	////7FF70E2D947D	////7FF6D7D9949D	////7FF7F393923D	////7FF6AFEEA19D	////7FF6C94D797D	////7FF70AFFA54D	////7FF7150D4CAD	////7FF7EF3CCDCD	////7FF71B5138CD	////7FF75E46293D	////7FF672ACC3DD	////7FF690794F1D	////7FF6FC89396D	////7FF69E8C1F9D	////7FF74E571F7D	////7FF7580AE680
#define OFFSET_ITEMSEGONG					0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048		//0x000000000048		//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038
//											0x7FF730793FC5	//0x7FF6ACAD0BE5	//0x7FF7910F9635	//0x7FF701D1E885	//0x7FF724C59C85	//0x7FF6F491DDE5	//0x7FF6E74ADD25	//00007FF758833475	//0x7FF6811B3405	//0x7FF6D6237725	//0x7FF66A715395	//0x7FF761089E35	//0x7FF798789E05//	00007FF7F708BBF5//	0x7FF793FFBC75//	00007FF6A81E3D75	//0x7FF61D793E75	//0x7FF63B23CE55		//0x7FF69CC5CDC5	//	7FF6DFA79245//	7FF677A688C5////	//7FF7E289F145//	//7FF7E10FE3A5//	//7FF6C22AE275//	//7FF65CF4EB85//	//7FF6E51DBBD5//	//7FF676A567B5//	//7FF729CE3825//	//7FF62684F2B5//	//7FF671CBF2B5//	//7FF7EC00E935//	//7FF7A2F2E695//	//7FF6BF7CE725//	//7FF627873065//	//7FF6AA6DB655//	//7FF75A2F0685//	//7FF632370385//	//7FF7820F8295//	//7FF674592475//	//7FF62B70CF95//	//7FF6EEB8C415//	//7FF6B4656605//	//7FF6F0F08535//	//7FF61AC67F25//	//7FF7596FC4B5//	//7FF76EB99515//	//7FF7E3B77555//	//7FF61E7579A5//	//7FF6604216C5//	//7FF64B940EB5//	//7FF73AEF0EA5//	//7FF670EFFAF5//	//7FF6B53916D5//	//7FF78417ABD5//	//7FF6ECAEBC45//	//7FF6F492EAA5//	//7FF7B68281A5//	//7FF69B0481A5//	//7FF73BC22EE5//	//7FF750741B45//	//7FF73C731B45//	//7FF6FEE563F5//	//7FF6D6BE2335//	//7FF68A431205//	//7FF7CDC22935//	//7FF7F70F1785//	//7FF7279E0D05//	//7FF605B63865//	//7FF74A1BBD45//	//7FF6F0531635//	//7FF7A68CB505//	//7FF7EE41B455//	//7FF6BEBFB485//	//7FF6F3E870B5//	//7FF7A9FE7AE5//	//7FF78A2994C5//	//7FF7386A9395//	//7FF6AE9D9275//	//7FF6559A8BD5//	//7FF787338965//	//7FF678E9A785//	//7FF74A8C7B85//	//7FF61D832B85//	//7FF7E7DFC585//	//7FF626129D55	////7FF652B8BD05	////7FF6FFB7BD05	////7FF7B4BED2C5	////7FF6F5F1D275	////7FF69B088DD5	////7FF6E916D575	////7FF7B75CF905	////7FF70E2890C5	////7FF6D7D490E5	////7FF7F38E8E85	////7FF6AFE9A875	////7FF6C94866B5	////7FF70B005435	////7FF715088635	////7FF7EF380C72	////7FF71B51E4DC	////7FF75E411B4C	////7FF672A74ACC	////7FF6907A0F4C	////7FF6FC84685C	////7FF69E8680AC	////7FF74E51808C	////7FF758054BDC
#define OFFSET_VEHICLE_TOTALCOUNT			0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070	//0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070	//0x000000000070	//0x000000000070		//0x000000000070		//0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000070//	0x000000000058//	0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000058	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048
#define OFFSET_VEHICLE_BASEADDR				0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068	//0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068	//0x000000000068	//0x000000000068		//0x000000000068		//0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000068//	0x000000000050//	0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040	//0x000000000040
#define OFFSET_VEHICLE_ADDRSIZE				0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038		//0x000000000038		//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038
//											0x7FF72FCF10D0	//0x7FF6AC02FB30	//0x7FF79066ADA0	//0x7FF701296C60	//0x7FF7241BE1D0	//0x7FF6F3E93430	//0x7FF6E6A23350	//00007FF757DCC4F0	//0x7FF68074C4F0	//0x7FF6D57D9BE0	//0x7FF669CD7D30	//0x7FF76063FF60	//0x7FF797D3FF60//	00007FF7F664BBC0//	0x7FF7935BBC50//	00007FF6A77AE8A0	//0x7FF61CD5E8C0	//0x7FF63A806AC0		//0x7FF69C226A40	//	7FF6DF067420//	7FF67705FFB0////	//7FF7E1EBC490//	//7FF7E0743E90//	//7FF6C18F3D70//	//7FF65C590AB0//	//7FF6E481C370//	//7FF6760A94D0//	//7FF729337650//	//7FF625EA56A0//	//7FF671321A20//	//7FF7EB65CEB0//	//7FF7A258FA40//	//7FF6BEE2FAD0//	//7FF626EDA8B0//	//7FF6A9D5C330//	//7FF75995CD10//	//7FF6319DCCE0//	//7FF781773830//	//7FF673C14CA0//	//7FF62AD9F640//	//7FF6EE21EE10//	//7FF6B3D243E0//	//7FF6F05DD410//	//7FF61A33D230//	//7FF758DC1740//	//7FF76E2682D0//	//7FF7E328FC90//	//7FF61DE6DEA0//	//7FF65FB3B870//	//7FF64B04B390//	//7FF73A5FB390//	//7FF6706322F0//	//7FF6B4AF5AF0//	//7FF7838E0B20//	//7FF6EC233EC0//	//7FF6F40804B0//	//7FF7B5FC02B0//	//7FF69A7E02E0//	//7FF73B375220//	//7FF74FEB5700//	//7FF73BEA5700//	//7FF6FE5CF670//	//7FF6D63AB610//	//7FF689C232E0//	//7FF7CD459190//	//7FF7F6933040//	//7FF727222C70//	//7FF6053B07C0//	//7FF749A0D790//	//7FF6EFD489C0//	//7FF7A6125FE0//	//7FF7EDC76040//	//7FF6BE455FB0//	//7FF6F36D2C70//	//7FF7A9855170//	//7FF789B109C0//	//7FF737F20990//	//7FF6AE273BB0//	//7FF6552508C0//	//7FF786BE07B0//	//7FF6787C30F0//	//7FF74A2441F0//	//7FF61D181CD0//	//7FF7E7792D00//	//7FF625ABDE90	////7FF652572B00	////7FF6FF56D0E0	////7FF7B4612FF0	////7FF6F5943030	////7FF69AABC770	////7FF6E8B874D0	////7FF7B6FDC840	////7FF70DCD1730	////7FF6D7791750	////7FF7F3331500	////7FF6AF8EBE90	////7FF6C8FCCF60	////7FF70AB4DA80	////7FF714C115E0	////7FF7EEE32A70	////7FF71AFD02F0	////7FF75DF158C0	////7FF67258F9E0	////7FF6902BA090
												// //         // //	//	///	//	/////				/////	//				///	//      //      //	              
#define OFFSET_QUESTDESC					0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048		//0x000000000048		//0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000000048	//0x000000048//
//											0x7FF72FC9AB9A	//0x7FF6ABFD98EA	//0x7FF790614EEA	//0x7FF70124324A	//0x7FF723EA3370	//0x7FF6F3B87770	//0x7FF6E6717700	//00007FF757AC39D7	//0x7FF6804439D7	//0x7FF6D54D2D47	//0x7FF6699B12B7	//0x7FF76031BFE7	//0x7FF797A1BFF7//	00007FF7F632B367//	0x7FF79329B3F7//	00007FF6A74981D7	//0x7FF61CA481F7	//0x7FF63A4F20E7		//0x7FF69BF12067	//	7FF6DED3EFB7//	7FF676D5F5A7////	//7FF7E1BBA8B7//	//7FF7E0448AF7//	//7FF6C15F8AC7//	//7FF65C2988B7//	//7FF6E4526CB7//	//7FF675DB35C7//	//7FF729042CD7//	//7FF625BB2487//	//7FF671022F97//	//7FF7EB360B87//	//7FF7A22A2427//	//7FF6BEB42427//	//7FF626BF1727//	//7FF6A9A83DD7//	//7FF7596A2427//	//7FF631722457//	//7FF7814BF0F7//	//7FF67396B5E7//	//7FF62AAFDBD7//	//7FF6EDF7D8E7//	//7FF6B3A87357//	//7FF6F0345547//	//7FF61A0A5547//	//7FF758B23897//	//7FF76DFD0907//	//7FF7E2FFC607//	//7FF61DBDD357//	//7FF65F8AC387//	//7FF64ADC8187//	//7FF73A378187//	//7FF6703AFF67//	//7FF6B484E257//	//7FF783647FB7//	//7FF6EBFA76E7//	//7FF6F3DF6BC7//	//7FF7B5D49EC7//	//7FF69A569EC7//	//7FF73B136507//	//7FF74FC81A37//	//7FF73BC71A37//	//7FF6FE39E137//	//7FF6D6159BC7//	//7FF6899D4B07//	//7FF7CD2161D7//	//7FF7F66F3557//	//7FF726FE33A7//	//7FF605172227//	//7FF7497D0887//	//7FF6EFB429A7//	//7FF7A5F10837//	//7FF7EDA60897//	//7FF6BE240817//	//7FF6F34BEEC7//	//7FF7A9655527//	//7FF7899144F7//	//7FF737D244C7//	//7FF6AE071407//	//7FF6550517A7//	//7FF7869E1777//	//7FF6785DD447//	//7FF74A064827//	//7FF61CFD1437//	//7FF7E75B0E07//	//7FF6258DA2F7	////7FF652388A07	////7FF6FF373E17	////7FF7B441E737	////7FF6F574E707	////7FF69A8CDD07	////7FF6E89C8047	////7FF7B6E2C177	////7FF70DB1AC27	////7FF6D75DAC47	////7FF7F317A9F7	////7FF6AF737827	////7FF6C8D5B567	////7FF70A8E7B97	////7FF7149BAD27	////7FF7EECCA5B7	////7FF71AE68187	////7FF75DDB3C87	////7FF67242C957	////7FF69015A7F7	////7FF6FC227FF7	////7FF69E253AA7	////7FF74DF03A97	////7FF757A51487	////1407D2457//
												//	//	///	//	/////				/////	//				///	//      //      //	              
#define OFFSET_RESETCHARPOS_VALUE1			0x000000000A7C	//0x000000000A7C	//0x000000000A7C	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64	//0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A64	//0x000000000A64	//0x000000000A64		//0x000000000A64		//0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A64//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A4C//	0x000000000A44//	0x000000000A44//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A3C//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A30//	0x000000000A28//	0x000000000A28//	0x000000000A28//	0x000000000A28//	0x000000000A20//	0x000000000A20//	0x000000000A20//	0x000000000A20//	0x000000000A20//	0x000000000A20//	0x000000000A00//	0x000000000A00//	0x000000000A00//	0x000000000A00//	0x000000000A00	//0x000000000A00	//0x000000000A00	//0x000000000A00	//0x000000000A00	//0x0000000009F8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8	//0x0000000009E8
#define OFFSET_RESETCHARPOS_VALUE2			0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288//0x000000000288	//0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288	//0x000000000288	//0x000000000288		//0x000000000288		//0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288//	0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288	//0x000000000288
#define OFFSET_RESETCHARPOS_VALUE3			0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8	//0x0000000001E8	//0x0000000001E8		//0x0000000001E8		//0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8//	0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8	//0x0000000001E8
#define OFFSET_RESETCHARPOS_VALUE4			0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0	//0x0000000003F0	//0x0000000003F0		//0x0000000003F0		//0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0//	0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0	//0x0000000003F0
//											0x7FF72F843944	//0x7FF6ABB83794	//0x7FF7901C28D4	//0x7FF700DF3124	//0x7FF723D42364	//0x7FF6F3A21194	//0x7FF6E65B1194	//00007FF757960304	//0x7FF6802E0304	//0x7FF6D536E9B4	//0x7FF66986ECD4	//0x7FF7601D9D44	//0x7FF7978D9D44//	00007FF7F61E8AA4//	0x7FF793158B04//	00007FF6A73577F4	//0x7FF61C907824	//0x7FF63A3B5FB4		//0x7FF69BDD5FB4	//	7FF6DEC04FD4//	7FF676C23B54////	//7FF7E1A7FB74//	//7FF7E030D9F4//	//7FF6C14BD9F4//	//7FF65C15C124//	//7FF6E43EB5B4//	//7FF675C7AF84//	//7FF728F0AC24//	//7FF625A7ABC4//	//7FF670EE97F4//	//7FF7EB22ACC4//	//7FF7A217AA94//	//7FF6BEA1AA94//	//7FF626ABA194//	//7FF6A9948F94//	//7FF759568834//	//7FF6315E8864//	//7FF7813972A4//	//7FF673845A64//	//7FF62A9D3BB4//	//7FF6EDE53BA4//	//7FF6B395F504//	//7FF6F021EA94//	//7FF619F7EA94//	//7FF7589FCE24//	//7FF76DEAB3B4//	//7FF7E2ED8854//	//7FF61DAB7024//	//7FF65F786724//	//7FF64ACA4854//	//7FF73A254854//	//7FF6702C15F4//	//7FF6B4760824//	//7FF78355D194//	//7FF6EBEBC4D4//	//7FF6F3D0BB44//	//7FF7B5C59924//	//7FF69A479924//	//7FF73B048DA4//	//7FF74FB97384//	//7FF73BB87384//	//7FF6FE2B5CE4//	//7FF6D606FF94//	//7FF6898EE374//	//7FF7CD12ECC4//	//7FF7F660E534//	//7FF726EFE3B4//	//7FF60508DE14//	//7FF7496ED1D4//	//7FF6EFA4D194//	//7FF7A5E1C804//	//7FF7ED96C864//	//7FF6BE14C7E4//	//7FF6F33CBC24//	//7FF7A95693D4//	//7FF789827F24//	//7FF737C37EF4//	//7FF6ADF85B94//	//7FF654F65804//	//7FF7868F57D4//	//7FF6784F3DA4//	//7FF749F7D744//	//7FF61CEEA944//	//7FF7E7508D74//	//7FF6258337E4	////7FF6522E1C34	////7FF6FF2CEBF4	////7FF7B437A884	////7FF6F56AA854	////7FF69A829314	////7FF6E89188E4	////7FF7B6D7B104	////7FF70DA69F24	////7FF6D7529F24	////7FF7F30C9F24	////7FF6AF6884A4	////7FF6C8CB1EF4	////7FF70A840064	////7FF71490C064	////7FF7EEC18FB4	////7FF71AD8B277
												// // // // //	//	///	//	/////				/////	//				///	//      //      //	              
#define OFFSET_PARTYWINDOW_REMAINCOUNT1		0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468	//0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468	//0x000000000468	//0x000000000468		//0x000000000468		//0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000468//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000460//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000458//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000450//	0x000000000448//	0x000000000448//	0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448	//0x000000000448
#define OFFSET_PARTYWINDOW_REMAINCOUNT2		0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034	//0x000000000034	//0x000000000034		//0x000000000034		//0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034//	0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034	//0x000000000034
//											0x7FF7305DF5C7	0x7FF6AC91C1F7	0x7FF790F452C7	//0x7FF701B6A8F7	//0x7FF724A91037	//0x7FF6F475CDB7	//0x7FF6E72ECCF7	//00007FF758692A97	//0x7FF681012A27	//0x7FF6D609F777	//0x7FF66A58A0A7	//0x7FF760EBA9A7	//0x7FF7985BA977//	00007FF7F6ED77D7//	0x7FF793E47857//	00007FF6A802FD47	//0x7FF61D5DFD97	//0x7FF63B07E247		//0x7FF69CA9E1B7	//	7FF6DF8BB3F7//	7FF6778D7437////	//7FF7E26E2C67//	//7FF7E0F6F8E7//	//7FF6C211F7B7//	//7FF65CDC0FE7//	//7FF6E5047667//	//7FF6768C1637//	//7FF729B4EBF7//	//7FF6266BB897//	//7FF671B08897//	//7FF7EBE80907//	//7FF7A2DA50B7//	//7FF6BF645147//	//7FF6276F6357//	//7FF6AA567557//	//7FF75A1751D7//	//7FF6321F4ED7//	//7FF781F7FD87//	//7FF67441B537//	//7FF62B58CEC7//	//7FF6EEA0C447//	//7FF6B44D9CD7//	//7FF6F0D8A9A7//	//7FF61AAEA397//	//7FF7595741C7//	//7FF76EA137B7//	//7FF7E39FD5F7//	//7FF61E5DA7E7//	//7FF6602A4757//	//7FF64B7B81D7//	//7FF73AD681C7//	//7FF670D8B1F7//	//7FF6B521EB87//	//7FF784003057//	//7FF6EC9632F7//	//7FF6F4796AB7//	//7FF7B66D6D37//	//7FF69AEF6D67//	//7FF73BA85A17//	//7FF7505B2FF7//	//7FF73C5A2FF7//	//7FF6FECD0477//	//7FF6D6A85217//	//7FF68A2E3B67//	//7FF7CDACE7A7//	//7FF7F6FA3B27//	//7FF7278930A7//	//7FF605A1B157//	//7FF74A075217//	//7FF6F03E1FB7//	//7FF7A6788E07//	//7FF7EE2D8D57//	//7FF6BEAB8D87//	//7FF6F3D31B07//	//7FF7A9E9E407//	//7FF78A151D67//	//7FF738561D17//	//7FF6AE895647//	//7FF655864907//	//7FF7871F4697//	//7FF678D4FE77//	//7FF74A781D07//	//7FF61D6EDBC7//	//7FF7E7CB7DB7//	//7FF625FE17F7	////7FF652A7E867	////7FF6FFA38CF7	////7FF7B4ADA107	////7FF6F5E0A0B7	////7FF69AF7BC37	////7FF6E9036377	////7FF7B74952C7	////7FF70E184017	////7FF6D7C44037	////7FF7F37E3DD7	////7FF6AFD99257	////7FF6C9341357	////7FF70AEBF937	////7FF714F822C7	////7FF7EF2806E7
												// // // // //	//	///	//	/////				/////	//				///	//      //      //	              
#define OFFSET_INSTANTMESSAGE_VALUE			0x00000000004A	//0x00000000004A	//0x00000000004A	//0x00000000004A	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049	//0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049	//0x000000000049	//0x000000000049		//0x000000000049		//0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000049//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000048//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000047//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000046//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044//	0x000000000044	//0x000000000044	//0x000000000044	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000042	//0x000000000042	//0x000000000042	//0x000000000040	//0x000000000040	//0x000000000040
//											0x7FF72FA58D93	//0x7FF6ABD985F3	//0x7FF7903D6393	//0x7FF701004D93	//0x7FF723F517C3	//0x7FF6F3C2D313	//0x7FF6E67BD2A3	//00007FF757B68F63	//0x7FF6804E8F63	//0x7FF6D55772B3	//0x7FF669A7E333	//0x7FF7603E88E3	//0x7FF797AE88F3//	00007FF7F63F7E13//	0x7FF793367EA3//	00007FF6A7563693	//0x7FF61CB136B3	//0x7FF63A5BC6D3		//0x7FF69BFDC653	//	7FF6DEE06F53//	7FF676E46B63////	//7FF7E1C9F9C3//	//7FF7E052AF33//	//7FF6C16DAF53//	//7FF65C379393//	//7FF6E46070F3//	//7FF675E95B63//	//7FF7291259E3//	//7FF625C94E63//	//7FF6711017D3//	//7FF7EB43DD63//	//7FF7A234B563//	//7FF6BEBEB5F3//	//7FF626C9A433//	//7FF6A9B222D3//	//7FF759740493//	//7FF6317C04C3//	//7FF78155CC03//	//7FF673A09553//	//7FF62AB93143//	//7FF6EE012E43//	//7FF6B3B1A4D3//	//7FF6F03D7F53//	//7FF61A137DD3//	//7FF758BB44B3//	//7FF76E060123//	//7FF7E308B0F3//	//7FF61DC6DF63//	//7FF65F93CB53//	//7FF64AE56EA3//	//7FF73A406EA3//	//7FF670474773//	//7FF6B4911FE3//	//7FF7837244B3//	//7FF6EC07F813//	//7FF6F3ECE603//	//7FF7B5E18E51//	//7FF69A638E51//	//7FF73B202D11//	//7FF74FD48F61//	//7FF73BD38F61//	//7FF6FE464D51//	//7FF6D61F9B71//	//7FF689A73A21//	//7FF7CD2AECF1//	//7FF7F678B441//	//7FF72707B2A1//	//7FF605209301//	//7FF749867B91//	//7FF6EFBDE131//	//7FF7A5FAB871//	//7FF7EDAFB8D1//	//7FF6BE2DB841//	//7FF6F3559BD1//	//7FF7A96EA831//	//7FF7899A86C1//	//7FF737DB8691//	//7FF6AE103DB1//	//7FF6550E2231//	//7FF786A721F1//	//7FF6786680F1//	//7FF74A0EC901//	//7FF61D05AAB1//	//7FF7E767A631//	//7FF6259A2A01	////7FF652414D11	////7FF6FF3FEE01	////7FF7B44A9441	////7FF6F57D9481	////7FF69A955121	////7FF6E8A6DD71	////7FF7B6EC8BA1	////7FF70DBB6F61	////7FF6D7676F81	////7FF7F3216D31	////7FF6AF7D38C1	////7FF6C8DF2571	////7FF70A97CB81	////7FF714A47451
												//	//	///	//	/////				/////	//				///	//      //      //	              
#define PARAM_OFF_MAXPOTIONCNT				0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043	//0x000000000043	//0x000000000043		//0x000000000043		//0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043//	0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043	//0x000000000043
//											0x7FF72FA71976	//0x7FF6ABDB11D6	//0x7FF7903EEF66	//0x7FF70101D956	//0x7FF723F6A386	//0x7FF6F3C459E6	//0x7FF6E67D5976	//00007FF757B81706	//0x7FF680501706	//0x7FF6D558FA56	//0x7FF669A94D76	//0x7FF7603FEFD6	//0x7FF797AFEFE6//	00007FF7F640E946//	0x7FF79337E9D6//	00007FF6A7578F76	//0x7FF61CB28F96	//0x7FF63A5D1DD6		//0x7FF69BFF1D56	//	7FF6DEE1BF76//	7FF676E089C3////	//7FF7E1C64EB3//	//7FF7E04F0803//	//7FF6C16A07D3//	//7FF65C33EFE3//	//7FF6E45CD2E3//	//7FF675E5C203//	//7FF7290EC1F3//	//7FF625C5B8F3//	//7FF6710C89B3//	//7FF7EB405483//	//7FF7A2361546//	//7FF6BEC015D6//	//7FF626CB0416//	//7FF6A9B38736//	//7FF7597566E6//	//7FF6317D6716//	//7FF781572906//	//7FF673A1F1B6//	//7FF62ABA9106//	//7FF6EE028DF9//	//7FF6B3B30459//	//7FF6F03EDE89//	//7FF61A14DD09//	//7FF758BCA0D9//	//7FF76E074F99//	//7FF7E30A0189//	//7FF61DC81459//	//7FF65F9505F9//	//7FF64AE6A949//	//7FF73A41A949//	//7FF670486E29//	//7FF6B4924619//	//7FF7836ED756//	//7FF6EC04ADE6//	//7FF6F3E99F26//	//7FF7B5DE9C76//	//7FF69A609C76//	//7FF73B1D44D6//	//7FF74FD1CDF6//	//7FF73BD0CDF6//	//7FF6FE438EE6//	//7FF6D620EDF9//	//7FF689A88CB9//	//7FF7CD2C3019//	//7FF7F679F699//	//7FF72708F419//	//7FF60521DDD9//	//7FF74987C6B9//	//7FF6EFBAEBA6//	//7FF7A5F7C3B6//	//7FF7EDACC416//	//7FF6BE2AC386//	//7FF6F352A746//	//7FF7A96BD996//	//7FF78997BE06//	//7FF737D8BDD6//	//7FF6AE0D7856//	//7FF6550B6C66//	//7FF786A46C26//	//7FF67863F796//	//7FF74A0C4CE6//	//7FF61D031C69//	//7FF7E7651A39//	//7FF62597A609	////7FF65242CDF9	////7FF6FF415F69	////7FF7B44C0359	////7FF6F57F0399	////7FF69A96BDB9	////7FF6E8A421D6	////7FF7B6E9DFB6	////7FF70DB8C5A6	////7FF6D764C5C6	////7FF7F31EC376	////7FF6AF7A9096	////7FF6C8DC9FA6	////7FF70A954D46
												// // ///	//	//	///	//	/////				/////	//				///	//      //      //	              
#define OFFSET_SELECT_MAPWORLDID			0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050	//0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050	//0x000000000050	//0x000000000050		//0x000000000050		//0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000050//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074//	0x000000000074	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	//0x0000000000D0	////0x0000000000D0
//											0x7FF72FD04C0D	//0x7FF6AC04366D	//0x7FF79067E86D	//0x7FF7012AA72D	//0x7FF7241FB7AD	//0x7FF6F3ED099D	//0x7FF6E6A608BD	//00007FF757E0BBD3	//0x7FF68078BBD3	//0x7FF6D58191A3	//0x7FF669D15853	//0x7FF76067D803	//0x7FF797D7D803//	00007FF7F6689003//	0x7FF7935F9093//	00007FF6A77EB563	//0x7FF61CD9B583	//0x7FF63A843A73		//0x7FF69C2639F3	//	7FF6DF07A983//	7FF677300243////	//7FF7E2149CB3//	//7FF7E09CE933//	//7FF6C1B7E7E3//	//7FF65C817A13//	//7FF6E4AA1313//	//7FF67632CD63//	//7FF7295BAB83//	//7FF6261298E3//	//7FF671334BB3//	//7FF7EB670EB3//	//7FF7A25A3A13//	//7FF6BEE43AA3//	//7FF626EEE643//	//7FF6A9D70043//	//7FF759BFF693//	//7FF631C7F663//	//7FF781A12E33//	//7FF673EB22E5//	//7FF62B02B5F5//	//7FF6EE4AAD45//	//7FF6B3FAEE35//	//7FF6F08658E5//	//7FF61A5C5705//	//7FF758DD5505//	//7FF76E27BFC5//	//7FF7E32A3985//	//7FF61DE81BC5//	//7FF65FB4F535//	//7FF64B05F045//	//7FF73A60F045//	//7FF670674065//	//7FF6B4B092F5//	//7FF7838F43D5//	//7FF6EC247EB5//	//7FF6F4093E85//	//7FF7B5FD3B75//	//7FF69A7F3BA5//	//7FF73B3C0EC5//	//7FF74FF00475//	//7FF73BEF0475//	//7FF6FE61A2A5//	//7FF6D63BEAC5//	//7FF689C36305//	//7FF7CD46BB75//	//7FF7F69458F5//	//7FF727235525//	//7FF6053C2FF5//	//7FF749A20AF5//	//7FF6EFF9B3D5//	//7FF7A63707A5//	//7FF7EDEC07D5//	//7FF6BE6A0745//	//7FF6F391A3C5//	//7FF7A9A90753//	//7FF789D498E3//	//7FF738159893//	//7FF6AE286983//	//7FF655263693//	//7FF786BF3583//	//7FF6787D5FE3//	//7FF74A258663//	//7FF61D361E53//	//7FF7E7969D73//	//7FF625C912FD	////7FF652586A0A	////7FF6FF580A98	////7FF7B462659B	////7FF6F59565DB	////7FF69AACFC4B	////7FF6E8D2F62B	////7FF7B717EE6B	////7FF70DCE3F5A	////7FF6D77A3F7A
												//	//	//	//	/////				/////	//				///	//      //      //	              
#define OFFSET_WEAPON_SELECTID				0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C	//0x00000000097C//	0x00000000097C//	0x00000000097C//	0x00000000097C	//0x00000000097C	//0x00000000097C		//0x00000000097C		//0x00000000097C//	0x00000000097C//	0x00000000097C//	0x00000000097C//	0x00000000097C//	0x00000000097C//	0x000000000974//	0x000000000974//	0x000000000974//	0x000000000974//	0x000000000974//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008D4//	0x0000000008CC//	0x0000000008CC//	0x0000000008CC//	0x0000000008CC//	0x0000000008CC//	0x0000000008B4//	0x00000000079C//	0x00000000079C//	0x00000000079C//	0x00000000079C//	0x00000000079C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000077C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x00000000075C//	0x000000000754//	0x000000000754//	0x00000000071C//	0x00000000071C//	0x000000000714//	0x000000000714//	0x000000000714	//0x000000000714	//0x000000000714	//0x000000000714	//0x000000000714	//0x000000000714	//0x000000000714
//											0x7FF730B12FE8	//0x7FF6ACE4F8C8	//0x7FF791478848	//0x7FF70209E0D8	//0x7FF724FD73A8	//0x7FF6F4C96B98	//0x7FF6E7826AD8	//00007FF758BB4968	//0x7FF6815348F8	//0x7FF6D65BE668	//0x7FF66AA98238	//0x7FF7613FC578	//0x7FF798AFC548//	00007FF7F73C2728//	0x7FF794332778//	00007FF6A8519728	//0x7FF61DAC9828	//0x7FF63B58CA98		//0x7FF69CFACA08	//	7FF6DFDC19F8//	7FF677DBC0F8////	//7FF7E2B9F5A8//	//7FF7E143AC78//	//7FF6C25EAB48//	//7FF65D28AA98//	//7FF6E54D1788//	//7FF676D91B18//	//7FF72A01E948//	//7FF626B896D8//	//7FF671FB8088//	//7FF7EC307A28//	//7FF7A3231BF8//	//7FF6BFAD1C88//	//7FF627B75028//	//7FF6AA9DBBA8//	//7FF75A5FFB98//	//7FF63267F698//	//7FF782406528//	//7FF674899548//	//7FF62B9DDC78//	//7FF6EEE5D088//	//7FF6B4960908//	//7FF6F120F048//	//7FF61AF6EA38//	//7FF7599BC708//	//7FF76EE58D48//	//7FF7E3E888A8//	//7FF61EA66B68//	//7FF660733AF8//	//7FF64BC05418//	//7FF73B1B5408//	//7FF6711C7AA8//	//7FF6B566AA28//	//7FF78444B088//	//7FF6ECD7CDC8//	//7FF6F4BB9CC8//	//7FF7B6B021B8//	//7FF69B3221B8//	//7FF73BEAAF68//	//7FF7509CE468//	//7FF73C9BE468//	//7FF6FF0E2788//	//7FF6D6E685F8//	//7FF68A6B6248//	//7FF7CDEF3548//	//7FF7F7381F48//	//7FF727C714C8//	//7FF605DEC9B8//	//7FF74A440878//	//7FF6F07BBE38//	//7FF7A6B5C248//	//7FF7EE6AC198//	//7FF6BEE8C1C8//	//7FF6F4107CD8//	//7FF7AA229DA8//	//7FF78A4DBC98//	//7FF7388EBB68//	//7FF6AEC272D8//	//7FF655BF3488//	//7FF7875831C8//	//7FF6790E1568//	//7FF74AB150B8//	//7FF61DA74498//	//7FF7E8057708//	//7FF626372638	////7FF652DF0088	////7FF6FFD857E8	////7FF7B4E37A58	////7FF6F6167A08	////7FF69B2D2FE8	////7FF6E93AD5D8
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_WEAPONALLOPENED				0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2	//0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2	//0x0000000005F2	//0x0000000005F2		//0x0000000005F2		//0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005F2//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005EA//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005E2//	0x0000000005CA//	0x0000000005CA//	0x0000000005CA//	0x0000000005CA//	0x0000000005CA//	0x0000000005C2//	0x0000000005C2//	0x0000000005C2	//0x0000000005C2	//0x0000000005C2	//0x0000000005B2	//0x0000000005B2	//0x00000000059A	//0x00000000059A
//											0x7FF730641647	//0x7FF6AC97E277	//0x7FF790FA6EC7	//0x7FF701BCC287	//0x7FF724AF8997	//0x7FF6F47C6377	//0x7FF6E73562B7	//00007FF7586F7457	//0x7FF6810773E7	//0x7FF6D6100277	//0x7FF66A5EE037	//0x7FF760F5E1C7	//0x7FF79865E197//	00007FF7F6F3A137//	0x7FF793EAA1B7//	00007FF6A8092987	//0x7FF61D6429D7	//0x7FF63B0E43A7		//0x7FF69CB04317	//	7FF6DF9214E7//	7FF67793E5E7////	//7FF7E2748E17//	//7FF7E0FD64D7//	//7FF6C21863A7//	//7FF65CE23027//	//7FF6E50AF997//	//7FF6769274B7//	//7FF729BB4A77//	//7FF626720B27//	//7FF671B70CD7//	//7FF7EBEE4307//	//7FF7A2E067C7//	//7FF6BF6A6857//	//7FF6277568A7//	//7FF6AA5C7AD7//	//7FF75A1DAFE7//	//7FF63225ACE7//	//7FF781FE2EF7//	//7FF67447E4D7//	//7FF62B5EFF37//	//7FF6EEA6F4A7//	//7FF6B45423B7//	//7FF6F0DF4887//	//7FF61AB54277//	//7FF7595DE207//	//7FF76EA7D5E7//	//7FF7E3A66237//	//7FF61E643467//	//7FF66030D537//	//7FF64B820127//	//7FF73ADD0117//	//7FF670DF2F57//	//7FF6B5286777//	//7FF78406ABB7//	//7FF6EC9C9537//	//7FF6F47FCB87//	//7FF7B67438E7//	//7FF69AF63917//	//7FF73BAEDD17//	//7FF750617857//	//7FF73C607857//	//7FF6FED36B27//	//7FF6D6AF10F7//	//7FF68A349387//	//7FF7CDB360D7//	//7FF7F70081D7//	//7FF7278F7757//	//7FF605A82BF7//	//7FF74A0DBA37//	//7FF6F044DAE7//	//7FF7A67F15C7//	//7FF7EE341517//	//7FF6BEB21547//	//7FF6F3DA2DF7//	//7FF7A9F0FCF7//	//7FF78A1C2CB7//	//7FF7385D2C67//	//7FF6AE8FD937//	//7FF6558D3BB7//	//7FF787263947//	//7FF678DC3D37//	//7FF74A7F0DD7//	//7FF61D75E427//	//7FF7E7D251C7//	//7FF62604CE47	////7FF652AE74F7	////7FF6FFAA3217	////7FF7B4B45327	////7FF6F5E752D7	////7FF69AFE6797	////7FF6E90A0617
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_SENDRESETMOVEPACKETFUNC		0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20	//0x000000000B20	//0x000000000B20		//0x000000000B20		//0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20//	0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//0x000000000B20	//
//											0x7FF72FFF43E8	//0x7FF6AC332C38	//0x7FF790969548	//0x7FF701595E18	//0x7FF7244E17D8	//0x7FF6F41B12C8	//0x7FF6E6D411E8	//00007FF7580D3928	//0x7FF680A538B8	//0x7FF6D5ADF478	//0x7FF669FD6C18	//0x7FF76093E138	//0x7FF79803E138//	00007FF7F6944218//	0x7FF7938B42A8//	00007FF6A7AA4E18	//0x7FF61D054E68	//0x7FF63AAFAF08		//0x7FF69C51AE88	//	7FF6DF3475F8//	7FF677351B88////	//7FF7E2199D28//	//7FF7E0A1E468//	//7FF6C1BCE318//	//7FF65C867468//	//7FF6E4AF0C08//	//7FF67637C5B8//	//7FF72960A1D8//	//7FF6261791C8//	//7FF6715E8B38//	//7FF7EB9469C8//	//7FF7A28775A8//	//7FF6BF117638//	//7FF6271C1B68//	//7FF6AA03E878//	//7FF759C4F148//	//7FF631CCF118//	//7FF781A62658//	//7FF673F02268//	//7FF62B07A4F8//	//7FF6EE4F9C48//	//7FF6B3FFDF48//	//7FF6F08B5408//	//7FF61A615228//	//7FF75907A428//	//7FF76E51E8F8//	//7FF7E35402A8//	//7FF61E120078//	//7FF65FDED388//	//7FF64B2F5728//	//7FF73A8A5728//	//7FF670902028//	//7FF6B4D99C58//	//7FF783B837B8//	//7FF6EC4D4838//	//7FF6F431F2C8//	//7FF7B625BF18//	//7FF69AA7BF48//	//7FF73B63C968//	//7FF750173A78//	//7FF73C163A78//	//7FF6FE88CB28//	//7FF6D6636EC8//	//7FF689EA6618//	//7FF7CD6D7208//	//7FF7F6BACBF8//	//7FF72749C1C8//	//7FF6056289D8//	//7FF749C835D8//	//7FF6EFFE3938//	//7FF7A63A2328//	//7FF7EDEF2358//	//7FF6BE6D22C8//	//7FF6F394BC38//	//7FF7A9AC0D78//	//7FF789D7A0B8//	//7FF73818A068//	//7FF6AE4CEFF8//	//7FF6554AA0B8//	//7FF786E39FA8//	//7FF6789D2CF8//	//7FF74A448B58//	//7FF61D3AB248//	//7FF7E79B2B78//	//7FF625CD9748	////7FF65275E558	////7FF6FF743928	////7FF7B47DED98	////7FF6F5B0ED48	////7FF69AC83B28	//
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_GET_LHITEM_LIMITDATE			0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038	//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038		//0x000000000038		//0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038//	0x000000000038	//0x000000000038	//0x000000000038
//											0x7FF730761C2E	//0x7FF6ACA9E85E	//0x7FF7910C725E	//0x7FF701CEC4AE	//0x7FF724C2738E	//0x7FF6F48EBAEE	//0x7FF6E747BA2E	//00007FF75884810E	//0x7FF6811C809E	//0x7FF6D624C3BE	//0x7FF66A72A0EE	//0x7FF761053C1E	//0x7FF798753BEE//	00007FF7F7055D1E//	0x7FF793FC5D9E//	00007FF6A81AE09E	//0x7FF61D75E19E	//0x7FF63B20B88E		//0x7FF69CC2B7FE	//	7FF6DFA47ECE//	7FF677A7D0AE////	//7FF7E286DEDE//	//7FF7E111226E//	//7FF6C22C213E//	//7FF65CF6286E//	//7FF6E51A614E//	//7FF676A6A4DE//	//7FF729CF754E//	//7FF6268630AE//	//7FF671C8B6AE//	//7FF7EBFD968E//	//7FF7A2EF9ABE//	//7FF6BF799B4E//	//7FF62783E16E//	//7FF6AA6A867E//	//7FF75A2BDC0E//	//7FF63233D90E//	//7FF7820C585E//	//7FF67455FA5E//	//7FF62B6DDA0E//	//7FF6EEB5CE8E//	//7FF6B46740CE//	//7FF6F0F25B1E//	//7FF61AC8550E//	//7FF7596CD0CE//	//7FF76EB69EDE//	//7FF7E3B92F7E//	//7FF61E76D9DE//	//7FF6604376FE//	//7FF64B90D0EE//	//7FF73AEBD0DE//	//7FF670F1A2EE//	//7FF6B53ABE8E//	//7FF7841901EE//	//7FF6ECAB809E//	//7FF6F48FA5DE//	//7FF7B68427EE//	//7FF69B0627EE//	//7FF73BBECC3E//	//7FF75070BF6E//	//7FF73C6FBF6E//	//7FF6FEE20F8E//	//7FF6D6BF28DE//	//7FF68A44173E//	//7FF7CDC3AE7E//	//7FF7F7109CBE//	//7FF7279F923E//	//7FF605B7A14E//	//7FF74A1D164E//	//7FF6F054144E//	//7FF7A68E0D6E//	//7FF7EE430CBE//	//7FF6BEC10CEE//	//7FF6F3E96AEE//	//7FF7A9FF724E//	//7FF78A2A8C2E//	//7FF7386B8AFE//	//7FF6AE9E8FDE//	//7FF6559B87CE//	//7FF78734855E//	//7FF678EAA12E//	//7FF74A8DF13E//	//7FF61D8426FE//	//7FF7E7E11E7E//	//7FF62613981E	////7FF652BA2E7E	////7FF6FFB8B76E
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_AVATARINFO_SIZE				0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020	//0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020	//0x000000000020	//0x000000000020		//0x000000000020		//0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020//	0x000000000020	//0x000000000020
//											0x7FF72FA7A483	//0x7FF6ABDB9CE3	//0x7FF7903F7B83	//0x7FF701026573	//0x7FF723F72FA3	//0x7FF6F3C4E583	//0x7FF6E67DE513	//00007FF757B8A2A3	//0x7FF68050A2A3	//0x7FF6D5598483	//0x7FF669A9CFB3	//0x7FF760407213	//0x7FF797B07223//	00007FF7F6416B83//	0x7FF793386C13//	00007FF6A7580BA3	//0x7FF61CB30BC3	//0x7FF63A5D9A03		//0x7FF69BFF9983	//	7FF6DEE24393//	0x7FF676E14CF3//	//7FF7E1C70AA3//	//7FF7E04FC3F3//	//7FF6C16AC3C3//	//7FF65C34AB93//	//7FF6E45D8E93//	//7FF675E67DB3//	//7FF7290F7DA3//	//7FF625C67363//	//7FF6710D4423//	//7FF7EB410D53//	//7FF7A23696D3//	//7FF6BEC09763//	//7FF626CB85A3//	//7FF6A9B409F3//	//7FF75975E9A3//	//7FF6317DE9D3//	//7FF78157A373//	//7FF673A26C43//	//7FF62ABB0A63//	//7FF6EE030723//	//7FF6B3B37D83//	//7FF6F03F57B3//	//7FF61A155633//	//7FF758BD1A03//	//7FF76E07C7C3//	//7FF7E30A8603//	//7FF61DC88883//	//7FF65F957A03//	//7FF64AE71D53//	//7FF73A421D53//	//7FF67048DE63//	//7FF6B492B653//	//7FF7836F7F63//	//7FF6EC0550B3//	//7FF6F3EA41E5//	//7FF7B5DF2C45//	//7FF69A612C45//	//7FF73B1DD455//	//7FF74FD251A5//	//7FF73BD151A5//	//7FF6FE441215//	//7FF6D6215C35//	//7FF689A8FAF5//	//7FF7CD2C98C5//	//7FF7F67A5C95//	//7FF727095A15//	//7FF605225AC5//	//7FF7498839D5//	//7FF6EFBB84E5//	//7FF7A5F85CE5//	//7FF7EDAD5D45//	//7FF6BE2B5CB5//	//7FF6F3534075//	//7FF7A96C6FA5//	//7FF7899852E5//	//7FF737D952B5//	//7FF6AE0E0CB5//	//7FF6550BFC15//	//7FF786A4FBD5//	//7FF6786481E5//	//7FF74A0CD625//	//7FF61D039F35//	//7FF7E7659355//	//7FF625981DC5	////7FF652433BB5
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_WEAPONSHAPE_SIZE				0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018	//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018	//0x000000000018		//0x000000000018		//0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018//	0x000000000018	//0x000000000018
//											0x7FF72FA89797	//0x7FF6ABDC8FF7	//0x7FF790406E97	//0x7FF701035887	//0x7FF723F822B7	//0x7FF6F3C5DC87	//0x7FF6E67EDC17	//00007FF757B999E7	//0x7FF6805199E7	//0x7FF6D55A7BC7	//0x7FF669AAAFF7	//0x7FF760415257	//0x7FF797B15267//	00007FF7F6424BC7//	0x7FF793394C57//	00007FF6A758E0C7	//0x7FF61CB3E0E7	//0x7FF63A5E6F27		//0x7FF69C006EA7	//	7FF6DEE37B27//	0x7FF676E221E7//	//7FF7E1C7DE97//	//7FF7E0509527//	//7FF6C16B9547//	//7FF65C357BA7//	//7FF6E45E5A87//	//7FF675E74577//	//7FF729104507//	//7FF625C73987//	//7FF6710E04E7//	//7FF7EB41CE17//	//7FF7A23770A7//	//7FF6BEC17137//	//7FF626CC5F77//	//7FF6A9B4F397//	//7FF75976D3A7//	//7FF6317ED3D7//	//7FF781588B27//	//7FF673A350D7//	//7FF62ABBF057//	//7FF6EE03E867//	//7FF6B3B45F67//	//7FF6F0403997//	//7FF61A163817//	//7FF758BDF9F7//	//7FF76E08A467//	//7FF7E30BC377//	//7FF61DC9A467//	//7FF65F9695E7//	//7FF64AE83927//	//7FF73A433927//	//7FF67049E807//	//7FF6B493BCC7//	//7FF7837024B7//	//7FF6EC05F527//	//7FF6F3EAE5F7//	//7FF7B5DFCEA7//	//7FF69A61CEA7//	//7FF73B1E76B7//	//7FF74FD2DE27//	//7FF73BD1DE27//	//7FF6FE449E97//	//7FF6D6225997//	//7FF689A9F857//	//7FF7CD2D89B7//	//7FF7F67B4D77//	//7FF7270A4AB7//	//7FF605234E17//	//7FF749892CD7//	//7FF6EFBC0577//	//7FF7A5F8DD77//	//7FF7EDADDDD7//	//7FF6BE2BDD47//	//7FF6F353C107//	//7FF7A96CEFB7//	//7FF78998D2D7//	//7FF737D9D2A7//	//7FF6AE0E8CA7//	//7FF6550C7BC7//	//7FF786A57B87//	//7FF67864FD17//	//7FF74A0D4DB7//	//7FF61D042417//	//7FF7E7661C17//	//7FF62598A687	////7FF652441ED7
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_GRAPHIC_SETFRAME				0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8	//0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8	//0x0000000002A8	//0x0000000002A8		//0x0000000002A8		//0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//	0x0000000002A8//
//											0x7FF730A7EF11	//0x7FF6ACDBB8B1	//0x7FF7913E4F91	//0x7FF70200A8D1	//0x7FF724F442E1	//0x7FF6F4C04611	//0x7FF6E7794551	//00007FF758B22841	//0x7FF6814A27D1	//0x7FF6D652C9F1	//0x7FF66AA06B81	//0x7FF76136C761	//0x7FF798A6C731//	00007FF7F731D4B1//	0x7FF79428D501//	00007FF6A8476581	//0x7FF61DA26681	//0x7FF63B4FB861		//0x7FF69CF1B7D1	//	7FF6DFD30AB1//	7FF677D2BB51////	//7FF7E2AF9EF1//	//7FF7E13AA581//	//7FF6C255A451//	//7FF65D1FA351//	//7FF6E547AE81//	//7FF676D014C1//	//7FF729F8E331//	//7FF626AF92D1//	//7FF671F15FB1//	//7FF7EC2659F1//	//7FF7A318DF01//	//7FF6BFA2DF91//	//7FF627AD13C1//	//7FF6AA938BE1//	//7FF75A54E0A1//	//7FF6325CDBA1//	//7FF782354BB1//	//7FF6747F8D91//	//7FF62B989621//	//7FF6EEE08A41//	//7FF6B48B9981//	//7FF6F1169101//	//7FF61AEC8AF1//	//7FF759919CE1//	//7FF76EDB4041//	//7FF7E3DF42B1//	//7FF61E9C6861//	//7FF6606A1101//	//7FF64BB6AA21//	//7FF73B11AA11//	//7FF671174FA1//	//7FF6B55C1D71//	//7FF7843A25D1//	//7FF6ECD2AA91//	//7FF6F4B68D91//	//7FF7B6A4F3A1//	//7FF69B26F3A1//	//7FF73BE58611//	//7FF750924371//	//7FF73C914371//	//7FF6FF0381A1//	//7FF6D6E16551//	//7FF68A6641E1//	//7FF7CDE5EFB1//	//7FF7F73302B1//	//7FF727C1F831//	//7FF605D9B481//	//7FF74A3EF3A1//	//7FF6F071FA01//	//7FF7A6AB0B21//	//7FF7EE600A71//	//7FF6BEDE0AA1//	//7FF6F406A131//	//7FF7AA1D8B91//	//7FF78A489D81//	//7FF738899C51//	//7FF6AEBD1DA1//	//7FF655B9E931//	//7FF78752E671//	//7FF67908CC11//	//7FF74AABF6E1//
												//	////	//	/////				/////	//				///	//      //      //	              
#define OFFSET_CHARACTERLIST				0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8	//0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8	//0x0000000001F8	//0x0000000001F8		//0x0000000001F8		//0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//	0x0000000001F0//
#define OFFSET_CHARACTERCOUNT				0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200	//0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200	//0x000000000200	//0x000000000200		//0x000000000200		//0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x000000000200//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//	0x0000000001F8//
//											0x7FF730181E3C	//0x7FF6AC4C055C	//0x7FF790AF55FC	//0x7FF701721A1C	//0x7FF72467781C	//0x7FF6F4343E7C	//0x7FF6E6ED3DBC	//00007FF75828262C	//0x7FF680C025BC	//0x7FF6D5C8DFCC	//0x7FF66A184B2C	//0x7FF760AAC5ED	//0x7FF7981AC5ED//	00007FF7F6AB1E3D//	0x7FF793A21EBD//	00007FF6A7C0E69D	//0x7FF61D1BE6ED	//0x7FF63AC6167D		//0x7FF69C6815ED	//	7FF6DF4E11DC//	7FF6774CAC4C////	//7FF7E230ADFC//	//7FF7E0B4E3AD//	//7FF6C1CFE25D//	//7FF65C99F2FC//	//7FF6E4C288FC//	//7FF6764B3F0C//	//7FF729741ACE//	//7FF6262AF9DE//	//7FF671733CFE//	//7FF7EBA9FC5E//	//7FF7A29CD86E//	//7FF6BF26D8FE//	//7FF627317ACE//	//7FF6AA192CBE//	//7FF759D8ABEE//	//7FF631E0A94E//	//7FF781B9C73E//	//7FF67403C1FE//	//7FF62B1B438E//	//7FF6EE633A1E//	//7FF6B413D4FE//	//7FF6F09F319E//	//7FF61A752B8E//	//7FF7591DB65E//	//7FF76E67DDAE//	//7FF7E365D4CE//	//7FF61E23D02E//	//7FF65FF09F8E//	//7FF64B423B7E//	//7FF73A9D3B7E//	//7FF670A3110E//	//7FF6B4EC7EFE//	//7FF783CACEFE//	//7FF6EC603BAE//	//7FF6F444D0EE//	//7FF7B6387A2E//	//7FF69ABA7A5E//	//7FF73B77278E//	//7FF7502A9E9E//	//7FF73C299E9E//	//7FF6FE9C184E//	//7FF6D676374E//	//7FF689FD2CBE//	//7FF7CD8022FE//	//7FF7F6CD839E//	//7FF7275C794E//	//7FF60574FB9E//	//7FF749DADF1E//	//7FF6F00EAD8E//	//7FF7A64C38EE//	//7FF7EE01391E//	//7FF6BE7F388E//	//7FF6F3A6CE1E//
												//	////	//	/////				/////	//				///	//      //      //	              
#define Offset_OdinPass_RewardCount			0x000000000480	//0x000000000480	//0x000000000480	//0x000000000480	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478	//0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478	//0x000000000478	//0x000000000478		//0x000000000478		//0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000478//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//	0x000000000470//
#define Offset_LHButton_GetEnableState		0x000000000500	//0x000000000480	//0x000000000500	//0x000000000500	//0x000000000500	///0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500	//0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500	//0x000000000500	//0x000000000500		//0x000000000500		//0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x000000000500//	0x0000000004A8//	0x0000000004A0//	0x0000000004A0//
//											0x7FF73013D858	//0x7FF6AC47C018	//0x7FF790AB10A8	//0x7FF7016DCFE8	//0x7FF7245F2BF6	//0x7FF6F42C00F6	//0x7FF6E6E50036	//00007FF7581FD8D6	//0x7FF680B7D866	//0x7FF6D5C092B6	//0x7FF66A101036	//0x7FF760A685A6	//0x7FF7981685A6//	00007FF7F6A6DFA6//	0x7FF7939DE026//	00007FF6A7BCB706	//0x7FF61D17B756	//0x7FF63AC1E6E6		//0x7FF69C63E656	//	7FF6DF457826//	7FF677488188////	//7FF7E2287656//	//7FF7E0B0F5D6//	//7FF6C1CBF486//	//7FF65C95C816//	//7FF6E4BE5E16//	//7FF6764715C6//	//7FF7296FF0F6//	//7FF62626D006//	//7FF6716B1DB6//	//7FF7EBA19C76//	//7FF7A29487F6//	//7FF6BF1E8886//	//7FF627292AC6//	//7FF6AA10E516//	//7FF759D44AF6//	//7FF631DC4906//	//7FF781B56AA6//	//7FF673FF6636//	//7FF62B16E7C6//	//7FF6EE5EDE56//	//7FF6B40FB8B8//	//7FF6F09B1938//	//7FF61A711328//	//7FF759156B16//	//7FF76E5F99C6//	//7FF7E361BF86//	//7FF61E1FBAE6//	//7FF65FEC8A46//	//7FF64B3E1B96//	//7FF73A991B96//	//7FF6709EF386//	//7FF6B4E862A6//	//7FF783C6D136//	//7FF6EC5BF0C6//	//7FF6F4409826//	//7FF7B6345496//	//7FF69AB654C6//	//7FF73B6F1006//	//7FF750227746//	//7FF73C217746//	//7FF6FE93F726//	//7FF6D67229D8//	//7FF689F91FF8//	//7FF7CD7817B6//


///////////////////////////////////////////// KaKaoGame.dll /////////////////////////////////////////////
//											[2024-08-28]	[2024-07-17]		[2024-06-26]		[2024-01-31]		[2023-07-12]		[2023-03-15]		[2022-10-26]		[2022-07-13]		[2022-06-15]		[2022-04-13]

#define Addr_KaKaoGame_Dll_Base				0x7FFFE8970000	//0x7FFD611C0000	//0x7FFDD1D50000	//0x7FFFCD460000	//0x7FFAE7CC0000	//0x7FF8721B0000	//0x7FF892790000	//0x7FFBC1F10000	//0x7FFF88650000	//0x7FFA35420000
#define Addr_KaKaoGame_Dll_Promotion		0x7FFFE8CF2010	//0x7FFD6153EA90	//0x7FFDD20CE180	//0x7FFFCD7AFF30	//0x7FFAE8022950	//0x7FF8724D4CA0	//0x7FF892AADB70	//0x7FFBC2221B80	//0x7FFF88965EE0	//0x7FFA35715A10
#define Addr_KaKaoGame_Dll_PromotionThread	0x7FFFE90F9504	//0x7FFD61945A14	//0x7FFDD24D6EE4	//0x7FFFCDBAC704	//0x7FFAE8427AC4	//0x7FF87289EDA4	//0x7FF892E72E84	//0x7FFBC25E8778	//0x7FFF88D28B38	//0x7FFA35AD4538

/////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////// ROM Mobile로부터 추가된 주소들 ////////////////////////////////////////
//

#define ADDR_BASEADDR						0x7FF8174B0000

// Metadata Decrypt Hook 관련 ADDR
#define Addr_DecGlobalMetaData				0x7FF8179E5440

// Address InitGlobal 관련 ADDR
#define Addr_InitGlobal						0x7FF8179E6EB0

// CountryCode Hook 관련 ADDR
#define Addr_COption_TypeInfo				0x7FF81EAF4238
#define Addr_GetCountryCode					0x7FF81A09E420
#define Addr_GetAppIdTypeToAppIdConvter		0x7FF8193DD1A0
//#define Addr_AppID_kr						0x72
//#define Addr_AppID_jp						0x73
//#define Addr_AppID_us						0x74
//#define Addr_AppID_tw						0x75
#define Addr_Country_kr						0x76
#define Addr_Country_jp						0x77
#define Addr_Country_us						0x78
#define Addr_Country_tw						0x79


#define Offset_TypeInfo_Instance			0x00000000B8
#define Offset_COption_LastConnectAppID		0x0000000038
#define Offset_CountryCode					0x0000000060

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define SCENE_NONE				0
#define SCENE_LOGIN				1
#define SCENE_CHARSELECT		2
#define SCENE_CHARCREATE		3
#define SCENE_INGAME			4
#define SCENE_PROLOGUE			5
#define SCENE_REALMWAR			6

#define STATUS_NONE				0
#define STATUS_LOGIN			1
#define STATUS_CHARSELECT		2
#define STATUS_CHARCREATE		3
#define STATUS_PROLOGUE			4
#define STATUS_DOAUTO			5
#define STATUS_AVATAR			6
#define STATUS_VEHICLE			7
#define STATUS_RECOVEREXP		8
#define STATUS_EXPENDSHOP		9
#define STATUS_EXCHANGESHOP		10
#define STATUS_INVENPROC		11
#define STATUS_SKILLPROC		12
#define STATUS_STOREEQUIPS		13
#define STATUS_GETEQUIPS		14
#define STATUS_CHARLOGOUT		15
#define STATUS_CHARDEAD			16
#define STATUS_RETURNVILLAGE	17
#define STATUS_USEITEM			18
#define STATUS_ACHIEVEMENT		19
#define STATUS_MAIL				20
#define STATUS_EVENT			21
#define STATUS_CASHSHOP			22
#define STATUS_ENCHANTEQUIP		23
#define STATUS_VILLAGEQUEST		24
#define STATUS_SKILLSLOT		25
#define STATUS_TRADE			26
#define STATUS_COLLECTION		27
#define STATUS_GUILD			28
#define STATUS_REALMWAR			29
#define STATUS_PARTYDUNGEON		30
#define STATUS_FORCERETURN		31
#define STATUS_ODINPASS			32
#define STATUS_MATCHREALMWAR	33
#define STATUS_MATCHBIGSNAKE	34
#define STATUS_WORLDBOSS		35
#define STATUS_TREASUREBOX		36
#define STATUS_ATTACKCHAO		37
#define STATUS_ITEMENCHANT		38
#define STATUS_BIGPOTION		39
#define STATUS_WEAPONSHAPE		40
#define STATUS_SUBQUEST			41
#define STATUS_WEAPONTREASURE	42
#define STATUS_EVENTBUFF		43

#define STATUS_RECORDBOSS		48
#define STATUS_QUESTPOTION		49
#define STATUS_WAITDELAY		50

#define	WND_GAMENAME			L"ROM: Golden Age"
#define	WNDCLASS_GAMENAME		L"UnityWndClass"

#define AUTO_NONE				0
#define AUTO_HUNTING			1
#define AUTO_QUESTING			2
#define AUTO_TASK				3
#define AUTO_FOLLOW				4
#define AUTO_PARTYDUNGEON		5

#define QUEST_NONE				0
#define QUEST_ACCEPTABLE		1
#define QUEST_DOING				2
#define QUEST_COMPLETE			3

#define MAX_BUFF				20
#define MAX_PLAYER				200
#define MAX_NPC					50
#define MAX_MONSTER				500
#define MAX_GATHER				200
#define MAX_QUEST				50
#define MAX_VILLAGEQUEST		10
#define MAX_INVEN				300
#define MAX_EQUIP				20
#define MAX_ITEMSLOT			20
#define	MAX_SKILLSLOT			20
#define MAX_AVATAR				150
#define MAX_VEHICLE				100
#define MAX_NPCSLOT				20
#define MAX_BUYLIST				50
#define MAX_SKILL				50
#define MAX_PARTY				5
#define MAX_STORE				100
#define MAX_COLLECTION			10
#define MAX_TRADE				30
#define MAX_CHAO				50
#define MAX_WEAPON				150
#define MAX_TRADEDISSOLVE		50

#define MapType_None			0
#define MapType_Dungeon			1
#define MapType_Village			2
#define MapType_Field			4
#define MapType_FieldDungeon	5

#define GatherType_None			0
#define GatherType_Stone		1
#define GatherType_Wood			2
#define GatherType_Grass		3
#define GatherType_Treasure		4
#define GatherType_Quest		5
#define GatherType_Event		6

#define LogType_None			0
#define LogType_ChangeSchedule	1
#define LogType_FinishSchedule	2
#define LogType_ChangeAutoState	3

#define MAX_BREAK				1

#define BREAK_TEST0				0
#define BREAK_TEST1				1
#define BREAK_TEST2				2
#define BREAK_TEST3				3
#define BREAK_TEST4				4
#define BREAK_TEST5				5

typedef struct _CHARINFO_
{
	DWORD64		qwCharAddr;
	WCHAR		szName[MAX_NAME];
	WCHAR		szServer[MAX_NAME];
	WCHAR		szGuild[MAX_NAME];

	int			nCurHp;
	int			nMaxHp;
	int			nCurMp;
	int			nMaxMp;

	WCHAR		szWorld[MAX_NAME];
	WCHAR		szRegion[MAX_NAME];
	WCHAR		szPKType[MAX_NAME];

	int			nMapType;						// 1 - 던전, 2 - 마을, 4 - 필드
	DWORD		dwMapID;
	FTransform	CurTransform;

	int			nPlayerIndex;
	int			nObjType;
	int			nClassType;

	int			nLevel;
	DWORD		dwExp;

	int			nPower;							// 전투력
	int			nPotionLimit;					// 물약 개수

	INT64		nGoods[6];						// 골드, 다이아, 마일리지, 길드 주화, 전투의 증표, 훈장

	DWORD		dwAvatarID;
	DWORD		dwRidingID;
	DWORD		dwFlyingID;
	DWORD		dwWeaponShapeID;

	BYTE		nAutoState;						// 0 - AUTO_NONE, 1 - AUTO_HUNTING, 2 - AUTO_QUESTING // FProjectLH_ProjectLH_EAutoPlayMode

	FCommonSource_CommonSource_EMapType		nMapState;
	FProjectLH_ProjectLH_ECharacterState	nPlayerState;
	FProjectLH_ProjectLH_EAutoMove			nMoveState;
	AProjectLH_LHCharacter* pManualTarget;		// 수동 선택된 대상
	AProjectLH_LHCharacter* pAutoTarget;		// 자동 선택된 대상
	AProjectLH_LHCharacter* pInterationTarget;	// 상호작용 대상 (Npc나 채집물)
	AProjectLH_LHCharacter* pBossSelectedTargetPtr;
}CHARINFO;

typedef struct _PLAYERINFO_
{
	DWORD64		qwPlayerAddr;
	DWORD64		qwPlayerID;
	WCHAR		szName[MAX_NAME];
	WCHAR		szGuild[MAX_NAME];
	int			nCurHp;
	int			nLevel;
	FVector		CurPos;
	int			nObjType;
	int			nClassType;
	DWORD		dwObjectSerial;
	DWORD64		qwPartyInviteTick;

	AProjectLH_LHCharacter* qwTargetAddr;
}PLAYERINFO;

typedef struct _BUFFINFO_
{
	WCHAR		szName[MAX_NAME];
	DWORD64		dwBuffID;
	UCommonSource_BuffInfoRecord* qwBuffInfo;
}BUFFINFO;

typedef struct _NPCINFO_
{
	WCHAR		szJob[MAX_NAME];
	WCHAR		szName[MAX_NAME];
	FVector		CurPos;
}NPCINFO;

typedef struct _MONSTERINFO_
{
	DWORD64		qwMonsterAddr;
	DWORD64		qwMonsterID;
	WCHAR		szName[MAX_NAME];
	int			nCurHp;
	int			nLevel;
	DWORD		dwObjectSerial;
	FTransform	CurTransform;
	AProjectLH_LHCharacter* qwTargetAddr;
}MONSTERINFO;

typedef struct _GATHERINFO_
{
	FVector		CurPos;
	BYTE		nType;
}GATHERINFO;

typedef struct _QUESTINFO_
{
	WCHAR		szName[MAX_NAME];
	WCHAR		szDesc[MAX_NAME];
	DWORD		dwQuestID;
	int			nQuestState;		// 2 - 진행중, 3 - 완료(보상못받음)
	int			nCurCount;			// 현재 몹 개수

	UProjectLH_LHWidget_InGame_Quest_Container* QuestContainer;
}QUESTINFO;

typedef struct _QUESTWINDOW_
{
	WCHAR		szName[MAX_NAME];
	DWORD		dwQuestID;
	int			nQuestState;		// 2 - 진행중, 3 - 완료(보상못받음)

	UProjectLH_LHWidget_QuestListInfo_Container* QuestContainer;
}QUESTWINDOW;

typedef struct _INVENINFO_
{
	WCHAR		szName[MAX_NAME];
	WCHAR		szOrgName[MAX_NAME];
	DWORD64		qwItemAddr;
	DWORD64		qwItemUID;
	DWORD		dwItemBranch;		// 0 - 인벤, 1 - 창고

	int			nCount;
	int			nEnchant;
	CHAR		nBelongType;		// 귀속, 비귀속
	CHAR		bLocked;
	int			nNeedLevel;
	CHAR		bEquiped;			// 다른 프리셋 장착?
	CHAR		bLimitDate;			// 삭제 날자 있는가?

	int			nItemType;
	int			nSegongCount;		// 세공 옵션 개수

	UCommonSource_ItemInfoRecord* DetailInfo;
}INVENINFO;

typedef struct _VILLAGEQUEST_
{
	WCHAR		szName[MAX_NAME];
	int			nRewardCount;
	INVENINFO	dwRewardItem[5];
	UProjectLH_LHWidget_RepeatQuest_Container* qwQuestContainer;
}VILLAGEQUEST;

typedef struct _EQUIPINFO_
{
	WCHAR		szName[MAX_NAME];
	int			nSlot;
	int			nGrade;
	int			nEnchant;
	int			nDestroyType;
	BYTE		bLock;
	int			nSegongCount;
	DWORD64		qwItemAddr;
	DWORD64		qwItemUID;

	UCommonSource_ItemInfoRecord* DetailInfo;
}EQUIPINFO;

typedef struct _SKILLDETAIL_
{
	WCHAR		szName[MAX_NAME];
	DWORD		dwPrevSkillID;
	UCommonSource_PlayerSkillRecord* SkillRecord;
}SKILLDETAIL;

typedef struct _SKILLINFO_
{
	DWORD		dwSkillID;
	SKILLDETAIL	dwDetailInfo;
	int			nSkillLevel;
	UProjectLH_LHWidget_SkillListCell* ListCell;
}SKILLINFO;

typedef struct _ITEMSLOTINFO_
{
	WORD		nSlotIndex;
	INVENINFO	dwItem;
	UProjectLH_LHWidget_QuickSlot_Common* quickSlotCommon;
	DWORD64		qwItemSlotInfo;
	BYTE		bIsAuto;
}ITEMSLOTINFO;

typedef struct _SKILLSLOTINFO_
{
	DWORD		dwSkillID;
	CHAR		bAutoState;
	DWORD64		qwSkillInfo;
	SKILLDETAIL	dwDetailInfo;
}SKILLSLOTINFO;

typedef struct _AVATARINFO_
{
	WCHAR* szName;
	DWORD		dwID;
	int			nCount;
	int			nGrade;
	int			nClass;
}AVATARINFO;

typedef struct _VEHICLEINFO_
{
	WCHAR* szName;
	DWORD		dwID;
	int			nCount;
	int			nGrade;
	BYTE		bIsFly;
}VEHICLEINFO;

typedef struct _WEAPONINFO_
{
	WCHAR* szName;
	DWORD		dwID;
	int			nCount;
	int			nGrade;
	int			nClass;
}WEAPONINFO;

typedef struct _SELLLIST_
{
	UProjectLH_LHWidget_InventoryItem_Container* ItemContainer;
	INVENINFO	dwItemInfo;
	BYTE		bSelected;
}SELLLIST;

typedef struct _BUYLIST_
{
	UProjectLH_LHWidget_Product_Container* ProductContainer;
	FString* szName;
	int			nLimitMaxCount;
	int			nLimitBuyCount;
	int			nCount;
	int			nPrice;
	CHAR		nPriceType;
}BUYLIST;

typedef struct _NPCSLOTINFO_
{
	WCHAR		szName[MAX_NAME];
	UProjectLH_LHWidget_QuickSlot_Npc* slot;
}NPCSLOTINFO;

typedef struct _CLASSNAME_
{
	int		nClassType;
	WCHAR	szName[MAX_NAME];
	BYTE	bFarClass;			// 근거리, 원거리
}CLASS_NAME;

typedef struct _DUNGEON_RES_
{
	WCHAR	szDungeon[MAX_NAME];
	WCHAR	szRegion[MAX_NAME];

	int		nNeedLevel;
	int		nNeedPower;
	int		nNeedQuest;
	int		nNeedGold;

	DWORD	dwDungeonID;
	int		nRemainTime;
	BYTE	bAloneDungeon;
}DUNGEON_RES;

typedef struct _CASHITEM_
{
	WCHAR	szName[MAX_NAME];
	int		nNeedLevel;
	int		nNeedGold;
	int		nRemainCount;
	int		nLimitCount;
	BYTE	nMainTab;
	BYTE	nSubTab;
	int		nNeedQuest;
}CASHITEM;

typedef struct _PARTYINFO_
{
	DWORD64		qwSlotAddr;
	WCHAR		szName[MAX_NAME];
	BYTE		bMaster;
	WORD		nLevel;
	BYTE		bReady;
	BYTE		bDead;
	DWORD		dwObjectSerial;
}PARTYINFO;

typedef struct _WORLDMAP_INFO_
{
	WCHAR	szName[MAX_NAME];
	DWORD	dwId;
}WORLDMAP_INFO;

typedef struct _TRADE_ITEM_
{
	INVENINFO	dwItem;
	BYTE		bState;
	int			nPrice;
	int			nCount;
	int			nEnchant;
	UProjectLH_LHWidget_ExchangeList_Container* pContainer;
}TRADE_ITEM;

typedef struct _TRADE_CHECK_
{
	WORD		nCount;
	WCHAR		szName[MAX_NAME];
}TRADE_CHECK;

typedef struct _TRADE_DISSOLVE_
{
	WCHAR		szName[MAX_NAME];
}TRADE_DISSOLVE;

WORLDMAP_INFO g_pWorldMap[MAX_WORLD] =
{
	{L"미드가르드", 0x65},
	{L"요툰하임", 0xC9},
	{L"니다벨리르", 0x12D},
	{L"알브하임", 0x191},
	{L"무스펠하임", 0x1F5},
	{L"아스가르드", 0x259},
	{L"니플하임", 0x2BD},
};

#define MAX_CLASS		19
CLASS_NAME g_pClassName[MAX_CLASS] =
{
	{11, L"워리어", 0},
	{12, L"디펜더", 0},
	{13, L"버서커", 0},
	{14, L"썬더 브링어", 0},

	{21, L"소서리스", 1},
	{22, L"아크 메이지", 1},
	{23, L"다크 위저드", 1},
	{24, L"인챈트리스", 1},

	{31, L"로그", 1},
	{32, L"스나이퍼", 1},
	{33, L"어쌔신", 0},
	{34, L"헌트리스", 1},

	{41, L"프리스트", 1},
	{42, L"세인트", 1},
	{43, L"팔라딘", 0},
	{44, L"바드", 1},

	{51, L"실드 메이든", 0},
	{52, L"발키리", 0},
	{53, L"액슬러", 1},
};


DUNGEON_RES g_pDungeonRes[MAX_DUNGEON] =
{
	{L"공허의 유적",				L"1단계 - 균열의 입구",				25,	0,		1202,	1500,	11001,	-1,		1},
	{L"공허의 유적",				L"2단계 - 악취 나는 통로",				35,	11000,	1202,	1500,	11001,	-1,		1},
	{L"공허의 유적",				L"3단계 - 혼돈의 동굴",				48,	15000,	1202,	1500,	11001,	-1,		1},
	{L"공허의 유적",				L"4단계 - 공포의 내리막",				56,	20000,	1202,	1500,	11001,	-1,		1},
	{L"공허의 유적",				L"5단계 - 분쟁의 신전",				64,	23000,	1202,	1500,	11001,	-1,		1},

	{L"난쟁이 비밀 통로",			L"1단계 - 저주받은 길",				26,	0,		1304,	3000,	12001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"2단계 - 속삭이는 길",				36,	11000,	1304,	3000,	12001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"3단계 - 얼어붙은 길",				49,	15000,	1304,	3000,	12001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"4단계 - 상처입은 길",				57,	20000,	1304,	3000,	12001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"5단계 - 울부짖는 길",				65,	23000,	1304,	3000,	12001,	-1,		1},

	{L"지하감옥",					L"지하 1층 - 교만의 감옥",				0,	9000,	1601,	0,		10001,	-1,		1},
	{L"지하감옥",					L"지하 2층 - 탐욕의 묘지",				0,	10000,	1601,	5000,	10001,	-1,		1},
	{L"지하감옥",					L"지하 3층 - 질투의 고문소",			0,	12000,	1601,	10000,	10001,	-1,		1},
	{L"지하감옥",					L"지하 4층 - 분노의 처형터",			0,	14000,	1601,	15000,	10001,	-1,		1},
	{L"지하감옥",					L"지하 5층 - 음욕의 나락",				0,	16000,	1601,	20000,	10001,	-1,		1},
	{L"지하감옥",					L"지하 6층 - 식탐의 방",				0,	18000,	1601,	25000,	10001,	-1,		1},
	{L"지하감옥",					L"지하 7층 - 나태의 지옥",				0,	20000,	1601,	30000,	10001,	-1,		1},

	{L"맹독의 뱀 둥지",			L"맹독의 뱀 둥지",					0,	0,		1220,	0,		102,	-1,		0},
	{L"잊혀진 거인의 동굴",		L"잊혀진 거인의 동굴",					0,	10000,	2215,	0,		202,	-1,		0},
	{L"난쟁이 왕가의 무덤",		L"난쟁이 왕가의 무덤",					0,	10000,	3211,	0,		302,	-1,		0},
	{L"망자의 선착장",			L"망자의 선착장",						0,	10000,	4211,	0,		402,	-1,		0},

	{L"그림자 성채",				L"1단계 - 그림자 누벽",				0,	20000,	1202,	50000,	1,		1,		1},
	{L"그림자 성채",				L"2단계 - 그림자 망대",				0,	23000,	1202,	50000,	2,		2,		1},
	{L"그림자 성채",				L"3단계 - 그림자 흉벽",				0,	28000,	1202,	50000,	3,		3,		1},

	{L"지하감옥",					L"최하층 - 혼돈의 전당 (월드)",		0,	30000,	1601,	50000,	10001,	-1,		1},

	{L"공허의 유적",				L"6단계 - 광기의 균열",				70,	26800,	1202,	1500,	11001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"6단계 - 불타버린 길",				71,	26800,	1304,	3000,	12001,	-1,		1},

	{L"지하감옥",					L"지하 8층 - 죄악의 심연",				0,	30000,	1601,	35000,	10001,	-1,		1},

	{L"그림자 성채",				L"4단계 - 그림자 회랑",				0,	33000,	1202,	50000,	4,		4,		1},
	{L"그림자 성채",				L"5단계 - 그림자 보루",				0,	40000,	1202,	50000,	5,		5,		1},
	{L"그림자 성채",				L"6단계 - 그림자 누각",				0,	47000,	1202,	50000,	6,		6,		1},

	{L"공허의 유적",				L"7단계 - 체념의 공터",				75,	40000,	1202,	1500,	11001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"7단계 - 숭배하는 길",				76,	41000,	1304,	3000,	12001,	-1,		1},

	{L"그림자 성채",				L"7단계 - 그림자 전당",				0,	54000,	1202,	50000,	7,		7,		1},
	{L"그림자 성채",				L"8단계 - 그림자 요새",				0,	54000,	1202,	50000,	8,		8,		1},

	{L"공허의 유적",				L"8단계 - 탄식의 폐허",				80,	40000,	1202,	1500,	11001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"8단계 - 굶주리는 길",				81,	41000,	1304,	3000,	12001,	-1,		1},
	{L"지하감옥",					L"지하 9층 - 잔혹의 형벌장",			0,	38000,	1601,	35000,	10001,	-1,		1},
	
	{L"공허의 유적",				L"9단계 - 고요의 나락",				85,	60000,	1202,	1500,	11001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"9단계 - 으스스한 길",				86,	61000,	1304,	3000,	12001,	-1,		1},
	{L"공허의 유적",				L"10단계 - 심연의 길목",				88,	70000,	1202,	1500,	11001,	-1,		1},
	{L"난쟁이 비밀 통로",			L"10단계 - 어리석은 길",				89,	71000,	1304,	3000,	12001,	-1,		1},


	// ------------ 이벤트 던전 ------------ //

	{L"달빛 연회의 섬",			L"1단계 - 흥겨움 가득 해안가",			25,	9000,	1202,	0,		54001,	-1,		1},
	{L"달빛 연회의 섬",			L"2단계 - 달빛의 연회",				48,	16000,	1202,	0,		54001,	-1,		1},
	{L"달빛 연회의 섬",			L"3단계 - 연회의 바닷가",				58,	23000,	1202,	0,		54001,	-1,		1},
	{L"달빛 연회의 섬",			L"4단계 - 연회의 섬",					68,	28500,	1202,	0,		54001,	-1,		1},
	{L"달빛 연회의 섬",			L"5단계 - 한밤의 연회",				78,	37500,	1202,	0,		54001,	-1,		1},



	// 	{L"달보드레 정원",		L"1단계 - 봄맞이 들판",			25,	9000,	1202,	0,		51201,	-1,		1 },
	// 	{L"달보드레 정원",		L"2단계 - 벚나무 언덕",			48,	16000,	1202,	0,		51201,	-1,		1 },
	// 	{L"달보드레 정원",		L"3단계 - 봄바람 정원",			58,	23000,	1202,	0,		51201,	-1,		1 },
	// 	{L"달보드레 정원",		L"4단계 - 꽃 길 산책로",			68,	28500,	1202,	0,		51201,	-1,		1 },
	// 	{L"달보드레 정원",		L"5단계 - 벚꽃이 춤추는 언덕",		78,	37500,	1202,	0,		51201,	-1,		1 },

	// 	{L"가을걷이 대축제",		L"1단계 - 감나무 들녘",			0,	0,		1202,	0,		53001,	-1,		1 },
	// 	{L"가을걷이 대축제",		L"2단계 - 노을지는 언덕",			48,	16000,	1202,	0,		53001,	-1,		1 },
	// 	{L"가을걷이 대축제",		L"3단계 - 벼익는 전원",			58,	23000,	1202,	0,		53001,	-1,		1 },
	// 	{L"가을걷이 대축제",		L"4단계 - 금결의 들판",			68,	28500,	1202,	0,		53001,	-1,		1 },
	// 	{L"가을걷이 대축제",		L"5단계 - 풍요의 평야",			78,	37500,	1202,	0,		53001,	-1,		1 },

	// 	{L"새해복 정원",			L"1단계 - 까치가 지저귀는 눈밭",	25,	9000,	1202,	0,		50901,	-1,		1},
	// 	{L"새해복 정원",			L"2단계 - 소망의 해돋이 들판",		48,	16000,	1202,	0,		50901,	-1,		1},
	// 	{L"새해복 정원",			L"3단계 - 고요한 아침의 팔각정",	58,	23000,	1202,	0,		50901,	-1,		1},
	// 	{L"새해복 정원",			L"4단계 - 즐거운 연 놀이 축제",	68,	28500,	1202,	0,		50901,	-1,		1},
	// 	{L"새해복 정원",			L"4단계 - 용들이 춤추는 설원",		78,	37500,	1202,	0,		50901,	-1,		1},

	// 	{L"흥겨운 겨울 축제",		L"1단계 - 행복한 눈의 평원",		25,	9000,	1202,	0,		50801,	-1,		1},
	// 	{L"흥겨운 겨울 축제",		L"2단계 - 설렘 가득한 설원",		48,	16000,	1202,	0,		50801,	-1,		1},
	// 	{L"흥겨운 겨울 축제",		L"3단계 - 반짝이는 얼음 계곡",		58,	23000,	1202,	0,		50801,	-1,		1},
	// 	{L"흥겨운 겨울 축제",		L"4단계 - 설레는 겨울 축제",		68,	28500,	1202,	0,		50801,	-1,		1},
	// 	{L"흥겨운 겨울 축제",		L"5단계 - 흥겨운 함박눈 정원",		78,	37500,	1202,	0,		50801,	-1,		1},

	//	{L"할로윈의 악몽",		L"할로윈의 악몽",					0,	24000,	1220,	0,		9999,	-1,		0},

	//	{L"타락한 광휘의 무저갱",	L"타락한 광휘의 무저갱",			0,	10000,	5108,	0,		502,	-1,		0},

	// 	{L"벚꽃 정원",			L"1단계 - 벚꽃 산책로",			25,	9000,	1202,	0,		50401,	-1,		1},
	// 	{L"벚꽃 정원",			L"2단계 - 햇살 비추는 초원",		48,	16000,	1202,	0,		50401,	-1,		1},
	// 	{L"벚꽃 정원",			L"3단계 - 따스한 아침 정원",		58,	23000,	1202,	0,		50401,	-1,		1},
	// 	{L"벚꽃 정원",			L"4단계 - 봄바람 꽃길",			68,	28500,	1202,	0,		50401,	-1,		1},

	// 	{L"달빛 정원",			L"1단계 - 달밤의 갈대밭",			25,	8000,	1202,	0,		50601,	-1,		1},
	// 	{L"달빛 정원",			L"2단계 - 밤하늘의 풍등",			48,	15000,	1202,	0,		50601,	-1,		1},
	// 	{L"달빛 정원",			L"3단계 - 별빛 호수의 팔각정",		58,	21000,	1202,	0,		50601,	-1,		1},
	// 	{L"달빛 정원",			L"4단계 - 오색빛 낙원",			68,	26800,	1202,	0,		50601,	-1,		1},

	// 	{L"여름의 섬",		L"1단계 - 꿈의 백사장",				25,	8000,	1202,	0,		50501,	-1,		1},
	// 	{L"여름의 섬",		L"2단계 - 사랑의 해안",				48,	15000,	1202,	0,		50501,	-1,		1},
	// 	{L"여름의 섬",		L"3단계 - 열정의 바다",				58,	21000,	1202,	0,		50501,	-1,		1},
	// 	{L"여름의 섬",		L"4단계 - 희망의 섬",					68,	26800,	1202,	0,		50501,	-1,		1},

	// 	{L"축제의 섬",		L"1단계 - 흥겨움의 해안가",			25,	9000,	1202,	0,		51001,	-1,		1},
	// 	{L"축제의 섬",		L"2단계 - 해변의 연회장",				48,	16000,	1202,	0,		51001,	-1,		1},
	// 	{L"축제의 섬",		L"3단계 - 축제의 모래사장",			58,	23000,	1202,	0,		51001,	-1,		1},
	// 	{L"축제의 섬",		L"4단계 - 축제의 섬",					68,	28500,	1202,	0,		51001,	-1,		1},

	//	{L"크리스마스의 악몽",			0,	10000,	1220,	0,		9999,	0,		0,		0},
};

#define MAX_CASH		27
CASHITEM	g_pCashItem[MAX_CASH] =
{
	{L"암시장 아바타 소환 1회 Ⅰ",		30,	30000,	-1,	1,	1,	5,		0},
	{L"암시장 아바타 소환 1회 Ⅱ",		40,	50000,	-1,	1,	1,	5,		0},
	{L"암시장 아바타 소환 1회 Ⅲ",		50,	90000,	-1,	1,	1,	5,		0},

	{L"암시장 탈 것 소환 1회 Ⅰ",			35,	30000,	-1,	1,	1,	5,		0},
	{L"암시장 탈 것 소환 1회 Ⅱ",			45,	30000,	-1,	1,	1,	5,		0},
	{L"암시장 탈 것 소환 1회 Ⅲ",			55,	30000,	-1,	1,	1,	5,		0},

	{L"암시장 룬 소환 1회 Ⅰ",			35,	50000,	-1,	1,	1,	5,		0},
	{L"암시장 룬 소환 1회 Ⅱ",			65,	100000,	-1,	1,	1,	5,		0},

	{L"무기 강화석",						0,	7500,	-1, 5,	2,	13,		0},
	{L"방어구 강화석",					0,	2500,	-1, 5,	2,	13,		0},

	{L"빛나는 무기 강화석 상자",			30,	30000,	-1, 5,	2,	13,		0},
	{L"빛나는 방어구 강화석 상자",		30,	10000,	-1, 5,	2,	13,		0},

	{L"황금 각인 도장",					0,	30000,	-1, 3,	2,	13,		1609},
	{L"황금 유물 동전",					0,	30000,	-1, 3,	2,	13,		2006},

	{L"암시장 무기 형상 소환 1회 Ⅰ",		33,	30000,	-1,	1,	1,	5,		0},
	{L"암시장 무기 형상 소환 1회 Ⅱ",		43,	50000,	-1,	1,	1,	5,		0},
	{L"암시장 무기 형상 소환 1회 Ⅲ",		53,	90000,	-1,	1,	1,	5,		0},

	{L"미미르의 샘물 스텝업 1",			0,	40000,	-1, 1,	2,	10,		0},
	{L"미미르의 샘물 스텝업 2",			0,	100000,	-1, 1,	2,	10,		0},
	{L"미미르의 샘물 스텝업 3",			0,	160000,	-1, 1,	2,	10,		0},
	{L"미미르의 샘물 스텝업 4",			0,	220000,	-1, 1,	2,	10,		0},
	{L"미미르의 샘물 스텝업 5",			0,	260000,	-1, 1,	2,	10,		0},

	{L"암시장 가호석 소환 1회 Ⅰ",		70,	50000,	-1,	1,	1,	5,		0},
	{L"암시장 가호석 소환 1회 Ⅱ",		75,	100000,	-1,	1,	1,	5,		0},

	{L"암시장 펫 소환 1회 Ⅰ",				37,	30000,	-1, 1,	1,	5,		0 },
	{L"암시장 펫 소환 1회 Ⅱ",				47,	50000,	-1, 1,	1,	5,		0 },
	{L"암시장 펫 소환 1회 Ⅲ",				57,	90000,	-1, 1,	1,	5,		0 },
};

#define MAX_EXCHANGE		35
EXCHANGEITEM	g_pExchangeRes[MAX_EXCHANGE] = {
	{L"아마풀",									0,	10,	5,		5},
	{L"나무",									0,	10,	5,		5},
	{L"광석",									0,	10,	5,		5},
	{L"안드바리의 무기 도안 조각",					0,	0,	1000,	5},
	{L"안드바리의 방어구 도안 조각",				0,	0,	500,	5},
	{L"희귀 아바타 소환권",						0,	0,	5000,	5},
	{L"희귀 탈 것 소환권",						0,	0,	5000,	5},
	{L"안드바리의 무기 형상 소환권",				0,	0,	5000,	5},
	{L"영웅 아바타 소환권",						0,	0,	40000,	5},
	{L"영웅 탈 것 소환권",						0,	0,	40000,	5},
	{L"플롬키의 무기 형상 소환권",					0,	0,	40000,	5},

	{L"희귀 스킬 기술서",							0,	0,	10000,	4},
	{L"희귀 스킬 교본",							0,	0,	10000,	4},
	{L"영웅 스킬 기술서",							0,	0,	40000,	4},
	{L"액티브 스킬 강화 상자",					0,	0,	2500,	4},
	{L"패시브 스킬 강화 상자",					0,	0,	3500,	4},
	{L"세공석",									0,	0,	200,	4},
	{L"축복의 세공석",							0,	0,	10000,	4},
	{L"룬 교환석 조각",							0,	0,	250,	4},
	{L"빛나는 룬 상자",							0,	0,	1200,	4},
	{L"잠긴 유물 상자",							0,	0,	2000,	4},
	{L"장신구 강화석",							0,	0,	1000,	4},

	{L"신비한 HP 회복 영약",						0,	30,	35,		3},
	{L"신속의 주문서",							0,	50,	20,		3},
	{L"전투의 주문서",							0,	50,	20,		3},
	{L"방어의 주문서",							0,	50,	20,		3},
	{L"저항의 주문서",							0,	50,	20,		3},
	{L"노른의 모래시계 - 지하감옥",				0,	1,	1000,	3},
	{L"노른의 모래시계 - 공허의 유적",				0,	1,	1000,	3},
	{L"노른의 모래시계 - 난쟁이의 비밀 통로",		0,	1,	1000,	3},
	{L"신의 잔향",								0,	3,	120,	3},
	{L"플롬키의 유물 투구",						0,	0,	10000,	3},
	{L"플롬키의 유물 갑옷",						0,	0,	20000,	3},
	{L"플롬키의 유물 장갑",						0,	0,	10000,	3},
	{L"플롬키의 유물 신발",						0,	0,	10000,	3},
};

NPCINFO		g_pVillageNpcInfo[3][4] = {
	{
		{L"창고",		L"오드레",		{-7407.62f, -13912.84f, -3413.89f}},
		{L"스킬북 상인", L"아틀라",		{-8356.61f, -15697.67f, -3417.37f}},
		{L"교환 상인",	L"뇨르트",		{-7280.19f, -16669.04f, -3417.37f}},
		{L"소모품 상인", L"에이스틀라",	{-6122.83f, -13669.79f, -3412.27f}},
	},
	{
		{L"창고",		L"트린",			{-98008.66f, 117520.70f, -13965.63f}},
		{L"스킬북 상인", L"아틀라",		{-93712.19f, 120104.04f, -13962.10f}},
		{L"교환 상인",	L"앙게위야",		{-95246.11f, 119597.98f, -13965.63f}},
		{L"소모품 상인", L"뇨르트",		{-94682.91f, 115667.72f, -13965.63f}},
	},
	{
		{L"창고",		L"두린",			{205041.00f, -183679.00f, -8264.72f}},
		{L"스킬북 상인", L"아틀라",		{205560.00f, -183240.00f, -8264.72f}},
		{L"교환 상인",	L"뇨르트",		{203847.00f, -184752.00f, -8264.72f}},
		{L"소모품 상인", L"에이스틀라",	{202664.41f, -187869.55f, -8264.72f}},
	}
};

#define MALLOC(x)	HeapAlloc(GetProcessHeap(), 0, (x))
#define FREE(x)		HeapFree(GetProcessHeap(), 0, (x))

#define M_PI       3.14159265358979323846f
#define GETDIST2D(vec1, vec2)			(float)sqrtf((vec1.X - vec2.X) * (vec1.X - vec2.X) + (vec1.Y - vec2.Y) * (vec1.Y - vec2.Y))
#define GETDIST3D(vec1, vec2)			(float)sqrtf((vec1.X - vec2.X) * (vec1.X - vec2.X) + (vec1.Y - vec2.Y) * (vec1.Y - vec2.Y) + (vec1.Z - vec2.Z) * (vec1.Z - vec2.Z))

#define MAX_HUIPISKILLCNT	10
struct BOSSSKILLINFO
{
	WCHAR szBossName[MAX_NAME];
	DWORD dwSkillIndex[MAX_HUIPISKILLCNT];
};

#define MAXBOSSSKILLINFOCNT	13
BOSSSKILLINFO g_stBossSkillInfo[MAXBOSSSKILLINFOCNT] = {
	{
		L"난폭한 매트리악",
			{
				0x02FB717C		//(위상) 매트리악 스킬 근접 공격 Motion2 (5타 · 화상)
				, 0x02FB719A		//(위상) 매트리악 스킬 근접 공격 Motion5 (넉다운)
				, 0x02FB7186		//(위상) 매트리악 스킬 근접 공격 Motion3 (6타 · 침묵)
				, 0
			}
	},
	{
		L"공허에 물든 레라드",
			{
				0x02FBA05C		//(위상) 레라드 스킬 마법 공격 Motion2 (5타 · 빙결)
				, 0x02FBA066	//(위상) 레라드 스킬 마법 공격 Motion3 (3타 · 중독)
				, 0x02FBA070	//(위상) 레라드 스킬 마법 공격 Motion4 (침묵)

				,0x02FE115C		//(인던)레라드 스킬 마법 공격 Motion2(빙결)
				,0x02FE1166		//(인던)레라드 스킬 마법 공격 Motion3(중독)
				,0x02FE1170		//(인던)레라드 스킬 마법 공격 Motion4(침묵)

				, 0
			}
	},
	{
		L"기괴한 탕그뇨스트",
			{
				0x02FC1D5C		//(위상) 탕그뇨스트 스킬 근접 공격 Motion2 (1P · 5타 · 화상)
				, 0x02FC1D70	//(위상) 탕그뇨스트 스킬 근접 공격 Motion4 (1P · 2타 · 화상)
				, 0x02FC1D66	//(위상) 탕그뇨스트 스킬 근접 공격 Motion3 (2P · 5타 · 빙결)
				, 0x02FC1D84	//(위상) 탕그뇨스트 스킬 근접 공격 Motion6 (2P · 스킬 오브젝트(5t) · 동상)   
				, 0
			}
	},
	{
		L"용맹한 파르바",
			{
				0x02FF2E98		//(위상) 파르바 스킬 근접 공격 Motion4 (3타 · 넉다운)
				, 0
			}
	},
	{
		L"요르문간드",
			{
				0x02FE3C54		//요르문간드 스킬 마법 공격 Motion2 평타 (독 공격)
				, 0x02FE3C86	//요르문간드 2페이즈 마법 공격 콤보-1
				, 0x02FE3C90	//요르문간드 2페이즈 마법 공격 콤보-2
				, 0x02FE3C9A	//요르문간드 2페이즈 마법 공격 콤보-3
				//, 0x02FE3C68	//요르문간드 스킬 아이컨텍(이때 공격가능, 끝나고도 몇초정도 더 나옴)
				, 0x02FE3C40	//요르문간드 일반 소환 공격 Motion0 소환
				, 0x02FE3C4A	//요르문간드 스킬 마법 공격 Motion1 포효 (5타 ? 부패)
				, 0x02FE3C5E	//요르문간드 스킬 마법 공격 Motion3 꼬리치기 (기절)
				, 0
			}
	},
	{
		L"흉측한 셀로비아",
			{
				0x02FF3E1A,		// 내 주변 원 생기기
				0x02FF3E24,		// 보스 주변 원 생기기
				0x02FF3E2E,		// 보스 앞으로 직선 장판 생기기
				0
			}
	},
	{
		L"비열한 흐니르",
			{
				0x02FF5972,		// 앞으로 내려찍기
				0x02FF597C,		//
				0x02FF5986,		// 앞으로 부채살 공격
				0x02FF5990,		// 발구르기
				0
			}
	},
	{
		L"죽음을 부르는 페티",
			{
				0x02FF78BC,		// 앞으로 내려찍기
				0x02FF78C6,		//
				0x02FF78D0,		// 

				0x02FF78B2,		// 보스 주변 큰 원
				0
			}
	},
	{
		L"위대한 바우티",
			{
				0x02FF8C44,
				0x02FF8C58,
				0x02FF8C62,

				0x02FF8C4E,
				0
			}
	},
	{
		L"공허에 물든 니드호그",
			{
				0x02FFB750,

				0x02FFB75A,
				0x02FFB732,

				0x02FFB746,
				0
			}
	},
	{
		L"거대한 야른",
			{
				0x02FFF1CA,
				0x02FFF1E8,

				0x02FFF1DE,
				0
			}
	},
	{
		L"변절자 거인 우두머리",
			{
				0x0301D242,
				0x0301D24C,
				0x0301D256,
				0x0301D260,
				0x0301D5BC,
				0
			}
	},
	{
		L"펜리르",
			{
				0x0301CEA0,
				0x0301CEA1,
				0x0301CE96,

				0x0301CE6E,
				0x0301CE8C,

				0x0301CE82,
				0
			}
	},
};



DWORD64			g_hModuleMain = 0;
DWORD64			g_hAssemblyModuleMain = 0;
DWORD64			g_hModuleDLL = 0;
int				g_nIndex = -1;
HWND			g_hGameWnd = 0;
LONG_PTR		g_dwOrgWndLong = 0;

BYTE			g_pbKeyState[0x100];

DWORD			g_dwClientPID = 0;

DWORD64			g_dwTickCount = 0;
DWORD64			g_dwStartTickCount = 0;
DWORD64			g_dwLastTickCount = 0;
DWORD64			g_dwWaitTime = 0;
DWORD64			g_qwNetworkTick = 0;
DWORD64			g_qwWarningTick = 0;
DWORD64			g_qwGameLoadingTick = 0;
DWORD64			g_qwMapLoadingTick = 0;
DWORD64			g_qwPartyDungeonTick = 0;

BOOL			g_bPartyDungeonOut = FALSE;

int				g_qwAddrMemCount = 0;
DWORD			g_qwAddrMemGWorld[100];
DWORD64			g_qwMemGWorldTick = 0;

DWORD			g_dwAddrLastTime = 0;
int				g_nServerLogTick = 0;

BYTE			g_bServerWait = 0;
DWORD64			g_dwServerSelTick = 0;
DWORD64			g_dwServerLoginTick = 0;

DWORD64			g_dwCharSelectTick = 0;
DWORD64			g_dwCharStartTick = 0;

GAME_MAPPING* g_pGameMapping = NULL;
GAME_INFO* g_pGameInfo = NULL;

HANDLE			g_hWaitEvent = NULL;
HANDLE			g_hAnswerEvent = NULL;

int				g_nCurScene = SCENE_NONE;
int				g_nPreScene = SCENE_NONE;
int				g_nSceneOffset = 0;

int				g_nCurStatus = STATUS_NONE;
int				g_nPreStatus = STATUS_NONE;
int				g_nCrackStep = 30;

int				g_nStepStatus = 0;

WCHAR			g_szAutoID[MAX_NAME] = { 0, };
WCHAR			g_szGameID[MAX_NAME] = { 0, };
int				g_nGameServer = 0;
int				g_nGameChar = 0;

BOOL			g_bAutoRun = TRUE;

int				g_nCreateLen = 0;
WCHAR			g_szCreateName[MAX_NAME];

CHARINFO		g_pCharInfo;

DWORD64			g_dwMoveCharTick = 0;
FVector			g_pPrevCharPos;

INT64			g_preGoods = 0;

int				g_nBuffCount = 0;
BUFFINFO		g_pBuffInfo[MAX_BUFF];

int				g_nPlayerCount = 0;
PLAYERINFO		g_pPlayerInfo[MAX_PLAYER];

int				g_nNpcCount = 0;
NPCINFO			g_pNPCInfo[MAX_NPC];

int				g_nMonsterCount = 0;
MONSTERINFO		g_pMonsterInfo[MAX_MONSTER];

int				g_nGatherCount = 0;
GATHERINFO		g_pGatherInfo[MAX_GATHER];

QUESTINFO		g_pMainQuestInfo;

int				g_nSubQuestCount = 0;
QUESTINFO		g_pSubQuestInfo[MAX_QUEST];

int				g_nQuestWindowCount = 0;
QUESTWINDOW		g_pQuestWindowInfo[MAX_QUEST];

BYTE			g_bSubQuestReturn = 0;

int				g_nVillageQuestCount = 0;
QUESTINFO		g_pVillageQuestInfo[MAX_VILLAGEQUEST];

int				g_nVillageListCount = 0;
VILLAGEQUEST	g_pVillageListInfo[MAX_VILLAGEQUEST];

int				g_nMaxInvenCount = 0;
int				g_nInvenCount = 0;
INVENINFO		g_pInvenInfo[MAX_INVEN];

int				g_nStoreCount = 0;
INVENINFO		g_pStoreInfo[MAX_STORE];

int				g_nEquipCount = 0;
EQUIPINFO		g_pEquipInfo[MAX_EQUIP];

int				g_nSkillCount = 0;
SKILLINFO		g_pSkillInfo[MAX_SKILL];

int				g_nItemSlotCount = 0;
ITEMSLOTINFO	g_pItemSlotInfo[MAX_ITEMSLOT];

int				g_nSkillSlotCount = 0;
SKILLSLOTINFO	g_pSkillSlotInfo[MAX_SKILLSLOT];

int				g_nAvatarCount = 0;
AVATARINFO		g_pAvatarInfo[MAX_AVATAR];

int				g_nVehicleCount = 0;
VEHICLEINFO		g_pVehicleInfo[MAX_VEHICLE];

int				g_nWeaponShapeCount = 0;
WEAPONINFO		g_pWeaponShapeInfo[MAX_WEAPON];

int				g_nNpcSlotCount = 0;
NPCSLOTINFO		g_pNpcSlotInfo[MAX_NPCSLOT];

int				g_nSellListCount = 0;
SELLLIST		g_pSellListInfo[MAX_INVEN];

int				g_nBuyListCount = 0;
BUYLIST			g_pBuyListInfo[MAX_BUYLIST];

BOOL			g_bOpenVehicle = FALSE;
BOOL			g_bUseSkillBook = FALSE;

int				g_nStoreListCount = 0;
DWORD64			g_qwStoreList[MAX_INVEN * 2];

BOOL			g_bPartyDungeon = FALSE;
BOOL			g_bPartyExist = FALSE;
BOOL			g_bPartyAutoMatch = FALSE;

int				g_nPartyCount = 0;
PARTYINFO		g_pPartyInfo[MAX_PARTY];

BOOL			g_bTestLog = FALSE;

BYTE			g_bSkillCheck[5] = { 0, 0, 0, 0, 0 };

BOOL			g_bOpenSkill = FALSE;
BOOL			g_bGetEquips = FALSE;
BOOL			g_bWaitHpVillage = TRUE;

DWORD			g_dwPreQuestID = 0;
DWORD64			g_qwQuestCountTick = 0;
DWORD64			g_qwQuestTotalTick = 0;
int				g_nQuestPreCount = 0;
BYTE			g_bStartAuto = 0;
int				g_nSubQuestNo = -1;
DWORD			g_dwSubQuestID = 0;

int				g_nRecoverFreeCount = -1;

// ------------------ Auto Setting ------------------ //

BOOL			g_bScheduleAlert = FALSE;
WCHAR			g_szScheduleName[MAX_NAME] = { 0, };

SCHEDULE_SETTING	g_ScheduleSetting;

int				g_nReturnCount = 0;
ITEM_RETURN* g_pReturnInfo = NULL;
HUNT_SETTING	g_HuntSetting;

int				g_nBuyExpendCount = 0;
ITEM_BUY* g_pBuyExpendInfo = NULL;

int				g_nBuyExchangeCount = 0;
ITEM_BUY* g_pBuyExchangeInfo = NULL;

BUY_SETTING		g_BuySetting;

BYTE			g_pItemDefault[MAX_GRADE][MAX_TYPE];

int				g_nItemDetailCount = 0;
DETAIL_ITEM* g_pItemDetailInfo = NULL;

OTHER_SETTING	g_OtherSetting;

// ------------------ Bug 2024/12/7------------------ //
BOOL			g_PackageShopVisited = FALSE;

// ------------------ ------------------ //

DWORD64			g_dwHpReturnTick = 0;
DWORD64			g_dwWeightReturnTick = 0;
DWORD64			g_dwNoMonsterTick = 0;
DWORD64			g_qwPreAutoTarget = 0;
int				g_nMonsterCurHp = -1;
DWORD64			g_qwAttackTick = 0;

WCHAR			g_szUseItemName[MAX_NAME] = { 0, };

BOOL			g_bPostMail = FALSE;
BYTE			g_nPostIndex = 0;

BOOL			g_bEventReward[2] = { FALSE, };
BYTE			g_nEventIndex = 0;
int				g_nLastCashIndex = -1;

BYTE			g_nBlackOutShow = 0;

int				g_nDeadCount = 0;
DWORD64			g_dwDeadTime[50] = { 0, };

int				g_nResumeTime = -1;
DWORD64			g_qwResumeTickCount = 0;

int				g_nReconnectCount = 0;
DWORD64			g_dwReconnectTime[50] = { 0, };

int				g_nDisconnectCount = 0;
DWORD64			g_dwDisconnectTime[50] = { 0, };

DWORD64			g_dwItemWidgetTick = 0;

DWORD64			g_dwMessageTick = 0;
DWORD			g_dwLastPartyDungeonBossSkillID[2] = { 0, };
BOOL			g_bDungeonTele = FALSE;
BOOL			g_bWaitDelay = FALSE;
BOOL			g_bMoveHuntPos = FALSE;
BOOL			g_bMoveHuntSet = FALSE;

BYTE			g_bCreateCharActor = 0;
BYTE			g_bCreateCharClass = 0;
BYTE			g_bSnakeDungeon = 0;

BYTE			g_nSubQuestChapter = 0;

int				g_nBossStep = 0;
BYTE			g_bBossRunAround = 0;

Align_Info* g_pAlignInfo = NULL;

int				g_nCollectionCount = 0;

int				g_nCurTradeRegCount = 0;
int				g_nTradeRegCount = 0;
TRADE_ITEM		g_pTradeRegInfo[MAX_TRADE];

int				g_nTradeSellCount = 0;
TRADE_ITEM		g_pTradeSellInfo[MAX_TRADE];

WCHAR			g_szTradeRegName[MAX_NAME] = { 0, };
WCHAR			g_szTradeOrgName[MAX_NAME] = { 0, };
int				g_nTradeRegIndex = 0;

int				g_nTradeInvenCount = 0;
SELLLIST		g_pTradeInvenInfo[MAX_INVEN];

BYTE			g_bTradeInit = 0;
BYTE			g_bTradeEnchant = 0;

int				g_nTradeChaoCount = 0;
WCHAR			g_pszTradeChaoName[MAX_CHAO][MAX_NAME];

int				g_nTradeCheckCount = 0;
TRADE_CHECK		g_pTradeCheckInfo[MAX_CHAO];

int				g_nTradeDissolveCount = 0;
TRADE_DISSOLVE	g_pTradeDissolveItem[MAX_TRADEDISSOLVE];

BYTE			g_bShopItemOring[2] = { 0, 0 };
BYTE			g_bGuildCheck[5] = { 0, };
BYTE			g_bGuildDonate[5] = { 0, };
DWORD64			g_qwGuildJoinTick[5] = { 0, };

HANDLE			g_hGameProcess = NULL;
int				g_nEmptyTickCount = 0;

BOOL			g_bInitAloneDungeon = FALSE;

int				g_nQuickSlotIndex = 0;

HANDLE			g_hClientProcess = NULL;

BYTE			g_bSettingChange[20] = { 0, };

BOOL			g_bHidePlayer = FALSE;

DWORD64			g_qwMainQuestTick = 0;
DWORD			g_dwPlayerSerial = 0;
DWORD64			g_qwOrgSkillCustom = 0;
DWORD64			g_qwPartyWaitTick = 0;
DWORD64			g_qwPartyMoveTick = 0;
DWORD64			g_qwPartyDelayTick = 0;

BOOL			g_bRefreshPartyDungeon = FALSE;
BYTE			g_bGotoNPC = 0;
BYTE			g_bGetOutParty = 0;

int				g_nPartyMember = 0;
PARTYMEMBER* g_pPartyMember = NULL;

DWORD64			g_qwCashShopStart = 0;
DWORD64			g_qwGuildCheckStart = 0;
DWORD64			g_qwMailboxStart = 0;
DWORD64			g_qwVehicleStart = 0;
DWORD64			g_qwTradeStart = 0;
DWORD64			g_qwInvenProcStart = 0;
DWORD64			g_qwCollectProcStart = 0;
DWORD64			g_qwEnchantProcStart = 0;

BYTE			g_nChaoStatusCount = 0;
BYTE			g_pChaoStatusInfo[50];
BYTE			g_bSubQuestFly = 0;

int				g_nChaoGatherCount = 0;
FVector			g_pChaoGatherInfo[MAX_CHAO];

BYTE			g_bSkipTutorial = 0;

int				g_nMoveChaoCount = 0;
DWORD64			g_qwMoveChaoTick[MAX_CHAO];

DWORD64			g_qwGotoNpcTick = 0;
DWORD64			g_qwPartyLogoutTick = 0;

DWORD64			g_qwNpcChaoTick[5] = { 0, };
int				g_qwNpcChaoCount = 0;
BOOL			g_bExpandShop = FALSE;

BYTE			g_bEquipStoreState = 0;
WCHAR			g_szCharName[MAX_PATH] = { 0, };

DWORD64			g_qwCharDeadTick = 0;
DWORD64			g_qwCharDeadChaoTick = 0;

BYTE			g_nDungeonReturnCount = 0;
DWORD64			g_qwDungeonReturnTick[5] = { 0, };

BYTE			g_nVillageReturnCount = 0;
DWORD64			g_qwVillageReturnTick[5] = { 0, };

BYTE			g_bValhala = 0;
BYTE			g_bGotoNPCFail = 0;

int				g_nInvenIndex = 0;
BYTE			g_nTryInvenCount = 0;
DWORD64			g_qwLastUseItemAddr = 0;

BYTE			g_bCharFallDown = 0;
BYTE			g_bContentFail = 0;
DWORD64			g_qwEquipIndex = 0;

BYTE			g_bOpenInven = 0;

DWORD64			g_qwFocusHwndTick = 0;

BYTE			g_nAutoEquip = 0;
BYTE			g_nCollectionIndex = 0;

BYTE			g_bWorldBoss = 0;

DWORD64			g_qwWorldBossTick = 0;
DWORD64			g_qwWorldBossResultTick = 0;
int				g_nWorldWaitIndex = -1;
BYTE			g_bWorldBossFinish = 0;

DWORD64			g_qwCloseAvatarTick = 0;
DWORD64			g_qwCloseVehicleTick = 0;
DWORD64			g_qwCloseRuneTick = 0;
DWORD64			g_qwCloseWeaponShapeTick = 0;
DWORD64			g_qwCloseBlessingComposeTick = 0;
DWORD64			g_qwCloseInstantMessageTick = 0;

DWORD64			g_qwEventSceneTick = 0;

DWORD64			g_pqwBreakAddr[MAX_BREAK] = { 0, };

int				g_nTreasureIndex = -1;
BOOL			g_bTreasureTeleport = FALSE;
DWORD64			g_qwTreasureTick = 0;

int				g_nWeaponTreasureIndex = -1;
BOOL			g_bWeaponTreasureTeleport = FALSE;
DWORD64			g_qwWeaponTreasureTick = 0;

BOOL			g_bMovePacketThread = FALSE;

int				g_nQuestDungeonIndex = -1;

BYTE			g_bRecvAddrThread = 0;
DWORD64			g_qwAddrTickCount = 0;

BYTE			g_nAttackChaoCount = 0;
DWORD64			g_qwAttackChaoTick[5] = { 0, };

DWORD64			g_qwKaKaoGameAddr = 0;

unsigned int	g_nCurAddrTime = 0;

WCHAR			g_szPreWarning[200] = { 0, };

int				g_nPartitionCount = 0;
BYTE			g_bTcpTable = 0;

DWORD64			g_qwServerTick = 0xFFFFFFFF;
DWORD64			g_qwLastServerTick = 0;

BYTE			g_bAddrLower = 0;

DWORD64			g_qwLoadChaoTick = 0;

HANDLE			g_hAddrEvent = NULL;
HANDLE			g_hAddrMapping = NULL;

BYTE			g_bDungeonDoorLock = 0;

BOOL			g_bFrameEnable = FALSE;
int				g_nFrameValue = 20;

BOOL			g_bRecordStep = FALSE;
BOOL			g_bRecordStop = FALSE;
int				g_nRecordCurStep = 0;
int				g_nRecordMaxStep = -1;
int				g_nRecordStopStep = -1;

BOOL			g_bGlobalUiFlag = FALSE;
TArray<UUMG_UserWidget*> g_GlobalUiAry;

//1226
BOOL			g_bLastMessageProc = FALSE;
int				g_nMessageProcChaoCount = 0;

UProjectLH_LHWidget_Collection_NeedItem_Container* g_pCollectionInfo[MAX_COLLECTION];

//#define GAMEADDR(x)			(DWORD64)(x - ADDR_BASEADDR + ((DWORD64)g_hModuleMain))
#define GAMEADDR(x)			(DWORD64)(x - ADDR_BASEADDR + ((DWORD64)g_hAssemblyModuleMain))
#define PATCHADDR(x, y)		(DWORD64)((x ^ y ^ 0x20121223) - (DWORD)ADDR_BASEADDR + ((DWORD64)g_hModuleMain))
#define DUMPADDR(x)			(DWORD64)(x - g_hModuleMain + ADDR_BASEADDR)

DWORD64 InsertJmpCodes(DWORD64 dwTargetAdr, DWORD64 dwAdrToJmp, OUT BYTE* pOrigCodes);

DWORD	SettingThread(LPVOID lpParam);

void	OnTimer(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime);
void	TcpTable(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime);
void	RecvAddrTimer(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime);

void	ChangeSchedule();
void	LoadScheduleInfo();

LRESULT CALLBACK MyKeyProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);

bool	IsBadReadPtr(void* p);

void	GetAutoKeyState(DWORD* dwAddress);
void	AutoLogic(DWORD* dwAddress);
int		GetCurScene(DWORD* dwAddress);
void	OnServerLogin(DWORD* dwAddress);
void	OnCharSelect(DWORD* dwAddress);
void	OnCharCreate(DWORD* dwAddress);
void	OnGamePrologue(DWORD* dwAddress);
void	OnGameDoAuto(DWORD* dwAddress);
void	OnGameAvatar(DWORD* dwAddress);
void	OnGameWeaponShape(DWORD* dwAddress);
void	OnGameVehicle(DWORD* dwAddress);
void	OnGameRecoverExp(DWORD* dwAddress);
void	OnGameExpendShop(DWORD* dwAddress, BOOL bExchange);
void	OnGameInvenProc(DWORD* dwAddress);
void	OnGameSkillProc(DWORD* dwAddress);
void	OnGameStoreEquips(DWORD* dwAddress);
void	OnGameCharLogOut(DWORD* dwAddress);
void	OnGameGetEquips(DWORD* dwAddress);
void	OnGameCharDead(DWORD* dwAddress);
void	OnGameReturnVillage(DWORD* dwAddress);
void	OnGameUseItem(DWORD* dwAddress);
void	OnGameAchievement(DWORD* dwAddress);
void	OnGameMail(DWORD* dwAddress);
void	OnGameEvent(DWORD* dwAddress);
void	OnGameCashShop(DWORD* dwAddress);
void	OnGameEnchantEquip(DWORD* dwAddress);
void	OnGameVillageQuest(DWORD* dwAddress);
void	OnGameSkillSlot(DWORD* dwAddress);
void	OnGameTrade(DWORD* dwAddress);
void	OnGameTreasure(DWORD* dwAddress);
void	OnGameWeaponTreasure(DWORD* dwAddress);
void	OnGameEventBuff(DWORD* dwAddress);
BOOL	CheckTreasureState();
BOOL	CheckWeaponTreasureState();
void	OnGameAttackChao(DWORD* dwAddress);
void	OnGameItemEnchant(DWORD* dwAddress);
void	OnGameBuyPotion(DWORD* dwAddress);
void	OnGameSubQuest(DWORD* dwAddress);

void	SetStatus(int nStatus, int nWaitTime = 0);
void	SetDelay(int nWaitTime);

void	ShowStatus(int nLogType, unsigned int nStringCode, WCHAR* szLog = NULL, int nLogValue1 = -1, int nLogValue2 = -1);
void	PressKeyAlternate(WCHAR wKey, BOOL bPressOnly = FALSE);

void	UpdateGameInfo(DWORD* dwAddress);
void	UpdateCharInfo(DWORD* dwAddress);
void	UpdateBuffIinfo(DWORD* dwAddress);
void	UpdateInvenInfo(DWORD* dwAddress);
void	UpdateObjectInfo(DWORD* dwAddress);
void	UpdateQuestInfo(DWORD* dwAddress);
void	UpdateItemSlotInfo(DWORD* dwAddress);
void	UpdateSkillSlotInfo(DWORD* dwAddress);
void	UpdateAvatarInfo(DWORD* dwAddress);
void	UpdateVehicleInfo(DWORD* dwAddress);
void	UpdateWeaponShapeInfo(DWORD* dwAddress);
void	UpdateNpcSlotInfo(DWORD* dwAddress);
void	UpdatePartyInfo(DWORD* dwAddress);
void	UpdateHackInfo(DWORD* dwAddress);

BOOL	SkipSleepMode(DWORD* dwAddress);
BOOL	SkipMovieScene(DWORD* dwAddress);
BOOL	SkipTutorialScene(DWORD* dwAddress);
BOOL	SkipQuestMovieScene(DWORD* dwAddress);
int		GetPlayerAutoState(DWORD* dwAddress);
DWORD	GetPlayerAutoQuestId(DWORD* dwAddress);
BOOL	OnQuestAcceptFinish(DWORD* dwAddress);
BOOL	OnQuestTalkMovieSkip(DWORD* dwAddress);
BOOL	OnQuestTalkBalloon(DWORD* dwAddress);
BOOL	OnAutoEquipItem(DWORD* dwAddress);
BOOL	OnQuestTeleport(DWORD* dwAddress);
BOOL	IsShowBlackOut(DWORD* dwAddress);
int		GetCurSelServerId(DWORD* dwAddress);
BOOL	OnCallSceneSkip(DWORD* dwAddress);
BOOL	OnCloseAvatarScene(DWORD* dwAddress);
BOOL	OnCloseVehicleScene(DWORD* dwAddress);
BOOL	OnCloseRuneScene(DWORD* dwAddress);
BOOL	OnCloseWeaponScene(DWORD* dwAddress);
BOOL	OnCloseBlessingScene(DWORD* dwAddress);
BOOL	OnCloseInstantMessageScene(DWORD* dwAddress);
BOOL	OnJonJikAvatar(DWORD* dwAddress);
BOOL	OnSpecialQuest(DWORD* dwAddress);
BOOL	OnAutoSkillSlot(DWORD* dwAddress);
BOOL	OnAutoBuffSlot(DWORD* dwAddress);
BOOL	OnCloseNpcShop(DWORD* dwAddress);
BOOL	OnCloseInven(DWORD* dwAddress);
BOOL	IsExistCombineAvatar();
BOOL	IsExistCombineWeapon();
int		GetHighAvatarID();
int		GetHighWeaponID();
BOOL	IsExistCombineVehicle();
BOOL	OnPartyDungeonState(DWORD* dwAddress);
int		GetHighVehicleID(BOOL bIsFly, DWORD* dwAddress);
BOOL	OnMessageProc(DWORD* dwAddress);
BOOL	OnWarningProc(DWORD* dwAddress);
BOOL	CanRecoverExp();
BOOL	OnUnPackItemPackage(DWORD* dwAddress);
BOOL	OnCloseTakeItemWidget(DWORD* dwAddress);
BOOL	OnCloseAchievementResult(DWORD* dwAddress);
BOOL	OnCloseMailItem(DWORD* dwAddress);
BOOL	OnCloseEventReward(DWORD* dwAddress);
BOOL	OnCloseSafeEnchantScene(DWORD* dwAddress);
BOOL	OnCloseContentsTutorial(DWORD* dwAddress);
BOOL	UseQuickSlot(const WCHAR* szName);
BOOL	MovePos(DWORD* dwAddress, FVector fPos);
BOOL	IsMovingTargetPos(DWORD* dwAddress, FVector fPos);
void	AutoAttack(DWORD* dwAddress);
BOOL	OpenMenuWindow(DWORD* dwAddress, FProjectLH_ProjectLH_EGameMenuType MenuID);
void	UpdateSellListInfo(DWORD* dwAddress, UProjectLH_LHWidget_NPCShop* uiNPCShop);
void	UpdateBuyListInfo(DWORD* dwAddress, UProjectLH_LHWidget_NPCShop* uiNPCShop);
int		GetMainQuestNo();
DWORD64	GetWidget(DWORD* dwAddress, DWORD dwId);
void	SetItemSlotState(DWORD* dwAddress, DWORD64 qwSlotInfo);
void	GoToNpc(DWORD* dwAddress, const WCHAR* szName);
BOOL	IsMoving(FProjectLH_ProjectLH_EAutoMove nAutoMove);
BOOL	AutoEquipItems(DWORD* dwAddress);
BOOL	IsExistEquipItem(DWORD* dwAddress);
void	UpdateStoreSellInfo(DWORD* dwAddress);
void	UpdateStoreBuyInfo(DWORD* dwAddress);
int		GetBuySkillBookRegion();
void	UpdateSkillInfo(DWORD* dwAddress);
WCHAR* GetGameClassName(int nClass);
BOOL	GetTextFromTextBlock(UUMG_TextBlock* pParam, WCHAR* szBuffer);
BOOL	IsCharNeedReturn();
int		GetInvenCount(const WCHAR* szName, BOOL bOrgName = FALSE);
BOOL	ReturnVillage(DWORD* dwAddress);
BOOL	ChangeGameSetting(DWORD* dwAddress, int nTargetRange, int bManner, int nPotion = -1);
BOOL	IsExistAchievement(DWORD* dwAddress);
BOOL	IsMenuRedDot(DWORD* dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup eMark);
WCHAR* GetCurWorldName(DWORD* dwAddress);
int		GetMimirPoint(DWORD* dwAddress);
int		GetBuyCashItemIndex(BOOL bCheckGold = TRUE);
BOOL	IsExistRecoverExp(DWORD* dwAddress);
int		GetTreasureCount(DWORD* dwAddress);
int		GetWeaponTreasureCount(DWORD* dwAddress);
int		GetEnchantEquipIndex();
int		GetInvenIndex(const WCHAR* szName, BOOL bLock = FALSE);
BYTE	SetManualTarget(DWORD* dwAddress, AProjectLH_LHCharacter* pObj);
void	ManualAttack(DWORD* dwAddress);
int		GetVillageQuestCount(DWORD* dwAddress);
int		GetVillageQuestMax(DWORD* dwAddress);
void	UpdateVillageQuest(DWORD* dwAddress);
void	UpdateVillageQuestList(DWORD* dwAddress, UProjectLH_LHWidget_Scene_RepeatQuest* uiRepeatQuest);
BOOL	IsDeleteOrDecompose(int nIndex);
BOOL	IsUsableItem(DWORD* dwAddress, int nIndex);
BOOL	SelectQuest(DWORD* dwAddress, UProjectLH_LHWidget_InGame_Quest_Container* QuestContainer, int nState, BOOL bFly = TRUE);
void	UpdateDungeonInfo(DWORD* dwAddress, BOOL bLog = TRUE);
void	OnEnterDungeon(DWORD* dwAddress, int nDungeon);
WCHAR* GetGameString(DWORD* dwAddress, DWORD dwId);
//void	FreeGarbageMemory(DWORD* dwAddress, DWORD64 dwData);
void	FreeGarbageMemory(DWORD64 dwData);
int		GetPartyDungeonCount(DWORD* dwAddress);
int		GetPartyDungeonType();
BOOL	CloseOfflineHuntingResult(DWORD* dwAddress);
BOOL	OnCloseGuildPopup(DWORD* dwAddress);
BOOL	OnCloseCollectionPopup(DWORD* dwAddress);
BOOL	OnCloseTradeConfirm(DWORD* dwAddress);
BOOL	OnCloseCancelTrade(DWORD* dwAddress);
BOOL	OnCloseGuildJoinPopup(DWORD* dwAddress);
BOOL	OnCloseDungeonReward(DWORD* dwAddress);
void	UpdateQuestWindowInfo(DWORD* dwAddress);
BOOL	TeleportMap(DWORD* dwAddress, const WCHAR* szWorld, const WCHAR* szField);
BOOL	IsBuffExist(const WCHAR* szName);
BOOL	ClickInteraction(DWORD* dwAddress, BOOL bNpc = FALSE);
int		GetShowInteractionType(DWORD* dwAddress);
void	OnGameCollection(DWORD* dwAddress);
void	UpdateTradeRegInfo(DWORD* dwAddress);
void	UpdateTradeInvenInfo(DWORD* dwAddress);
void	UpdateTradeSellInfo(DWORD* dwAddress);
BOOL	IsExistTradeItem();
void	OnGameGuild(DWORD* dwAddress);
void	OnGameRealMWar(DWORD* dwAddress);
BOOL	OnCloseVillageRequest(DWORD* dwAddress);
BOOL	OnCloseCollection(DWORD* dwAddress);
BOOL	IsStorableItemUID(DWORD64 qwItemUID);
void	SelectEquipItem(DWORD* dwAddress, int nIndex);
void	SetEquipsChar(int nServer, int nChar);
int		GetEquipsChar(int nServer);
void	HidePlayerObjects(DWORD* dwAddress, BOOL bHide = FALSE);
BOOL	ApplyRealmWar(DWORD* dwAddress);
BOOL	IsPartyDungeon();
void	OnGamePartyDungeon(DWORD* dwAddress);
int		GetMatchingRealmWar(DWORD* dwAddress);
BOOL	OnGetoutQuestInstance(DWORD* dwAddress);
BOOL	OnCloseCashShop(DWORD* dwAddress);
BOOL	OnCloseSkillBook(DWORD* dwAddress);
BOOL	OnCloseAvatar(DWORD* dwAddress);
BOOL	OnCloseVehicle(DWORD* dwAddress);
BOOL	OnCloseTrade(DWORD* dwAddress);
BOOL	OnCloseAchievement(DWORD* dwAddress);
BOOL	OnCloseDungeon(DWORD* dwAddress);
BOOL	OnCloseMail(DWORD* dwAddress);
BOOL	OnCloseOption(DWORD* dwAddress);
BOOL	OnCloseOpenWindow(DWORD* dwAddress);
BOOL	OnAceptPartyInvite(DWORD* dwAddress);
BOOL	ChangePartyHuntMode(DWORD* dwAddress, int nMode);
BOOL	IsPartyMaster();
void	GetSkillLearnInfo();
void	SetSkillLearnInfo();
BOOL	IsChaoStatus(int nStatus);
void	PutChaoStatus(int nStatus);
int		GetItemCount(const WCHAR* szName);
void	OnGameQuestPotion(DWORD* dwAddress);
BOOL	IsNetworkConnecting(DWORD* dwAddress);
BOOL	IsChaoGatherObject(FVector fPos);
void	PutChaoGatherObject();
int		GetVillageQuestItem();
BOOL	IsCharFallDown();
int		OnGameForceReturn(DWORD* dwAddress);
void	OnGameOdinPass(DWORD* dwAddress);
BOOL	IsStorableItem(int nIndex);
BOOL	IsGetableItem(INVENINFO pItem);
BOOL	IsExistGetEquips(BOOL bFull = FALSE);
BOOL	IsHigherItem(DWORD* dwAddress, UProjectLH_LHItem* lhItem);
BOOL	IsExistHuntPlace();
BOOL	IsInDungeon();
void	AddStoreEquipItems();
void	SetStoreItemList(BOOL bEquip);
void	OnGameMatchingRealMWar(DWORD* dwAddress);
BOOL	SetTopWindow(HWND hWnd);
int		GetBigSnakeCount(DWORD* dwAddress);
void	OnGameMatchBigSnake(DWORD* dwAddress);
BOOL	CheckBigSnakeDungeon(DWORD* dwAddress);
int		GetDungeonMemberCount();
BOOL	IsWorldBossAppear(DWORD* dwAddress, int nType);
int		GetCurKoreanTime(int* wDay = NULL);
void	UpdateCollectionInfo(DWORD* dwAddress);
BOOL	CheckWorldBossTime();
BOOL	OnCloseWorldBossResult(DWORD* dwAddress);
int		GetHpPotionCount();
void	OnGameWorldBoss(DWORD* dwAddress);
void	DumpWidget(DWORD* dwAddress, UClass* pTarget = NULL);
void	OnGameRecordBoss();
int		GetNpcIndex(const WCHAR* szName);
void	MovePacketThread(int nMoveIndex);
BOOL	DumpAllAvatarInfo(DWORD* dwAddress);
BOOL	DumpAllVehicleInfo(DWORD* dwAddress);
BOOL	DumpAllWeaponShape(DWORD* dwAddress);
int		GetQuestPotionCount();
void	ResetCharPos(DWORD* dwAddress, DWORD64 qwArg0, FVector* fPos);
BOOL	OnSkillInteraction(DWORD* dwAddress);
int		GetInvenMaxCount(DWORD* dwAddress);
int		GetInvenCurCount(DWORD* dwAddress);
void	MoveToHuntPosition(DWORD* dwAddress, WCHAR* szRegion);
//void	DisableGuard(DWORD* dwGameAddress);
void	DisableGuard();
BOOL	SelectTab(UProjectLH_LHTabList* tabList, DWORD  dwIdx);
int		LoadSubQuestInfo();
void	SaveSubQuestInfo(int nMainQuest);
DWORD64	GetSelectInvenItem(DWORD* dwAddress);
void	SelectInvenItem(DWORD* dwAddress, int nIndex);
DWORD64	SendResetMovePacketFunc(DWORD64  qwRcx, DWORD64	qwRdx);
BOOL	IsExistExchangeItem();

UEngine_GameplayStatics* GetGamePlayStatics();
UProjectLH_LHGameInstance* GetLMGameInstance(DWORD* dwAddress);
INVENINFO								GetItemInfoWithType(DWORD* dwAddress, DWORD dwType);
FVector									GetMoveTargetPosition(DWORD* dwAddress);
SKILLDETAIL								GetSkillInfoData(DWORD* dwAddress, DWORD dwSkillID);
FProjectLH_ProjectLH_EAutoMove			GetAutoMoveMode(DWORD* dwAddress);
FCommonSource_CommonSource_EMapType		GetMapState(DWORD* dwAddress);
FProjectLH_ProjectLH_ECharacterState	GetPlayerState(DWORD* dwAddress);
AProjectLH_LHPlayerController* GetPlayerController(DWORD* dwAddress);
UProjectLH_LHWidget_PartyWindow* GetPartyWindow(DWORD* dwAddress);
INVENINFO								GetItemInfo(DWORD* dwAddress, DWORD64 qwAddr);

BYTE	g_bMoveComponentTemplate[0xBA0];
extern "C" bool	SkipSkillProc(DWORD64, DWORD64, DWORD64);
// DWORD64 __thiscall cpAttackSkill_Custom(DWORD64 a1, DWORD64 a2)
// {	
// 	BOOL bSkip = FALSE;
// 	DWORD dwObjectSerial = *(DWORD*)(a2 + 0x2C);
// 	for (int i = 0; i < g_nMonsterCount; i++)
// 	{
// 		if (dwObjectSerial == g_pMonsterInfo[i].dwObjectSerial)
// 		{
// 			bSkip = TRUE;
// 			break;
// 		}
// 	}
// 
// 	if (!bSkip)
// 	{
// 		for (int i = 0; i < g_nPartyCount; i++)
// 		{
// 			if (dwObjectSerial == g_pPartyInfo[i].dwObjectSerial)
// 			{
// 				bSkip = TRUE;
// 				break;
// 			}
// 		}
// 	}
// 
// 	if (g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__AloneQuestDungeon ||
// 		g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
// 		bSkip = TRUE;
// 	
// 	if (bSkip)			// *(DWORD*)(a2 + 0x40)
// 		SkipSkillProc(a1, a2, g_qwOrgSkillCustom);
// 
// 	return 0;
// }

void DumpAJLog(WCHAR* szFormat, ...)
{
	WCHAR szPath[MAX_PATH];
	swprintf(szPath, L"C:\\Log\\Exception_%d.txt", g_nIndex);

	FILE* fp = _wfopen(szPath, L"a+");
	if (!fp)
		return;

	WCHAR szLog[2000] = { 0, };
	va_list	arg;
	va_start(arg, szFormat);
	vswprintf(szLog, szFormat, arg);
	va_end(arg);

	fwprintf(fp, L"%s\n", szLog);
	fclose(fp);
}

void AJLog(WCHAR* szFormat, ...)
{
#ifdef	_PRINT_LOG_

	WCHAR szPath[MAX_PATH];
	swprintf(szPath, L"C:\\Log\\Engine-Log%d.txt", g_nIndex);
	FILE* fp = _wfopen(szPath, L"a+");
	if (!fp)
		return;

	char* aszLog;
	WCHAR* szLog;
	va_list	arg;

	szLog = new WCHAR[1000];
	memset(szLog, 0, sizeof(WCHAR) * 1000);
	va_start(arg, szFormat);
	vswprintf(szLog, szFormat, arg);
	va_end(arg);
	aszLog = new char[wcslen(szLog) * 2 + 20];
	WideCharToMultiByte(949, 0, szLog, (int)wcslen(szLog) + 1, aszLog, (int)wcslen(szLog) * 2 + 2, 0, 0);
	strcat(aszLog, "\n");
	fprintf(fp, aszLog);
	fclose(fp);

	WCHAR szTmp[MAX_PATH] = { 0, };
	swprintf_s(szTmp, L"[ENGINE %d] %s", g_nIndex, szLog);
	OutputDebugString(szTmp);
#ifdef _TEST_VERSION_

	WCHAR szTmp[MAX_PATH] = { 0, };
	swprintf_s(szTmp, L"[ENGINE %d] %s", g_nIndex, szLog);
	OutputDebugString(szTmp);

#endif // _TEST_VERSION_

	delete[] aszLog;
	delete[] szLog;

#endif
}


void PrintModules()
{
	HMODULE hMods[1024];
	HANDLE hProcess;
	DWORD cbNeeded;
	unsigned int i;

	hProcess = GetCurrentProcess();
	if (NULL == hProcess)
		return;

	if (EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded))
	{
		for (i = 0; i < (cbNeeded / sizeof(HMODULE)); i++)
		{
			WCHAR szModName[MAX_PATH];

			// Get the full path to the module's file.

			if (GetModuleFileNameEx(hProcess, hMods[i], szModName, sizeof(szModName) / sizeof(WCHAR)))
			{
				// Print the module name and handle value.
				DumpAJLog(L"\t%s (0x%p)\n", szModName, hMods[i]);
			}
		}
	}
}


void DumpStack(BYTE* qwRsp, DWORD dwSize)
{
	DWORD i;
	for (i = 0; i < dwSize; i += 8)
	{
		if (IsBadReadPtr(qwRsp + i))
			return;

		DumpAJLog(L"%p   %02X %02X %02X %02X   %02X %02X %02X %02X", qwRsp + i
			, *(BYTE*)(qwRsp + i), *(BYTE*)(qwRsp + i + 1), *(BYTE*)(qwRsp + i + 2), *(BYTE*)(qwRsp + i + 3)
			, *(BYTE*)(qwRsp + i + 4), *(BYTE*)(qwRsp + i + 5), *(BYTE*)(qwRsp + i + 6), *(BYTE*)(qwRsp + i + 7));
	}
}

//////////////////////////////////////////// ROM Mobile로부터 추가된 코드 ////////////////////////////////////////
// Helper function to safely determine memory size
int GetSafeMemorySize(BYTE* pBuffer, int nMaxSize)
{
	if (!pBuffer || IsBadReadPtr(pBuffer))
		return 0;
	
	MEMORY_BASIC_INFORMATION mbi = { 0 };
	if (!VirtualQuery(pBuffer, &mbi, sizeof(mbi)))
		return 0;
	
	// Calculate the maximum safe size within the current memory region
	BYTE* regionEnd = (BYTE*)mbi.BaseAddress + mbi.RegionSize;
	int maxSafeSize = (int)(regionEnd - pBuffer);
	
	// Use the smaller of requested size or safe size
	int safeSize = min(nMaxSize, maxSafeSize);
	
	// Additional safety check - scan for readable memory
	int actualSize = 0;
	for (int i = 0; i < safeSize; i += 0x1000) // Check every 4KB page
	{
		if (IsBadReadPtr(pBuffer + i))
			break;
		actualSize = i + 0x1000;
	}
	
	return min(safeSize, actualSize);
}

void DumpMemory(char* pszPath, BYTE* pBuffer, int nSize)
{
	FILE* fp;

	AJLog(L"DumpMemory Start %p", pBuffer);
	AJLog(L"DumpMemory Requested Size: 0x%X (%d)", nSize, nSize);

	// Safety check for buffer validity
	if (!pBuffer || IsBadReadPtr(pBuffer))
	{
		AJLog(L"DumpMemory Error: Invalid buffer pointer");
		return;
	}

	// Handle negative sizes (caused by 0xFFFFFFFF overflow) or very large sizes
	int safeSize = nSize;
	if (nSize <= 0 || nSize > 0x10000000) // If negative, zero, or larger than 256MB
	{
		safeSize = GetSafeMemorySize(pBuffer, 0x10000000); // Max 256MB
		AJLog(L"DumpMemory: Invalid size detected (0x%X), using safe size: 0x%X", nSize, safeSize);
	}

	fp = fopen(pszPath, "wb");
	if (fp)
	{
		if (safeSize > 0)
		{
			size_t written = fwrite(pBuffer, 1, safeSize, fp);
			AJLog(L"DumpMemory: Written %zu bytes", written);
		}
		else
		{
			AJLog(L"DumpMemory: No safe memory to write");
		}
		fclose(fp);
	}
	else
	{
		AJLog(L"DumpMemory Error: Failed to open file for writing");
	}

	AJLog(L"DumpMemory End");
}

// CountryCode Hook 관련
DWORD64 g_original_GetCountryCode = 0;
BYTE g_original_GetCountryCode_code[0x12];
DWORD64 _zxg_hgcc(DWORD64 a1, DWORD64 a2, DWORD64 a3);

void InitGlobal(DWORD64 qwAddr)
{
	static DWORD s_dwCnt = 0;
	static DWORD64 s_qwInit[0x500] = { 0, };

	for (int i = 0; i < s_dwCnt; i++)
	{
		if (s_qwInit[i] == qwAddr)
			return;
	}
	
	_callFunc1 pfnInit = (_callFunc1)GAMEADDR(Addr_InitGlobal);
	pfnInit(GAMEADDR(qwAddr));

	s_qwInit[s_dwCnt++] = qwAddr;
}

DWORD64 GetAppIdTypeToAppIdConvter(int appIdType) {
	_callFunc1 pfnOrg = (_callFunc1)(GAMEADDR(Addr_GetAppIdTypeToAppIdConvter));
	return pfnOrg(appIdType);
}

// Trampoline function to call original GetCountryCode
DWORD64 CallOriginalGetCountryCode(DWORD64 a1, DWORD64 a2, DWORD64 a3)
{
	// Create a simple trampoline that restores original code, calls function, then restores hook
	DWORD dwOldProtect;
	
	// Temporarily restore original code
	VirtualProtect((LPVOID)g_original_GetCountryCode, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy((void*)g_original_GetCountryCode, g_original_GetCountryCode_code, 0x12);
	VirtualProtect((LPVOID)g_original_GetCountryCode, 0x12, dwOldProtect, &dwOldProtect);
	
	// Call original function
	_callFunc3 pfnOrg = (_callFunc3)g_original_GetCountryCode;
	DWORD64 result = pfnOrg(a1, a2, a3);
	
	// Restore hook
	VirtualProtect((LPVOID)g_original_GetCountryCode, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	*(BYTE*)(g_original_GetCountryCode) = 0x48;					//mov rax, dwAdrToJmp
	*(BYTE*)(g_original_GetCountryCode + 1) = 0xB8;				//
	*(DWORD64*)(g_original_GetCountryCode + 2) = (DWORD64)_zxg_hgcc;		//
	*(BYTE*)(g_original_GetCountryCode + 0xA) = 0xFF;			//jmp rax
	*(BYTE*)(g_original_GetCountryCode + 0xB) = 0xE0;			//
	VirtualProtect((LPVOID)g_original_GetCountryCode, 0x12, dwOldProtect, &dwOldProtect);
	
	return result;
}

// CountryCode Hook 함수
DWORD64 _zxg_hgcc(DWORD64 a1, DWORD64 a2, DWORD64 a3)
{
	AJLog(L"[CountryCode Hook] Function called with params: 0x%016llX, 0x%016llX, 0x%016llX", a1, a2, a3);

	// AutoSetting.b56002 조건 체크 (PC 버전에서는 다른 조건으로 변경 가능)
	BOOL b56002 = TRUE; // PC 버전에서는 항상 활성화하거나 다른 조건 사용

	if (b56002)
	{
		InitGlobal(Addr_COption_TypeInfo);

		AJLog(L"[CountryCode Hook] Auto setting enabled, checking country code...");

		// COption_TypeInfo 초기화 (PC 버전에서는 다른 방식으로 구현)
		DWORD64 qwOption = *(DWORD64*)(*(DWORD64*)(GAMEADDR(Addr_COption_TypeInfo)) + Offset_TypeInfo_Instance);
		if (qwOption)
		{
			AJLog(L"[CountryCode Hook] Option found at: 0x%016llX", qwOption);

			// LastConnectAppID 체크 및 CountryCode 설정
			DWORD64 lastConnectAppID = *(DWORD64*)(qwOption + Offset_COption_LastConnectAppID);

			if (lastConnectAppID == GetAppIdTypeToAppIdConvter(1))
			{
				AJLog(L"[CountryCode Hook] CountryCode = kr");
				*(DWORD64*)(qwOption + Offset_CountryCode) = *(DWORD64*)(GAMEADDR(Addr_Country_kr));
			}
			else if (lastConnectAppID == GetAppIdTypeToAppIdConvter(2))
			{
				AJLog(L"[CountryCode Hook] CountryCode = jp");
				*(DWORD64*)(qwOption + Offset_CountryCode) = *(DWORD64*)(GAMEADDR(Addr_Country_jp));
			}
			else if (lastConnectAppID == GetAppIdTypeToAppIdConvter(0))
			{
				AJLog(L"[CountryCode Hook] CountryCode = us");
				*(DWORD64*)(qwOption + Offset_CountryCode) = *(DWORD64*)(GAMEADDR(Addr_Country_us));
			}
			//else if (lastConnectAppID == GetAppIdTypeToAppIdConvter(3))
			//{
			//	AJLog(L"[CountryCode Hook] CountryCode = tw");
			//	*(DWORD64*)(qwOption + Offset_CountryCode) = *(DWORD64*)(GAMEADDR(Addr_Country_tw));
			//}
			else
			{
				AJLog(L"[CountryCode Hook] CountryCode = ??? (Unknown AppID: 0x%016llX)", lastConnectAppID);
				AJLog(L"[CountryCode Hook] us AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(0));
				AJLog(L"[CountryCode Hook] kr AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(1));
				AJLog(L"[CountryCode Hook] jp AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(2));
				AJLog(L"[CountryCode Hook] tw AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(3));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(4));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(5));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(6));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(7));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(8));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(9));
				AJLog(L"[CountryCode Hook] unknown AppID: 0x%016llX)", GetAppIdTypeToAppIdConvter(10));
				AJLog(L"[CountryCode Hook] CountryCode = ??? (Country Code: 0x%016llX)", *(DWORD64*)(qwOption + Offset_CountryCode));
			}
		}
		else
		{
			AJLog(L"[CountryCode Hook] Option not found");
		}
	}

	// Call original function using trampoline
	AJLog(L"[CountryCode Hook] Calling original function via trampoline");
	return CallOriginalGetCountryCode(a1, a2, a3);
}

// CountryCode Hook 설정 함수
void SetupCountryCodeHook()
{
	if (GAMEADDR(Addr_GetCountryCode))
	{
		// Save original function address
		g_original_GetCountryCode = GAMEADDR(Addr_GetCountryCode);
		
		// Hook 설정
		DWORD64 result = InsertJmpCodes(GAMEADDR(Addr_GetCountryCode), (DWORD64)_zxg_hgcc, g_original_GetCountryCode_code);

		if (result == 0)
		{
			AJLog(L"[CountryCode Hook] Hook setup successful");
		}
		else
		{
			AJLog(L"[CountryCode Hook] Hook setup failed with error: 0x%016llX", result);
		}
	}
	else
	{
		AJLog(L"[CountryCode Hook] GetCountryCode address not found");
	}
}



// DecGlobalMetadata Hook 관련
DWORD64 g_original_DecGlobalMetaData = 0;
BYTE g_original_DecGlobalMetaData_code[0x12];
DWORD64 _zxg_hdgmd(DWORD64 a1);

// Trampoline function to call original DecGlobalMetaData
DWORD64 CallOriginalDecGlobalMetaData(DWORD64 a1)
{
	// Create a simple trampoline that restores original code, calls function, then restores hook
	DWORD dwOldProtect;
	
	// Temporarily restore original code
	VirtualProtect((LPVOID)g_original_DecGlobalMetaData, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy((void*)g_original_DecGlobalMetaData, g_original_DecGlobalMetaData_code, 0x12);
	VirtualProtect((LPVOID)g_original_DecGlobalMetaData, 0x12, dwOldProtect, &dwOldProtect);
	
	// Call original function
	_callFunc1 pfnOrg = (_callFunc1)g_original_DecGlobalMetaData;
	DWORD64 result = pfnOrg(a1);
	
	// Restore hook
	VirtualProtect((LPVOID)g_original_DecGlobalMetaData, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	*(BYTE*)(g_original_DecGlobalMetaData) = 0x48;					//mov rax, dwAdrToJmp
	*(BYTE*)(g_original_DecGlobalMetaData + 1) = 0xB8;				//
	*(DWORD64*)(g_original_DecGlobalMetaData + 2) = (DWORD64)_zxg_hdgmd;		//
	*(BYTE*)(g_original_DecGlobalMetaData + 0xA) = 0xFF;			//jmp rax
	*(BYTE*)(g_original_DecGlobalMetaData + 0xB) = 0xE0;			//
	VirtualProtect((LPVOID)g_original_DecGlobalMetaData, 0x12, dwOldProtect, &dwOldProtect);
	
	return result;
}

// DecGlobalMetadata Hook 함수
DWORD64 _zxg_hdgmd(DWORD64 a1)
{
	AJLog(L"[DecGlobalMetadata Hook] Function called with params: 0x%016llX", a1);

	// Call original function using trampoline
	DWORD64 qwRet = CallOriginalDecGlobalMetaData(a1);
	AJLog(L"qwRet: 0x%016llX", qwRet);

	static int s_nCount = 0;

	//if (s_nCount == 0)
	DumpMemory("C:\\Users\\Nay\\Music\\ROM\\Dump\\Metadata\\global-metadata.dat", (BYTE*)qwRet, 0xFFFFFFFF);

	s_nCount++;
	return qwRet;
}

// DecGlobalMetadata Hook 설정 함수
void SetupDecGlobalMetadataHook()
{
	if (GAMEADDR(Addr_DecGlobalMetaData))
	{
		// Save original function address
		g_original_DecGlobalMetaData = GAMEADDR(Addr_DecGlobalMetaData);
		
		// Hook 설정
		BYTE pbOrigCodes[0x12] = { 0, };
		DWORD64 result = InsertJmpCodes(GAMEADDR(Addr_DecGlobalMetaData), (DWORD64)_zxg_hdgmd, g_original_DecGlobalMetaData_code);

		if (result == 0)
		{
			AJLog(L"[DecGlobalMetadata Hook] Hook setup successful");
		}
		else
		{
			AJLog(L"[CountDecGlobalMetadataryCode Hook] Hook setup failed with error: 0x%016llX", result);
		}
	}
	else
	{
		AJLog(L"[DecGlobalMetadata Hook] GetCountryCode address not found");
	}
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////


BOOL			g_bMoveRecord = FALSE;
int				g_nRecordCount = 0;
DWORD			g_dwRecordTick = 0;
MovePacket		g_pRecordPacket[1000];

int				g_nChapter = 43;
BYTE			g_nCheckCount = 0;
DWORD64			g_qwCheckAddr[20];
typedef LONG(NTAPI* NtSuspendProcess)(IN HANDLE ProcessHandle);
BOOL g_bPrintModule = FALSE;
LONG _stdcall VectoredHandler(struct _EXCEPTION_POINTERS* ExceptionInfo)
{
	PCONTEXT pContext = ExceptionInfo->ContextRecord;
	if (ExceptionInfo->ExceptionRecord->ExceptionCode != 0x4001000A &&
		ExceptionInfo->ExceptionRecord->ExceptionCode != 0x40010006 &&
		ExceptionInfo->ExceptionRecord->ExceptionCode != 0x406D1388)
	{
		if (ExceptionInfo->ExceptionRecord->ExceptionCode == 0xC0000005)
		{
			DumpAJLog(L"Code: %08X, Rip: %p, Extra: %p, %p", ExceptionInfo->ExceptionRecord->ExceptionCode, pContext->Rip, g_hModuleDLL, g_hModuleMain);
			DumpAJLog(L"Rax: %p, Rbx: %p, Rcx: %p, Rdx: %p, R8: %p, R9: %p, Rdi: %p, Rsi: %p, Rsp: %p, Rbp: %p",
				pContext->Rax, pContext->Rbx, pContext->Rcx, pContext->Rdx, pContext->R8, pContext->R9, pContext->Rdi, pContext->Rsi, pContext->Rsp, pContext->Rbp);

			// 			if (pContext->Rip == GAMEADDR(0x7FF6543C1BE9))
			// 			{
			// 				pContext->Rcx = *(DWORD*)(pContext->Rax);
			// 				pContext->Rip += 0x03;
			// 				return EXCEPTION_CONTINUE_EXECUTION;
			// 			}

			//			TerminateProcess(GetCurrentProcess(), 0);

			// 			if (!g_bPrintModule)
			{
				// 				g_bPrintModule = TRUE;
				// 
				// 				WCHAR szEvent[MAX_PATH];
				// 				swprintf(szEvent, (EVENT_NAME_11), g_nIndex);
				// 				HANDLE hEvent = CreateEvent(0, 0, 0, szEvent);
				// 				if (hEvent)
				// 				{
				// 					SetEvent(hEvent);
				// 					CloseHandle(hEvent);
				// 				}
				// 
				// 				PrintModules();
				// 
				DumpAJLog(L"-------------------- RSP --------------------");
				DumpStack((BYTE*)pContext->Rsp, 0xA00);

				NtSuspendProcess pfnSuspendProcess = (NtSuspendProcess)GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtSuspendProcess");
				pfnSuspendProcess(GetCurrentProcess());

				return EXCEPTION_CONTINUE_EXECUTION;
			}

			return EXCEPTION_CONTINUE_EXECUTION;
			//return EXCEPTION_CONTINUE_SEARCH;
		}

#ifdef _TEST_VERSION_
		if (ExceptionInfo->ExceptionRecord->ExceptionCode == EXCEPTION_SINGLE_STEP || ExceptionInfo->ExceptionRecord->ExceptionCode == EXCEPTION_BREAKPOINT)
		{
			// 			if (pContext->Rip == g_pqwBreakAddr[BREAK_TEST0])
			// 			{
			// 				if (g_bMoveRecord)
			// 				{
			// 					UEngine_World* world = reinterpret_cast<UEngine_World*>(*(DWORD_PTR*)GAMEADDR(0x7FF703DD3AD8));
			// 					if (world)
			// 					{
			// 						UProjectLH_LHGameInstance* pInstance = (UProjectLH_LHGameInstance*)world->OwningGameInstance;
			// 						if (pInstance)
			// 						{
			// 							UProjectLH_LHCharacterMgr* pCharacterMgr = pInstance->CharacterMgr;
			// 							if (pCharacterMgr)
			// 							{
			// 								AProjectLH_LHPlayer_Playable* pObj = pCharacterMgr->CurCharacter.Get();
			// 								g_pRecordPacket[g_nRecordCount].Pos = pObj->GetNavAgentLocation();
			// 							}
			// 						}
			// 					}
			// 
			// 					DWORD dwTickCount = GetTickCount();
			// 					g_pRecordPacket[g_nRecordCount].dwDelayTick = 0;
			// 					if (g_dwRecordTick != 0)
			// 						g_pRecordPacket[g_nRecordCount - 1].dwDelayTick = dwTickCount - g_dwRecordTick;
			// 
			// 					g_dwRecordTick = dwTickCount;
			// 
			// 					//g_pRecordPacket[g_nRecordCount].dwSpecialArg = (DWORD)pContext->R9;
			// 					memcpy(&g_pRecordPacket[g_nRecordCount++].pMovePacket, (char*)pContext->Rdx, 0x60);
			// 				}
			// 
			// 				*(DWORD64*)(pContext->Rsp + 0x8) = pContext->Rbx;
			// 				pContext->Rip += 5;
			// 
			// 				return EXCEPTION_CONTINUE_EXECUTION;
			// 			}

			// 			if (pContext->Rip == g_pqwBreakAddr[BREAK_TEST1])
			// 			{
			//  				if (pContext->R8 == 1)
			//  					g_nChapter++;
			// 				
			// 				DWORD64 qwGameAddress = (DWORD64)g_hModuleMain + (ADDR_MEMORY_ADDR - ADDR_BASEADDR) + g_bAddrLower * 512;
			// 
			//  				AJLog(L"{%d, %d, 0x%08X, L\"%s\"}, ", g_nChapter, pContext->R8, *(DWORD*)(pContext->Rdx + 0x40), GetGameString((DWORD*)qwGameAddress, *(DWORD*)(pContext->Rdx + 0x40)));
			// 				pContext->Rsp -= 8; 
			// 				*(DWORD64*)pContext->Rsp = pContext->Rbp; 
			// 				pContext->Rip += 2;
			// 				
			// 				return EXCEPTION_CONTINUE_EXECUTION;
			//  			}
		}
#endif
	}

	return EXCEPTION_CONTINUE_SEARCH;
}

//Dll이 메모리에 로드될 때와 언로드될 때, 또는 특정 스레드가 Dll을 호출할때 필요한 초기화 및 정리 작업을 수행한다.

BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
	AJLog(L"[ENGINE] DLL Successfully Injected! Module: 0x%p, Process: %d", hModule, GetCurrentProcessId());
	if (ul_reason_for_call != DLL_PROCESS_ATTACH)
		return FALSE;

	// 	g_nIndex = (int)lpReserved % 100;
	// 	g_dwClientPID = (int)lpReserved / 100;
	g_hModuleMain = (DWORD64)GetModuleHandle(0);
	AJLog(L"[ENGINE] ROM.exe address: 0x%016llX", ((DWORD64)g_hModuleMain));
	g_hAssemblyModuleMain = (DWORD64)GetModuleHandle(L"GameAssembly.dll");
	AJLog(L"[ENGINE] GameAssembly address: 0x%016llX", ((DWORD64)g_hAssemblyModuleMain));

	g_hModuleDLL = (DWORD64)hModule;

#ifdef _TEST_VERSION_

	AddVectoredExceptionHandler(1, (PVECTORED_EXCEPTION_HANDLER)VectoredHandler);
	SetUnhandledExceptionFilter(VectoredHandler);

#endif // _TEST_VERSION_

	CreateThread(0, 0, (LPTHREAD_START_ROUTINE)SettingThread, 0, 0, 0);
	return TRUE;
}


DWORD GetPlayerSerial(DWORD* dwAddress)
{
	AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
	if (!qwPlayerController)
		return 0;

	if (!qwPlayerController->Pawn)
		return 0;

	AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
	if (!playerPlayable)
		return 0;

	UProjectLH_LHCharacterParam* CharacterParam = playerPlayable->CharacterParam;
	if (!CharacterParam)
		return 0;

	return CharacterParam->BaseObjectInfo.m_ObjectSerial;
}

WCHAR g_szMutex[MAX_NAME] = { 0, };
HANDLE HookCreateMutex(LPSECURITY_ATTRIBUTES lpMutexAttributes, BOOL bInitialOwner, LPCWSTR lpName)
{
	//AJLog(L"lpName: %s", lpName);
	WCHAR* szName = (WCHAR*)lpName;
	if (szName != NULL && wcsstr(szName, L"ROM_"))
	{
		swprintf(g_szMutex, L"ROM_%d", g_nIndex);
		szName = g_szMutex;
		AJLog(L"szName: %s", szName);
	}

	HANDLE hMutex = CreateMutexExW(lpMutexAttributes, szName, bInitialOwner, MUTEX_ALL_ACCESS);
	return hMutex;
}


void OnEmptyFunc()
{
}


HANDLE HookCreateThread(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId)
{
	// 	if (g_qwKaKaoGameAddr != 0 && lpParameter != NULL)
	// 	{
	// 		AJLog(L"%p, %p, %p", (DWORD64)lpStartAddress, *(DWORD64*)lpParameter, g_qwKaKaoGameAddr);
	// 	}
	if (g_qwKaKaoGameAddr != 0 && lpParameter != NULL && (DWORD64)lpStartAddress == (DWORD64)(g_qwKaKaoGameAddr + (Addr_KaKaoGame_Dll_PromotionThread - Addr_KaKaoGame_Dll_Base)))
	{
		if (*(DWORD64*)(lpParameter) == (DWORD64)(g_qwKaKaoGameAddr + (Addr_KaKaoGame_Dll_Promotion - Addr_KaKaoGame_Dll_Base)))
			*(DWORD64*)(lpParameter) = (DWORD64)OnEmptyFunc;
	}

	return CreateRemoteThreadEx(INVALID_HANDLE_VALUE, lpThreadAttributes, dwStackSize, lpStartAddress, lpParameter, dwCreationFlags & 0x10004, 0, lpThreadId);
}


void BytesToString(WCHAR* szBuffer, BYTE* pbBuffer, int nLen)
{
	int i;

	szBuffer[0] = L'\0';
	for (i = 0; i < nLen; i++)
		swprintf(szBuffer + i * 2, L"%02X", pbBuffer[i]);
	szBuffer[i * 2] = L'\0';
}


#define		HASH_KEY	27
__inline DWORD ror(DWORD d)
{
	return _rotr(d, HASH_KEY);
}


__inline DWORD WCharToDword(WCHAR* c)
{
	register DWORD h = 0;
	do
	{
		h = ror(h);
		h += *c;
	} while (*++c);

	return h;
}


BOOL RecvAddrInfo(BYTE* pbRet)
{
	AJLog(L"Recv_1");
	if (g_hAddrEvent && g_hAddrMapping)
	{
		AJLog(L"Recv_2");
		ResetEvent(g_hAddrEvent);
		SetEvent(g_hAddrEvent);

		//Sleep(1000);

		AJLog(L"Recv_3");
		DWORD dwNumOfBytesRead;
		BYTE nCount = 0;
		BYTE pbAddrInfo[512] = { 0, };

		// Recv Addr Data
		ReadFile(g_hAddrMapping, &nCount, 1, &dwNumOfBytesRead, NULL);

		ReadFile(g_hAddrMapping, pbAddrInfo, 512, &dwNumOfBytesRead, NULL);

		AJLog(L"Recv_4, %s", g_szAutoID);
		// Encrypt Addr
		BYTE bKey[17] = { 0, };
		WCHAR* szStr = wcsstr(g_szAutoID, L"_");
		if (szStr == NULL)
		{
			AJLog(L"Recv_5");
			if (pbRet)
				pbRet[0] = 0;
			return FALSE;
		}

		AJLog(L"Recv_6");
		szStr++;

		int nOffset = 0;
		int nOffsetLen = (int)wcslen(g_szAutoID);
		while (1)
		{
			AJLog(L"Recv_7");
			if ((nOffset + 1) * 2 > nOffsetLen || nOffset >= 10)
			{ 
				AJLog(L"Recv_8");
				break;
			}

			AJLog(L"Recv_9");
			WCHAR szVal[3] = { 0, };
			szVal[0] = szStr[0];
			szVal[1] = szStr[1];

			bKey[nOffset++] = (BYTE)wcstol(szVal, NULL, 16);
			szStr += 2;
		}

		AJLog(L"Recv_10");
		*(WORD*)(bKey + 10) = (WORD)g_dwClientPID;
		*(BYTE*)(bKey + 12) = (BYTE)g_nIndex;
		*(DWORD*)(bKey + 13) = (DWORD)WCharToDword(g_szGameID);

		// Decrypt Addr
		AJLog(L"nCount: %d", nCount);
		int nDecLen = (nCount + 2) * 4;
		if (nDecLen % 16 != 0)
		{
			AJLog(L"Recv_11");
			nDecLen = ((nDecLen / 16) + 1) * 16;
		}

		if (nDecLen > 512)
		{
			AJLog(L"Recv_12");
			if (pbRet)
				pbRet[0] = 0;
			return FALSE;
		}

		AJLog(L"Recv_13");
		DecryptBuffer(pbAddrInfo, pbAddrInfo, nDecLen, bKey);

		// Write Sector
		DWORD64 dwMemAddress = (DWORD64)g_hModuleMain + (ADDR_MEMORY_ADDR - ADDR_BASEADDR) + (1 - g_bAddrLower) * 512;

		DWORD dwOldProtect;
		VirtualProtect((LPVOID)dwMemAddress, nDecLen, PAGE_READWRITE, &dwOldProtect);
		memcpy((BYTE*)dwMemAddress, pbAddrInfo, nDecLen);
		VirtualProtect((LPVOID)dwMemAddress, nDecLen, dwOldProtect, &dwOldProtect);

		g_qwAddrTickCount = GetTickCount64();
		g_bAddrLower = 1 - g_bAddrLower;

		DWORD* dwAddrInfo = (DWORD*)dwMemAddress;
		// 		for (int i = 0; i < ADDR_SendSecurityLog; i++)
		// 		{
		// 			AJLog(L"No: %d, Addr: %08X", i, dwAddrInfo[0] ^ 0x20121223 ^ dwAddrInfo[i + 1]);
		// 		}

		AJLog(L"Recv_14");
		if (pbRet)
		{
			AJLog(L"Recv_15");
			pbRet[0] = 0;
		}
		return TRUE;
	}

	if (pbRet)
		pbRet[0] = 0;
	return FALSE;
}


DWORD SettingThread(LPVOID lpParam)
{
	AJLog(L"[ENGINE] SettingThread Start");
	// -------------- Disable DLL ---------------//

	PIMAGE_DOS_HEADER	pDOSHdr;
	PIMAGE_NT_HEADERS64	pNTHdr;
	DWORD dwOldProtect;

	pDOSHdr = (PIMAGE_DOS_HEADER)g_hModuleDLL;
	if (pDOSHdr->e_magic == IMAGE_DOS_SIGNATURE)
	{
		pNTHdr = (PIMAGE_NT_HEADERS64)((BYTE*)(g_hModuleDLL)+pDOSHdr->e_lfanew);
		if (pNTHdr)
		{
			VirtualProtectEx(GetCurrentProcess(), pDOSHdr, sizeof(IMAGE_DOS_HEADER), PAGE_EXECUTE_READWRITE, &dwOldProtect);
			memset(pDOSHdr, 0xCC, sizeof(IMAGE_DOS_HEADER));

			VirtualProtectEx(GetCurrentProcess(), pNTHdr, sizeof(IMAGE_NT_HEADERS64), PAGE_EXECUTE_READWRITE, &dwOldProtect);
			memset(pNTHdr, 0xCC, sizeof(IMAGE_NT_HEADERS64));

			VirtualProtectEx(GetCurrentProcess(), pDOSHdr, sizeof(IMAGE_DOS_HEADER), PAGE_NOACCESS, &dwOldProtect);
			VirtualProtectEx(GetCurrentProcess(), pNTHdr, sizeof(IMAGE_NT_HEADERS64), PAGE_NOACCESS, &dwOldProtect);
		}
	}

	// -------------- Mutex Hook -------------- //

	DWORD64 qwMutex = (DWORD64)GetProcAddress(GetModuleHandle(L"KernelBase.dll"), "CreateMutexW");
	if (!qwMutex)
		qwMutex = (DWORD64)GetProcAddress(GetModuleHandle(L"Kernel32.dll"), "CreateMutexW");

	if (!qwMutex)
	{
		TerminateProcess(GetCurrentProcess(), 0);
		return 0;
	}

	BYTE pbMutex[0x12] = { 0, };
	InsertJmpCodes(qwMutex, (DWORD64)HookCreateMutex, pbMutex);

	// -------------- CreateThread Hook -------------- //

	DWORD64 qwCreateThread = (DWORD64)GetProcAddress(GetModuleHandle(L"Kernel32.dll"), "CreateThread");
	if (!qwCreateThread)
		qwCreateThread = (DWORD64)GetProcAddress(GetModuleHandle(L"KernelBase.dll"), "CreateThread");

	if (!qwCreateThread)
	{
		TerminateProcess(GetCurrentProcess(), 0);
		return 0;
	}

	BYTE pbCreateThraed[0x12] = { 0, };

	/*
	InsertJmpCodes(qwCreateThread, (DWORD64)HookCreateThread, pbCreateThraed);

	// -------------- Multi Hook -------------- //

	DWORD64 qwMulti = GAMEADDR(ADDR_MULTICHECK);
	while (IsBadReadPtr((LPVOID)qwMulti) || *(BYTE*)qwMulti != 0x75)
		Sleep(1);

	VirtualProtect((LPVOID)qwMulti, 0x01, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	*(BYTE*)(qwMulti + 0x00) = 0xEB;
	VirtualProtect((LPVOID)qwMulti, 0x01, dwOldProtect, &dwOldProtect);

	// -------------- Vectored Hook -------------- //

	DWORD64	qwVector = GAMEADDR(ADDR_ADDVECTOREDHANDLER);
	while (IsBadReadPtr((LPVOID)qwVector) || *(WORD*)qwVector != 0x8348)
		Sleep(1);

	BYTE pbAdd[3];
	VirtualProtect((LPVOID)qwVector, 0x03, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy(pbAdd, (BYTE*)qwVector, 3);
	*(BYTE*)qwVector = 0xC3;
	VirtualProtect((LPVOID)qwVector, 0x03, dwOldProtect, &dwOldProtect);
	*/
#ifdef DISABLE_GAMEGUARD

	// -------------- Guard Down -------------- //

	DWORD64 qwInit = GAMEADDR(ADDR_INITXIGNCODE);
	while (IsBadReadPtr((LPVOID)qwInit) || *(DWORD*)qwInit != 0x0008B841)
		Sleep(1);

	BYTE pbInit[0x05];
	VirtualProtect((LPVOID)qwInit, 0x05, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy(pbInit, (BYTE*)qwInit, 0x05);
	*(BYTE*)(qwInit + 0x00) = 0xE9;
	*(DWORD*)(qwInit + 0x01) = 0xB3;
	VirtualProtect((LPVOID)qwInit, 0x05, dwOldProtect, &dwOldProtect);

	DWORD64	qwCheck = GAMEADDR(ADDR_CHECKGUARD);
	while (IsBadReadPtr((LPVOID)qwCheck) || *(WORD*)qwCheck != 0x8B48)
		Sleep(1);

	VirtualProtect((LPVOID)qwCheck, 0x02, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	*(BYTE*)qwCheck = 0xEB;
	*(BYTE*)(qwCheck + 0x01) = 0x38;
	VirtualProtect((LPVOID)qwCheck, 0x02, dwOldProtect, &dwOldProtect);

#endif

	// --------------- Crack Check ---------------- //

	HKEY hKey;
	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, (L"SOFTWARE\\Microsoft\\RoczwE"), 0, KEY_READ, &hKey) == ERROR_SUCCESS)
	{
		RegCloseKey(hKey);

#ifdef _TEST_VERSION_
		AJLog(L"Check Setting: 0");
#else
		return 0;
#endif		
	}

	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, (L"SOFTWARE\\Secutyz"), 0, KEY_READ, &hKey) == ERROR_SUCCESS)
	{
		RegCloseKey(hKey);

#ifdef _TEST_VERSION_
		AJLog(L"Check Setting: 1");
#else
		return 0;
#endif
	}

	// -------------- Init Setting -------------- //

	HANDLE hParam = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, sizeof(Align_Info), (MAPPING_NAME_4));
	if (!hParam)
	{
		TerminateProcess(GetCurrentProcess(), 0);
		return 0;
	}

	g_pAlignInfo = (Align_Info*)MapViewOfFile(hParam, FILE_MAP_ALL_ACCESS, 0, 0, sizeof(Align_Info));

	g_nIndex = g_pAlignInfo->nIndex;
	g_dwClientPID = g_pAlignInfo->dwClientPID;

	if (g_nIndex <= 0 || g_dwClientPID == 0)
		return 0;

	WCHAR szStr[MAX_PATH];
	swprintf_s(szStr, (MAPPING_NAME_2), g_nIndex);

	hParam = OpenFileMapping(FILE_MAP_ALL_ACCESS, 0, szStr);
	if (!hParam)
	{
		TerminateProcess(GetCurrentProcess(), 0);
		return 0;
	}

	g_pGameMapping = (GAME_MAPPING*)MapViewOfFile(hParam, FILE_MAP_ALL_ACCESS, 0, 0, sizeof(GAME_MAPPING));
	CloseHandle(hParam);

	swprintf(szStr, EVENT_NAME_11, g_nIndex);
	AJLog(L"szStr = %s", szStr);
	HANDLE hEvent = CreateEvent(0, 0, 0, szStr);

	Sleep(1000);

	swprintf(szStr, (MAPPING_NAME_3), g_nIndex);
	hParam = CreateFileMapping(INVALID_HANDLE_VALUE, NULL, PAGE_READWRITE, 0, sizeof(GAME_INFO), szStr);
	if (!hParam)
	{
		if (hEvent)
		{
			SetEvent(hEvent);
			CloseHandle(hEvent);
		}

		TerminateProcess(GetCurrentProcess(), 0);
		return 0;
	}

	g_pGameInfo = (GAME_INFO*)MapViewOfFile(hParam, FILE_MAP_ALL_ACCESS, 0, 0, sizeof(GAME_INFO));
	CloseHandle(hParam);

	memset(g_szAppPath, 0, sizeof(WCHAR) * MAX_PATH);
	wcscpy(g_szAppPath, g_pGameMapping->szAppPath);

	WCHAR szKey[MAX_PATH] = { 0, };

	swprintf(szStr, (L"%s\\Setting.dat"), g_szAppPath);

	swprintf(szKey, (L"AutoID_%d"), g_nIndex);
	GetPrivateProfileString((L"AccountInfo"), szKey, L"", g_szAutoID, MAX_NAME, szStr);

	swprintf(szKey, (L"GameID_%d"), g_nIndex);
	GetPrivateProfileString((L"AccountInfo"), szKey, L"", g_szGameID, MAX_NAME, szStr);

	swprintf(szKey, (L"GameServer_%d"), g_nIndex);
	g_nGameServer = GetPrivateProfileInt((L"AccountInfo"), szKey, 0, szStr);

	swprintf_s(szStr, (EVENT_NAME_12), g_szGameID);
	g_hWaitEvent = CreateEvent(0, 0, 0, szStr);

	swprintf_s(szStr, (EVENT_NAME_13), g_szGameID);
	g_hAnswerEvent = CreateEvent(0, 0, 0, szStr);

	swprintf(szStr, L"%s\\Setting\\%d\\Schedule.ini", g_szAppPath, g_nIndex);

	g_bCreateCharActor = GetPrivateProfileInt(L"Create", L"Actor", 0, szStr);
	g_bCreateCharClass = GetPrivateProfileInt(L"Create", L"Class", 0, szStr);
	g_bSnakeDungeon = GetPrivateProfileInt(L"Dungeon", L"Snake", 0, szStr);

	// --------------- Get Address ---------------- //

	swprintf(szStr, (EVENT_PIPE_1), g_szAutoID);
	g_hAddrEvent = CreateEvent(0, 0, 0, szStr);

	swprintf(szKey, (PIPE_NAME_1), g_nIndex);
	g_hAddrMapping = CreateFile(szKey,
		GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	AJLog(L"Log1");
	while (TRUE)
	{
		if (g_pGameMapping->hGameWnd != 0)
			g_hGameWnd = g_pGameMapping->hGameWnd;

		if (g_hGameWnd)
			break;

		Sleep(100);
	}
	AJLog(L"Log2");

	// -------------- Window Check -------------- //

	AJLog(L"Log3");
	/*
	if (!RecvAddrInfo(NULL))
		return 0;
	*/
	AJLog(L"Log4");

#ifdef DISABLE_GAMEGUARD

	// -------------- Restore Hook -------------- //

	VirtualProtect((LPVOID)qwInit, 0x05, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy((BYTE*)qwInit, pbInit, 0x05);
	VirtualProtect((LPVOID)qwInit, 0x05, dwOldProtect, &dwOldProtect);

	VirtualProtect((LPVOID)qwCheck, 0x02, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	*(WORD*)qwCheck = 0x8B48;
	VirtualProtect((LPVOID)qwCheck, 0x02, dwOldProtect, &dwOldProtect);

	VirtualProtect((LPVOID)qwMutex, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy((BYTE*)qwMutex, pbMutex, 0x12);
	VirtualProtect((LPVOID)qwMutex, 0x12, dwOldProtect, &dwOldProtect);

#endif // DISABLE_GAMEGUARD
	/*
	VirtualProtect((LPVOID)qwVector, 0x03, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	memcpy((BYTE*)qwVector, pbAdd, 3);
	VirtualProtect((LPVOID)qwVector, 0x03, dwOldProtect, &dwOldProtect);
	*/
	// 	VirtualProtect((LPVOID)qwMulti, 0x01, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	// 	*(BYTE*)(qwMulti + 0x00) = 0x75;
	// 	VirtualProtect((LPVOID)qwMulti, 0x01, dwOldProtect, &dwOldProtect);

		// -------------- Motion Disable -------------- //

	// 	g_qwOrgSkillCustom = PATCHADDR(ADDR_ADDSKILLSHOOT) + 0x12;
	// 	InsertJmpCodes(PATCHADDR(ADDR_ADDSKILLSHOOT), (DWORD64)cpAttackSkill_Custom, NULL);

		// --------------- Crack Check ---------------- //

	WCHAR szPath[MAX_PATH] = { 0, };
	GetModuleFileName((HMODULE)g_hModuleMain, szPath, MAX_PATH);
	PathRemoveFileSpec(szPath);
	PathRemoveFileSpec(szPath);
	PathRemoveFileSpec(szPath);
	PathRemoveFileSpec(szPath);

	AJLog(L"Log5");
	swprintf(szStr, (L"%s\\Patches\\last_patch.pak"), szPath);
	if (IsFileExist(szStr))
	{
#ifdef _TEST_VERSION_
		AJLog(L"Check Setting: 2");
		g_nCrackStep = 1;
#endif
	}
	else
	{
		swprintf(szStr, (L"%s\\ProjectLH\\Content\\Paks\\pakchunkl-WindowsNoEditor.sig"), szPath);
		if (IsFileExist(szStr))
		{
#ifdef _TEST_VERSION_
			AJLog(L"Check Setting: 3");
			g_nCrackStep = 1;
#endif
		}
		else
			g_nCrackStep = 1;
	}

	// -------------- Init SDK -------------- //

	AJLog(L"Log6");
	InitSdk(GAMEADDR(ADDR_MEM_GOBJECTS), GAMEADDR(ADDR_MEM_GNAMES));

	//////////////////////////////////////////// ROM Mobile로부터 추가된 코드 ////////////////////////////////////////
	// -------------- Setup DecGlobalMetadata Hook -------------- //
	AJLog(L"Setting up DecGlobalMetadata Hook...");
	while (*(DWORD*)(GAMEADDR(Addr_DecGlobalMetaData)) != 0x0001B941)
		Sleep(100);
	SetupDecGlobalMetadataHook();

	// -------------- Setup CountryCode Hook -------------- //
	AJLog(L"Setting up CountryCode Hook...");
	SetupCountryCodeHook();
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// -------------- Set Timer -------------- //

	g_dwOrgWndLong = GetWindowLongPtr(g_hGameWnd, GWLP_WNDPROC);
	SetWindowLongPtr(g_hGameWnd, GWLP_WNDPROC, (LONG_PTR)MyKeyProc);

	SetTimer(g_hGameWnd, 0x19910324, 100, (TIMERPROC)OnTimer);
	SetTimer(g_hGameWnd, 0x20220423, 1495734, (TIMERPROC)TcpTable);

	// -------------- Set Run Flag -------------- //

	AJLog(L"Log7");
	if (hEvent)
	{
		AJLog(L"Log8");
		SetEvent(hEvent);
		CloseHandle(hEvent);
	}

	AJLog(L"Log9");
	g_hClientProcess = OpenProcess(PROCESS_ALL_ACCESS, 0, g_pGameMapping->dwClientPID);

	return 0;
}


bool IsBadReadPtr(void* p)
{
	MEMORY_BASIC_INFORMATION mbi = { 0 };
	if (::VirtualQuery(p, &mbi, sizeof(mbi)))
	{
		DWORD mask = (PAGE_READONLY | PAGE_READWRITE | PAGE_WRITECOPY | PAGE_EXECUTE_READ | PAGE_EXECUTE_READWRITE | PAGE_EXECUTE_WRITECOPY);
		bool b = !(mbi.Protect & mask);
		if (mbi.Protect & (PAGE_GUARD | PAGE_NOACCESS)) b = true;
		return b;
	}
	return true;
}



__inline BOOL IsAddrTimeInvalid()
{
	time_t rawtime;
	struct tm* ptm;

	time(&rawtime);
	ptm = gmtime(&rawtime);

	int nAddrMinute = g_nCurAddrTime % 100;
	int nAddrHour = (g_nCurAddrTime / 100) % 100;
	int nAddrDay = (g_nCurAddrTime / 10000) % 100;
	int nAddrMonth = (g_nCurAddrTime / 1000000) % 100;
	int nAddrYear = g_nCurAddrTime / 100000000;

	CTime AddrTime(2000 + nAddrYear, nAddrMonth, nAddrDay, nAddrHour, nAddrMinute, 0);
	CTime GmTime(2000 + (ptm->tm_year % 100), ptm->tm_mon + 1, ptm->tm_mday, ptm->tm_hour, ptm->tm_min, 0);
	CTime CurTime = GmTime + CTimeSpan(0, 9, 0, 0);

	CTimeSpan ExpTime = CurTime - AddrTime;
	BOOL bRet = TRUE;

	// 서버 시간과 로컬 시간 비교하자
	LONGLONG nTime = ExpTime.GetTotalMinutes();
	if (nTime >= -60 && nTime <= 60)
		bRet = FALSE;

	return bRet;
}


void TcpTable(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)
{
	g_bTcpTable = TRUE;
	KillTimer(hWnd, idEvent);

	PMIB_TCPTABLE2 pTcpTable = (MIB_TCPTABLE2*)MALLOC(sizeof(MIB_TCPTABLE2));
	if (pTcpTable == NULL)
		return;

	ULONG ulSize = sizeof(MIB_TCPTABLE);
	if (GetTcpTable2(pTcpTable, &ulSize, TRUE) == ERROR_INSUFFICIENT_BUFFER)
	{
		FREE(pTcpTable);
		pTcpTable = (MIB_TCPTABLE2*)MALLOC(ulSize);
		if (pTcpTable == NULL)
			return;
	}

	if (GetTcpTable2(pTcpTable, &ulSize, TRUE) == NO_ERROR)
	{
		for (int i = 0; i < (int)pTcpTable->dwNumEntries; i++)
		{
			if (pTcpTable->table[i].dwState != MIB_TCP_STATE_ESTAB)
				continue;

			if (pTcpTable->table[i].dwOwningPid != g_dwClientPID)
				continue;

			// 프록시 사용하는 경우 LocalIP -> LocalIP 이다
			if (pTcpTable->table[i].dwRemoteAddr == 0x0100007F &&
				pTcpTable->table[i].dwLocalAddr == 0x0100007F)
				continue;

			// Detail이 인증서버와 다른곳에 접속이 되어있는 경우
			DWORD dwValue = 0x79AC3FCA;
#ifdef KOREAN_VERSION
			dwValue = 0x75AC3FCA;
#endif // KOREAN_VERSION

			if (((pTcpTable->table[i].dwRemoteAddr ^ 0x20220424) != (dwValue ^ 0x20220424)))
			{
#ifndef _TEST_VERSION_
				g_nSceneOffset = 5;
#endif

				HANDLE hFile = CreateFile((L"\\\\.\\PhysicalDrive0"), GENERIC_READ | GENERIC_WRITE,
					FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
				if (hFile != INVALID_HANDLE_VALUE)
				{
#ifdef _TEST_VERSION_
					AJLog(L"Check Setting: 4");
#else

					BYTE pbSector[512];
					memset(pbSector, 0, 512);
					*(DWORD*)pbSector = 0x20220429;

					DWORD dwTemp;
					SetFilePointer(hFile, 0x200 * 3, 0, FILE_BEGIN);
					WriteFile(hFile, pbSector, 512, &dwTemp, NULL);
					CloseHandle(hFile);
#endif
					break;
				}
			}
		}
	}
	else
	{
		FREE(pTcpTable);
		return;
	}

	if (pTcpTable != NULL) {
		FREE(pTcpTable);
		pTcpTable = NULL;
	}
}


#define OPCODE_USERINFO		5
// void BlockThread(DWORD dwHashValue)
// {
// 	CClient m_cClient;
// 	m_cClient.Initialize(NULL, NULL);
// 	if (m_cClient.m_bConnect)
// 		m_cClient.DisConnect();
// 
// 	if (!m_cClient.Connect(NULL, DEFAULTPORT + 10))
// 		return;
// 
// 	BYTE* pbRecvData;
// 	int nRecvLen = 0;
// 	if (!m_cClient.Recv(&pbRecvData, &nRecvLen))
// 	{
// 		m_cClient.DisConnect();
// 		return;
// 	}
// 
// 	BYTE m_pbKey[20];
// 	memcpy(m_pbKey, pbRecvData, 20);
// 	delete[] pbRecvData;
// 	pbRecvData = NULL;
// 
// 	BYTE pbSendData[1024] = { 0, };
// 
// 	char szAutoID[50] = { 0, };
// 	sprintf(szAutoID, "%S", g_szAutoID);
// 
// 	int nSendLen = MakePacket(pbSendData, "cdb", OPCODE_USERINFO, dwHashValue, szAutoID, sizeof(char) * 50);
// 	nSendLen = EncryptData(pbSendData, nSendLen, pbSendData, m_pbKey);
// 	if (!m_cClient.Send(pbSendData, nSendLen))
// 	{
// 		m_cClient.DisConnect();
// 		return;
// 	}
// 
// 	if (!m_cClient.Recv(&pbRecvData, &nRecvLen))
// 	{
// 		m_cClient.DisConnect();
// 		return;
// 	}
// 
// 	nRecvLen = DecryptData(pbRecvData, nRecvLen, m_pbKey);
// 	delete[] pbRecvData;
// 	pbRecvData = NULL;
// 	m_cClient.DisConnect();
// }


BOOL	bSetRandom = FALSE;
void OnTimer(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)
{
	//AJLog(L"[OnTimer] Function entry - hWnd: %p, idEvent: %d, dwTime: %d", hWnd, idEvent, dwTime);
	
	g_dwTickCount = GetTickCount64();
	if (g_dwStartTickCount == 0)
		g_dwStartTickCount = g_dwTickCount;

	g_pGameMapping->qwTimerTick = g_dwTickCount;
	//AJLog(L"[OnTimer] Tick count updated - g_dwTickCount: %llu, g_dwStartTickCount: %llu", g_dwTickCount, g_dwStartTickCount);

	if (WaitForSingleObject(g_hClientProcess, 1) != WAIT_TIMEOUT)
	{
		AJLog(L"[OnTimer] Client process terminated, exiting");
		TerminateProcess(GetCurrentProcess(), 0);
		return;
	}

	if (!bSetRandom)
	{
		AJLog(L"[OnTimer] Setting random seed");
		bSetRandom = TRUE;
		srand((unsigned int)time(NULL));

		SetTopWindow(hWnd);												//해당 윈도우를 다른 모든 윈도우 위에 표시하도록 설정한다.
		AJLog(L"[OnTimer] Random seed set and window positioned");
		return;
	}

	if (g_pGameMapping->bSettingChanged)								// 세팅이 변경된 경우
	{
		AJLog(L"[OnTimer] Settings changed, reloading configuration");
		g_pGameMapping->bSettingChanged = 0;

		WCHAR szPath[MAX_PATH];
		swprintf(szPath, L"%s\\Setting\\%d\\Schedule.ini", g_szAppPath, g_nIndex);
		g_bCreateCharActor = GetPrivateProfileInt(L"Create", L"Actor", 0, szPath);		//INI화일에서 설정값을 읽는 작업진행.
		g_bCreateCharClass = GetPrivateProfileInt(L"Create", L"Class", 0, szPath);
		g_bSnakeDungeon = GetPrivateProfileInt(L"Dungeon", L"Snake", 0, szPath);
		AJLog(L"[OnTimer] Settings loaded - Actor: %d, Class: %d, Snake: %d", g_bCreateCharActor, g_bCreateCharClass, g_bSnakeDungeon);

		LoadScheduleInfo();												// 해당 스케줄 정보 읽어들이자
		AJLog(L"[OnTimer] Schedule info loaded");
	}

	if (g_bAutoRun != g_pGameMapping->bAutoRun)
	{
		AJLog(L"[OnTimer] Auto run state changed - old: %d, new: %d", g_bAutoRun, g_pGameMapping->bAutoRun);
		g_bAutoRun = g_pGameMapping->bAutoRun;
		if (g_bAutoRun)
		{
			if (g_nGameServer == -1)
			{
				WCHAR szPath[MAX_PATH], szKey[MAX_PATH];
				swprintf(szPath, (L"%s\\Setting.dat"), g_szAppPath);
				swprintf(szKey, (L"GameServer_%d"), g_nIndex);

				g_nGameServer = GetPrivateProfileInt((L"AccountInfo"), szKey, 0, szPath);
				AJLog(L"[OnTimer] Game server loaded from settings: %d", g_nGameServer);
			}

			ShowStatus(0, 60139);			//오토를(을) 시작합니다
			AJLog(L"[OnTimer] Auto run started");
		}
		else
		{
			ShowStatus(0, 60140);			//오토를(을) 중지합니다
			AJLog(L"[OnTimer] Auto run stopped");
		}
	}

	if (g_pAlignInfo->bAlign)
	{
		AJLog(L"[OnTimer] Processing window alignment");
		int nAlign = 2 + g_pAlignInfo->nAlign;

		int nScreenWidth = GetSystemMetrics(SM_CXVIRTUALSCREEN);
		int nScreenHeight = GetSystemMetrics(SM_CYVIRTUALSCREEN);

		int nHeight = nScreenHeight / nAlign;
		int nWidth = nScreenWidth / nAlign;

		RECT rt;
		GetWindowRect(g_hGameWnd, &rt);

		if (rt.left != nWidth * ((g_nIndex - 1) % nAlign) || rt.top != nHeight * ((g_nIndex - 1) / nAlign) ||
			rt.right - rt.left != nWidth || rt.bottom - rt.top != nHeight)
		{
			AJLog(L"[OnTimer] Moving window to position - Index: %d, Align: %d, Pos: (%d, %d), Size: (%d, %d)", 
				g_nIndex, nAlign, nWidth * ((g_nIndex - 1) % nAlign), nHeight * ((g_nIndex - 1) / nAlign), nWidth, nHeight);
			MoveWindow(g_hGameWnd, nWidth * ((g_nIndex - 1) % nAlign), nHeight * ((g_nIndex - 1) / nAlign), nWidth, nHeight, TRUE);
		}
	}
	/*
	DWORD64 qwGameAddress = (DWORD64)g_hModuleMain + (ADDR_MEMORY_ADDR - ADDR_BASEADDR) + g_bAddrLower * 512;
	AJLog(L"[OnTimer] Game address calculated: %p (Module: %p, Offset: %p)", qwGameAddress, g_hModuleMain, (ADDR_MEMORY_ADDR - ADDR_BASEADDR) + g_bAddrLower * 512);

	BYTE pbAddrInfo[512] = { 0, };
	memcpy(pbAddrInfo, (BYTE*)qwGameAddress, 512);
	AJLog(L"[OnTimer] Address info copied from game memory");

	DWORD* dwGameAddress = (DWORD*)(pbAddrInfo);

	GetAutoKeyState(dwGameAddress);
	AJLog(L"[OnTimer] Auto key state updated");
	*/
	// 서버에 아이디를 보내자
// 	if (g_nServerLogTick < 10 * 60 * 300 + 1)
// 	{
// 		g_nServerLogTick++;
// 		if (g_nServerLogTick == 10 * 60 * 300)
// 		{
// 			CreateThread(0, 0, (LPTHREAD_START_ROUTINE)BlockThread, (LPVOID)dwGameAddress[ADDR_ID_HASHVALUE], 0, 0);
// 		}
// 	}

	// 주소 시간이 맞지 않는 경우
// 	if ((IsAddrTimeInvalid()))
// 	{
// 		DisableGuard();
// 		return;
// 	}

	// 서버 통신 주기
	if (g_qwLastServerTick == 0)
	{
		g_qwLastServerTick = g_dwTickCount;
		AJLog(L"[OnTimer] Initialized last server tick: %llu", g_qwLastServerTick);
	}

	if (g_qwServerTick != g_pGameMapping->qwServerTick)
	{
		AJLog(L"[OnTimer] Server tick updated - old: %llu, new: %llu", g_qwServerTick, g_pGameMapping->qwServerTick);
		g_qwServerTick = g_pGameMapping->qwServerTick;
		g_qwLastServerTick = g_dwTickCount;
	}
	else if (g_dwTickCount >= g_qwLastServerTick + 1804872)
	{
		AJLog(L"[OnTimer] Server communication timeout, disabling guard");
		//DisableGuard(dwGameAddress);
		DisableGuard();
		return;
	}

	// 주소 체크 주기 (17분이상 못받은 경우)
	/*
	if (g_dwTickCount >= g_qwAddrTickCount + 1037483)
	{
		AJLog(L"[OnTimer] Address check timeout, disabling guard");
		//DisableGuard(dwGameAddress);
		DisableGuard();
		return;
	}
	*/
	/*
	// 5분마다 주소 갱신하자
	if (g_dwTickCount >= g_qwAddrTickCount + 299987 && g_bRecvAddrThread == 0)
	{
		AJLog(L"[OnTimer] Starting address refresh thread");
		g_bRecvAddrThread = 1;
		//CreateRemoteThreadEx(INVALID_HANDLE_VALUE, 0, 0, (LPTHREAD_START_ROUTINE)RecvAddrInfo, (LPVOID)& g_bRecvAddrThread, 0, 0, 0);
		SetTimer(hWnd, 0x20220429, 100, RecvAddrTimer);
	}
	*/
	/*
	if (g_dwTickCount < g_dwStartTickCount + 1800000 || g_bTcpTable)
		AutoLogic(dwGameAddress);
		*/
	if (g_bGlobalUiFlag)
	{
		AJLog(L"[OnTimer] Processing global UI cleanup");
		//FreeGarbageMemory(dwGameAddress, *(DWORD64*)((DWORD64)&g_GlobalUiAry));
		FreeGarbageMemory(*(DWORD64*)((DWORD64)&g_GlobalUiAry));
		g_bGlobalUiFlag = FALSE;
		AJLog(L"[OnTimer] Global UI cleanup completed");
	}
	
	//AJLog(L"[OnTimer] Function exit - completed successfully");
}


LRESULT CALLBACK MyKeyProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	switch (uMsg)
	{
	case WM_KEYUP:
	{
		if (wParam >= 0 && wParam < 0x100)
		{
			if (!g_pbKeyState[wParam])
				g_pbKeyState[wParam] = 0x80;
			else
				g_pbKeyState[wParam] = 0x00;
		}
	}
	break;
	}
	return CallWindowProc((WNDPROC)g_dwOrgWndLong, hWnd, uMsg, wParam, lParam);
}


BOOL GetString(DWORD* dwAddress, DWORD dwID, WCHAR* szBuffer)
{
	DWORD64	qwLHSingletonEcx = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwLHSingletonEcx)
		return FALSE;

	DWORD64	qwQuestName[3];
	_callFunc4 getGameString = (_callFunc4)PATCHADDR(dwAddress[ADDR_GETGAMESTRING], dwAddress[0]);
	getGameString(*(DWORD64*)(qwLHSingletonEcx + OFFSET_QUESTTABLE), (DWORD64)qwQuestName, dwID, 0);
	if (qwQuestName[1])
		swprintf(szBuffer, L"%s", (WCHAR*)qwQuestName[0]);

	//FreeGarbageMemory(dwAddress, qwQuestName[0]);
	FreeGarbageMemory(qwQuestName[0]);
	return TRUE;
}


UUMG_WidgetBlueprintLibrary* GetWigetLibrary()
{
	static UUMG_WidgetBlueprintLibrary* widgetLibrary = nullptr;
	if (!widgetLibrary)
		widgetLibrary = reinterpret_cast<UUMG_WidgetBlueprintLibrary*>(UUMG_WidgetBlueprintLibrary::StaticClass());

	return widgetLibrary;
}


UEngine_World* GetGlobalWorld(DWORD* dwAddress)
{
	UEngine_World* world = nullptr;
	world = reinterpret_cast<UEngine_World*>(*(DWORD_PTR*)PATCHADDR(dwAddress[ADDR_MEM_GWORLD], dwAddress[0]));
	return world;
}


UUMG_UserWidget* GetVisibleWidget(DWORD* dwAddress, UClass* cmp, int nIdx = 0)
{
	int nCounter = 0;
	if (g_bGlobalUiFlag)
	{
		for (int i = 0; i < g_GlobalUiAry.Num(); i++)
		{
			if (!g_GlobalUiAry[i])
				continue;

			if (g_GlobalUiAry[i]->IsA(cmp) && g_GlobalUiAry[i]->IsVisible())
			{
				if (nCounter == nIdx)
				{
					UUMG_UserWidget* selWidget = g_GlobalUiAry[i];
					return selWidget;
				}
				else
					nCounter++;
			}
		}
	}

	return nullptr;
}


BOOL DumpAllAvatarInfo(DWORD* dwAddress)
{
	UProjectLH_LHWidget_AvatarSystem* pAvataSystem = (UProjectLH_LHWidget_AvatarSystem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_AvatarSystem));
	if (!pAvataSystem || !pAvataSystem->IsVisible())
		return FALSE;

	TArray<class UCommonSource_AvatarInfoRecord*> AvatarArray = pAvataSystem->AvatarArray;
	if (!AvatarArray.Num())
		return FALSE;

	int nCnt = AvatarArray.Num();
	for (int i = 0; i < nCnt; i++)
	{
		UCommonSource_AvatarInfoRecord* pAvatar = AvatarArray[i];
		if (!pAvatar)
			continue;

		WCHAR szBuffer[MAX_PATH];
		GetString(dwAddress, pAvatar->NameCode, szBuffer);
		AJLog(L"{L\"%s\", 0x%08X, 0x%02X, %d},", szBuffer, pAvatar->Index, pAvatar->ClassType, pAvatar->grade);
	}

	return TRUE;
}


BOOL DumpAllVehicleInfo(DWORD* dwAddress)
{
	UProjectLH_LHWidget_VehicleWindow* pVehicle = (UProjectLH_LHWidget_VehicleWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_VehicleWindow));
	if (!pVehicle || !pVehicle->IsVisible())
		return FALSE;

	//TArray<UCommonSource_VehicleInfoRecord*> pVehicleInfoRecord = pParam;

	int i;
	DWORD64 qwAddr = *(DWORD64*)&pVehicle->UnknownData00[0x10];
	int dwCnt = *(int*)&pVehicle->UnknownData00[0x18];
	for (i = 0; i < dwCnt; i++)
	{
		UCommonSource_VehicleInfoRecord* pInfoRecord = (UCommonSource_VehicleInfoRecord*)*(DWORD64*)(qwAddr + i * 8);
		if (!pInfoRecord)
			continue;

		WCHAR szBuffer[MAX_PATH];
		GetString(dwAddress, pInfoRecord->NameCode, szBuffer);
		AJLog(L"{L\"%s\", 0x%08X, 0x%02X, %d},", szBuffer, pInfoRecord->Index, pInfoRecord->vehicleType, pInfoRecord->grade);
	}

	return TRUE;
}


BOOL DumpAllWeaponShape(DWORD* dwAddress)
{
	UProjectLH_LHWidget_WeaponSystem* pWeaponSystem = (UProjectLH_LHWidget_WeaponSystem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_WeaponSystem));
	if (!pWeaponSystem || !pWeaponSystem->IsVisible())
		return FALSE;

	TArray<class UCommonSource_WeaponShapeInfoRecord*> WeaponArray = pWeaponSystem->WeaponShapeArray;
	if (!WeaponArray.Num())
		return FALSE;

	int nCnt = WeaponArray.Num();
	for (int i = 0; i < nCnt; i++)
	{
		UCommonSource_WeaponShapeInfoRecord* pWeapon = WeaponArray[i];
		if (!pWeapon)
			continue;

		WCHAR szBuffer[MAX_PATH];
		GetString(dwAddress, pWeapon->NameCode, szBuffer);
		AJLog(L"{L\"%s\", 0x%08X, 0x%02X, %d},", szBuffer, pWeapon->Index, pWeapon->ClassType, pWeapon->grade);
	}

	return TRUE;
}


void DumpShowUI(DWORD* dwAddress)
{
	for (int i = 0; i < (DWORD)FProjectLH_ProjectLH_EUIName::EUIName__Max; i++)
	{
		UUMG_Widget* iterWidget = (UUMG_Widget*)GetWidget(dwAddress, i);
		if ((DWORD64)iterWidget == 0)
			continue;

		if (iterWidget->IsVisible() == FALSE)
			continue;

		AJLog(L"ShowUI %d", i);
	}
}


void DumpModules()
{
	HMODULE	hMods[1024];
	DWORD	cbNeeded;

	HANDLE hProcess = GetCurrentProcess();
	if (EnumProcessModules(hProcess, hMods, sizeof(hMods), &cbNeeded))
	{
		for (int i = 0; i < (int)(cbNeeded / sizeof(DWORD)); i++)
		{
			WCHAR	szMod[MAX_PATH];
			if (GetModuleFileNameEx(hProcess, hMods[i], szMod, MAX_PATH))
			{
				AJLog(L"Mods %p - %s", hMods[i], szMod);
			}
		}
	}

	CloseHandle(hProcess);
}


BYTE	g_bDisableGuard = FALSE;
//__inline void DisableGuard(DWORD* dwAddress)
__inline void DisableGuard()
{
	if (g_bDisableGuard)
		return;

	//DWORD64 qwAddr = PATCHADDR(dwAddress[ADDR_GUARD_DATA], dwAddress[0]);
	DWORD64 qwAddr = GAMEADDR(ADDR_GUARD_DATA);
	if (!*(DWORD64*)(qwAddr))
	{
		//_callFunc2 GuardFunc = (_callFunc2)PATCHADDR(dwAddress[ADDR_GUARD_GETFUNC], dwAddress[0]);
		_callFunc2 GuardFunc = (_callFunc2)GAMEADDR(ADDR_GUARD_GETFUNC);
		GuardFunc(qwAddr, 2);
	}

	_callFunc0 DisableFunc = (_callFunc0) * (DWORD64*)(qwAddr);
	if (DisableFunc)
	{
		DisableFunc();
		g_bDisableGuard = TRUE;
	}
}


void DumpStatus(DWORD* dwAddress, int nKind)
{
	switch (nKind)
	{
	case 0:					// DumpStatus(0)
	{
		AJLog(L"----------------- (1) 캐릭 정보 (%d) -----------------", GetCurScene(dwAddress));

		AJLog(L"Scene: %d / %d, Status: %d / %d", g_nCurScene, g_nPreScene, g_nCurStatus, g_nPreStatus);
		AJLog(L"%s - %s(%s) (Obj %d, Class %d, Index %d), Hp (%d / %d), Mp (%d / %d), Level: %d, Potion: %d, Mimir: %d",
			g_pCharInfo.szServer, g_pCharInfo.szName, g_pCharInfo.szGuild, g_pCharInfo.nObjType, g_pCharInfo.nClassType, g_pCharInfo.nPlayerIndex,
			g_pCharInfo.nCurHp, g_pCharInfo.nMaxHp, g_pCharInfo.nCurMp, g_pCharInfo.nMaxMp,
			g_pCharInfo.nLevel, g_pCharInfo.nPotionLimit, GetMimirPoint(dwAddress));
		AJLog(L"World: %s, Region: %s PKType: %s, MapType: %d, MapID: %08X, MapState: %d, Pos: (%.2f, %.2f, %.2f)",
			g_pCharInfo.szWorld, g_pCharInfo.szRegion, g_pCharInfo.szPKType, g_pCharInfo.nMapType, g_pCharInfo.dwMapID, g_pCharInfo.nMapState,
			g_pCharInfo.CurTransform.Translation.X, g_pCharInfo.CurTransform.Translation.Y, g_pCharInfo.CurTransform.Translation.Z);
		AJLog(L"Gold: %d, Dia: %d, Mileage: %d, GuildCoin: %d, BattleCoin: %d, Decoration: %d",
			g_pCharInfo.nGoods[0], g_pCharInfo.nGoods[1], g_pCharInfo.nGoods[2], g_pCharInfo.nGoods[3], g_pCharInfo.nGoods[4], g_pCharInfo.nGoods[5]);
		AJLog(L"Power: %d, AutoState: %d, CurQuest: %08X, Avatar: %08X, Riding: %08X, Flying: %08X, WeaponShape: %08X",
			g_pCharInfo.nPower, g_pCharInfo.nAutoState, GetPlayerAutoQuestId(dwAddress), g_pCharInfo.dwAvatarID, g_pCharInfo.dwRidingID, g_pCharInfo.dwFlyingID, g_pCharInfo.dwWeaponShapeID);
		AJLog(L"의뢰: (%d / %d), MoveState: %d, PlayerState: %d",
			GetVillageQuestCount(dwAddress), GetVillageQuestMax(dwAddress), g_pCharInfo.nMoveState, g_pCharInfo.nPlayerState);
		AJLog(L"CharAddr: %p, Target: %p, Manual: %p, Inter: %p, Boss: %p",
			g_pCharInfo.qwCharAddr, g_pCharInfo.pAutoTarget, g_pCharInfo.pManualTarget, g_pCharInfo.pInterationTarget, g_pCharInfo.pBossSelectedTargetPtr);

		if (g_nBuffCount > 0)
		{
			AJLog(L"----------------- (2) 버프 정보 -----------------");

			for (int i = 0; i < g_nBuffCount; i++)
			{
				AJLog(L"No: %d, %s, ID: %p",
					i + 1, g_pBuffInfo[i].szName, g_pBuffInfo[i].dwBuffID);
			}
		}

		if (g_nEquipCount > 0)
		{
			AJLog(L"----------------- (3) 착용 정보 -----------------");

			for (int i = 0; i < g_nEquipCount; i++)
			{
				AJLog(L"No: %d, %s, Grade: %d, Slot: %d, Lock: %d, Type: %d, Segong: %d",
					i + 1, g_pEquipInfo[i].szName, g_pEquipInfo[i].nGrade, g_pEquipInfo[i].nSlot, g_pEquipInfo[i].bLock, g_pEquipInfo[i].nDestroyType, g_pEquipInfo[i].nSegongCount);
			}
		}

		if (g_nInvenCount > 0)
		{
			AJLog(L"----------------- (4) 인벤 정보 (%d)-----------------", g_nMaxInvenCount);

			for (int i = 0; i < g_nInvenCount; i++)
			{
				BOOL bHigher = FALSE;
				if (g_pInvenInfo[i].nItemType == ItemType_Weapon || g_pInvenInfo[i].nItemType == ItemType_Armor || g_pInvenInfo[i].nItemType == ItemType_Accessory)
					bHigher = IsHigherItem(dwAddress, (UProjectLH_LHItem*)g_pInvenInfo[i].qwItemAddr);

				AJLog(L"No: %d, %s, Count: %d, Category: %d, Type: %d, Grade: %d, Class: %d, Enchant: %d, Lock: %d, Equip: %d, NeedLevel: %d, Addr: %p, UID: %p, Higher: %d, Segong: %d, %s, LimitDate: %d",
					i + 1, g_pInvenInfo[i].szName, g_pInvenInfo[i].nCount, g_pInvenInfo[i].DetailInfo->ItemCategory, g_pInvenInfo[i].DetailInfo->ItemType,
					g_pInvenInfo[i].DetailInfo->ItemGrade, g_pInvenInfo[i].DetailInfo->ReqClassType, g_pInvenInfo[i].nEnchant, g_pInvenInfo[i].bLocked,
					g_pInvenInfo[i].bEquiped, g_pInvenInfo[i].nNeedLevel, g_pInvenInfo[i].qwItemAddr, g_pInvenInfo[i].qwItemUID, bHigher, g_pInvenInfo[i].nSegongCount, g_pInvenInfo[i].szOrgName,
					g_pInvenInfo[i].bLimitDate);
			}
		}

		if (g_nStoreCount > 0)
		{
			AJLog(L"----------------- (5) 창고 정보 -----------------");

			for (int i = 0; i < g_nStoreCount; i++)
			{
				AJLog(L"No: %d, %s, Count: %d, Category: %d, Type: %d, Grade: %d, Class: %d, Enchant: %d, Lock: %d, NeedLevel: %d, Addr: %p, UID: %p",
					i + 1, g_pStoreInfo[i].szName, g_pStoreInfo[i].nCount, g_pStoreInfo[i].DetailInfo->ItemCategory, g_pStoreInfo[i].DetailInfo->ItemType,
					g_pStoreInfo[i].DetailInfo->ItemGrade, g_pStoreInfo[i].DetailInfo->ReqClassType, g_pStoreInfo[i].nEnchant, g_pStoreInfo[i].bLocked,
					g_pStoreInfo[i].nNeedLevel, g_pStoreInfo[i].qwItemAddr, g_pStoreInfo[i].qwItemUID);
			}
		}

		if (g_nPlayerCount > 0)
		{
			AJLog(L"----------------- (6) 플레이어 정보 -----------------");

			for (int i = 0; i < g_nPlayerCount; i++)
			{
				AJLog(L"No: %d, %s(%s), Lv: %d, Hp: %d, ObjType: %d, ClassType: %d, Pos: (%.2f, %.2f, %.2f), Addr: %p, qwPID: %p",
					i + 1, g_pPlayerInfo[i].szName, g_pPlayerInfo[i].szGuild, g_pPlayerInfo[i].nLevel, g_pPlayerInfo[i].nCurHp, g_pPlayerInfo[i].nObjType, g_pPlayerInfo[i].nClassType,
					g_pPlayerInfo[i].CurPos.X, g_pPlayerInfo[i].CurPos.Y, g_pPlayerInfo[i].CurPos.Z, g_pPlayerInfo[i].qwPlayerAddr, g_pPlayerInfo[i].qwPlayerID);
			}
		}

		if (g_nNpcCount > 0)
		{
			AJLog(L"----------------- (7) NPC 정보 -----------------");

			for (int i = 0; i < g_nNpcCount; i++)
			{
				AJLog(L"No: %d, %s, Pos: (%.2f, %.2f, %.2f)",
					i + 1, g_pNPCInfo[i].szName, g_pNPCInfo[i].CurPos.X, g_pNPCInfo[i].CurPos.Y, g_pNPCInfo[i].CurPos.Z);
			}
		}

		if (g_nMonsterCount > 0)
		{
			AJLog(L"----------------- (8) 몬스터 정보 -----------------");

			for (int i = 0; i < g_nMonsterCount; i++)
			{
				AJLog(L"No: %d, %s, Lv: %d, Hp: %d, Pos: (%.2f, %.2f, %.2f), Addr: %p, qwMonsterID: %p, Dist: %d, Target: %p",
					i + 1, g_pMonsterInfo[i].szName, g_pMonsterInfo[i].nLevel, g_pMonsterInfo[i].nCurHp,
					g_pMonsterInfo[i].CurTransform.Translation.X, g_pMonsterInfo[i].CurTransform.Translation.Y, g_pMonsterInfo[i].CurTransform.Translation.Z,
					g_pMonsterInfo[i].qwMonsterAddr, g_pMonsterInfo[i].qwMonsterID,
					(int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pMonsterInfo[i].CurTransform.Translation), (DWORD64)g_pMonsterInfo[i].qwTargetAddr);
			}
		}

		if (g_nGatherCount > 0)
		{
			AJLog(L"----------------- (9) 채집물 정보 -----------------");

			for (int i = 0; i < g_nGatherCount; i++)
			{
				AJLog(L"No: %d, Type: %d, Pos: (%.2f, %.2f, %.2f), Dist: %d",
					i + 1, g_pGatherInfo[i].nType, g_pGatherInfo[i].CurPos.X, g_pGatherInfo[i].CurPos.Y, g_pGatherInfo[i].CurPos.Z,
					(int)(GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pGatherInfo[i].CurPos)));
			}
		}

		if (g_pMainQuestInfo.dwQuestID != 0)
		{
			AJLog(L"----------------- (10) 메인 퀘스트 정보 -----------------");

			AJLog(L"%s (%d), ID: %08X, State: %d",
				g_pMainQuestInfo.szName, GetMainQuestNo(), g_pMainQuestInfo.dwQuestID, g_pMainQuestInfo.nQuestState);
		}

		if (g_nSubQuestCount > 0)
		{
			AJLog(L"----------------- (11) 서브 퀘스트 정보 -----------------");

			for (int i = 0; i < g_nSubQuestCount; i++)
			{
				AJLog(L"No: %d, %s, ID: %08X, State: %d",
					i + 1, g_pSubQuestInfo[i].szName, g_pSubQuestInfo[i].dwQuestID, g_pSubQuestInfo[i].nQuestState);
			}
		}

		if (g_nVillageQuestCount > 0)
		{
			AJLog(L"----------------- (12) 의뢰 퀘스트 정보 -----------------");

			for (int i = 0; i < g_nVillageQuestCount; i++)
			{
				AJLog(L"No: %d, %s(%s), ID: %08X, State: %d",
					i + 1, g_pVillageQuestInfo[i].szName, g_pVillageQuestInfo[i].szDesc, g_pVillageQuestInfo[i].dwQuestID, g_pVillageQuestInfo[i].nQuestState);
			}
		}

		if (g_nAvatarCount > 0)
		{
			AJLog(L"----------------- (13) 아바타 정보 -----------------");

			for (int i = 0; i < g_nAvatarCount; i++)
			{
				AJLog(L"No: %d, %s, Grade: %d, Count: %d, Class: %d, ID: %08X",
					i + 1, g_pAvatarInfo[i].szName, g_pAvatarInfo[i].nGrade, g_pAvatarInfo[i].nCount, g_pAvatarInfo[i].nClass, g_pAvatarInfo[i].dwID);
			}
		}

		if (g_nVehicleCount > 0)
		{
			AJLog(L"----------------- (14) 탈것 정보 -----------------");

			for (int i = 0; i < g_nVehicleCount; i++)
			{
				AJLog(L"No: %d, %s, Grade: %d, Count: %d, IsFly: %d, ID: %08X",
					i + 1, g_pVehicleInfo[i].szName, g_pVehicleInfo[i].nGrade, g_pVehicleInfo[i].nCount, g_pVehicleInfo[i].bIsFly, g_pVehicleInfo[i].dwID);
			}
		}

		if (g_nWeaponShapeCount > 0)
		{
			AJLog(L"----------------- (15) 무기 형상 정보 -----------------");

			for (int i = 0; i < g_nWeaponShapeCount; i++)
			{
				AJLog(L"No: %d, %s, Grade: %d, Count: %d, Class: %d, ID: %08X",
					i + 1, g_pWeaponShapeInfo[i].szName, g_pWeaponShapeInfo[i].nGrade, g_pWeaponShapeInfo[i].nCount, g_pWeaponShapeInfo[i].nClass, g_pWeaponShapeInfo[i].dwID);
			}
		}

		if (g_nItemSlotCount > 0)
		{
			AJLog(L"----------------- (16) 슬롯(아이템) 정보 -----------------");

			for (int i = 0; i < g_nItemSlotCount; i++)
			{
				AJLog(L"No: %d, %s, Slot: %d, Auto: %d",
					i + 1, g_pItemSlotInfo[i].dwItem.szName, g_pItemSlotInfo[i].nSlotIndex, g_pItemSlotInfo[i].bIsAuto);
			}
		}

		if (g_nSkillSlotCount > 0)
		{
			AJLog(L"----------------- (17) 슬롯(스킬) 정보 -----------------");

			for (int i = 0; i < g_nSkillSlotCount; i++)
			{
				AJLog(L"No: %d, %s, SkillID: %08X, Auto: %d",
					i + 1, g_pSkillSlotInfo[i].dwDetailInfo.szName, g_pSkillSlotInfo[i].dwSkillID, g_pSkillSlotInfo[i].bAutoState);
			}
		}

		if (g_nNpcSlotCount > 0)
		{
			AJLog(L"----------------- (18) Npc 슬롯 정보 -----------------");

			for (int i = 0; i < g_nNpcSlotCount; i++)
			{
				AJLog(L"No: %d, %s",
					i + 1, g_pNpcSlotInfo[i].szName);
			}
		}

		if (g_nPartyCount > 0)
		{
			AJLog(L"----------------- (19) 파티 정보 (%d) -----------------", g_bPartyDungeon);

			for (int i = 0; i < g_nPartyCount; i++)
			{
				AJLog(L"No: %d, %s, Level: %d, Master: %d, Ready: %d",
					i + 1, g_pPartyInfo[i].szName, g_pPartyInfo[i].nLevel, g_pPartyInfo[i].bMaster, g_pPartyInfo[i].bReady);
			}
		}
	}
	break;
	case 1:											// DumpStatus(1)
	{
		DumpShowUI(dwAddress);

		// 		g_bTestLog = !g_bTestLog;
		// 
		// 		AJLog(L"Test Log: %d", g_bTestLog);
	}
	break;
	case 2:											// DumpStatus(2)
	{
		UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
		if (uiNPCShop && uiNPCShop->IsVisible())
		{
			UpdateSellListInfo(dwAddress, uiNPCShop);
			UpdateBuyListInfo(dwAddress, uiNPCShop);

			AJLog(L"----------------- 판매 목록 -----------------");

			for (int i = 0; i < g_nSellListCount; i++)
			{
				AJLog(L"No: %d, %s, Select: %d",
					i + 1, g_pSellListInfo[i].dwItemInfo.szName, g_pSellListInfo[i].bSelected);
			}

			AJLog(L"----------------- 구매 목록 -----------------");

			for (int i = 0; i < g_nBuyListCount; i++)
			{
				AJLog(L"No: %d, %s, Limit: (%d / %d), Count: %d, Price: %d, Type: %d",
					i + 1, g_pBuyListInfo[i].szName->c_str(), g_pBuyListInfo[i].nLimitBuyCount, g_pBuyListInfo[i].nLimitMaxCount, g_pBuyListInfo[i].nCount, g_pBuyListInfo[i].nPrice,
					g_pBuyListInfo[i].nPriceType);
			}
		}

		UProjectLH_LHWidget_Warehouse* uiStore = (UProjectLH_LHWidget_Warehouse*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Warehouse));
		if (uiStore && uiStore->IsVisible())
		{
			UpdateStoreSellInfo(dwAddress);

			AJLog(L"----------------- 판매 목록 -----------------");

			for (int i = 0; i < g_nSellListCount; i++)
			{
				AJLog(L"No: %d, %s, Select: %d",
					i + 1, g_pSellListInfo[i].dwItemInfo.szName, g_pSellListInfo[i].bSelected);
			}

			UpdateStoreBuyInfo(dwAddress);

			AJLog(L"----------------- 보관 목록 -----------------");

			for (int i = 0; i < g_nSellListCount; i++)
			{
				AJLog(L"No: %d, %s, Select: %d",
					i + 1, g_pSellListInfo[i].dwItemInfo.szName, g_pSellListInfo[i].bSelected);
			}
		}

		UProjectLH_LHWidget_InGameMenu_SkillWindow* uiSkillWindow = (UProjectLH_LHWidget_InGameMenu_SkillWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skill));
		if (uiSkillWindow && uiSkillWindow->IsVisible())
		{
			UpdateSkillInfo(dwAddress);

			AJLog(L"----------------- 스킬 목록 -----------------");

			for (int i = 0; i < g_nSkillCount; i++)
			{
				AJLog(L"No: %d, %s, SkillID: %08X, Level: %d, Grade: %d, PlayerIndex: %d, PrevSkill: %08X",
					i + 1, g_pSkillInfo[i].dwDetailInfo.szName, g_pSkillInfo[i].dwSkillID, g_pSkillInfo[i].nSkillLevel, g_pSkillInfo[i].dwDetailInfo.SkillRecord->SkillGrade,
					g_pSkillInfo[i].dwDetailInfo.SkillRecord->PlayerIndex, g_pSkillInfo[i].dwDetailInfo.dwPrevSkillID);
			}
		}

		UProjectLH_LHWidget_MailMain* MailMain = (UProjectLH_LHWidget_MailMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_MailMain));
		if (MailMain && MailMain->IsVisible())
		{
			UProjectLH_LHTabList* TabList = MailMain->C_TabList;
			if (TabList)
			{
				TArray<class UUMG_UserWidget*> TabArray = TabList->EntryWidgetPool.ActiveWidgets;
				int nCurTab = *(int*)((DWORD64)TabList + OFFSET_SELECTEDTAB);

				UProjectLH_LHWidget_MailList* MailList = MailMain->C_Widget_MailList;
				if (MailList)
				{
					DWORD64 dwScrollBox = (DWORD64)MailList->C_Scroll_MailList;
					if (dwScrollBox)
					{
						int nMailCount = *(int*)(dwScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY);
						if (nMailCount < 0)
							nMailCount = 0;
						else
							nMailCount = *(int*)(dwScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);

						AJLog(L"우편 항목 : %d / %d, 개수: %d", nCurTab, TabArray.Num(), nMailCount);
					}
				}
			}
		}

		UProjectLH_LHWidget_Scene_RepeatQuest* uiRepeatQuest = (UProjectLH_LHWidget_Scene_RepeatQuest*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Scene_RepeatQuest));
		if (uiRepeatQuest && uiRepeatQuest->IsVisible())
		{
			AJLog(L"----------------- 의뢰 목록 -----------------");

			UpdateVillageQuestList(dwAddress, uiRepeatQuest);

			for (int i = 0; i < g_nVillageListCount; i++)
			{
				AJLog(L"No: %d, %s, Reward: %d (%s, %s, %s, %s, %s)",
					i + 1, g_pVillageListInfo[i].szName, g_pVillageListInfo[i].nRewardCount, g_pVillageListInfo[i].dwRewardItem[0].szName, g_pVillageListInfo[i].dwRewardItem[1].szName,
					g_pVillageListInfo[i].dwRewardItem[2].szName, g_pVillageListInfo[i].dwRewardItem[3].szName, g_pVillageListInfo[i].dwRewardItem[4].szName);
			}

			AJLog(L"갱신횟수: %d",
				*(int*)((DWORD64)uiRepeatQuest + OFFSET_REFRESHREPEATEQCOUNT));
		}

		UProjectLH_LHWidget_InstDungeonList* pInstDungeon = (UProjectLH_LHWidget_InstDungeonList*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InstDungeon));
		if (pInstDungeon && pInstDungeon->IsVisible())
		{
			UpdateDungeonInfo(dwAddress, TRUE);

			AJLog(L"----------------- 던전 목록 -----------------");

			for (int i = 0; i < MAX_DUNGEON; i++)
			{
				AJLog(L"No: %d, %s, Time: %d",
					i + 1, g_pDungeonRes[i].szRegion, g_pDungeonRes[i].nRemainTime);
			}
		}

		if (g_bPartyExist)
		{
			AJLog(L"----------------- 파티 (던전팟: %d, 매칭중: %d) -----------------", g_bPartyDungeon, g_bPartyAutoMatch);

			for (int i = 0; i < g_nPartyCount; i++)
			{
				AJLog(L"No: %d, %s, Level: %d, Master: %d, Ready: %d",
					i + 1, g_pPartyInfo[i].szName, g_pPartyInfo[i].nLevel, g_pPartyInfo[i].bMaster, g_pPartyInfo[i].bReady);
			}
		}

		UProjectLH_LHWidget_QuestListWindow* uiQuestWindow = (UProjectLH_LHWidget_QuestListWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestListWindow));
		if (uiQuestWindow && uiQuestWindow->IsVisible())
		{
			UpdateQuestWindowInfo(dwAddress);

			if (g_nQuestWindowCount)
			{
				AJLog(L"----------------- 퀘스트(창문) 목록 -----------------");

				for (int i = 0; i < g_nQuestWindowCount; i++)
				{
					AJLog(L"No: %d, %s, QuestID: %08X, State: %d",
						i + 1, g_pQuestWindowInfo[i].szName, g_pQuestWindowInfo[i].dwQuestID, g_pQuestWindowInfo[i].nQuestState);
				}
			}
		}

		UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));
		if (uiExchange && uiExchange->IsVisible())
		{
			UpdateTradeRegInfo(dwAddress);

			if (g_nTradeRegCount)
			{
				AJLog(L"----------------- 경매 등록 목록 (%d) -----------------", g_nCurTradeRegCount);

				for (int i = 0; i < g_nTradeRegCount; i++)
				{
					AJLog(L"No: %d, %s, Enchant: %d, Price: %d, Count: %d, State: %d",
						i + 1, g_pTradeRegInfo[i].dwItem.szName, g_pTradeRegInfo[i].nEnchant, g_pTradeRegInfo[i].nPrice, g_pTradeRegInfo[i].nCount, g_pTradeRegInfo[i].bState);
				}
			}

			UpdateTradeInvenInfo(dwAddress);

			if (g_nTradeInvenCount)
			{
				AJLog(L"----------------- 경매 인벤 목록 -----------------");

				for (int i = 0; i < g_nTradeInvenCount; i++)
				{
					AJLog(L"No: %d, %s, Count: %d",
						i + 1, g_pTradeInvenInfo[i].dwItemInfo.szName, g_pTradeInvenInfo[i].dwItemInfo.nCount);
				}
			}

			UpdateTradeSellInfo(dwAddress);

			if (g_nTradeSellCount)
			{
				AJLog(L"----------------- 경매 판매 목록 -----------------");

				for (int i = 0; i < g_nTradeSellCount; i++)
				{
					AJLog(L"No: %d, %s, Enchant: %d, Price: %d, Count: %d, State: %d",
						i + 1, g_pTradeSellInfo[i].dwItem.szName, g_pTradeSellInfo[i].nEnchant, g_pTradeSellInfo[i].nPrice, g_pTradeSellInfo[i].nCount, g_pTradeSellInfo[i].bState);
				}
			}
		}

		UProjectLH_LHWidget_Scene_CashShop* CashShop = (UProjectLH_LHWidget_Scene_CashShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Scene_CashShop));
		if (CashShop && CashShop->IsVisible())
		{
			UProjectLH_LHWidget_Common_TabList* TabList = CashShop->C_Widget_Common_TabList;
			if (TabList)
			{
				int nSelectMain = *(int*)((DWORD64)TabList + OFFSET_CASHSHOP_MAINCATEGORY);
				int nSelectSub = *(DWORD*)((DWORD64)TabList + OFFSET_CASHSHOP_SUBCATEGORY);

				AJLog(L"Cash: %d, %d", nSelectMain, nSelectSub);
			}
		}

		UProjectLH_LHWidget_ItemCollection_Window* uiItemCollection = (UProjectLH_LHWidget_ItemCollection_Window*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemCollection_Window));
		if (uiItemCollection && uiItemCollection->IsVisible())
		{
			UProjectLH_LHWidget_Item_Collection* C_Widget_Item_Collection = uiItemCollection->C_Widget_Item_Collection;
			if (!C_Widget_Item_Collection)
				return;

			for (int i = 0; i < C_Widget_Item_Collection->ItemCollectionContainerArray.Num(); i++)
			{
				UProjectLH_LHWidget_Item_Collection_Container* collectionContainer = (UProjectLH_LHWidget_Item_Collection_Container*)C_Widget_Item_Collection->ItemCollectionContainerArray[i];
				if (!collectionContainer)
					continue;

				UCommonSource_CollectionRewardInfoRecord* collectionInfo = *(UCommonSource_CollectionRewardInfoRecord**)((DWORD64)collectionContainer + OFFSET_ITEMCOLLECTIONANME);
				if (!collectionInfo)
					continue;

				WCHAR* szName = GetGameString(dwAddress, collectionInfo->NameCode);

				int dwCollectionItemCount = min(collectionContainer->ItemContainerArray.Num(), collectionInfo->CollectionCount);
				AJLog(L"No: %d, %s, Count: %d", i + 1, szName, dwCollectionItemCount);

				//FreeGarbageMemory(dwAddress, (DWORD64)szName);
				FreeGarbageMemory((DWORD64)szName);
			}
		}
	}
	break;
	case 3:												// DumpStatus(3)
	{
		DumpAllAvatarInfo(dwAddress);
		DumpAllVehicleInfo(dwAddress);
		DumpAllWeaponShape(dwAddress);

		// 		g_bRecordStep = TRUE;
		// 		g_nRecordMaxStep = 0;
		// 
		// 		AJLog(L"Record Start");

		// 		UProjectLH_LHWidget_BM_PackagePopup* PackagePopup = reinterpret_cast<UProjectLH_LHWidget_BM_PackagePopup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_BM_PackagePopup::StaticClass()));
		// 		if (PackagePopup)
		// 		{
		// 			UUMG_WidgetSwitcher* Switcher = PackagePopup->C_Switcher_Page;
		// 			if (Switcher)
		// 			{
		// 				TArray<class UUMG_PanelSlot*> Slots = Switcher->Slots;
		// 				TArray<class UUMG_PanelSlot*> TapArray = PackagePopup->C_Event_ScrollBox->Slots;
		// 
		// 				for (int i = 0; i < TapArray.Num(); i++)
		// 				{
		// 					UUMG_ScrollBoxSlot* ScrollSlot = (UUMG_ScrollBoxSlot*)TapArray[i];
		// 					if(!ScrollSlot)
		// 						continue;
		// 
		// 					UProjectLH_LHWidget_Event_Tap* EventTap = (UProjectLH_LHWidget_Event_Tap*)ScrollSlot->Content;
		// 					if(!EventTap)
		// 						continue;
		// 
		// 					AJLog(L"No: %d, RedDot: %d, Addr: %p", i, EventTap->C_Attendance_NewIcon->IsVisible(),
		// 						DUMPADDR(*(DWORD64*)(Slots[i]->Content)));
		// 				}
		// 			}
		// 		}

				//DumpModules();

		//		DumpWidget(dwAddress, NULL); 		

		// 		SetStatus(STATUS_RECORDBOSS);
		// 		AJLog(L"Record Boss");

#ifdef _TEST_VERSION_

// 		DWORD64 qwAddr = PATCHADDR(dwAddress[ADDR_SENDMOVEPACKET], dwAddress[0]);
// 		if (g_pqwBreakAddr[BREAK_TEST0] == 0)
// 		{
// 			g_pqwBreakAddr[BREAK_TEST0] = qwAddr;
// 
// 			DWORD dwOldProtect;
// 			VirtualProtect((LPVOID)qwAddr, 0x01, PAGE_EXECUTE_READWRITE, &dwOldProtect);
// 			*(BYTE*)qwAddr = 0xCC;
// 			VirtualProtect((LPVOID)qwAddr, 0x01, dwOldProtect, &dwOldProtect);
// 
// 			AJLog(L"Set Break");
// 			return;
// 		}
// 
// 		g_nRecordCount = 0;
// 		g_dwRecordTick = 0;
// 		g_bMoveRecord = TRUE;
// 
// 		AJLog(L"Record Start");
// 		AJLog(L"{");
// 		AJLog(L"\t{%ff, %ff, %ff},", g_pCharInfo.CurTransform.Translation.X, g_pCharInfo.CurTransform.Translation.Y, g_pCharInfo.CurTransform.Translation.Z);

#endif
	}
	break;
	case 4:												// DumpStatus(4)
	{
		// 		g_bRecordStop = TRUE;
		// 		if (g_nRecordStopStep > 0)
		// 			g_nRecordStopStep--;
		// 
		// 		AJLog(L"MaxStep: %d", g_nRecordStopStep);

#ifdef _TEST_VERSION_

// 		g_bMoveRecord = FALSE;
// 
// 		AJLog(L"\t%d,", g_nRecordCount);
// 		AJLog(L"\t{");
// 		for (int i = 0; i < g_nRecordCount; i++)
// 		{
// 			AJLog(L"\t\t{0x%08X, {%ff, %ff, %ff},", g_pRecordPacket[i].dwDelayTick, 
// 				g_pRecordPacket[i].Pos.X, g_pRecordPacket[i].Pos.Y, g_pRecordPacket[i].Pos.Z);
// 			AJLog(L"\t\t\t{");
// 
// 			for (int j = 0; j < 6; j++)
// 			{
// 				if (j != 5)
// 				{
// 					AJLog(L"\t\t\t0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X,",
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 0], g_pRecordPacket[i].pMovePacket[j * 0x10 + 1], g_pRecordPacket[i].pMovePacket[j * 0x10 + 2], g_pRecordPacket[i].pMovePacket[j * 0x10 + 3],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 4], g_pRecordPacket[i].pMovePacket[j * 0x10 + 5], g_pRecordPacket[i].pMovePacket[j * 0x10 + 6], g_pRecordPacket[i].pMovePacket[j * 0x10 + 7],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 8], g_pRecordPacket[i].pMovePacket[j * 0x10 + 9], g_pRecordPacket[i].pMovePacket[j * 0x10 + 10], g_pRecordPacket[i].pMovePacket[j * 0x10 + 11],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 12], g_pRecordPacket[i].pMovePacket[j * 0x10 + 13], g_pRecordPacket[i].pMovePacket[j * 0x10 + 14], g_pRecordPacket[i].pMovePacket[j * 0x10 + 15]);
// 				}
// 				else
// 				{
// 					AJLog(L"\t\t\t0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X, 0x%02X",
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 0], g_pRecordPacket[i].pMovePacket[j * 0x10 + 1], g_pRecordPacket[i].pMovePacket[j * 0x10 + 2], g_pRecordPacket[i].pMovePacket[j * 0x10 + 3],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 4], g_pRecordPacket[i].pMovePacket[j * 0x10 + 5], g_pRecordPacket[i].pMovePacket[j * 0x10 + 6], g_pRecordPacket[i].pMovePacket[j * 0x10 + 7],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 8], g_pRecordPacket[i].pMovePacket[j * 0x10 + 9], g_pRecordPacket[i].pMovePacket[j * 0x10 + 10], g_pRecordPacket[i].pMovePacket[j * 0x10 + 11],
// 						g_pRecordPacket[i].pMovePacket[j * 0x10 + 12], g_pRecordPacket[i].pMovePacket[j * 0x10 + 13], g_pRecordPacket[i].pMovePacket[j * 0x10 + 14], g_pRecordPacket[i].pMovePacket[j * 0x10 + 15]);
// 				}
// 			}
// 
// 			AJLog(L"\t\t\t}");
// 			if(i != g_nRecordCount - 1)
// 				AJLog(L"\t\t},");
// 			else
// 				AJLog(L"\t\t}");
// 		}
// 		AJLog(L"\t}");
// 		AJLog(L"}");

#endif
	}
	break;
	case 5:												// DumpStatus(5)
	{
		// 		g_bRecordStop = TRUE;
		// 		if (g_nRecordStopStep < g_nRecordMaxStep)
		// 			g_nRecordStopStep++;
		// 
		//  		AJLog(L"MaxStep: %d", g_nRecordStopStep);

		// 		int nTestIndex = 16;
		// 		FVector fTargetPos = g_pTreasureList[nTestIndex].fTargetPos;
		// 		if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
		// 		{
		// 			AJLog(L"Treasure Found");
		// 			return;
		// 		}
		// 
		// 		if (g_pTreasureList[nTestIndex].bPacketMove)
		// 		{
		// 			fTargetPos = g_pMovePacket[g_pTreasureList[nTestIndex].nPacketIndex].fStartPos;
		// 
		// 			// 순간 이동 첫번째 위치에 도착한 경우
		// 			if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None && (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
		// 			{
		// 				CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MovePacketThread, (LPVOID)g_pTreasureList[nTestIndex].nPacketIndex, 0, 0);
		// 				AJLog(L"Move Packet Start");
		// 				return;
		// 			}
		// 		}
		// 
		// 		// 설정된 지역으로 이동해서 걸어가자
		// 		if (!IsMovingTargetPos(dwAddress, fTargetPos))
		// 		{
		// 			if (wcscmp(g_pCharInfo.szRegion, g_pTreasureList[nTestIndex].szFieldName))
		// 				TeleportMap(dwAddress, g_pTreasureList[nTestIndex].szWorldName, g_pTreasureList[nTestIndex].szFieldName);
		// 			else
		// 				MovePos(dwAddress, fTargetPos);
		// 		}

				// 메인 퀘스트 목록
		// 		g_pqwBreakAddr[BREAK_TEST1] = GAMEADDR(0x7FF7E3D0BFD0);				// 20231025
		// 
		// 		DWORD dwOldProtect;
		// 		VirtualProtect((LPVOID)g_pqwBreakAddr[BREAK_TEST1], 0x01, PAGE_EXECUTE_READWRITE, &dwOldProtect);
		// 		*(BYTE*)g_pqwBreakAddr[BREAK_TEST1] = 0xCC;
		// 		VirtualProtect((LPVOID)g_pqwBreakAddr[BREAK_TEST1], 0x01, dwOldProtect, &dwOldProtect);
		// 
		// 		AJLog(L"Set Break");
		// 		return;
	}
	break;
	}
}


void GetAutoKeyState(DWORD* dwAddress)
{
	if (g_pbKeyState[VK_F7])
	{
		g_pbKeyState[VK_F7] = 0;
		DumpStatus(dwAddress, 0);
	}

	if (g_pbKeyState[VK_F8])
	{
		g_pbKeyState[VK_F8] = 0;
		DumpStatus(dwAddress, 1);
	}

	if (g_pbKeyState[VK_F9])
	{
		g_pbKeyState[VK_F9] = 0;
		DumpStatus(dwAddress, 2);
	}

	if (g_pbKeyState[VK_PRIOR])
	{
		g_pbKeyState[VK_PRIOR] = 0;
		DumpStatus(dwAddress, 3);
	}

	if (g_pbKeyState[VK_NEXT])
	{
		g_pbKeyState[VK_NEXT] = 0;
		DumpStatus(dwAddress, 4);
	}

	if (g_pbKeyState[VK_HOME])
	{
		g_pbKeyState[VK_HOME] = 0;
		DumpStatus(dwAddress, 5);
	}

	if (g_pbKeyState[VK_DELETE])
	{
		if (g_bAutoRun)
		{
			g_pGameMapping->bAutoRun = FALSE;
			g_pGameMapping->bLogType = LogType_ChangeAutoState;

			ShowStatus(0, 60141);		//키보드 [Delete] 호출
		}

		g_pbKeyState[VK_DELETE] = 0;
	}

	if (g_pbKeyState[VK_INSERT])
	{
		if (!g_bAutoRun)
		{
			g_pGameMapping->bAutoRun = TRUE;
			g_pGameMapping->bLogType = LogType_ChangeAutoState;

			ShowStatus(0, 60142);		//키보드 [Insert] 호출
		}

		g_pbKeyState[VK_INSERT] = 0;
	}
}


BOOL IsGameLoading(DWORD* dwAddress)
{
	AProjectLH_LHPlayerController* playerController = GetPlayerController(dwAddress);
	if (playerController)
	{
		AProjectLH_LHHUD* LHHud = (AProjectLH_LHHUD*)playerController->MyHUD;
		if (LHHud)
		{
			UProjectLH_LHWidget_Waiting* WaitingWidget = LHHud->WaitingWidget;
			if (WaitingWidget && WaitingWidget->C_Panel_Waiting && WaitingWidget->C_Panel_Waiting->IsVisible())
				return TRUE;
		}
	}

	UProjectLH_LHWidget_Waiting* WaitingWidget = (UProjectLH_LHWidget_Waiting*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Waiting));
	if (WaitingWidget && WaitingWidget->C_Panel_Waiting && WaitingWidget->C_Panel_Waiting->IsVisible())
		return TRUE;

	BOOL bRet = *(DWORD*)PATCHADDR(dwAddress[ADDR_GARBAGECOLLECTING_FLAG], dwAddress[0]) != 0;
	return bRet;
}


int GetCurScene(DWORD* dwAddress)
{
	UEngine_World* world = GetGlobalWorld(dwAddress);
	if (!world)
		return SCENE_NONE;

	AEngine_GameStateBase* pInstance = reinterpret_cast<AEngine_GameStateBase*>(world->GameState);
	if (!pInstance)
		return SCENE_NONE;

	UClass* pGameModeClass = pInstance->GameModeClass;
	if (!pGameModeClass)
		return SCENE_NONE;

	std::string buff = pGameModeClass->GetName();
	if (buff.find("Login") != -1)
		return SCENE_LOGIN;

	if (buff.find("CharacterSelect") != -1)
		return SCENE_CHARSELECT;

	if (buff.find("CharacterCreate") != -1)
		return SCENE_CHARCREATE;

	if (buff.find("InGame") != -1)
		return SCENE_INGAME;

	if (buff.find("Prologue") != -1)
		return SCENE_PROLOGUE;

	if (buff.find("Realmwar") != -1)
		return SCENE_REALMWAR;

	return SCENE_NONE;
}


UProjectLH_LHGameInstance* GetLMGameInstance(DWORD* dwAddress)
{
	UEngine_World* world = GetGlobalWorld(dwAddress);
	if (!world)
		return nullptr;

	return (UProjectLH_LHGameInstance*)world->OwningGameInstance;
}


BOOL IsMapLoading(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (pInstance)
	{
		UProjectLH_LHMapMgr* MapMgr = reinterpret_cast<UProjectLH_LHMapMgr*>(pInstance->MapMgr);
		if ((MapMgr && MapMgr->LoadingWidget && MapMgr->LoadingWidget->IsVisible()) ||
			(MapMgr && MapMgr->LoadingSceneActorInstance))
		{
			g_nBlackOutShow = 1;
			return TRUE;
		}
	}

	return FALSE;
}


void SetStatus(int nStatus, int nWaitTime)
{
	if (nStatus != g_nCurStatus)
	{
		g_nPreStatus = g_nCurStatus;
		g_nCurStatus = nStatus * g_nCrackStep;
		g_nStepStatus = 0;

#ifdef _TEST_VERSION_

		AJLog(L"Status: %d, Pre: %d", g_nCurStatus, g_nPreStatus);

#endif // _TEST_VERSION_
	}

	if (nWaitTime > 0)
		g_dwWaitTime = nWaitTime * 100;
}


void SetDelay(int nWaitTime)
{
	g_dwWaitTime = nWaitTime * 100;
}


void OnInitGameEvents()
{
	g_PackageShopVisited = FALSE;

	g_nRecoverFreeCount = -1;

	for (int i = 0; i < MAX_CASH; i++)
		g_pCashItem[i].nRemainCount = -1;

	memset(g_bGuildCheck, 0, sizeof(g_bGuildCheck));
	memset(g_bGuildDonate, 0, sizeof(g_bGuildDonate));
	//memset(g_qwGuildJoinTick, 0, sizeof(g_qwGuildJoinTick));

	g_bShopItemOring[0] = FALSE;
	g_bShopItemOring[1] = FALSE;

	g_bCharFallDown = 0;

	for (int i = 0; i < MAX_DUNGEON; i++)				// 던전 시간도 바꾸자
		g_pDungeonRes[i].nRemainTime = -1;

	for (int j = 0; j < MAX_EXCHANGE; j++)
		g_pExchangeRes[j].nCurCount = 0;
}


void OnInitGameFlags()
{
	g_nAttackChaoCount = 0;

	g_bUseSkillBook = FALSE;

	g_pPrevCharPos.X = 0.0f;		g_pPrevCharPos.Y = 0.0f;			g_pPrevCharPos.Z = 0.0f;

	g_bDungeonTele = FALSE;
	g_dwPreQuestID = 0;

	g_bOpenSkill = FALSE;

	g_bMoveHuntPos = FALSE;
	g_bMoveHuntSet = FALSE;

	g_dwMoveCharTick = g_dwTickCount;
	g_preGoods = 0;

	memset(g_bSettingChange, 0, sizeof(BYTE) * 20);

	g_bPostMail = FALSE;
	g_bEventReward[0] = FALSE;
	g_bEventReward[1] = FALSE;

	g_nPostIndex = 0;
	g_nEventIndex = 0;

	g_bGotoNPC = 0;
	g_qwPartyMoveTick = 0;

	g_nChaoStatusCount = 0;
	g_nChaoGatherCount = 0;
	g_nMoveChaoCount = 0;

	g_bStartAuto = 0;

	g_nStoreListCount = 0;

	g_nTreasureIndex = -1;
	g_nWeaponTreasureIndex = -1;
	g_nSubQuestNo = -1;

	memset(g_pPlayerInfo, 0, MAX_PLAYER * sizeof(PLAYERINFO));

	for (int i = 0; i < MAX_DUNGEON; i++)				// 던전 시간도 바꾸자
		g_pDungeonRes[i].nRemainTime = -1;

	for (int j = 0; j < MAX_EXCHANGE; j++)
		g_pExchangeRes[j].nCurCount = 0;
}


FVector GetMoveTargetPosition(DWORD* dwAddress)
{
	AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
	if (qwPlayerController && qwPlayerController->Pawn)
	{
		AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
		if (playerPlayable->AutoMoveComponent)
		{
			return playerPlayable->AutoMoveComponent->AutoMoveData.AutoMoveLocation;
		}
	}

	FVector fEmpty;
	fEmpty.X = 0.0f;	fEmpty.Y = 0.0f;	fEmpty.Z = 0.0f;
	return fEmpty;
}


HANDLE g_hTopHwndEvent = NULL;
void OnSetHwndFocus(int nCurScene)
{
	return;

	if (g_qwFocusHwndTick == 0)
		g_qwFocusHwndTick = g_dwTickCount;

	if (nCurScene == SCENE_INGAME &&
		((g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance && g_pCharInfo.nLevel >= 26) || g_dwTickCount - g_qwFocusHwndTick > 5 * 60 * 1000))
	{
		if (g_hTopHwndEvent == NULL)
		{
			HANDLE hEvent = CreateEvent(0, 0, 0, (EVENT_NAME_17));
			if (hEvent && GetLastError() == ERROR_ALREADY_EXISTS)
				CloseHandle(hEvent);
			else if (hEvent)
				g_hTopHwndEvent = hEvent;
		}

		if (g_hTopHwndEvent)
		{
			if (SetTopWindow(g_hGameWnd))
				g_qwFocusHwndTick = g_dwTickCount;

			return;
		}
	}

	if (g_hTopHwndEvent)
		CloseHandle(g_hTopHwndEvent);

	g_hTopHwndEvent = NULL;
}


BOOL ShowErrorLog(int nError)
{
	g_nRecordCurStep = nError;
	if (g_bRecordStep)
	{
		g_nRecordMaxStep = g_nRecordCurStep;
		g_nRecordStopStep = g_nRecordMaxStep;
		AJLog(L"Record CurStep: %d", g_nRecordCurStep);
	}
	else if (g_nRecordCurStep == g_nRecordStopStep)
	{
		if (g_bRecordStop)
		{
			g_bRecordStop = FALSE;
			AJLog(L"Record Stop: %d", g_nRecordCurStep);
		}

		return TRUE;
	}

	return FALSE;
}


int GetEquipIndex(const int nEquipType)
{
	for (int i = 0; i < g_nEquipCount; i++)
	{
		if (g_pEquipInfo[i].DetailInfo->ItemType == nEquipType)
			return i;
	}

	return -1;
}


int GetInvenIndex(int nItemType)
{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].DetailInfo->ItemType == nItemType)
			return i;
	}

	return -1;
}


int GetNeedCashAccessory()
{
	// 호각
	if (GetEquipIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Horn_Cash) == -1 &&
		GetInvenIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Horn_Cash) == -1)
		return (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Horn_Cash;

	// 문장
	if (GetEquipIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Emblem_Cash) == -1 &&
		GetInvenIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Emblem_Cash) == -1)
		return (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Emblem_Cash;

	// 완장
	if (GetEquipIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Armband_Cash) == -1 &&
		GetInvenIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Armband_Cash) == -1)
		return (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Armband_Cash;

	// 견장
	if (GetEquipIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_ShoulderMark_Cash) == -1 &&
		GetInvenIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_ShoulderMark_Cash) == -1)
		return (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_ShoulderMark_Cash;

	// 부적
	if (GetEquipIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Charm_Cash) == -1 &&
		GetInvenIndex((int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Charm_Cash) == -1)
		return (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Charm_Cash;

	return (int)FCommonSource_CommonSource_EItemType::EItemType__None;
}


BOOL OnItemChoosePopup(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ItemChoice_Popup* pPopup = (UProjectLH_LHWidget_ItemChoice_Popup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemChoice_Popup));
	if (pPopup && pPopup->IsVisible())
	{
		UProjectLH_LHItem* pCurItem = pPopup->CurrentItem;
		if (pCurItem)
		{
			WCHAR* pszName = GetGameString(dwAddress, pCurItem->ItemInfoRecord->NameCode);
			if (wcsstr(pszName, L"[이벤트] 설원의 무기 선택 상자"))
			{
				for (int i = 0; i < pPopup->ItemPool.ActiveUIs.Num(); i++)
				{
					UProjectLH_LHWidget_ItemChoice_Container* pContainer = (UProjectLH_LHWidget_ItemChoice_Container*)pPopup->ItemPool.ActiveUIs[i];
					if (!pContainer)
						continue;

					INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)pContainer->C_Item_Container + OFFSET_REPEATQUESTPAPERITEMID));
					if (g_bCreateCharActor == 0 && g_bCreateCharClass == 0 && wcsstr(itemInfo.szName, L"설원의 활") ||			// 스나이퍼
						g_bCreateCharActor == 0 && g_bCreateCharClass == 1 && wcsstr(itemInfo.szName, L"설원의 단검") ||			// 어쌔신
						g_bCreateCharActor == 0 && g_bCreateCharClass == 2 && wcsstr(itemInfo.szName, L"설원의 석궁") ||			// 헌트리스
						g_bCreateCharActor == 1 && g_bCreateCharClass == 0 && wcsstr(itemInfo.szName, L"설원의 마법구") ||		// 아크메이지
						g_bCreateCharActor == 1 && g_bCreateCharClass == 1 && wcsstr(itemInfo.szName, L"설원의 마법봉") ||		// 다크메이지
						g_bCreateCharActor == 1 && g_bCreateCharClass == 2 && wcsstr(itemInfo.szName, L"설원의 마법창") ||		// 인챈트리스
						g_bCreateCharActor == 2 && g_bCreateCharClass == 0 && wcsstr(itemInfo.szName, L"설원의 지팡이") ||		// 세인트
						g_bCreateCharActor == 2 && g_bCreateCharClass == 1 && wcsstr(itemInfo.szName, L"설원의 전곤/방패") ||		// 팔라딘
						g_bCreateCharActor == 2 && g_bCreateCharClass == 2 && wcsstr(itemInfo.szName, L"설원의 하프") ||			// 바드
						g_bCreateCharActor == 3 && g_bCreateCharClass == 0 && wcsstr(itemInfo.szName, L"설원의 도끼/방패") ||		// 디펜더
						g_bCreateCharActor == 3 && g_bCreateCharClass == 1 && wcsstr(itemInfo.szName, L"설원의 전투 도끼") ||		// 버서커
						g_bCreateCharActor == 3 && g_bCreateCharClass == 2 && wcsstr(itemInfo.szName, L"설원의 쌍망치") ||		// 썬더 브링어
						g_bCreateCharActor == 4 && g_bCreateCharClass == 0 && wcsstr(itemInfo.szName, L"설원의 창/방패") ||		// 발키리
						g_bCreateCharActor == 4 && g_bCreateCharClass == 1 && wcsstr(itemInfo.szName, L"설원의 쌍도끼"))			// 액슬러
					{
						if (pContainer != pPopup->selectItemWidget)
							pContainer->OnTapSelect();
						else
							pPopup->OnTapOK();
						break;
					}
				}
			}
			else if (wcsstr(pszName, L"펫 선택 상자"))
			{
				for (int i = 0; i < pPopup->ItemPool.ActiveUIs.Num(); i++)
				{
					UProjectLH_LHWidget_ItemChoice_Container* pContainer = (UProjectLH_LHWidget_ItemChoice_Container*)pPopup->ItemPool.ActiveUIs[i];
					if (!pContainer)
						continue;

					INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)pContainer->C_Item_Container + OFFSET_REPEATQUESTPAPERITEMID));
					if (wcsstr(itemInfo.szName, L"라이온의 알"))
					{
						if (pContainer != pPopup->selectItemWidget)
							pContainer->OnTapSelect();
						else
							pPopup->OnTapOK();
						break;
					}
				}
			}
			else if (wcsstr(pszName, L"유일 장신구 선택 상자"))
			{
				WCHAR szTarget[MAX_NAME] = L"None";

				int nType = GetNeedCashAccessory();
				if (nType == (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Horn_Cash)				// 호각
					wcscpy(szTarget, L"선혈의 걀라르호른");
				else if (nType == (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Emblem_Cash)		// 문장
				{
					if (g_pCharInfo.nClassType == 12 || g_pCharInfo.nClassType == 13 || g_pCharInfo.nClassType == 33 || g_pCharInfo.nClassType == 52)
						wcscpy(szTarget, L"고대 요트나르의 문장");
					else if (g_pCharInfo.nClassType == 32 || g_pCharInfo.nClassType == 53)
						wcscpy(szTarget, L"고대 에시르의 문장");
					else if (g_pCharInfo.nClassType == 22 || g_pCharInfo.nClassType == 23 || g_pCharInfo.nClassType == 42 || g_pCharInfo.nClassType == 43)
						wcscpy(szTarget, L"고대 바니르의 문장");
				}
				else if (nType == (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Armband_Cash)		// 완장
					wcscpy(szTarget, L"불꽃매 완장");
				else if (nType == (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_ShoulderMark_Cash)	// 견장
					wcscpy(szTarget, L"크바시르의 결계 견장");
				else if (nType == (int)FCommonSource_CommonSource_EItemType::EItemType__Equip_Charm_Cash)		// 부적
					wcscpy(szTarget, L"후긴의 깃털 부적");

				for (int i = 0; i < pPopup->ItemPool.ActiveUIs.Num(); i++)
				{
					UProjectLH_LHWidget_ItemChoice_Container* pContainer = (UProjectLH_LHWidget_ItemChoice_Container*)pPopup->ItemPool.ActiveUIs[i];
					if (!pContainer)
						continue;

					INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)pContainer->C_Item_Container + OFFSET_REPEATQUESTPAPERITEMID));
					if (wcsstr(itemInfo.szName, szTarget))
					{
						if (pContainer != pPopup->selectItemWidget)
							pContainer->OnTapSelect();
						else
							pPopup->OnTapOK();
						break;
					}
				}
			}
			else if (wcsstr(pszName, L"파티 던전 입장권 선택 상자"))
			{
				for (int i = 0; i < pPopup->ItemPool.ActiveUIs.Num(); i++)
				{
					UProjectLH_LHWidget_ItemChoice_Container* pContainer = (UProjectLH_LHWidget_ItemChoice_Container*)pPopup->ItemPool.ActiveUIs[i];
					if (!pContainer)
						continue;

					INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)pContainer->C_Item_Container + OFFSET_REPEATQUESTPAPERITEMID));
					if (wcsstr(itemInfo.szName, L"맹독의 뱀 둥지 입장권"))
					{
						if (pContainer != pPopup->selectItemWidget)
							pContainer->OnTapSelect();
						else
							pPopup->OnTapOK();
						break;
					}
				}
			}
		}

		return TRUE;
	}

	return FALSE;
}



void AutoLogic(DWORD* dwGameAddress)
{
	if (g_bGlobalUiFlag)
	{
		//FreeGarbageMemory(dwGameAddress, *(DWORD64*)((DWORD64)&g_GlobalUiAry));
		FreeGarbageMemory(*(DWORD64*)((DWORD64)&g_GlobalUiAry));
		g_bGlobalUiFlag = FALSE;
	}

	if (g_dwTickCount < g_dwLastTickCount + g_dwWaitTime)
		return;

	g_dwLastTickCount = g_dwTickCount;
	g_dwWaitTime = 0;

	if (g_bMovePacketThread)				// 순간 이동중이면 무시하자
		return;

	if (g_nSceneOffset == 0)
	{
		g_nPartitionCount++;
		if (g_nPartitionCount >= 10 * 60 * 10)
		{
			g_nPartitionCount = 0;

			HANDLE hFile = CreateFile((L"\\\\.\\PhysicalDrive0"), GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
			
			//INVALID_HANDLE_VALUE는 CreateFile(), CreateMutex(), OpenProcess()와 같은 함수들이 실패할 경우 반환하는 값이다.
			
			if (hFile != INVALID_HANDLE_VALUE)
			{
				DWORD dwTemp;

				BYTE pbSector[512];
				memset(pbSector, 0, 512);
				SetFilePointer(hFile, 0x200 * 3, 0, FILE_BEGIN); //파일 포인터의 위치를 설정하여 파일의 읽기/쓰기 작업을 원하는 위치에서 시작
				ReadFile(hFile, pbSector, 512, &dwTemp, NULL);
				CloseHandle(hFile);

				if (*(DWORD*)pbSector == 0x20220429)
				{
#ifdef _TEST_VERSION_
					AJLog(L"Check Setting: 5");
#else
					// g_nSceneOffset = 7;
					g_nSceneOffset = 0; // kib: which might be the source of bug
#endif			
				}
			}
		}
	}

	int nCurScene = GetCurScene(dwGameAddress) + g_nSceneOffset;			// 게임 상태에 따라서 특정 기발들 초기화 해주자
	AJLog(L"AutoLogic start : nCurSecne = %d", nCurScene);


	UUMG_WidgetBlueprintLibrary* widgetLib = GetWigetLibrary();
	UEngine_World* world = GetGlobalWorld(dwGameAddress);
	if (widgetLib && world)
	{
		widgetLib->STATIC_GetAllWidgetsOfClass(world, UUMG_UserWidget::StaticClass(), false, &g_GlobalUiAry);
		g_bGlobalUiFlag = TRUE;
	}

	if (nCurScene == SCENE_LOGIN)
	{														// 서버변경이면 캐시템 상태 초기화 해주자
		for (int i = 0; i < MAX_CASH; i++)
			g_pCashItem[i].nRemainCount = -1;

		g_nCurTradeRegCount = 0;
		g_nTradeRegCount = 0;								// 거래소 정보도 초기화해주자
		g_nTradeChaoCount = 0;
		g_nTradeCheckCount = 0;
		g_bOpenVehicle = TRUE;
		g_nAttackChaoCount = 0;
		g_nSubQuestNo = -1;
		g_nTradeDissolveCount = 0;

		memset(g_bGuildCheck, 0, sizeof(g_bGuildCheck));
		memset(g_bGuildDonate, 0, sizeof(g_bGuildDonate));
		memset(g_qwGuildJoinTick, 0, sizeof(g_qwGuildJoinTick));
	}
	else if (nCurScene == SCENE_CHARSELECT || nCurScene == SCENE_CHARCREATE)
	{
		OnInitGameFlags();
	}

#ifndef _TEST_VERSION_

	OnSetHwndFocus(nCurScene);

#endif

	if (g_pGameMapping)
	{
		g_pGameMapping->bGameInfo = 0;

		if (g_pGameMapping->bDateInit)		// 새벽 4시 지나면 특정 컨텐츠 초기화 된다
		{
			g_pGameMapping->bDateInit = 0;
			OnInitGameEvents();
			//
		}
	}

	// 5분이상 로딩이 안되면 재접속시키자
	if ((g_qwGameLoadingTick != 0 && g_dwTickCount >= g_qwGameLoadingTick + 5 * 60 * 1000) ||
		(g_qwMapLoadingTick != 0 && g_dwTickCount >= g_qwMapLoadingTick + 5 * 60 * 1000))
	{
		ShowStatus(0, 60386);
		TerminateProcess(GetCurrentProcess(), 0);
		SetDelay(10);
		return;
	}

	if (IsGameLoading(dwGameAddress))			// 게임 로딩중이면
	{
		if (g_pGameInfo && g_pGameInfo->bType != 0)
		{
			g_pGameInfo->nCount = 0;
			g_pGameInfo->bType = 0;
		}

		if (g_qwGameLoadingTick == 0)
			g_qwGameLoadingTick = g_dwTickCount;

		g_dwLastTickCount = g_dwTickCount;
		g_dwWaitTime = 1000;
		return;
	}
	else
		g_qwGameLoadingTick = 0;

	if (nCurScene == SCENE_INGAME || nCurScene == SCENE_PROLOGUE || nCurScene == SCENE_REALMWAR)
	{
		if (g_qwKaKaoGameAddr == 0)
			g_qwKaKaoGameAddr = (DWORD64)GetModuleHandle(L"KaKaoGame.dll");

		if (IsMapLoading(dwGameAddress) || IsShowBlackOut(dwGameAddress))						// 맵 로딩중이면
		{
			if (g_qwMapLoadingTick == 0)
				g_qwMapLoadingTick = g_dwTickCount;

			g_dwLastTickCount = g_dwTickCount;
			g_dwWaitTime = 1000;
			return;
		}
		else
			g_qwMapLoadingTick = 0;

		// 주소 변경 Tick 체크하자
		BOOL bCrack = FALSE;
		for (int i = 0; i < g_qwAddrMemCount; i++)
		{
			if (dwGameAddress[ADDR_MEM_GWORLD] == g_qwAddrMemGWorld[i])
			{
				// bCrack = TRUE;
				bCrack = FALSE;
				break;
			}
		}

		if (!bCrack)
		{
			if (g_qwAddrMemCount >= 100)
			{
				g_qwAddrMemCount = 99;
				for (int i = 0; i < g_qwAddrMemCount; i++)
					g_qwAddrMemGWorld[i] = g_qwAddrMemGWorld[i + 1];
			}

			g_qwAddrMemGWorld[g_qwAddrMemCount++] = dwGameAddress[ADDR_MEM_GWORLD];
			g_qwMemGWorldTick = g_dwTickCount;
		}

		if (g_dwTickCount < g_qwMemGWorldTick + 1178574) {

			AJLog(L"updategameinfo start,  g_dwTickCount = %p, g_qwMemGWorldTick = %p", g_dwTickCount, g_qwMemGWorldTick);
			UpdateGameInfo(dwGameAddress);
		}


		if (g_pGameMapping)
		{
			g_pGameMapping->nServer = g_nGameServer;
			swprintf(g_pGameMapping->szCharName, L"%s", g_pCharInfo.szName);
			swprintf(g_pGameMapping->szServerName, L"%s", g_pCharInfo.szServer);
			swprintf(g_pGameMapping->szRegion, L"%s (%s)", g_pCharInfo.szRegion, g_pCharInfo.szPKType);
			g_pGameMapping->fPosX = g_pCharInfo.CurTransform.Translation.X;
			g_pGameMapping->fPosY = g_pCharInfo.CurTransform.Translation.Y;
			g_pGameMapping->fPosZ = g_pCharInfo.CurTransform.Translation.Z;
			g_pGameMapping->nCurHp = g_pCharInfo.nCurHp;
			g_pGameMapping->nMaxHp = g_pCharInfo.nMaxHp;
			g_pGameMapping->nCurMp = g_pCharInfo.nCurMp;
			g_pGameMapping->nMaxMp = g_pCharInfo.nMaxMp;
			g_pGameMapping->nWeight = g_nInvenCount * 100 / g_nMaxInvenCount;
			g_pGameMapping->nLevel = g_pCharInfo.nLevel;
			g_pGameMapping->nGold = (int)g_pCharInfo.nGoods[0];
			g_pGameMapping->nDia = (int)g_pCharInfo.nGoods[1];

			g_pGameMapping->bGameInfo = 1;
		}

		//g_dwPlayerSerial = GetPlayerSerial(dwGameAddress);

		// 게임 정보 필요하다
		if (g_pGameInfo && g_pGameInfo->bType != 0)
		{
			g_pGameInfo->nCount = 0;

			if (g_pGameInfo->bType == 1)			// 인벤
			{
				g_pGameInfo->nCount = min(300, g_nInvenCount);
				memset(g_pGameInfo->szName, 0, sizeof(WCHAR) * MAX_NAME * 300);

				for (int i = 0; i < g_pGameInfo->nCount; i++)
				{
					wcscpy(g_pGameInfo->szName[i], g_pInvenInfo[i].szName);
				}
			}
			else if (g_pGameInfo->bType == 2)		// 플레이어
			{
				g_pGameInfo->nCount = min(300, g_nPlayerCount);
				memset(g_pGameInfo->szName, 0, sizeof(WCHAR) * MAX_NAME * 300);

				for (int i = 0; i < g_pGameInfo->nCount; i++)
				{
					wcscpy(g_pGameInfo->szName[i], g_pPlayerInfo[i].szName);
				}
			}

			g_pGameInfo->bType = 0;
		}

		if (!IsInDungeon())
			g_nDungeonReturnCount = 0;
	}
	else
	{
		g_nVillageReturnCount = 0;
		g_qwLoadChaoTick = 0;
		g_qwMapLoadingTick = 0;
		g_nDungeonReturnCount = 0;

		if (g_pGameInfo && g_pGameInfo->bType != 0)
		{
			g_pGameInfo->nCount = 0;
			g_pGameInfo->bType = 0;
		}
	}

	// 오토 재개하는 경우
	if (g_nResumeTime >= 0)
	{
		if (g_bAutoRun)
		{
			g_nResumeTime = -1;
			g_qwResumeTickCount = 0;
		}
		else if (g_qwResumeTickCount == 0)
		{
			g_qwResumeTickCount = g_dwTickCount;
			ShowStatus(2, 60402, NULL, g_nResumeTime);
		}
		else if (g_dwTickCount >= g_qwResumeTickCount + g_nResumeTime * 60 * 1000)
		{
			g_pGameMapping->bAutoRun = TRUE;
			g_pGameMapping->bLogType = LogType_ChangeAutoState;
			g_nResumeTime = -1;
			g_qwResumeTickCount = 0;
			return;
		}
	}

	if (!g_bAutoRun)						// 오토 중지된 상태
	{
		if (g_nCurScene != SCENE_NONE)
		{
			g_nCurScene = SCENE_NONE;
			g_nPreStatus = SCENE_NONE;
		}

		if (g_nCurStatus != STATUS_NONE)
		{
			g_nCurStatus = STATUS_NONE;
			g_nPreStatus = STATUS_NONE;
		}

		g_bStartAuto = 0;
		g_dwMessageTick = 0;
		g_dwWaitTime = 0;
		g_bScheduleAlert = FALSE;
		g_bMoveHuntPos = FALSE;
		g_bMoveHuntSet = FALSE;

		g_nTradeRegIndex = 0;
		memset(g_szTradeRegName, 0, sizeof(g_szTradeRegName));
		memset(g_szTradeOrgName, 0, sizeof(g_szTradeOrgName));

		return;
	}

	// -------------------------- //
	g_nRecordCurStep = 0;
	if (g_bRecordStep && g_nRecordMaxStep != 0)
		g_bRecordStep = FALSE;

	if (ShowErrorLog(0))
		return;

	// -------------------------- //

	if (IsNetworkConnecting(dwGameAddress))				// 네트워크 개선이거나
	{
		if (g_qwNetworkTick == 0)
			g_qwNetworkTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwNetworkTick + 2 * 60 * 1000)
		{
			ShowStatus(2, 60307, NULL, 2);
			TerminateProcess(GetCurrentProcess(), 0);
		}

		g_dwNoMonsterTick = g_dwTickCount;
		g_dwMoveCharTick = g_dwTickCount;
		g_qwAttackTick = g_dwTickCount;

		SetDelay(10);
		return;
	}
	else
		g_qwNetworkTick = 0;

	// -------------------------- //
	if (ShowErrorLog(1))
		return;
	// -------------------------- //

	if (nCurScene == SCENE_INGAME || nCurScene == SCENE_PROLOGUE || nCurScene == SCENE_REALMWAR)
	{
		if (g_pCharInfo.nMapType == 0 && g_pCharInfo.dwMapID == 0)
		{
			if (g_qwLoadChaoTick == 0)
				g_qwLoadChaoTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwLoadChaoTick + 5 * 60 * 1000)			// 5분이상 로딩렉인 경우
			{
				ShowStatus(2, 60307, NULL, 5);
				TerminateProcess(GetCurrentProcess(), 0);
			}

			SetDelay(10);
			return;
		}
		else
			g_qwLoadChaoTick = 0;
	}

	// 주소 타임 체크하자

	DWORD dwServerTime = dwGameAddress[0] ^ 0x20121223;
	if (g_dwAddrLastTime > dwServerTime)
		g_nCurStatus = rand();
	else
		g_dwAddrLastTime = dwServerTime;

	if (SkipSleepMode(dwGameAddress) ||					// 절전 모드
		SkipMovieScene(dwGameAddress) ||				// 영상 로딩중이면
		SkipTutorialScene(dwGameAddress) ||				// 튜트리얼 현시중이면
		SkipQuestMovieScene(dwGameAddress))				// 퀘스트 영상 현시중이면
	{
		SetDelay(10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(2))
		return;
	// -------------------------- //

	if (OnMessageProc(dwGameAddress) || OnWarningProc(dwGameAddress))
		return;

	// -------------------------- //
	if (ShowErrorLog(3))
		return;
	// -------------------------- //

	if (g_dwTickCount >= g_qwWarningTick + 5 * 1000 && g_szPreWarning[0] != 0)
		memset(g_szPreWarning, 0, sizeof(WCHAR) * 200);

	g_dwMessageTick = 0;

	if (nCurScene == SCENE_INGAME || nCurScene == SCENE_PROLOGUE || nCurScene == SCENE_REALMWAR)
	{
		if (g_nBlackOutShow != 0)									// 탈것 타고 착지할때 딜레이 좀 주자
		{
			if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__None)
			{
				g_dwNoMonsterTick = g_dwTickCount;
				g_dwMoveCharTick = g_dwTickCount;
				g_qwAttackTick = g_dwTickCount;

				return;
			}

			g_nBlackOutShow = FALSE;
			SetDelay(10);

			return;
		}

		// 접속한 캐릭이 다르면 설정값 초기화하자
		if (wcscmp(g_szCharName, g_pCharInfo.szName))
		{
			memset(g_szCharName, 0, sizeof(g_szCharName));
			wcscpy(g_szCharName, g_pCharInfo.szName);

			g_nDeadCount = 0;
			GetSkillLearnInfo();
			g_bGetEquips = FALSE;
			g_nSubQuestChapter = 0;
			g_nSubQuestNo = -1;
			g_nRecoverFreeCount = -1;
			g_bShopItemOring[0] = FALSE;
			g_bShopItemOring[1] = FALSE;
			g_bOpenVehicle = TRUE;

			for (int i = 0; i < MAX_DUNGEON; i++)				// 던전 시간도 바꾸자
				g_pDungeonRes[i].nRemainTime = -1;
		}

		// 지역 이동한 경우 (탈것 타고 날거나 떨어지는 경우)
		if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__WarpFly ||
			g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__WarpFlyEnd)
		{
			g_dwNoMonsterTick = g_dwTickCount;
			g_dwMoveCharTick = g_dwTickCount;
			g_qwAttackTick = g_dwTickCount;

			return;
		}

		// 들어온 골드가 다른 경우
		if (g_preGoods != g_pCharInfo.nGoods[0])
		{
			g_preGoods = g_pCharInfo.nGoods[0];

			g_dwNoMonsterTick = g_dwTickCount;
			g_dwMoveCharTick = g_dwTickCount;
			g_qwAttackTick = g_dwTickCount;
		}

		// 사냥 상태가 아니면 
		if (g_pCharInfo.nAutoState == AUTO_NONE)
		{
			g_nMonsterCurHp = -1;
			g_qwPreAutoTarget = 0;
			g_dwNoMonsterTick = g_dwTickCount;
			g_dwMoveCharTick = g_dwTickCount;
		}
		else
		{
			// 사냥 상태면서 타겟 몹 체력이 달라지면
			if (g_pCharInfo.pAutoTarget && g_pCharInfo.pAutoTarget->CharacterParam && g_pCharInfo.pAutoTarget->CharacterParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__Monster)
			{
				if (g_qwPreAutoTarget != (DWORD64)g_pCharInfo.pAutoTarget)
				{
					g_dwNoMonsterTick = g_dwTickCount;
					g_nMonsterCurHp = (int)g_pCharInfo.pAutoTarget->CharacterParam->BaseObjectInfo.m_CurHp;
					g_qwPreAutoTarget = (DWORD64)g_pCharInfo.pAutoTarget;
					g_dwMoveCharTick = g_dwTickCount;
					g_qwQuestTotalTick = g_dwTickCount;
				}
				else if (g_nMonsterCurHp != g_pCharInfo.pAutoTarget->CharacterParam->BaseObjectInfo.m_CurHp)
				{
					g_dwNoMonsterTick = g_dwTickCount;
					g_dwMoveCharTick = g_dwTickCount;
					g_nMonsterCurHp = (int)g_pCharInfo.pAutoTarget->CharacterParam->BaseObjectInfo.m_CurHp;
					g_qwQuestTotalTick = g_dwTickCount;
				}
			}
			else
			{
				g_qwPreAutoTarget = 0;
				g_nMonsterCurHp = -1;
			}
		}

		// 채집상태면
		if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction)
		{
			g_dwNoMonsterTick = g_dwTickCount;
			g_dwMoveCharTick = g_dwTickCount;
			g_qwAttackTick = g_dwTickCount;
		}

		// 캐릭터 위치가 달라졌거나
		if (g_pPrevCharPos.X != g_pCharInfo.CurTransform.Translation.X || g_pPrevCharPos.Y != g_pCharInfo.CurTransform.Translation.Y ||
			g_pPrevCharPos.Z != g_pCharInfo.CurTransform.Translation.Z/* || g_pCharInfo.nPlayerState != FProjectLH_ProjectLH_ECharacterState::ECharacterState__Moveable*/)
		{
			g_dwMoveCharTick = g_dwTickCount;
			g_pPrevCharPos = g_pCharInfo.CurTransform.Translation;
		}

		// -------------------------- //
		if (ShowErrorLog(4))
			return;
		// -------------------------- //

		if (OnQuestAcceptFinish(dwGameAddress) ||		// 퀘스트 수락/완료 창문 처리
			OnQuestTalkMovieSkip(dwGameAddress) ||		// 퀘스트 대화영상 Skip 처리
			OnCallSceneSkip(dwGameAddress) ||			// 소환창 Skip 처리 (아바타, 탈것, 룬)
			OnCloseAvatarScene(dwGameAddress) ||		// 아바타 Scene 종료
			OnCloseVehicleScene(dwGameAddress) ||		// 탈것 Scene 종료
			OnCloseRuneScene(dwGameAddress) ||			// 룬 Scene 종료
			OnCloseWeaponScene(dwGameAddress) ||		// 무기 형상 Scene 종료
			OnCloseBlessingScene(dwGameAddress) ||		// 가호석
			//OnCloseInstantMessageScene(dwGameAddress) ||	//발할라메시지 종료
			OnCloseTakeItemWidget(dwGameAddress) ||		// 아이템 결과 창문 처리
			OnItemChoosePopup(dwGameAddress) ||			// 특정 아이템 열기
			OnUnPackItemPackage(dwGameAddress) ||		// 아이템 주머니 열기
			OnCloseAchievementResult(dwGameAddress) ||	// 업적 보상
			OnCloseMailItem(dwGameAddress) ||			// 메일 아이템 보상 받은 상태
			OnCloseEventReward(dwGameAddress) ||		// 이벤트 보상 결과창
			OnCloseSafeEnchantScene(dwGameAddress) ||	// 강화 결과창
			OnCloseContentsTutorial(dwGameAddress) ||	// 컨텐츠 튜트리얼
			CloseOfflineHuntingResult(dwGameAddress) ||	// 방치모드 사냥 결과물
			OnCloseGuildPopup(dwGameAddress) ||			// 길드 기부 창문
			OnCloseCollectionPopup(dwGameAddress) ||	// 컬렉션 확인창
			OnCloseTradeConfirm(dwGameAddress) ||		// 거래소 등록 확인창
			OnCloseCancelTrade(dwGameAddress) ||		// 등록된 물품 취소 확인창
			OnCloseGuildJoinPopup(dwGameAddress) ||		// 길드 자동 가입
			OnCloseDungeonReward(dwGameAddress) ||		// 던전 결과창
			OnCloseVillageRequest(dwGameAddress) ||		// 의뢰 퀘스트 수락창
			OnCloseWorldBossResult(dwGameAddress))		// 월드 보스 결과창
		{
			g_dwMoveCharTick = g_dwTickCount;
			SetDelay(10);
			return;
		}
		else if (g_bSkipTutorial != 0)
		{
			g_bSkipTutorial = 0;

			if (OnCloseOpenWindow(dwGameAddress))
			{
				g_dwMoveCharTick = g_dwTickCount;
				SetDelay(10);
				return;
			}
		}
	}
	else
	{
		if (g_pGameMapping)
			g_pGameMapping->bGameInfo = 0;

		g_dwNoMonsterTick = g_dwTickCount;
		g_qwAttackTick = g_dwTickCount;
	}

	// -------------------------- //
	if (ShowErrorLog(5))
		return;
	// -------------------------- //

	if (nCurScene != g_nCurScene)
	{
		g_nPreScene = g_nCurScene;
		g_nCurScene = nCurScene;

#ifdef _TEST_VERSION_

		AJLog(L"Scene: %d, Pre: %d", g_nCurScene, g_nPreScene);

#endif // _TEST_VERSION_

		switch (g_nCurScene)
		{
		case SCENE_LOGIN:
		{
			g_nStepStatus = 0;
			g_bServerWait = 0;
			g_dwServerSelTick = 0;
			g_dwServerLoginTick = 0;

			SetStatus(STATUS_LOGIN, 30);
		}
		break;
		case SCENE_CHARSELECT:
		{
			g_dwCharSelectTick = 0;
			g_dwCharStartTick = 0;
			g_nStepStatus = 0;

			SetStatus(STATUS_CHARSELECT, 30);
		}
		break;
		case SCENE_CHARCREATE:
		{
			g_nCreateLen = 0;
			memset(g_szCreateName, 0, sizeof(WCHAR) * MAX_NAME);

			SetStatus(STATUS_CHARCREATE, 30);
		}
		break;
		case SCENE_INGAME:
		{
			GetSkillLearnInfo();

			g_qwCashShopStart = 0;
			g_qwGuildCheckStart = 0;
			g_qwMailboxStart = 0;
			g_qwVehicleStart = 0;
			g_qwTradeStart = 0;
			g_qwInvenProcStart = 0;
			g_qwEnchantProcStart = 0;

			int nDelay = 20;
			if (g_nPreScene != SCENE_REALMWAR)
			{
				nDelay = 100;
				ShowStatus(0, 60143);		// L"네트워크 환경을(를) 확인합니다");
			}

			g_dwPreQuestID = 0;
			g_bMoveHuntPos = FALSE;
			g_bMoveHuntSet = FALSE;
			g_dwNoMonsterTick = g_dwTickCount;
			g_qwAttackTick = g_dwTickCount;
			SetStatus(STATUS_DOAUTO, nDelay);
		}
		break;
		case SCENE_PROLOGUE:
		{
			ShowStatus(0, 60144);		// L"프롤로그를(을) 진행합니다");
			SetStatus(STATUS_PROLOGUE, 30);
		}
		break;
		case SCENE_REALMWAR:
		{
			ShowStatus(0, 60289);		// 발할라 대전을 진행합니다
			g_dwNoMonsterTick = g_dwTickCount;
			g_qwAttackTick = g_dwTickCount;
			g_qwCharDeadTick = 0;
			SetStatus(STATUS_REALMWAR, 10);
		}
		break;
		}
	}
	else
	{
#ifdef DISABLE_GAMEGUARD

		// 캐릭터 보이기/안보이기 체크
		if (g_nCurStatus == STATUS_WORLDBOSS)
			HidePlayerObjects(dwGameAddress, TRUE);
		else
			HidePlayerObjects(dwGameAddress, FALSE);

#endif // DISABLE_GAMEGUARD				

		// -------------------------- //
		if (ShowErrorLog(6))
			return;
		// -------------------------- //

		// 캐릭 사망한 경우
		if (g_nCurScene == SCENE_INGAME && g_pCharInfo.nCurHp <= 0)
		{
			if (g_nCurStatus != STATUS_CHARDEAD && g_nCurStatus != STATUS_PARTYDUNGEON)
			{
				if (!g_HuntSetting.bDeadStop)											// 사망 타임 체크해서 오토 중지하자
					g_nDeadCount = 0;
				else if (g_nDeadCount < 50)
					g_dwDeadTime[g_nDeadCount++] = g_dwTickCount;
				else
				{
					g_nDeadCount = 50;
					for (int i = 0; i < 49; i++)
						g_dwDeadTime[i] = g_dwDeadTime[i + 1];

					g_dwDeadTime[g_nDeadCount - 1] = g_dwTickCount;
				}

				g_qwCharDeadTick = 0;
				g_qwCharDeadChaoTick = g_dwTickCount;
				ShowStatus(0, 60145);													// (캐릭이 사망하였습니다)
				SetStatus(STATUS_CHARDEAD, 10);
				return;
			}
		}
		// 지형에 갇힌 경우
		else if (g_nCurScene == SCENE_INGAME && IsCharFallDown())
		{
			UProjectLH_LHWidget_OptionWindow* OptionWindow = reinterpret_cast<UProjectLH_LHWidget_OptionWindow*>(GetVisibleWidget(dwGameAddress, UProjectLH_LHWidget_OptionWindow::StaticClass()));
			if (g_bCharFallDown != 0)													// 횟수 초과한 경우
			{
				if (OptionWindow)														// 설정창 끄자
					OptionWindow->C_Topmenu->OnTapExitBtn();
				else																	// 캐선창 나가자
				{
					ShowStatus(0, 60314);
					OpenMenuWindow(dwGameAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
				}
			}
			else if (OptionWindow)														// 탈출하기
			{
				ShowStatus(0, 60314);
				OptionWindow->C_Account->OnClickEscape();
			}
			else																		// 설정창 현시
			{
				OpenMenuWindow(dwGameAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
			}

			SetDelay(10);
			return;
		}
		// 발할라 대전인 경우
		else if (g_nCurScene == SCENE_REALMWAR)
		{
			if (g_nCurStatus != STATUS_REALMWAR)
			{
				ShowStatus(0, 60289);
				g_qwCharDeadTick = 0;
				g_bValhala = 0;
				SetStatus(STATUS_REALMWAR, 0);
			}
		}
		// 파티 던전인 경우
		else if (g_nCurScene == SCENE_INGAME && IsPartyDungeon())
		{
			if (g_nCurStatus != STATUS_PARTYDUNGEON)
			{
				g_qwPartyLogoutTick = 0;
				g_bInitAloneDungeon = FALSE;
				g_qwCharDeadTick = 0;
				g_bDungeonDoorLock = 0;
				g_qwPartyDungeonTick = 0;
				g_bPartyDungeonOut = FALSE;
				ShowStatus(1, 60293, g_pCharInfo.szWorld);
				SetStatus(STATUS_PARTYDUNGEON, 0);
			}
		}
		// 스케줄이 다른 경우
		else if (wcscmp(g_szScheduleName, g_pGameMapping->szSchedule))
		{
			// 스케줄이 없는 경우
			if (!wcscmp(g_pGameMapping->szSchedule, L""))
			{
				g_bScheduleAlert = FALSE;
				memset(g_szScheduleName, 0, sizeof(WCHAR) * MAX_NAME);
				return;
			}

			// 메뉴가 안나오면 무조건 진행하자
			if (g_nCurScene == SCENE_INGAME && GetMainQuestNo() < 102)
			{
				if (g_nCurStatus != STATUS_DOAUTO)
				{
					g_bMoveHuntPos = FALSE;
					g_bMoveHuntSet = FALSE;
					g_qwMainQuestTick = g_dwTickCount;
					SetStatus(STATUS_DOAUTO);
				}
			}
			else
			{
				ChangeSchedule();
				return;
			}
		}
		// 진행할 스케줄이 없는 경우
		else if (!wcscmp(g_szScheduleName, L""))
		{
			if (!g_bScheduleAlert)
			{
				g_bScheduleAlert = TRUE;
				g_pGameMapping->bLogType = LogType_ChangeSchedule;
				ShowStatus(0, 60146);		// L"진행할 스케줄 정보가 없습니다");
			}

			return;
		}

		// -------------------------- //
		if (ShowErrorLog(7))
			return;
		// -------------------------- //

		g_bScheduleAlert = FALSE;

		switch (g_nCurStatus)
		{
		case STATUS_LOGIN:					// 화면 클릭 및 서버 선택
		{
			OnServerLogin(dwGameAddress);
		}
		break;
		case STATUS_CHARSELECT:				// 캐릭 선택
		{
			OnCharSelect(dwGameAddress);
		}
		break;
		case STATUS_CHARCREATE:				// 캐릭 생성
		{
			OnCharCreate(dwGameAddress);
		}
		break;
		case STATUS_PROLOGUE:				// 새 캐릭 접속시 나오는 프롤로그
		{
			OnGamePrologue(dwGameAddress);
		}
		break;
		case STATUS_DOAUTO:					// Auto 진행
		{
			OnGameDoAuto(dwGameAddress);
		}
		break;
		case STATUS_AVATAR:					// 아바타 합성 및 장착
		{
			OnGameAvatar(dwGameAddress);
		}
		break;
		case STATUS_VEHICLE:				// 탈것 합성 및 장착
		{
			OnGameVehicle(dwGameAddress);
		}
		break;
		case STATUS_RECOVEREXP:				// 경험치 복구
		{
			OnGameRecoverExp(dwGameAddress);
		}
		break;
		case STATUS_EXPENDSHOP:				// 소모품 상인
		case STATUS_EXCHANGESHOP:			// 교환 상인
		{
			OnGameExpendShop(dwGameAddress, g_nCurStatus - STATUS_EXPENDSHOP);
		}
		break;
		case STATUS_INVENPROC:				// 아이템 처리 (분해, 삭제, 사용)
		{
			OnGameInvenProc(dwGameAddress);
		}
		break;
		case STATUS_SKILLPROC:				// 스킬 구매 및 사용, 자동 등록
		{
			OnGameSkillProc(dwGameAddress);
		}
		break;
		case STATUS_STOREEQUIPS:			// 장비 창고에 보관
		{
			OnGameStoreEquips(dwGameAddress);
		}
		break;
		case STATUS_GETEQUIPS:				// 창고에서 장비 찾기
		{
			OnGameGetEquips(dwGameAddress);
		}
		break;
		case STATUS_CHARLOGOUT:				// 캐릭 로그 아웃
		{
			OnGameCharLogOut(dwGameAddress);
		}
		break;
		case STATUS_CHARDEAD:				// 캐릭이 사망한 경우
		{
			OnGameCharDead(dwGameAddress);
		}
		break;
		case STATUS_RETURNVILLAGE:			// 마을 귀환해서 판매/구매 체크
		{
			OnGameReturnVillage(dwGameAddress);
		}
		break;
		case STATUS_USEITEM:				// 특정 아이템 사용
		{
			OnGameUseItem(dwGameAddress);
		}
		break;
		case STATUS_ACHIEVEMENT:			// 업적 확인
		{
			OnGameAchievement(dwGameAddress);
		}
		break;
		case STATUS_MAIL:					// 메일 확인
		{
			OnGameMail(dwGameAddress);
		}
		break;
		case STATUS_EVENT:					// 이벤트
		{
			OnGameEvent(dwGameAddress);
		}
		break;
		case STATUS_CASHSHOP:				// 캐시샵
		{
			OnGameCashShop(dwGameAddress);
		}
		break;
		case STATUS_ENCHANTEQUIP:			// 강화 (장착한 템들)
		{
			OnGameEnchantEquip(dwGameAddress);
		}
		break;
		case STATUS_VILLAGEQUEST:			// 마을 의뢰
		{
			OnGameVillageQuest(dwGameAddress);
		}
		break;
		case STATUS_SKILLSLOT:				// 스킬 퀵슬롯만 진행
		{
			OnGameSkillSlot(dwGameAddress);
		}
		break;
		case STATUS_TRADE:					// 거래소
		{
			OnGameTrade(dwGameAddress);
		}
		break;
		case STATUS_COLLECTION:				// 컬렉션
		{
			OnGameCollection(dwGameAddress);
		}
		break;
		case STATUS_GUILD:					// 길드 가입, 출석, 보상
		{
			OnGameGuild(dwGameAddress);
		}
		break;
		case STATUS_REALMWAR:				// 발할라 처리
		{
			OnGameRealMWar(dwGameAddress);
		}
		break;
		case STATUS_PARTYDUNGEON:			// 파티던전
		{
			OnGamePartyDungeon(dwGameAddress);
		}
		break;
		case STATUS_FORCERETURN:			// 마을로 강제 귀환하는 상태
		{
			if (OnGameForceReturn(dwGameAddress) != 0)
			{
				if (g_nPreStatus == STATUS_FORCERETURN)
					g_nPreStatus = STATUS_DOAUTO;
				SetStatus(g_nPreStatus, 10);
			}
		}
		break;
		case STATUS_ODINPASS:				// 오딘 패스
		{
			OnGameOdinPass(dwGameAddress);
		}
		break;
		case STATUS_MATCHREALMWAR:			// 발할라 대전 신청
		{
			OnGameMatchingRealMWar(dwGameAddress);
		}
		break;
		case STATUS_MATCHBIGSNAKE:			// 파티 던전 입장 신청
		{
			OnGameMatchBigSnake(dwGameAddress);
		}
		break;
		case STATUS_WORLDBOSS:				// 월드 보스
		{
			OnGameWorldBoss(dwGameAddress);
		}
		break;
		case STATUS_TREASUREBOX:			// 보물 상자
		{
			OnGameTreasure(dwGameAddress);
		}
		break;
		case STATUS_ATTACKCHAO:				// 공격 렉 걸리는 경우
		{
			OnGameAttackChao(dwGameAddress);
		}
		break;
		case STATUS_ITEMENCHANT:			// 아이템 강화
		{
			OnGameItemEnchant(dwGameAddress);
		}
		break;
		case STATUS_BIGPOTION:				// 큰 포션
		{
			OnGameBuyPotion(dwGameAddress);
		}
		break;
		case STATUS_WEAPONSHAPE:			// 무기 형상
		{
			OnGameWeaponShape(dwGameAddress);
		}
		break;
		case STATUS_SUBQUEST:				// 서브 퀘스트
		{
			OnGameSubQuest(dwGameAddress);
		}
		break;
		case STATUS_WEAPONTREASURE:
		{
			OnGameWeaponTreasure(dwGameAddress);
		}
		break;
		case STATUS_EVENTBUFF:
		{
			OnGameEventBuff(dwGameAddress);
		}
		break;

		case STATUS_RECORDBOSS:				// 보스 스킬 패턴 녹화
		{
			OnGameRecordBoss();
		}
		break;
		case STATUS_QUESTPOTION:			// 물약 사러 가는 경우
		{
			OnGameQuestPotion(dwGameAddress);
		}
		break;
		case STATUS_WAITDELAY:
		{
			if (g_bWaitDelay)
			{
				g_bWaitDelay = FALSE;
				ShowStatus(0, 60147);		// L"다음 스케줄을 대기합니다");
			}

			if (!wcscmp(g_pGameMapping->szSchedule, L"") && wcscmp(g_szScheduleName, L""))
			{
				g_bScheduleAlert = FALSE;
				memset(g_szScheduleName, 0, sizeof(WCHAR) * MAX_NAME);
			}
		}
		break;
		}
	}
}


UUMG_UserWidget* GetWidget(DWORD* dwAddress, UClass* cmp, int nIdx = 0)
{
	int nCounter = 0;
	if (g_bGlobalUiFlag)
	{
		for (int i = 0; i < g_GlobalUiAry.Num(); i++)
		{
			if (!g_GlobalUiAry[i])
				continue;

			if (g_GlobalUiAry[i]->IsA(cmp))
			{
				if (nCounter == nIdx)
				{
					UUMG_UserWidget* selWidget = g_GlobalUiAry[i];
					return selWidget;
				}
				else
					nCounter++;
			}
		}
	}

	return nullptr;
}


DWORD64 GetWidget(DWORD* dwAddress, DWORD dwId)
{
	DWORD64 qwGameInstance = *(DWORD64*)PATCHADDR(dwAddress[ADDR_LHGameInstance], dwAddress[0]);
	if (!qwGameInstance)
		return NULL;

	_callFunc1 getMainWidgets = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETMAINWIDGETS], dwAddress[0]);
	DWORD64 qwMainWidgets = getMainWidgets(qwGameInstance);
	if (!qwMainWidgets)
		return NULL;

	_callFunc2 getWidgetWithId = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETWIDGETWITHID], dwAddress[0]);
	DWORD64 qwWidget = getWidgetWithId(qwMainWidgets, dwId);
	if (!qwWidget)
		return NULL;

	_callFunc1 convWidgetRcx = (_callFunc1)PATCHADDR(dwAddress[ADDR_CONVWIDGETRCX], dwAddress[0]);
	return convWidgetRcx(qwWidget);
}


int GetCurSelServerId(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return -1;

	UProjectLH_LHLoginMgr* pLoginMgr = (UProjectLH_LHLoginMgr*)pInstance->LoginMgr;
	if (!pLoginMgr)
		return -1;

	return *(WORD*)(&pLoginMgr->UnknownData01[0]);
}


BOOL SetCurSelServerId(DWORD* dwAddress, WORD bServerNum)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return FALSE;

	UProjectLH_LHLoginMgr* pLoginMgr = (UProjectLH_LHLoginMgr*)pInstance->LoginMgr;
	if (!pLoginMgr)
		return FALSE;

	*(WORD*)(&pLoginMgr->UnknownData01[0]) = bServerNum;
	return TRUE;
}


void OnServerLogin(DWORD* dwAddress)
{
	if (g_ScheduleSetting.bSelServer)
		g_nGameServer = g_ScheduleSetting.nSelServer;

	UProjectLH_LHWidget_Patch* pPatchWindow = reinterpret_cast<UProjectLH_LHWidget_Patch*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Patch::StaticClass()));
	if (pPatchWindow)					// 업뎃중이면
	{
		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_SecondPassward_Popup* uiSecondPassword = (UProjectLH_LHWidget_SecondPassward_Popup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_SecondPassward_Popup));
	if (uiSecondPassword && uiSecondPassword->IsVisible())
	{
		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_LoginWatingPopup* pWaitPopup = reinterpret_cast<UProjectLH_LHWidget_LoginWatingPopup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_LoginWatingPopup::StaticClass()));
	if (pWaitPopup)						// 서버 접속 대기중
	{
		if (!g_bServerWait)
		{
			g_bServerWait = 1;
			ShowStatus(0, 60148);		// L"접속 대기중입니다...");
		}

		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_ServerSelect* pServerSel = reinterpret_cast<UProjectLH_LHWidget_ServerSelect*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_ServerSelect::StaticClass()));
	if (pServerSel)
	{
		if (g_dwServerSelTick == 0)
			g_dwServerSelTick = g_dwTickCount;

		if (g_dwTickCount >= g_dwServerSelTick + 3 * 1000)
		{
			SetDelay(10);
			g_dwServerSelTick = 0;

			pServerSel->OnClicked_Close();
			return;
		}

		return;
	}

	g_dwServerSelTick = 0;

	UProjectLH_LHWidget_Login* pLogin = reinterpret_cast<UProjectLH_LHWidget_Login*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Login::StaticClass()));
	if (pLogin)
	{
		if (g_dwServerLoginTick == 0)
			g_dwServerLoginTick = g_dwTickCount;

		if (g_dwTickCount >= g_dwServerLoginTick + 3 * 1000)
		{
			UProjectLH_LHWidget_Waiting* pWaitPopupForCheck = reinterpret_cast<UProjectLH_LHWidget_Waiting*>(GetWidget(dwAddress, UProjectLH_LHWidget_Waiting::StaticClass()));
			if (pWaitPopupForCheck)
			{
				if (pLogin->C_TB_SelectedServerName)
				{
					if (g_nGameServer >= 0 && GetCurSelServerId(dwAddress) != 0x7D1 + g_nGameServer)
						SetCurSelServerId(dwAddress, g_nGameServer + 0x7D1);
					else
					{
						if (g_nGameServer >= 0)
							ShowStatus(3, 60149, g_szServerName[(g_nGameServer / 9) % MAX_SERVER], (g_nGameServer % 9) + 1);		// L"서버 %s%02d 에 접속합니다", 
						else
							ShowStatus(0, 60150);		// L"마지막 접속한 서버로 들어갑니다");

						g_dwServerLoginTick = 0;
						pLogin->OnClicked_ServerSelect();
					}
				}
			}
			else
			{
				ShowStatus(0, 60151);			// L"화면을 클릭합니다");

				g_dwServerLoginTick = 0;
				pLogin->OnTouchAnyPress();
			}
		}
	}
	else
		g_dwServerLoginTick = 0;

	SetDelay(10);
}



void ShowStatus(int nLogType, unsigned int nStringCode, WCHAR* szLog, int nLogValue1, int nLogValue2)
{
	g_pGameMapping->nLogType = nLogType;
	g_pGameMapping->nStringCode = nStringCode;

	memset(g_pGameMapping->szLog, 0, sizeof(g_pGameMapping->szLog));
	if (szLog != NULL && wcscmp(szLog, L""))
		wcscpy(g_pGameMapping->szLog, szLog);

	g_pGameMapping->nLogValue1 = nLogValue1;
	g_pGameMapping->nLogValue2 = nLogValue2;

	SetEvent(g_hWaitEvent);
	WaitForSingleObject(g_hAnswerEvent, INFINITE);
}



void OnCharSelect(DWORD* dwAddress)
{
	if (g_ScheduleSetting.bSelServer && g_ScheduleSetting.nSelServer != g_nGameServer)			// 서버가 다른 경우 서버 선택으로 나가자
	{
		UProjectLH_LHWidget_CharacterCreate* pCharCreate = reinterpret_cast<UProjectLH_LHWidget_CharacterCreate*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterCreate::StaticClass()));
		if (pCharCreate && pCharCreate->C_Topmenu)
			pCharCreate->C_Topmenu->OnClicked_Back();

		SetDelay(10);
		return;
	}

	if (g_ScheduleSetting.bSelChar)
		g_nGameChar = g_ScheduleSetting.nSelChar;

	// 창고에서 찾아야 하는 경우 현재 장비 가지고있는 캐릭이 있는지 체크하자
	BOOL bGetChar = FALSE;
	if (g_OtherSetting.bGetStoreEquips)
	{
		int nEquipChar = GetEquipsChar(g_nGameServer);
		if (nEquipChar > 0 && nEquipChar != g_nGameChar + 1)
		{
			g_nGameChar = nEquipChar - 1;
			bGetChar = TRUE;
		}
	}

	if (g_nStepStatus == 0)
	{
		UProjectLH_LHWidget_CharacterSelect_Container* pCharPopup = reinterpret_cast<UProjectLH_LHWidget_CharacterSelect_Container*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterSelect_Container::StaticClass(), g_nGameChar));
		if (pCharPopup)
		{
			if (g_dwCharSelectTick == 0)
				g_dwCharSelectTick = g_dwTickCount;

			if (g_dwTickCount >= g_dwCharSelectTick + 3 * 1000)
			{
				g_dwCharSelectTick = 0;
				if (*(DWORD64*)((char*)pCharPopup->UnknownData00 + 8))
				{
					g_nStepStatus = 1;

					ShowStatus(2, 60152, NULL, g_nGameChar + 1);				// L"%d번 캐릭을 선택합니다",
					pCharPopup->OnClicked_Slot();
				}
				else
				{
					if (bGetChar)												// 캐릭이 없는데 그 캐릭이 설정이 되어있다면 무시하자
					{
						SetEquipsChar(g_nGameServer, 0);
						SetDelay(10);
						return;
					}

					ShowStatus(2, 60153, NULL, g_nGameChar + 1);				// L"%d번 캐릭이 없으므로 자동생성합니다", 
					pCharPopup->OnClicked_CreatePlayer();
				}
			}
		}
	}
	else
	{
		UProjectLH_LHWidget_CharacterCreate* pCharCreate = reinterpret_cast<UProjectLH_LHWidget_CharacterCreate*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterCreate::StaticClass()));
		if (pCharCreate)
		{
			if (g_dwCharStartTick == 0)
				g_dwCharStartTick = g_dwTickCount;

			if (g_dwTickCount >= g_dwCharStartTick + 3 * 1000)
			{
				g_nStepStatus = 0;
				ShowStatus(0, 60154);			// L"게임에 접속합니다");

				pCharCreate->OnClicked_OK();
				SetDelay(50);
				return;
			}
		}
	}

	SetDelay(10);
}


UEngine_GameplayStatics* GetGamePlayStatics()
{
	static UEngine_GameplayStatics* playStatics = nullptr;
	if (!playStatics)
		playStatics = reinterpret_cast<UEngine_GameplayStatics*>(UEngine_GameplayStatics::StaticClass());

	return playStatics;
}


AEngine_Actor* GetActor(DWORD* dwAddress, UClass* cmp, int nIdx = 0)
{
	UEngine_GameplayStatics* gameplayStatics = GetGamePlayStatics();
	UEngine_World* world = GetGlobalWorld(dwAddress);
	if (!gameplayStatics || !world)
		return nullptr;

	TArray<AEngine_Actor*> uiAry;
	int nCounter = 0;
	gameplayStatics->STATIC_GetAllActorsOfClass(world, AEngine_Actor::StaticClass(), &uiAry);
	for (int i = 0; i < uiAry.Num(); i++)
	{
		if (!uiAry[i])
			continue;

		if (uiAry[i]->IsA(cmp))
		{
			if (nCounter == nIdx)
			{
				AEngine_Actor* selActor = uiAry[i];
				//FreeGarbageMemory(dwAddress, *(DWORD64*)((DWORD64)&uiAry));
				FreeGarbageMemory(*(DWORD64*)((DWORD64)&uiAry));
				return selActor;
			}
			else
				nCounter++;
		}
	}

	//FreeGarbageMemory(dwAddress, *(DWORD64*)((DWORD64)&uiAry));
	FreeGarbageMemory(*(DWORD64*)((DWORD64)&uiAry));
	return nullptr;
}


WCHAR g_szKOSTR[] = L"성사범학교훈도일본강점기의초등학교교원였던심의린이편찬한보통학교조선어사전이다이사전은언어사전에속하는것으로현재의초등학교에해당하는일본강점기의보통학교의학생들을위한한국어학습사전이다지금까지조사된결과에의하면이사전은한국사람이편찬하여단행본으로출판한한국최초의한국어학습사전이며한국사람이편찬한최초의인쇄된한국어단일어사전이다박형익이제까지최초의국어사전으로알려졌던문세영의조선어사전보다시기적으로크게앞선국어사전이발견됐다박형익경기대교수는년간행된문세영의조선어사전보다년앞서년월일에발행된국어사전보통학교조선어사전제판을발견다고일밝혔다이국어사전은경성사범학교훈도심의린이편찬한것으로출판사는서울에위치한주식회사이문당으로있다또한판사전의뒷면에는초판발행일로년월일이명시된판권지가보존있어이사전의처음발행시점은문세영의조선어사전보다년앞선것으로증명됐다이보통학교조선어사전은표제어와뜻풀이에모두한국어를사용하고일본어는전혀사용하지않은명실상부한최초의한국어단일어사전이라는점에서국문학사에서의위상이매우큰것으로평가된다조선총독부도문세영의사전과동일한명칭의조선어사전을년발행한바있지만이는표제어만한자와한글을병기하고뜻은일본어로풀이한한국어-일본어사전이었다이국어사전의용도는현재의초등학교에해당하는일제강점기보통학교학생들을위한한국어학습사전으로가로세로크기에부록인보통학교한자자전쪽을포함해총쪽분량이다수록단어는모두천개로당시초등학교교과서에해당하는보통학교조선어독본에나오는천개단어에개의어휘를보충다또한현대국어사전과같이자음과모음순에따라표제어와그뜻풀이를한글로실었으며각표제어마다낱말이사용된교과서의권수와쪽수를기록한점이특징이다박교수는그간국문학사에서최초의한국어사전으로문세영의조선어사전은크게다뤄진반면심의린의보통학교조선어사전은언급조차없었다며이사전이발견됨에따라총독부에서조선어사전을간행한이래문세영이한국어단일어사전을집필하기까지년간침묵을지킨것으로있던국어사전편찬사의공백이메워지게됐다고평가다국어국문학자인홍윤표연세대교수는표제어를한글로쓰고한자로뜻을풀이한최초의대역사전인국한회어가년출간된이래국어학계에이러한사전편찬의기운이있어왔다면서심의린의보통학교조선어사전은이전통의맥을이은국어사전의시초이자학습사전의시초로서그의미가크다고평다홍교수는이와같이현재사각지대로남아있는세기초반자료에대한연구를통해우리국문학이일본의영향이아닌독자적전통속에서발전다는사실을밝히는일이중요하다고강조다박교수는최근부산의한헌책방에서이사전을구입으며올해안에보통학교조선어사전을현대국어로옮겨영인본과함께출간할예정이다국민일보서울연합뉴스김경희기자본학회에서발행하는우리어문연구는한국연구재단등재지입니다투고시에는우리학회의투고규정에입각하여투고해주시기바랍니다우리어문학회투고심사발행규정은학회홈페이지우측상단메뉴의학회소개논문규정항목이나첨부한편집규정및유의사항을참고하시면됩니다편집규정을준수하지않은논문의경우게재가어려우니유의해주시기바랍니다아울러첨부된투고신청서도함께작성하여보내주시기바랍니다회원가입과함께투고를하시고자하는분은첨부된가입신청서도작성해주시기바랍니다우리학회에논문을투고하실때에는회원인경우연회비만원과심사비만원을비회원인경우입회비만원과연회비만원그리고심사비만원을납부하셔야합니다단우리어문학회학술대회발표논문일경우심사비만원은내지않으셔도됩니다기획발표와일반발표모두해당되는사항입니다다만연회비는납부하셔야합니다그리고학회논문투고규정에의거하여일정분량을넘어선논문이나연구비수혜논문일경우추가게를납부하셔야합니다모든논문은자원고지매내외로작성되어야하며국문초록은원고지매영문초록은자로작성해주시기바랍니다논문투고마감시심사비와연회비가미납인경우에는논문심사에서제외되오니양해해주시기바랍니다프랑크푸르트도서전上한국의책권선정논란도서주빈국조직위원장이강숙교수이강숙년프랑크푸르트국제도서전주빈국조직위원장은일기자간담회를갖고국제도서전을계기로문화국가한국의이미지를한단계업그레이드시키겠다고말다이위원장의기자간담회는첫장편소설피아니스트의탄생현대문학출판발표회를계기로이루어졌으나기자회견은소설가로서뿐아니라빠른시간안에큰작업을해야하는조직위원장으로많은질문을받았다이날은마침작년월부터맡았던프랑크푸르트국제도서전주빈국조직위원장으로한국의책권발표회를가졌다년프랑크푸르트국제도서전준비는잘되고있는지주빈국에배정된여평의전용공간을이용해책뿐만아니라음악미술학술등문화전반을소개하고공연도열계획이다한국을가보고싶은나라로만들겠다한국의가장오래된것부터가장최근의것까지우리의모습을종합적으로보여줄것이다고지도와이조실록등전통문화뿐아니라한국의대표작가와젊은작가특집코너도마련된다우리의문화를널리알리는것이우리작가가노벨문학상도받고한국이부자되는길을마련해주는작업이기도하다도서전의꽃은책이다한국관에전시될한국의책권은어떻게선정나한국의이미지를잘보여줄수있는책들을선정다당초한국의명저권을뽑으려고으나이런데가한국이구나하는현재모습을잘보여주는책들로선정기준을변경다최고의책은관점의차이등선정작업에어려움이있어기준을바꾸었다거장의명저보다우선한국의모습을알리는것이중요하다선정된책을개외국어로번역하는데년밖에시간이없다졸속번역을우려하는목소리도있다우려되는부분이다사진이나그림등비주얼한요소가많아번역에시간이덜걸리는책을우선선정다번역하는데시간이걸리는책은제외되었다는뜻인가아쉽게도제외된책이많다도서전에진열된한국의책권은외국관람객이나바이어들에게한국의최고명저권으로비칠가능성이많지않은가내년도서전은우선한국의모습을제대로보여주는책을소개하는데의미가있다우리가자랑하고싶은명저를본격적으로소개하는시발점으로삼으면된다가장많은사람이읽는글인신문기사는문장이란측면에서볼때어떻게평가할수있을까국립국어연구원원장남기심이최근내놓은신문문장분석사설칼럼을중심으로는신문에실리는글중대표격인사설과칼럼을대상으로문장적특성을분석다중견국어학자인학예연구관김세중박사는년월부터월까지개중앙일간지의사설과칼럼을분석하고있다김세중박사는사설과칼럼문장의가장큰특징으로나와국민을혼동한다는점을들었다필자자신의생각이나느낌을말하면서도국민은이라고쓴다는것이다국민은힘이빠진다국민은입을다물수가없다는문장은거부감을느끼게한다고김박사는지적한다이런표현은주어가인칭즉나는이외의경우에는어색한느낌을주기때문이다두번째특징은주어와지시대상을드러내지않는다는점이다나는우리는본란은같은표현을쓰는데인색할뿐아니라는분석이다는지적이다라는표현을지나치게씀으로써정직하지않다는비판을받게된다또공격이나비난대상을분명하게밝히지않아누구를가리키는것인지알수없게만든다는것이다사설과칼럼문장의세번째특징은지나친생략과누락으로의미를알기어렵게만드는경우가많다는점이다신문은전통적인개념의동사가없는문장이많다그는이동중이다와같은문장이자연스럽게쓰이고화재가발생큰소동이벌어졌다처럼가하여를대신한다그러나정보위에대한영향력유인수단공연한말대책처럼명사를여러개나열하는경우의미의혼란을빚게된다이런분석을바탕으로김세중박사는신문사설과칼럼의문장에대해객관적이고문법을생각할것을주문한다솔직하게주어를드러내고언급하는상대방을분명하게밝히는친절하고당당한자세가필요하다는것이다또의미의정확한전달을위해서도최소한의문법은지켜야한다고강조한다서울시의영어상용화사업은시본청의개실과와시교육청이분담해학생과시민공무원등을대상으로전방위로추진된다서울거주외국인의생활불편을해소하기위한조치도함께진행된다개분야여개사업진행시민들의영어구사능력향상을위한사업으로는최근발표된영어체험마을조성사업이오는월말완료된다이와함께사이버영어마을구축사업도함께추진해영어체험마을을이용하지못하는시민들이인터넷을통해영어를보다친숙하게접할수있도록할계획이다현재계획중인케이블방송국개국도이와같은맥락에서추진되고있다는게관계자의설명이다주민들에게폭넓은영어습득기회를제공하기위해각자치구별로곳이상의주민자치센터에원어민교사를배치이미명확보한다학생들의영어수준향상을위해서는각급학교에원어민교사배치를조속한시일내에완료토록시교육청에요청다교육관계자들과함께초등학생들이서울에대한사회문화를영어로배울수있도록하는가칭교과서발간작업도검토하고있다시공무원의영어능력향상을위해내년부터일반행정직에응모하는수험생을대상으로영어면접을실시하고영어우수자특별채용도계획하고있다오는월일부터는외국어능력우수공무원에게는인사가점을부여할방침이다내년부터급이하급이상공무원은일정기간마다어학성적제출을의무화하는어학인증제실시를검토하고있다서울에거주하는외국인의생활불편을해소하기위해올하반기부터시가공포하는각종공고공시문을한글과영문으로동시에제공할계획이다이에필요한번역작업을위해미국국적의원어민명을이미계약직으로채용해놓았다또도로표지판의영문표지정비작업을하반기부터내년초까지마칠계획이다특히시는장기체류하는외국인을위해시립병원곳과종합병원∼곳을외국인전담진료소로지정육성하는사업도추진할방침이다배경및문제점서울시는영어상공용화의필요성과효과적인추진방법이론적근거마련등을위해시정개발연구원을통해연구검토작업과전문가토론회등을이미끝냈다서울시가이같은초강력영어정책을추진하게된배경은서울을세계초일류도시화하는데영어가최대걸림돌이되고있다는판단에서다전국경제인연합회가지난해실시한주한외국기업임직원대상생활여건실태조사에서한국인의영어소통능력에대한불만이로가장높았다싱가포르에소재한정치경제위험건설팅회사가아시아개국을대상으로한조사에서도외국인의영어소통이가장힘든나라로한국을지목으며동북아금융중심지로서서울의잠재력이란매킨지보고서도서울시민의영어구사능력향상이급선무라는의견을제시다하지만영어상공용화정책추진에대해상당수학자들의반대입장도만만찮다지난해월시정개발연구원에서열린토론회에서섣부른영어공용화는우리말과글만망가뜨릴뿐이다민족문화정체성을크게훼손하고영어과외열병과사대주의병을부채질하고민족을분열시킬것이다라며강력한반대입장이제시됐다실제정부는지난년제주국제자유도시특별법을근거로제주도에서영어공용화를추진하려으나강력한반대여론으로현재중단된상태에있다서울시정개발연구원이종규서울마케팅연구단장계획학박사은국제금융도시해외기업의투자유치등서울을세계일류도시로한단계업그레이드하기위해서는영어의벽을넘지않을수없다며사회문화적인충격을최소화하는방향으로영어공용화가추진야한다고주장다난농구를때렸어요다른한편으로나는페이스북을묻군완벽해그는보고트라우마가생겼니그렇긴한데허벅지를알았으며그녀의내목소리를창조해냈었지그리고나의먹었고고양이를못잡았었나저런공기를영원히보고소름이돋았을것이다웃긴게이해했음한번더네식사했지이제는말할수있다나는느꼈어난비둘기를시끄러웠죠이런내쳤니또네공부를뱉었었지그는오늘보았을까예를들어저찬을뺏겼었지과자를몰랐다네단그헤어졌죠솔직히말하자면무서웠어동전을막았구려이제는말할수있다독서를보고트라우마가생겼어저토끼를이해했어요내가들었을거야그곳에서짬뽕을었군늘그좋아했었다이제는말할수있다그것은사기를축하해주었는데나는유령을가볍게해내었니너의 비둘기를못참았다그리고그거짓말을식사했길바란다언젠가네가슬픔을시간을보냈으니말다했지확신해보지또한저벗었어또동전을배웠었지아니우릴소지품을무서웠지저런새를지겹게도즐거웠이다아맞다그의잡았을거야놀람을지겹게도조용히음미했다절대로이깨졌으며이런그가김밥을미쳤이다난일억원을눌렀었지너는시금치를만들었는지모르겠다또오늘도난바다를엄청고래고래소리쳤길바란다오직네가긁었고절대로내가연애를미치도록안갔을까오렌지를좋을지도다른한편으로너의하늘의별을보고기뻤습니다저런이망했다네나의바지를죽을만큼반복하였어그뉴스를바라보았이다그곳에서너의니제발약했다경이롭게도저종이를많이도다쳤이다영원히침대를정말잊었나보네요네사랑을잘못했다그녀는소설을좋군저런네박물관을창조해냈으며그래매일같이아무말없이속삭였다예를들어나는고쳤어내인생의모든것을보다그렇게그의유명인사를알아내기위해온장소를찾아보았고거기서나는영화를보군오직나는연예인을정말헤어졌다";
void OnCharCreate(DWORD* dwAddress)
{
	AProjectLH_LHActor_CharacterCreateScene* pActor_CreateCharScene = reinterpret_cast<AProjectLH_LHActor_CharacterCreateScene*>(GetActor(dwAddress, AProjectLH_LHActor_CharacterCreateScene::StaticClass()));
	if (pActor_CreateCharScene)
	{
		UProjectLH_LHWidget_CharacterCreate_Popup* pPopup = reinterpret_cast<UProjectLH_LHWidget_CharacterCreate_Popup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterCreate_Popup::StaticClass()));
		if (pPopup)
		{
			if (g_nCreateLen == 0)
			{
				g_nCreateLen = 2 + rand() % 5;
				memset(g_szCreateName, 0, sizeof(WCHAR) * MAX_NAME);

				for (int i = 0; i < g_nCreateLen; i++)
					g_szCreateName[i] = g_szKOSTR[rand() % 5000];
				g_szCreateName[g_nCreateLen] = 0;
			}

			if (pPopup->C_LHEditTextBox_Name)
			{
				FText nickName = pPopup->C_LHEditTextBox_Name->Text;
				WCHAR* szText = WC(pPopup->C_LHEditTextBox_Name->Text);
				int strlen = 0;
				if (szText)
					strlen = wcslen(WC(pPopup->C_LHEditTextBox_Name->Text));

				if (strlen > g_nCreateLen)
				{
					PressKeyAlternate(VK_BACK);
					SetDelay(5);
				}
				else if (strlen < g_nCreateLen)
				{
					PressKeyAlternate(VK_SPACE);
					SetDelay(5);
				}
				else
				{
					if (wcsncmp(*(WCHAR**)((*(DWORD_PTR*)(nickName.UnknownData)) + 0x38), g_szCreateName, strlen))
					{
						wcsncpy(*(WCHAR**)((*(DWORD_PTR*)(nickName.UnknownData)) + 0x38), g_szCreateName, strlen);
						pPopup->C_LHEditTextBox_Name->SetText(nickName);
						SetDelay(10);
					}
					else
					{
						ShowStatus(1, 60155, g_szCreateName);				// L"캐릭명 \"%s\" 으로 자동생성합니다", 

						pPopup->OnClickedConfirm();
						SetDelay(50);

						g_nCreateLen = 0;
						memset(g_szCreateName, 0, sizeof(WCHAR) * MAX_NAME);
					}
				}
			}

			return;
		}

		UProjectLH_LHWidget_CharacterCreate_Customizing* pCustomizing = reinterpret_cast<UProjectLH_LHWidget_CharacterCreate_Customizing*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterCreate_Customizing::StaticClass()));
		if (pCustomizing)
		{
			pCustomizing->OnTapConfirm();
			SetDelay(20);
			return;
		}

		//클래스 선택
		if (g_bCreateCharActor == 0)			// 로그
		{
			if (pActor_CreateCharScene->SelectActor != pActor_CreateCharScene->RogueActor)
			{
				pActor_CreateCharScene->RogueActorTouch(FInputCore_InputCore_ETouchIndex::ETouchIndex__Touch1, pActor_CreateCharScene->RogueActor);
				SetDelay(10);
				return;
			}
		}
		else if (g_bCreateCharActor == 1)			// 소서리스
		{
			if (pActor_CreateCharScene->SelectActor != pActor_CreateCharScene->SorceressActor)
			{
				pActor_CreateCharScene->SorceressActorTouch(FInputCore_InputCore_ETouchIndex::ETouchIndex__Touch1, pActor_CreateCharScene->SorceressActor);
				SetDelay(10);
				return;
			}
		}
		else if (g_bCreateCharActor == 2)			// 프리스트
		{
			if (pActor_CreateCharScene->SelectActor != pActor_CreateCharScene->PriestActor)
			{
				pActor_CreateCharScene->PriestActorTouch(FInputCore_InputCore_ETouchIndex::ETouchIndex__Touch1, pActor_CreateCharScene->PriestActor);
				SetDelay(10);
				return;
			}
		}
		else if (g_bCreateCharActor == 3)			// 워리어
		{
			if (pActor_CreateCharScene->SelectActor != pActor_CreateCharScene->WarriorActor)
			{
				pActor_CreateCharScene->WarriorActorTouch(FInputCore_InputCore_ETouchIndex::ETouchIndex__Touch1, pActor_CreateCharScene->WarriorActor);
				SetDelay(10);
				return;
			}
		}
		else										// 실드 메이든
		{
			if (pActor_CreateCharScene->SelectActor != pActor_CreateCharScene->ShieldMaidenActor)
			{
				pActor_CreateCharScene->ShieldMaidenActorTouch(FInputCore_InputCore_ETouchIndex::ETouchIndex__Touch1, pActor_CreateCharScene->ShieldMaidenActor);
				SetDelay(10);
				return;
			}
		}

		if (pActor_CreateCharScene->SelectActor)
		{
			UProjectLH_LHWidget_CharacterClassSelect_Left* pCharCreateSelectLeft = reinterpret_cast<UProjectLH_LHWidget_CharacterClassSelect_Left*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CharacterClassSelect_Left::StaticClass()));
			if (pCharCreateSelectLeft)
				pCharCreateSelectLeft->OnClicked_Confirm();
		}
	}

	SetDelay(10);
}



void PressKeyAlternate(WCHAR wKey, BOOL bPressOnly)
{
	SendNotifyMessage(g_hGameWnd, WM_SETCURSOR, (WPARAM)g_hGameWnd, 0x02040001);
	SendNotifyMessage(g_hGameWnd, WM_KEYDOWN, (WPARAM)wKey, 0x00240001);

	if (isalpha(wKey) && isupper(wKey))
		SendNotifyMessage(g_hGameWnd, WM_CHAR, wKey + 0x20, 0x00240001);
	else
		SendNotifyMessage(g_hGameWnd, WM_CHAR, wKey, 0x00240001);

	if (!bPressOnly)
		SendNotifyMessage(g_hGameWnd, WM_KEYUP, (WPARAM)wKey, 0xC0240001);

	SendNotifyMessage(g_hGameWnd, WM_SETCURSOR, (WPARAM)g_hGameWnd, 0x02000001);
}


void UpdateGameInfo(DWORD* dwAddress)
{
	UpdateCharInfo(dwAddress);
	UpdateBuffIinfo(dwAddress);
	UpdateInvenInfo(dwAddress);
	UpdateItemSlotInfo(dwAddress);
	UpdateSkillSlotInfo(dwAddress);
	UpdateAvatarInfo(dwAddress);
	UpdateVehicleInfo(dwAddress);
	UpdateWeaponShapeInfo(dwAddress);
	UpdateObjectInfo(dwAddress);
	UpdateQuestInfo(dwAddress);
	UpdateNpcSlotInfo(dwAddress);
	UpdatePartyInfo(dwAddress);
	//UpdateHackInfo(dwAddress);
}


void UpdateCharInfo(DWORD* dwAddress)
{
	memset(&g_pCharInfo, 0, sizeof(CHARINFO));

	g_nMaxInvenCount = GetInvenMaxCount(dwAddress);

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return;

	UProjectLH_LHCharacterMgr* pCharacterMgr = pInstance->CharacterMgr;
	if (pCharacterMgr)
	{
		DWORD64 qwID = *(DWORD64*)&pCharacterMgr->CurCharacter;
		AProjectLH_LHPlayer_Playable* pObj = pCharacterMgr->CurCharacter.Get();
		if (!pObj)
			return;

		UProjectLH_LHCharacterParam* pParam = pObj->CharacterParam;
		if (!pParam)
			return;

		g_pCharInfo.qwCharAddr = (DWORD64)pObj;

		_callFuncF5 func4 = (_callFuncF5)(PATCHADDR(dwAddress[ADDR_CALCPARAM], dwAddress[0]));
		g_pCharInfo.nPower = (int)func4((DWORD64)pParam, PARAM_OFF_POWER, 0, 1, 0.0f);

		g_pCharInfo.nMaxHp = (int)func4((DWORD64)pParam, PARAM_OFF_HPMAX, 0, 1, 0.0f);
		g_pCharInfo.nMaxMp = (int)func4((DWORD64)pParam, PARAM_OFF_MPMAX, 0, 1, 0.0f);

		g_pCharInfo.nPotionLimit = (int)func4((DWORD64)pParam, PARAM_OFF_MAXPOTIONCNT, 0, 1, 0.0f);

		g_pCharInfo.CurTransform = pObj->GetTransform();

		if (pParam->CharacterName.c_str() != NULL)
			wcscpy(g_pCharInfo.szName, pParam->CharacterName.c_str());

		g_pCharInfo.nLevel = pParam->BaseObjectInfo.m_Level;

		g_pCharInfo.nCurHp = (int)pParam->BaseObjectInfo.m_CurHp;
		g_pCharInfo.nCurMp = (int)pParam->BaseObjectInfo.m_CurMp;

		g_pCharInfo.nPlayerIndex = pParam->PlayerIndex;
		g_pCharInfo.nObjType = (int)pParam->ObjectType;
		g_pCharInfo.nClassType = (int)pParam->ClassType;

		_callFunc2 func2 = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETCOINCOUNT], dwAddress[0]);
		for (int i = 0; i < 6; i++)
			g_pCharInfo.nGoods[i] = func2((DWORD64)pCharacterMgr, i);	//*(DWORD64*)& pParam->Gold;

		if (*(int*)((BYTE*)pObj + OFFSET_PLAYERSERVERNAME + 0x0C))
			swprintf(g_pCharInfo.szServer, L"%s", *(WCHAR**)((BYTE*)pObj + OFFSET_PLAYERSERVERNAME));
		else
			g_pCharInfo.szServer[0] = 0;

		if (*(int*)((BYTE*)pObj + OFFSET_PLAYERGUILDNAME + 0x0C))
			swprintf(g_pCharInfo.szGuild, L"%s", *(WCHAR**)((BYTE*)pObj + OFFSET_PLAYERGUILDNAME));
		else
			g_pCharInfo.szGuild[0] = 0;

		UProjectLH_LHTargetFinder* pTargetFinder = pObj->TargetFinder;
		if (pTargetFinder)
		{
			g_pCharInfo.pManualTarget = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)((BYTE*)pTargetFinder + OFFSET_TARGETFINDER_MANUALSEL)).Get();
			g_pCharInfo.pAutoTarget = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)((BYTE*)pTargetFinder + OFFSET_TARGETFINDER_AUTOTARGET)).Get();
			g_pCharInfo.pInterationTarget = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)((BYTE*)pTargetFinder + OFFSET_TARGETFINDER_AUTOINTER)).Get();
			g_pCharInfo.pBossSelectedTargetPtr = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)((BYTE*)pTargetFinder + OFFSET_TARGETFINDER_BOSSTARGET)).Get();
		}
	}

	UProjectLH_LHMapMgr* MapMgr = pInstance->MapMgr;
	if (MapMgr)
	{
		UProjectLH_LHMapBase* CurrentMap = MapMgr->CurruntMap;
		if (!CurrentMap || !CurrentMap->UnknownData00)
			return;

		g_pCharInfo.nMapType = *(int*)&CurrentMap->UnknownData00[0x20];
		g_pCharInfo.dwMapID = *(DWORD*)&CurrentMap->UnknownData00[0x24];
	}

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
	{
		UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
		if (C_InGame_Minimap_Container)
		{
			GetTextFromTextBlock((UUMG_TextBlock*)C_InGame_Minimap_Container->C_Text_LocationTitle, g_pCharInfo.szRegion);
			GetTextFromTextBlock((UUMG_TextBlock*)C_InGame_Minimap_Container->C_Text_PkType, g_pCharInfo.szPKType);
		}
	}

	WCHAR* szWorld = GetCurWorldName(dwAddress);
	if (szWorld != NULL)
		swprintf(g_pCharInfo.szWorld, L"%s", szWorld);

	//FreeGarbageMemory(dwAddress, (DWORD64)szWorld);
	FreeGarbageMemory((DWORD64)szWorld);

	g_pCharInfo.nAutoState = GetPlayerAutoState(dwAddress);
	g_pCharInfo.nPlayerState = GetPlayerState(dwAddress);
	g_pCharInfo.nMoveState = GetAutoMoveMode(dwAddress);
	g_pCharInfo.nMapState = GetMapState(dwAddress);

	return;

	// 게정내 캐릭 정보
	DWORD64 qwAccountMgr = (DWORD64)pInstance->AccountMgr;
	if (qwAccountMgr)
	{
		DWORD64 qwList = *(DWORD64*)(qwAccountMgr + OFFSET_CHARACTERLIST);
		if (!qwList)
			return;

		int nCount = *(int*)(qwAccountMgr + OFFSET_CHARACTERCOUNT);
		for (int i = 0; i < nCount; i++)
		{
			DWORD64 qwKey = *(DWORD64*)(qwList + i * 8);

			_callFunc2 pfnGetPlayerSimpleInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETPLAYERSIMPLEINFO], dwAddress[0]);
			FCommonSource_PlayerSimpleInfo* qwInfo = (FCommonSource_PlayerSimpleInfo*)pfnGetPlayerSimpleInfo(qwAccountMgr, qwKey);
			if (qwInfo != NULL)
			{
				// 				qwInfo->m_PlayerName.c_str();
				// 				qwInfo->m_Level;
			}
		}
	}
}


void UpdateObjectInfo(DWORD* dwAddress)
{
	g_nPlayerCount = 0;
	g_nNpcCount = 0;
	g_nMonsterCount = 0;
	g_nGatherCount = 0;

	UEngine_GameplayStatics* gameplayStatics = GetGamePlayStatics();
	UEngine_World* world = GetGlobalWorld(dwAddress);
	if (!gameplayStatics || !world)
		return;

	UClass* pClass = AProjectLH_LHCharacter::StaticClass();
	UClass* pClassInteraction = AProjectLH_LHActor_Interaction::StaticClass();

	TArray<AEngine_Actor*> uiAry;
	gameplayStatics->STATIC_GetAllActorsOfClass(world, AEngine_Actor::StaticClass(), &uiAry);
	int nCnt = uiAry.Num();
	for (int i = 0; i < nCnt; i++)
	{
		if (!uiAry[i])
			continue;

		if (uiAry[i]->IsA(pClass))
		{
			AProjectLH_LHCharacter* pObj = (AProjectLH_LHCharacter*)uiAry[i];
			UProjectLH_LHCharacterParam* pParam = pObj->CharacterParam;

			if (pParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__Player)
			{
				if (g_nPlayerCount < MAX_PLAYER && g_pCharInfo.qwCharAddr != (DWORD64)pObj && pParam->CharacterName.c_str() != NULL)
				{
					g_pPlayerInfo[g_nPlayerCount].qwPlayerAddr = (DWORD64)pObj;
					g_pPlayerInfo[g_nPlayerCount].qwPlayerID = *(DWORD64*)&pObj->UnknownData10[0x66];
					swprintf(g_pPlayerInfo[g_nPlayerCount].szName, L"%s", pParam->CharacterName.c_str());
					g_pPlayerInfo[g_nPlayerCount].nCurHp = (int)pParam->BaseObjectInfo.m_CurHp;
					g_pPlayerInfo[g_nPlayerCount].nLevel = pParam->BaseObjectInfo.m_Level;
					g_pPlayerInfo[g_nPlayerCount].CurPos = pObj->GetNavAgentLocation();
					g_pPlayerInfo[g_nPlayerCount].nObjType = (int)pParam->ObjectType;
					g_pPlayerInfo[g_nPlayerCount].nClassType = (int)pParam->ClassType;

					if (*(int*)((BYTE*)pObj + OFFSET_PLAYERGUILDNAME + 0x0C))
						swprintf(g_pPlayerInfo[g_nPlayerCount].szGuild, L"%s", *(WCHAR**)((BYTE*)pObj + OFFSET_PLAYERGUILDNAME));
					else
						g_pPlayerInfo[g_nPlayerCount].szGuild[0] = 0;

					g_pPlayerInfo[g_nPlayerCount].dwObjectSerial = pParam->BaseObjectInfo.m_ObjectSerial;

					g_pPlayerInfo[g_nPlayerCount].qwTargetAddr = NULL;
					DWORD64 dwTarget = (DWORD64)((BYTE*)pObj + OFFSET_LHCHARACTER_TARGET);
					if (dwTarget)
						g_pPlayerInfo[g_nPlayerCount].qwTargetAddr = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)dwTarget).Get();

					// qwTargetAddr->UnknownData03[0] : 1:서있는 상태, 2: 공중, 4: 공격중 (4, 1이 번갈아서 들어옴)
					// UProjectLH_LHCharacterParam* pParam = qwTargetAddr->CharacterParam;
					// pParam->BaseObjectInfo.m_CurHp
					// pParam->CharacterName.c_str()

					g_nPlayerCount++;
				}
			}
			else if (pParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__Npc || pParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__ActiveNpc)
			{
				if (g_nNpcCount < MAX_NPC && pParam->CharacterName.c_str() != NULL)
				{
					//g_pNPCInfo[g_nNpcCount].qwNpcID = *(DWORD64*)& pObj->UnknownData10[0x66];
					swprintf(g_pNPCInfo[g_nNpcCount].szName, L"%s", pParam->CharacterName.c_str());
					g_pNPCInfo[g_nNpcCount].CurPos = pObj->GetNavAgentLocation();
					g_nNpcCount++;
				}
			}
			else if (pParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__Monster)
			{
				if (g_nMonsterCount < MAX_MONSTER && pParam->CharacterName.c_str() != NULL)
				{
					g_pMonsterInfo[g_nMonsterCount].qwMonsterAddr = (DWORD64)pObj;
					g_pMonsterInfo[g_nMonsterCount].qwMonsterID = *(DWORD64*)&pObj->UnknownData10[0x66];
					swprintf(g_pMonsterInfo[g_nMonsterCount].szName, L"%s", pParam->CharacterName.c_str());
					g_pMonsterInfo[g_nMonsterCount].nCurHp = (int)pParam->BaseObjectInfo.m_CurHp;
					g_pMonsterInfo[g_nMonsterCount].nLevel = pParam->BaseObjectInfo.m_Level;
					g_pMonsterInfo[g_nMonsterCount].CurTransform = pObj->GetTransform();
					g_pMonsterInfo[g_nMonsterCount].qwTargetAddr = NULL;
					g_pMonsterInfo[g_nMonsterCount].dwObjectSerial = pParam->BaseObjectInfo.m_ObjectSerial;
					DWORD64 dwTarget = (DWORD64)((BYTE*)pObj + OFFSET_LHCHARACTER_TARGET);
					if (dwTarget)
						g_pMonsterInfo[g_nMonsterCount].qwTargetAddr = (*(TWeakObjectPtr<class AProjectLH_LHCharacter>*)dwTarget).Get();

					if (g_pMonsterInfo[g_nMonsterCount].nCurHp > 0)
						g_nMonsterCount++;
				}
			}
		}
		else if (uiAry[i]->IsA(pClassInteraction))
		{
			AProjectLH_LHActor_Interaction* pObj = (AProjectLH_LHActor_Interaction*)uiAry[i];
			FTransform fTrans = pObj->GetTransform();

			if (g_nGatherCount < MAX_GATHER)
			{
				BYTE nGatherType = *(BYTE*)&pObj->InteractType;

				g_pGatherInfo[g_nGatherCount].nType = GatherType_None;

				g_pGatherInfo[g_nGatherCount].CurPos = fTrans.Translation;
				if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__Ore)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Stone;
				else if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__Tree)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Wood;
				else if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__Grass)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Grass;
				else if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__TreasureBox ||
					nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__WeaponShapeTreasureBox)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Treasure;
				else if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__Quest)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Quest;
				else if (nGatherType == (BYTE)FCommonSource_CommonSource_EInteractType::EInteractType__Normal)
					g_pGatherInfo[g_nGatherCount].nType = GatherType_Event;

				if (g_pGatherInfo[g_nGatherCount].nType != GatherType_None)
					g_nGatherCount++;
			}
		}
	}

	//FreeGarbageMemory(dwAddress, *(DWORD64*)((DWORD64)&uiAry));
	FreeGarbageMemory(*(DWORD64*)((DWORD64)&uiAry));
}



void OnGamePrologue(DWORD* dwAddress)
{
	if (g_pMainQuestInfo.dwQuestID == 0x27D5 && OnAutoSkillSlot(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (OnQuestTalkBalloon(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (g_pCharInfo.nAutoState != AUTO_QUESTING)
		SelectQuest(dwAddress, g_pMainQuestInfo.QuestContainer, g_pMainQuestInfo.nQuestState, FALSE);

	SetDelay(10);
}


BOOL SkipSleepMode(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Scene_SleepMode* sleepMode = (UProjectLH_LHWidget_Scene_SleepMode*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Scene_SleepMode));
	if (!sleepMode || !sleepMode->IsVisible())
		return FALSE;

	_callFunc1 unSleepMode = (_callFunc1)PATCHADDR(dwAddress[ADDR_UNSLEEPMODE], dwAddress[0]);
	unSleepMode((DWORD64)sleepMode);
	return TRUE;
}


BOOL SkipMovieScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_MoviePlayer* uiMoviePlayer = (UProjectLH_LHWidget_MoviePlayer*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_MoviePlayer));
	if (!uiMoviePlayer || !uiMoviePlayer->IsVisible())
		return FALSE;

	if (uiMoviePlayer->C_SkipButton->IsVisible())
	{
		ShowStatus(0, 60156);				// L"동영상을 Skip 합니다");
		uiMoviePlayer->OnClicked_Skip();
	}

	return TRUE;
}


BOOL SkipTutorialScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_TouchMask* uiTouchMask = (UProjectLH_LHWidget_TouchMask*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_TouchMask));
	if (!uiTouchMask || !uiTouchMask->IsVisible())
		return FALSE;

	uiTouchMask->OnButtonClickedEvent();
	return TRUE;
}


WCHAR* GetQuestNameWithId(DWORD* dwAddress, DWORD dwQuestID)
{
	_callFunc1 initQuestParam = (_callFunc1)PATCHADDR(dwAddress[ADDR_INITQUESTPARAM], dwAddress[0]);

	DWORD64 qwQuestParam[5];
	initQuestParam((DWORD64)qwQuestParam);

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64	qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);
	if (!qwQuestTable)
		return NULL;

	_callFunc4 getGameString = (_callFunc4)PATCHADDR(dwAddress[ADDR_GETGAMESTRING], dwAddress[0]);

	DWORD64 qwQuestName[3];
	getGameString(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestName, dwQuestID, 0);

	return (WCHAR*)qwQuestName[0];
}


void UpdateMainQuestInfo(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHQuestMgr* objQuestMgr = objGameInstance->QuestMgr;
	if (!objQuestMgr)
		return;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_InGame_LeftTab* C_InGame_LeftTab = uiInGame->C_InGame_LeftTab;
	if (!C_InGame_LeftTab)
		return;

	UProjectLH_LHWidget_InGame_Questlist* C_InGame_Questlist = C_InGame_LeftTab->C_InGame_Questlist;
	if (!C_InGame_Questlist)
		return;

	UProjectLH_LHWidget_InGame_Quest_Container* C_Main_Quest_Container = C_InGame_Questlist->C_Main_Quest_Container;
	if (!C_Main_Quest_Container)
		return;

	DWORD dwQuestID = *(unsigned int*)((DWORD64)C_Main_Quest_Container + OFFSET_QUESTCONTAINERQUESTID);
	if (!dwQuestID)
		return;

	_callFunc2 getQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSUBQUESTINFO], dwAddress[0]);
	_callFunc2 getRepeatQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETREPATEQUESTDOINGINFO], dwAddress[0]);
	_callFunc2 getMainQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETMAINQUESTINFO], dwAddress[0]);

	DWORD64 qwQuestDoingInfo = getQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
	if (!qwQuestDoingInfo)
		qwQuestDoingInfo = getMainQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
	if (!qwQuestDoingInfo)
		qwQuestDoingInfo = getRepeatQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);

	if (qwQuestDoingInfo)
	{
		g_pMainQuestInfo.nQuestState = (int)*(char*)(qwQuestDoingInfo + OFFSET_QUESTSTATE);
		g_pMainQuestInfo.nCurCount = *(int*)(qwQuestDoingInfo + OFFSET_QUESTSTATE + 3);
	}

	g_pMainQuestInfo.dwQuestID = dwQuestID;
	g_pMainQuestInfo.QuestContainer = C_Main_Quest_Container;

	WCHAR* szName = GetQuestNameWithId(dwAddress, dwQuestID);
	if (szName != NULL)
		swprintf(g_pMainQuestInfo.szName, L"%s", szName);
	else
		memset(g_pMainQuestInfo.szName, 0, sizeof(g_pMainQuestInfo.szName));

	//FreeGarbageMemory(dwAddress, (DWORD64)szName);
	FreeGarbageMemory((DWORD64)szName);
}


void UpdateSubQuestInfo(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHQuestMgr* objQuestMgr = objGameInstance->QuestMgr;
	if (!objQuestMgr)
		return;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_InGame_LeftTab* C_InGame_LeftTab = uiInGame->C_InGame_LeftTab;
	if (!C_InGame_LeftTab)
		return;

	UProjectLH_LHWidget_InGame_Questlist* C_InGame_Questlist = C_InGame_LeftTab->C_InGame_Questlist;
	if (!C_InGame_Questlist)
		return;

	_callFunc2 getQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSUBQUESTINFO], dwAddress[0]);
	_callFunc2 getRepeatQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETREPATEQUESTDOINGINFO], dwAddress[0]);
	_callFunc2 getMainQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETMAINQUESTINFO], dwAddress[0]);

	for (int i = 0; i < C_InGame_Questlist->SubQuestContainerPool.ActiveUIs.Num(); i++)
	{
		UProjectLH_LHWidget_InGame_Quest_Container* questContainer = (UProjectLH_LHWidget_InGame_Quest_Container*)C_InGame_Questlist->SubQuestContainerPool.ActiveUIs[i];
		if (!questContainer)
			continue;

		DWORD dwQuestID = *(unsigned int*)((DWORD64)questContainer + OFFSET_QUESTCONTAINERQUESTID);
		if (!dwQuestID)
			continue;

		DWORD64 qwQuestDoingInfo = getQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
		if (!qwQuestDoingInfo)
			qwQuestDoingInfo = getMainQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
		if (!qwQuestDoingInfo)
			qwQuestDoingInfo = getRepeatQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);

		if (!qwQuestDoingInfo)
			continue;

		if (g_nSubQuestCount < MAX_QUEST)
		{
			g_pSubQuestInfo[g_nSubQuestCount].nQuestState = (int)*(char*)(qwQuestDoingInfo + OFFSET_QUESTSTATE);
			g_pSubQuestInfo[g_nSubQuestCount].nCurCount = *(int*)(qwQuestDoingInfo + OFFSET_QUESTSTATE + 3);
			g_pSubQuestInfo[g_nSubQuestCount].dwQuestID = dwQuestID;
			g_pSubQuestInfo[g_nSubQuestCount].QuestContainer = questContainer;

			WCHAR* szName = GetQuestNameWithId(dwAddress, dwQuestID);
			if (szName != NULL)
				swprintf(g_pSubQuestInfo[g_nSubQuestCount].szName, L"%s", szName);
			else
				memset(g_pSubQuestInfo[g_nSubQuestCount].szName, 0, sizeof(g_pSubQuestInfo[g_nSubQuestCount].szName));

			//FreeGarbageMemory(dwAddress, (DWORD64)szName);
			FreeGarbageMemory((DWORD64)szName);

			g_nSubQuestCount++;
		}
	}
}


void UpdateQuestInfo(DWORD* dwAddress)
{
	g_nSubQuestCount = 0;
	g_nVillageQuestCount = 0;
	memset(&g_pMainQuestInfo, 0, sizeof(QUESTINFO));

	UpdateMainQuestInfo(dwAddress);
	UpdateSubQuestInfo(dwAddress);
	UpdateVillageQuest(dwAddress);
}


AProjectLH_LHPlayerController* GetPlayerController(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return NULL;

	_callFunc1 getPlayerController = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETPLAYERCONTROLLER], dwAddress[0]);
	return (AProjectLH_LHPlayerController*)getPlayerController((DWORD64)objGameInstance);
}



int GetPlayerAutoState(DWORD* dwAddress)			// 0 - AUTO_NONE, 1 - AUTO_HUNTING, 2 - AUTO_QUESTING
{
	DWORD64 qwPlayerController = (DWORD64)GetPlayerController(dwAddress);
	if (!qwPlayerController)
		return 0;

	_callFunc1  getPlayable = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETPLAYABLE], dwAddress[0]);
	AProjectLH_LHPlayer_Playable* qwPlayable = (AProjectLH_LHPlayer_Playable*)getPlayable(qwPlayerController);
	if (!qwPlayable)
		return 0;

	return *(int*)((DWORD64)qwPlayable->AutoPlayComponent + OFFSET_PLAYERAUTOSTATE);
}



DWORD GetPlayerAutoQuestId(DWORD* dwAddress)
{
	DWORD64 qwPlayerController = (DWORD64)GetPlayerController(dwAddress);
	if (!qwPlayerController)
		return 0;

	_callFunc1 getPlayable = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETPLAYABLE], dwAddress[0]);
	AProjectLH_LHPlayer_Playable* qwPlayable = (AProjectLH_LHPlayer_Playable*)getPlayable(qwPlayerController);
	if (!qwPlayable)
		return 0;

	_callFunc1 getAutoPlayQuestId = (_callFunc1)PATCHADDR(dwAddress[ADDR_AUTOPLAYQUESTID], dwAddress[0]);
	return (DWORD)getAutoPlayQuestId((DWORD64)qwPlayable->AutoPlayComponent);
}



BOOL SkipQuestMovieScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Caption* uiCpation = (UProjectLH_LHWidget_Caption*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Caption));
	if (!uiCpation || !uiCpation->IsVisible())
		return FALSE;

	if (uiCpation->C_SkipButton->IsVisible())
		uiCpation->OnClickedSkipButton();

	return TRUE;
}


BOOL SelectQuest(DWORD* dwAddress, UProjectLH_LHWidget_InGame_Quest_Container* QuestContainer, int nState, BOOL bFly)
{
	if (GetPlayerAutoQuestId(dwAddress) == 0 && g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None && OnCloseOpenWindow(dwAddress))
	{
		SetDelay(10);
		return FALSE;
	}

	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb)
	{
		PressKeyAlternate(L'F');
		SetDelay(10);
		return FALSE;
	}

	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Swim)
		g_bSubQuestFly = 1;

	if (!QuestContainer)
		return FALSE;

	// 현재 진행중이며 탈것 장착했으며 텔레포트 하는 경우 (// 빠른 이동을 할수 없는 상태가 아니면)
	if (nState == QUEST_DOING && bFly && g_pCharInfo.dwFlyingID != 0 && QuestContainer->C_Image_Warp->IsVisible() && g_bSubQuestFly == 0)
	{
		QuestContainer->OnClicked_Warp();
		return TRUE;
	}

	g_bSubQuestFly = 0;
	QuestContainer->OnTapButton();
	return TRUE;
}


BOOL IsFarClass()
{
	for (int i = 0; i < MAX_CLASS; i++)
	{
		if (g_pClassName[i].nClassType == g_pCharInfo.nClassType)
			return g_pClassName[i].bFarClass;
	}

	return FALSE;
}


void OnQuestInstance(DWORD* dwAddress)
{
	int nIndex = -1, nBossIndex = -1, nBossMon = -1;
	for (int i = 0; i < g_nMonsterCount; i++)
	{
		for (int j = 0; j < MAXBOSSSKILLINFOCNT; j++)
		{
			if (!wcscmp(g_pMonsterInfo[i].szName, g_stBossSkillInfo[j].szBossName))
			{
				nBossMon = i;
				nBossIndex = j;
				break;
			}
		}

		if (nBossIndex != -1)
			break;
	}

	if (nBossIndex == -1)																							// 보스가 없는 경우
		return;

	int nDistMin = -1;
	for (int i = 0; i < g_nMonsterCount; i++)
	{
		if (g_pMonsterInfo[i].nCurHp <= 0 || nBossMon == i)
			continue;

		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pMonsterInfo[i].CurTransform.Translation);
		if (nDistMin == -1 || nDist < nDistMin)
		{
			nIndex = i;
			nDistMin = nDist;
		}
	}

	BOOL bMonster = FALSE;
	if ((nBossIndex != 1 && nBossIndex != 3 && nBossIndex != 10) || nIndex == -1)														// 뱀이거나 보스만 있을떄
		bMonster = TRUE;
	else if (!wcscmp(g_pCharInfo.szWorld, L"맹독의 뱀 둥지") && g_pMonsterInfo[nBossMon].qwTargetAddr != 0 && IsFarClass())				// 혹은 먼거리면서 보스 타겟팅이 있을떄
		bMonster = TRUE;

	if (g_pCharInfo.pBossSelectedTargetPtr && g_pCharInfo.pBossSelectedTargetPtr->CharacterParam && g_pCharInfo.pBossSelectedTargetPtr->CharacterParam->ObjectType == FCommonSource_CommonSource_EObjectType::EObjectType__Monster &&
		bMonster)
	{
		static DWORD s_dwLastSkillID = 0;

		AProjectLH_LHMonster* pTargetMonster = (AProjectLH_LHMonster*)g_pCharInfo.pBossSelectedTargetPtr;
		UProjectLH_LHSkillComponent* SkillComponent = pTargetMonster->SkillComponent;
		FTransform fTrans = pTargetMonster->GetTransform();

		if (SkillComponent)
		{
			UProjectLH_LHSkill_Active* CurrentActiveSkill = SkillComponent->CurrentActiveSkill;
			if (CurrentActiveSkill)
			{
				if (nBossIndex == 2 || nBossIndex == 9 || nBossIndex == 12)					// 탕그뇨스트 혹은 니드호그인 경우
				{
					static BOOL s_bMovePos = FALSE;
					static FVector s_posTarget = { 0.0f };
					if (CurrentActiveSkill->SkillInfoRecord->Index == 0x02FC20CC || CurrentActiveSkill->SkillInfoRecord->Index == 0x02FFB750 ||
						CurrentActiveSkill->SkillInfoRecord->Index == 0x0301CE82)
						g_dwLastPartyDungeonBossSkillID[1] = 1;

					if (g_dwLastPartyDungeonBossSkillID[1])
					{
						if (CurrentActiveSkill->SkillInfoRecord->Index == 0x02FC1D84 || CurrentActiveSkill->SkillInfoRecord->Index == 0x02FC1D66 || CurrentActiveSkill->SkillInfoRecord->Index == 0x02FC20CC ||
							CurrentActiveSkill->SkillInfoRecord->Index == 0x02FFB750 || CurrentActiveSkill->SkillInfoRecord->Index == 0x0301CE82)
						{
							float fDistForMove = 550.0f;
							float rad = asin(fTrans.Rotation.Z) * 2;
							float fCos = cosf(rad + M_PI / 2);
							float fSin = sinf(rad + M_PI / 2);

							s_posTarget.X = fTrans.Translation.X - fCos * fDistForMove;
							s_posTarget.Y = fTrans.Translation.Y - fSin * fDistForMove;
							s_posTarget.Z = g_pCharInfo.CurTransform.Translation.Z;
							s_bMovePos = TRUE;
						}

						if (s_bMovePos)
						{
							if (!IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
							{
								int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, s_posTarget);
								if (nDist > 5.0f)
								{
									if (MovePos(dwAddress, s_posTarget))
										SetDelay(3);
								}
							}
						}
						return;
					}
				}

				for (int j = 0; j < MAX_HUIPISKILLCNT; j++)
				{
					if (!g_stBossSkillInfo[nBossIndex].dwSkillIndex[j])
						break;

					if (g_stBossSkillInfo[nBossIndex].dwSkillIndex[j] == CurrentActiveSkill->SkillInfoRecord->Index)
					{
						if (nBossIndex == 4)	// 요르문간드
						{
							g_dwLastPartyDungeonBossSkillID[0] = CurrentActiveSkill->SkillInfoRecord->Index;
						}
						else
						{
							float fDistForMove = 150.0f;
							float rad = asin(fTrans.Rotation.Z) * 2;
							float fCos = cosf(rad);
							float fSin = sinf(rad);
							FVector BackPos;

							// 내바닥 원공격
							if (g_stBossSkillInfo[nBossIndex].dwSkillIndex[j] == 0x02FE115C
								/*|| g_stBossSkillInfo[nBossIndex].dwSkillIndex[j] == 0x02FF3E24*/)
							{
								//보스로부터 멀어지기
								fDistForMove = 1000.0f;
								BackPos.X = fTrans.Translation.X + fCos * fDistForMove;
								BackPos.Y = fTrans.Translation.Y + fSin * fDistForMove;
								BackPos.Z = g_pCharInfo.CurTransform.Translation.Z;
							}
							// 내바닥 원공격
							else if (g_stBossSkillInfo[nBossIndex].dwSkillIndex[j] == 0x02FBA05C
								|| g_stBossSkillInfo[nBossIndex].dwSkillIndex[j] == 0x02FFB746)
							{
								//보스로부터 멀어지기
								fDistForMove = 700.0f;
								BackPos.X = fTrans.Translation.X + fCos * fDistForMove;
								BackPos.Y = fTrans.Translation.Y + fSin * fDistForMove;
								BackPos.Z = g_pCharInfo.CurTransform.Translation.Z;
							}
							else
							{
								//뒤로 빼기
								BackPos.X = fTrans.Translation.X - fCos * fDistForMove;
								BackPos.Y = fTrans.Translation.Y - fSin * fDistForMove;
								BackPos.Z = g_pCharInfo.CurTransform.Translation.Z;
							}

							if (!IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
							{
								int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, BackPos);
								if (nDist > 5.0f)
								{
									if (MovePos(dwAddress, BackPos))
										SetDelay(3);
								}
							}
						}

						return;
					}
				}

				if (nBossIndex == 4)	//아이컨택일때는 초기화할수있게
					g_dwLastPartyDungeonBossSkillID[0] = 0;
			}
			else
			{
				if ((nBossIndex == 2 || nBossIndex == 9 || nBossIndex == 12) && g_dwLastPartyDungeonBossSkillID[1])
				{
					s_dwLastSkillID = 0;
					return;
				}
			}
		}
		else
		{
			if ((nBossIndex == 2 || nBossIndex == 9 || nBossIndex == 12) && g_dwLastPartyDungeonBossSkillID[1])
			{
				s_dwLastSkillID = 0;
				return;
			}
		}

		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTrans.Translation);
		if (nBossIndex != 4 && nDist > 200.0f)
		{
			if (MovePos(dwAddress, fTrans.Translation))
				SetDelay(3);

			return;
		}
	}
	else
	{
		g_dwLastPartyDungeonBossSkillID[1] = 0;
	}

	if (nIndex != -1 && nBossIndex != 4)
	{
		if ((DWORD64)g_pCharInfo.pManualTarget != g_pMonsterInfo[nIndex].qwMonsterAddr)
			SetManualTarget(dwAddress, (AProjectLH_LHCharacter*)g_pMonsterInfo[nIndex].qwMonsterAddr);
		else
			ManualAttack(dwAddress);
	}
}


int GetItemQuickSlotIndex(const WCHAR* szName)
{
	for (int i = 0; i < g_nItemSlotCount; i++)
	{
		if (!wcscmp(g_pItemSlotInfo[i].dwItem.szName, szName))
			return i;
	}

	return -1;
}



BOOL IsExistInvenProc(DWORD* dwAddress, int nMainQuest)
{
	if (nMainQuest < 102)
		return FALSE;

	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (IsDeleteOrDecompose(i) || IsUsableItem(dwAddress, i))
			return TRUE;
	}

	//if (nMainQuest == 1412)
	//{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (!wcscmp(g_pInvenInfo[i].szName, L"신속의 주문서 (귀속)") && GetItemQuickSlotIndex(L"신속의 주문서 (귀속)") == -1)
			return TRUE;

		if (!wcscmp(g_pInvenInfo[i].szName, L"전투의 주문서 (귀속)") && GetItemQuickSlotIndex(L"전투의 주문서 (귀속)") == -1)
			return TRUE;

		if (!wcscmp(g_pInvenInfo[i].szName, L"방어의 주문서 (귀속)") && GetItemQuickSlotIndex(L"방어의 주문서 (귀속)") == -1)
			return TRUE;

		if (!wcscmp(g_pInvenInfo[i].szName, L"저항의 주문서 (귀속)") && GetItemQuickSlotIndex(L"저항의 주문서 (귀속)") == -1)
			return TRUE;
	}
	//}

	return FALSE;
}


int GetItemDetailIndex(INVENINFO pInvenItem)
{
	for (int i = 0; i < g_nItemDetailCount; i++)
	{
		if (!g_pItemDetailInfo[i].bEnable)
			continue;

		if (!wcscmp(g_pItemDetailInfo[i].szName, pInvenItem.szName))
			return i;

		// 강화 할수 없는 모드면 무시하자
		if (g_pItemDetailInfo[i].nMode != ItemMode_None && g_pItemDetailInfo[i].nMode != ItemMode_Trade)
			continue;

		// 장비가 아닌 경우 무시하자
		if (pInvenItem.DetailInfo->ItemCategory != 1 && pInvenItem.DetailInfo->ItemCategory != 2 && pInvenItem.DetailInfo->ItemCategory != 3)
			continue;

		// 강화 안된 장비도 무시하자
		if (pInvenItem.nEnchant <= 0)
			continue;

		// 이름으로 확인하자
		WCHAR szName[MAX_PATH] = { 0, };
		wcscpy(szName, pInvenItem.szOrgName);
		if (pInvenItem.nBelongType == 0)
			wcscat(szName, L" (귀속)");
		else if (pInvenItem.nBelongType == 1)
			wcscat(szName, L" (캐릭터 귀속)");

		if (!wcscmp(g_pItemDetailInfo[i].szName, szName))
			return i;
	}

	return -1;
}


int GetEnchantDetailItem()
{
	int nOrderCount[3] = { 0, };
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (!wcscmp(g_pInvenInfo[i].szName, L"무기 강화석 (귀속)") || !wcscmp(g_pInvenInfo[i].szName, L"무기 강화석 (캐릭터 귀속)") ||
			(g_OtherSetting.bEnchantStone[0] && !wcscmp(g_pInvenInfo[i].szName, L"무기 강화석")))
			nOrderCount[0] += g_pInvenInfo[i].nCount;

		if (!wcscmp(g_pInvenInfo[i].szName, L"방어구 강화석 (귀속)") || !wcscmp(g_pInvenInfo[i].szName, L"방어구 강화석 (캐릭터 귀속)") ||
			(g_OtherSetting.bEnchantStone[1] && !wcscmp(g_pInvenInfo[i].szName, L"방어구 강화석")))
			nOrderCount[1] += g_pInvenInfo[i].nCount;

		if (!wcscmp(g_pInvenInfo[i].szName, L"장신구 강화석 (귀속)") || !wcscmp(g_pInvenInfo[i].szName, L"장신구 강화석 (캐릭터 귀속)") ||
			(g_OtherSetting.bEnchantStone[2] && !wcscmp(g_pInvenInfo[i].szName, L"장신구 강화석")))
			nOrderCount[2] += g_pInvenInfo[i].nCount;
	}

	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].bLocked || g_pInvenInfo[i].bEquiped)
			continue;

		// 무기
		if (g_pInvenInfo[i].DetailInfo->ItemCategory == 1 && nOrderCount[0] <= 0)
			continue;

		// 방어구
		if (g_pInvenInfo[i].DetailInfo->ItemCategory == 2 && nOrderCount[1] <= 0)
			continue;

		// 장신구
		if (g_pInvenInfo[i].DetailInfo->ItemCategory == 3)
		{
			if (nOrderCount[2] <= 0)
				continue;

			// 유료 장신구면 무시
			if (g_pInvenInfo[i].DetailInfo->ItemType >= 12)
				continue;
		}

		// 세부 설정 체크하자
		int nDetailIndex = GetItemDetailIndex(g_pInvenInfo[i]);
		if (nDetailIndex == -1)
			continue;

		if (g_pItemDetailInfo[nDetailIndex].nMode != ItemMode_None && g_pItemDetailInfo[nDetailIndex].nMode != ItemMode_Trade)
			continue;

		if (!g_pItemDetailInfo[nDetailIndex].bItemEnchant)
			continue;

		if (g_pInvenInfo[i].nEnchant < g_pItemDetailInfo[nDetailIndex].nItemEnchant)
			return i;
	}

	return -1;
}


int GetMonsterIndex(const WCHAR* szName)
{
	for (int i = 0; i < g_nMonsterCount; i++)
	{
		if (!wcscmp(g_pMonsterInfo[i].szName, szName))
			return i;

	}
	return -1;
}


int GetShowInteractionType(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
	{
		char nInteractionType = *(char*)((DWORD64)uiInGame->C_QuickSlotWindow->C_Widget_Interaction + OFFSET_INTERACTIONTYPE);
		return nInteractionType;
	}

	return 0;
}


BOOL ClickInteraction(DWORD* dwAddress, BOOL bNpc)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return FALSE;

	BOOL bInteraction = FALSE;

	char nInteractionType = *(char*)((DWORD64)uiInGame->C_QuickSlotWindow->C_Widget_Interaction + OFFSET_INTERACTIONTYPE);
	if (nInteractionType == 1)																						// 채집물 + 보물상자
	{
		int nGatherIndex = -1, nDistMin = -1;
		for (int i = 0; i < g_nGatherCount; i++)
		{
			int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pGatherInfo[i].CurPos);
			if (nGatherIndex == -1 || nDist < nDistMin)
			{
				nGatherIndex = i;
				nDistMin = nDist;
			}
		}

		if (nGatherIndex != -1)
		{
			if (g_HuntSetting.bGatherEnable && !IsChaoGatherObject(g_pGatherInfo[nGatherIndex].CurPos))		// 카오가 아닌 경우
			{
				if (g_HuntSetting.bGatherStone && g_pGatherInfo[nGatherIndex].nType == GatherType_Stone)			// 광석 채집하기
					bInteraction = TRUE;

				if (g_HuntSetting.bGatherWood && g_pGatherInfo[nGatherIndex].nType == GatherType_Wood)				// 나무 채집하기
					bInteraction = TRUE;

				if (g_HuntSetting.bGatherGrass && g_pGatherInfo[nGatherIndex].nType == GatherType_Grass)			// 아마풀 채집하기
					bInteraction = TRUE;
			}

			if (g_pGatherInfo[nGatherIndex].nType == GatherType_Treasure ||											// 보물상자
				g_pGatherInfo[nGatherIndex].nType == GatherType_Event)												// 축복 석상
				bInteraction = TRUE;

			if (bNpc && g_pGatherInfo[nGatherIndex].nType == GatherType_Quest)										// 퀘스트
				bInteraction = TRUE;
		}
	}
	else if (bNpc && nInteractionType == 2)																			// Npc 대화
		bInteraction = TRUE;

	if (bInteraction)
		uiInGame->C_QuickSlotWindow->C_Widget_Interaction->OnTapInteraction();

	return bInteraction;
}


BOOL IsShowBlackOut(DWORD* dwAddress)
{
	UProjectLH_LHWidget_BlackInOut* uiBlackOut = (UProjectLH_LHWidget_BlackInOut*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_BlackInOut));
	if (!uiBlackOut || !uiBlackOut->IsVisible())
		return FALSE;

	g_nBlackOutShow = 2;
	return TRUE;
}


BOOL OnQuestAcceptFinish(DWORD* dwAddress)
{
	UProjectLH_LHWidget_QuestStart* uiQuestStart = (UProjectLH_LHWidget_QuestStart*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestStart));
	if (!uiQuestStart || !uiQuestStart->IsVisible())
	{
		g_dwItemWidgetTick = 0;
		return FALSE;
	}

	if ((uiQuestStart->C_OKButton->UnknownData06 & 2) == 0)
		uiQuestStart->OnTapOK();
	else if (uiQuestStart->AddResultItemWidgetArray.Num() > 0)
	{
		if (g_dwItemWidgetTick == 0)
			g_dwItemWidgetTick = g_dwTickCount;

		if (g_dwTickCount >= g_dwItemWidgetTick + 1 * 1000)
		{
			g_dwItemWidgetTick = 0;
			int nSelect = rand() % uiQuestStart->AddResultItemWidgetArray.Num();
			UProjectLH_LHWidget_QuestReward_Container* rewardContainer = uiQuestStart->AddResultItemWidgetArray[nSelect];
			if (rewardContainer)
				rewardContainer->OnTapSelect();
		}
	}
	else
		g_dwItemWidgetTick = 0;

	return TRUE;
}


BOOL OnQuestTalkMovieSkip(DWORD* dwAddress)
{
	UProjectLH_LHWidget_QuestNPCTalk* uiQuestNPCTalk = (UProjectLH_LHWidget_QuestNPCTalk*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestNPCTalk));
	if (!uiQuestNPCTalk || !uiQuestNPCTalk->IsVisible())
		return FALSE;

	if (uiQuestNPCTalk->C_SkipButton->IsVisible())
		uiQuestNPCTalk->SkipDesc();

	return TRUE;
}


BOOL OnCloseCollection(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ItemCollection_Window* uiItemCollection = (UProjectLH_LHWidget_ItemCollection_Window*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemCollection_Window));
	if (!uiItemCollection || !uiItemCollection->IsVisible())
		return FALSE;

	uiItemCollection->C_Widget_Topmenu->OnTapExitBtn();
	return TRUE;
}


BOOL OnQuestTalkBalloon(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame || !uiInGame->IsVisible())
		return FALSE;

	UProjectLH_LHWidget_InGame_QuestNPCTalk* npcTalkBalloon = uiInGame->C_Widget_QuestNPCTalk;
	if (!npcTalkBalloon || !npcTalkBalloon->IsVisible())
		return FALSE;

	npcTalkBalloon->OnTapTouch();
	return TRUE;
}


BOOL OnAutoEquipItem(DWORD* dwAddress)
{
	if (!IsExistEquipItem(dwAddress))
		return FALSE;

	UProjectLH_LHWidget_ItemDrop_List* uiDropList = (UProjectLH_LHWidget_ItemDrop_List*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemDrop_List));
	if (!uiDropList || !uiDropList->IsVisible())
		return FALSE;

	UProjectLH_LHWidget_ItemDrop_Equip* C_Widget_ItemDrop_Equip = uiDropList->C_Widget_ItemDrop_Equip;
	if (!C_Widget_ItemDrop_Equip || !C_Widget_ItemDrop_Equip->IsVisible())
		return FALSE;

	if (!C_Widget_ItemDrop_Equip->C_Equip_Button->IsVisible())
		return FALSE;

	C_Widget_ItemDrop_Equip->OnTapEquip();
	return TRUE;
}


BOOL OnQuestTeleport(DWORD* dwAddress)
{
	UProjectLH_LHWidget_TeleportPopup* uiTeleportPopup = (UProjectLH_LHWidget_TeleportPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_TeleportPopup));
	if (!uiTeleportPopup || !uiTeleportPopup->IsVisible())
		return FALSE;

	uiTeleportPopup->OnClickConfirm();
	return TRUE;
}


BOOL OnCallSceneSkip(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Skip* uiSkipWidget = (UProjectLH_LHWidget_Skip*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skip));
	if (!uiSkipWidget || !uiSkipWidget->IsVisible())
		return FALSE;

	if (uiSkipWidget->C_Button_Skip->IsVisible())
		uiSkipWidget->OnClicked_Skip();

	return TRUE;
}


BOOL OnCloseAvatarScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_RandomBox_Avatar* uiRandomBoxAvatar = (UProjectLH_LHWidget_RandomBox_Avatar*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RandomBox_Avatar));
	if (uiRandomBoxAvatar && uiRandomBoxAvatar->IsVisible())
	{
		if (g_qwCloseAvatarTick == 0)
			g_qwCloseAvatarTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwCloseAvatarTick + 5 * 1000)
		{
			if (uiRandomBoxAvatar->C_Btn_OpenAll->IsVisible() && *(char*)((DWORD64)uiRandomBoxAvatar + OFFSET_AVATARALLOPENED) != 1)
				uiRandomBoxAvatar->OnTouchOpenAll();
			else if (uiRandomBoxAvatar->C_Btn_Close->IsVisible() && *(char*)((DWORD64)uiRandomBoxAvatar + OFFSET_AVATARALLOPENED) == 1)
				uiRandomBoxAvatar->OnTouchClose();
		}

		return TRUE;
	}

	UProjectLH_LHWidget_Avatar_RewardPopup* uiAvatarRewardPopup = (UProjectLH_LHWidget_Avatar_RewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Avatar_RewardPopup));
	if (uiAvatarRewardPopup && uiAvatarRewardPopup->IsVisible())
	{
		if (g_qwCloseAvatarTick == 0)
			g_qwCloseAvatarTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwCloseAvatarTick + 5 * 1000)
		{
			// 			if (*(char*)((DWORD64)uiAvatarRewardPopup->C_FullScreen_Btn + OFFSET_BTNSTATE) == 1)
			// 				uiAvatarRewardPopup->OnTapAllOpen();
			// 			else
			uiAvatarRewardPopup->OnTapFullScreen();
		}

		return TRUE;
	}

	g_qwCloseAvatarTick = 0;
	return FALSE;
}


BOOL OnCloseVehicleScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Vehicle_RewardPopup* uiVehicle = (UProjectLH_LHWidget_Vehicle_RewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Vehicle_RewardPopup));
	if (uiVehicle && uiVehicle->IsVisible())
	{
		if (g_qwCloseVehicleTick == 0)
			g_qwCloseVehicleTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwCloseVehicleTick + 5 * 1000)
		{
			// 			if (*(char*)((DWORD64)uiVehicle->C_FullScreen_Btn + OFFSET_BTNSTATE) == 1)
			// 				uiVehicle->OnTapAllOpen();
			// 			else
			uiVehicle->CloseWidget();
		}

		return TRUE;
	}

	g_qwCloseVehicleTick = 0;
	return FALSE;
}


BOOL OnCloseRuneScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_RuneCompose_RewardPopup* runeComposeReard = (UProjectLH_LHWidget_RuneCompose_RewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RuneCompose_RewardPopup));
	if (!runeComposeReard || !runeComposeReard->IsVisible())
	{
		g_qwCloseRuneTick = 0;
		return FALSE;
	}

	if (g_qwCloseRuneTick == 0)
		g_qwCloseRuneTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwCloseRuneTick + 5 * 1000)
	{
		// 		if (*(char*)((DWORD64)runeComposeReard->C_Btn_Close + OFFSET_BTNSTATE) == 1)
		// 			runeComposeReard->OnTapAllOpen();
		// 		else
		runeComposeReard->CloseWidget();
	}

	return TRUE;
}


BOOL OnCloseWeaponScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_RandomBox_Weapon* uiRandomBoxWeapon = (UProjectLH_LHWidget_RandomBox_Weapon*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RandomBox_Weapon));
	if (uiRandomBoxWeapon && uiRandomBoxWeapon->IsVisible())
	{
		if (g_qwCloseWeaponShapeTick == 0)
			g_qwCloseWeaponShapeTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwCloseWeaponShapeTick + 5 * 1000)
		{
			if (uiRandomBoxWeapon->C_Btn_OpenAll->IsVisible() && *(char*)((DWORD64)uiRandomBoxWeapon + OFFSET_WEAPONALLOPENED) != 1)
				uiRandomBoxWeapon->OnTouchOpenAll();
			else if (uiRandomBoxWeapon->C_Btn_Close->IsVisible() && *(char*)((DWORD64)uiRandomBoxWeapon + OFFSET_WEAPONALLOPENED) == 1)
				uiRandomBoxWeapon->OnTouchClose();
		}

		return TRUE;
	}

	UProjectLH_LHWidget_WeaponShape_RewardPopup* WeaponShapeReard = (UProjectLH_LHWidget_WeaponShape_RewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_WeaponShape_RewardPopup));
	if (!WeaponShapeReard || !WeaponShapeReard->IsVisible())
	{
		g_qwCloseWeaponShapeTick = 0;
		return FALSE;
	}

	if (g_qwCloseWeaponShapeTick == 0)
		g_qwCloseWeaponShapeTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwCloseWeaponShapeTick + 5 * 1000)
	{
		// 		if (*(char*)((DWORD64)WeaponShapeReard->C_FullScreen_Btn + OFFSET_BTNSTATE) == 1)
		// 			WeaponShapeReard->OnTapAllOpen();
		// 		else
		WeaponShapeReard->OnTapFullScreen();
	}

	return TRUE;
}


BOOL OnCloseBlessingScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_BlessingCompose_RewardPopup* BlessingComposeReward = (UProjectLH_LHWidget_BlessingCompose_RewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Blessing_RewardPopup));
	if (!BlessingComposeReward || !BlessingComposeReward->IsVisible())
	{
		g_qwCloseBlessingComposeTick = 0;
		return FALSE;
	}

	if (g_qwCloseBlessingComposeTick == 0)
		g_qwCloseBlessingComposeTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwCloseBlessingComposeTick + 5 * 1000)
	{
		BlessingComposeReward->OnClicked_Close();
	}

	return TRUE;
}


BOOL OnCloseInstantMessageScene(DWORD* dwAddress)
{
	AJLog(L"InstantMessageScene start!");

	UProjectLH_LHWidget_InstantMessage* InstantMessage = (UProjectLH_LHWidget_InstantMessage*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InstantMessage));
	
	if (!InstantMessage)
	{
		g_qwCloseInstantMessageTick = 0;
		return FALSE;
	}

	if (g_qwCloseInstantMessageTick == 0)
		g_qwCloseInstantMessageTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwCloseInstantMessageTick + 1 * 1000) 
	{
		InstantMessage->OnDestroyInstantMsgContainer();
	}
		
	return TRUE;
}



BOOL CanDoVillageQuest(DWORD* dwAddress)
{
	if (!g_OtherSetting.bVillageRequest || g_pCharInfo.nLevel < 20)
		return FALSE;

	if (g_nVillageQuestCount > 0)
		return TRUE;

	// 요툰하임
	if (g_OtherSetting.nVillageRegion == 1 && GetMainQuestNo() < 1301)
		return FALSE;

	// 니다벨리르
	if (g_OtherSetting.nVillageRegion == 2 && GetMainQuestNo() < 2301)
		return FALSE;

	// 알브하임
	if (g_OtherSetting.nVillageRegion == 3 && GetMainQuestNo() < 3301)
		return FALSE;

	// 무스펠하임
	if (g_OtherSetting.nVillageRegion == 4 && GetMainQuestNo() < 4401)
		return FALSE;

	// 아스가르드
	if (g_OtherSetting.nVillageRegion == 5 && GetMainQuestNo() < 5401)
		return FALSE;

	// 니플하임
	if (g_OtherSetting.nVillageRegion == 6 && GetMainQuestNo() < 6401)
		return FALSE;

	// 공용 퀘스트
	if (g_OtherSetting.bUseVillageQuest && GetVillageQuestItem() != -1)
		return TRUE;

	if (GetVillageQuestCount(dwAddress) != GetVillageQuestMax(dwAddress))
		return TRUE;

	return FALSE;
}


int GetTargetMainQuest()
{
	if (g_pCharInfo.nLevel < 30)													// 30레벨미만이면 무조건 메인퀘 진행하라 (왜냐면 희귀 카드 받아야 하니까)
		return 9999;

	int nMainQuest = 201;
	if (g_HuntSetting.nMoveMode == 0)												// 진출 없음
	{
		if (g_HuntSetting.bContinueMainQuest)										// 퀘 계속 진행하는 경우
			nMainQuest = 9999;
	}
	else if (g_HuntSetting.nMoveMode == 1)											// 필드 진출인 경우
	{
		if (g_HuntSetting.nWorldIndex == 1)											// 요툰하임
			nMainQuest = 1301;
		else if (g_HuntSetting.nWorldIndex == 2)									// 니다벨리르
			nMainQuest = 2301;
		else if (g_HuntSetting.nWorldIndex == 3)									// 알브하임
			nMainQuest = 3301;
		else if (g_HuntSetting.nWorldIndex == 4)									// 무스펠하임
			nMainQuest = 4401;
		else if (g_HuntSetting.nWorldIndex == 5)									// 아스가르드
			nMainQuest = 5401;
		else if (g_HuntSetting.nWorldIndex == 6)									// 니플하임
			nMainQuest = 6401;
	}
	else if (g_HuntSetting.nMoveMode == 2)											// 던전 진출인 경우
		nMainQuest = g_pDungeonRes[g_HuntSetting.nDungeonIndex % MAX_DUNGEON].nNeedQuest;

	// 1601
	return nMainQuest;																// 마을까지 퀘스트 진행하자
}


BOOL OnPartyDungeonState(DWORD* dwAddress)
{
	if (g_bPartyDungeon)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (!IsPartyMaster() && pPartyWindow && pPartyWindow->C_Switcher_DungeonReady)
		{
			if (g_nPartyCount + 1 >= GetDungeonMemberCount())
			{
				if (g_OtherSetting.bPartyDungeon)
				{
					BOOL bBusParty = FALSE;
					// 버스 팟 먼저 체크하자
					if (g_OtherSetting.bBusLevel)
					{
						if (g_pCharInfo.nLevel >= g_OtherSetting.nBusLevel)
							bBusParty = TRUE;
						else
						{
							for (int i = 0; i < g_nPartyCount; i++)
							{
								if (g_pPartyInfo[i].nLevel >= g_OtherSetting.nBusLevel)
								{
									bBusParty = TRUE;
									break;
								}
							}
						}
					}

					// 버스 팟이 아니면 평균 레벨 체크하자
					if (!bBusParty && g_OtherSetting.bAverageLevel && g_nPartyCount != 0)
					{
						int nLevelSum = g_pCharInfo.nLevel;
						for (int i = 0; i < g_nPartyCount; i++)
							nLevelSum += g_pPartyInfo[i].nLevel;

						if (nLevelSum / (g_nPartyCount + 1) <= g_OtherSetting.nAverageLevel)
						{
							ShowStatus(2, 60374, NULL, g_OtherSetting.nAverageLevel);
							g_qwPartyDelayTick = g_dwTickCount;
							pPartyWindow->OnClickedPartyExit();
							return TRUE;
						}
					}
				}

				if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 0)
				{
					pPartyWindow->OnClickedDungeonReady();
					return TRUE;
				}
			}
			// 파티 정원이 채워지지 않은 경우 준비 해제하자
			else if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
			{
				pPartyWindow->OnClickedDungeonReady();
				return TRUE;
			}
		}
	}

	return FALSE;
}


int GetAceptableSubQuest()
{
	for (int i = 0; i < g_nSubQuestCount; i++)
	{
		if (g_pSubQuestInfo[i].dwQuestID == 0x84D1 ||
			g_pSubQuestInfo[i].dwQuestID == 0x84D2 ||
			g_pSubQuestInfo[i].dwQuestID == 0x84D3 ||
			g_pSubQuestInfo[i].dwQuestID == 0x84D4 ||
			g_pSubQuestInfo[i].dwQuestID == 0x84D5)
		{
			if (g_pSubQuestInfo[i].nQuestState == QUEST_NONE)
				return i;
		}
	}

	return -1;
}


void OnGameDoQuest(DWORD* dwAddress, int nMainQuest)
{
	if (nMainQuest != 1209 && nMainQuest != 1219 && nMainQuest != 1412 && ChangeGameSetting(dwAddress, 80, 0, 80))												// 게임 설정
		return;

	if (OnSpecialQuest(dwAddress))															// 특정 퀘스트 처리하자
	{
		SetDelay(10);
		return;
	}

	// 파티 던전 준비 하자
	if (OnPartyDungeonState(dwAddress))
	{
		SetDelay(10);
		return;
	}
	// 파르바 잡는 퀘이면 서브퀘 다 진행하자
	if (g_OtherSetting.bEnableSubQuest && nMainQuest == 1412)
	{
		if (g_nSubQuestNo < 0)
			g_nSubQuestNo = LoadSubQuestInfo();

		if (g_nSubQuestNo != nMainQuest)
		{
			ShowStatus(0, 60392);								// 서브 퀘스트를 진행합니다
			g_nSubQuestChapter = 1;
			g_dwPreQuestID = 0;
			g_dwSubQuestID = 0;
			SetStatus(STATUS_SUBQUEST, 10);
			return;
		}
	}

	if (nMainQuest == 1412 && g_pCharInfo.nGoods[0] >= 100000 && g_pCharInfo.nPotionLimit > 500
		&& GetQuestPotionCount() < 400)							// 파르바 잡을때 물약 챙기자
	{
		g_qwGotoNpcTick = 0;
		SetStatus(STATUS_QUESTPOTION, 10);
		return;
	}

	if (g_pCharInfo.nAutoState != AUTO_QUESTING)
	{
		BOOL bFly = FALSE;
		if (nMainQuest < 1221)																// 미드가르드면 계속 빠른 이동 하자
			bFly = TRUE;
		else if (nMainQuest <= 2301 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[1]))		// 요툰하임
			bFly = TRUE;
		else if (nMainQuest <= 3301 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[2]))		// 니다벨리르
			bFly = TRUE;
		else if (nMainQuest <= 4401 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[3]))		// 알브하임
			bFly = TRUE;
		else if (nMainQuest <= 5401 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[4]))		// 무스펠하임
			bFly = TRUE;
		else if (nMainQuest <= 6401 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[5]))		// 아스가르드
			bFly = TRUE;
		else if (nMainQuest <= 7301 && wcscmp(g_pCharInfo.szWorld, g_szWorldName[6]))		// 니플하임
			bFly = TRUE;

		// 튜트리얼 서브 퀘스트인 경우 수락만 하자
		int nIndex = GetAceptableSubQuest();
		if (nIndex != -1)
		{
			SelectQuest(dwAddress, g_pSubQuestInfo[nIndex].QuestContainer, g_pSubQuestInfo[nIndex].nQuestState, FALSE);
			SetDelay(10);
			return;
		}

		if (g_pMainQuestInfo.nQuestState == QUEST_DOING && g_dwPreQuestID != g_pMainQuestInfo.dwQuestID)
		{
			g_dwPreQuestID = g_pMainQuestInfo.dwQuestID;

			g_nQuestPreCount = g_pMainQuestInfo.nCurCount;
			g_qwQuestCountTick = g_dwTickCount;
			g_qwQuestTotalTick = g_dwTickCount;

			ShowStatus(1, 60157, g_pMainQuestInfo.szName);							// (메인 퀘스트 \"%s\" 을(를) 진행합니다)
		}

		SelectQuest(dwAddress, g_pMainQuestInfo.QuestContainer, g_pMainQuestInfo.nQuestState, bFly);
	}
	else if (!ClickInteraction(dwAddress))
	{
		FVector fTargetPos = GetMoveTargetPosition(dwAddress);
		if (fTargetPos.X != 0.0f || fTargetPos.Y != 0.0f || fTargetPos.Z != 0.0f || g_nQuestPreCount != g_pMainQuestInfo.nCurCount)
		{
			if (g_nQuestPreCount != g_pMainQuestInfo.nCurCount)
			{
				g_nQuestPreCount = g_pMainQuestInfo.nCurCount;
				g_qwQuestTotalTick = g_dwTickCount;
			}

			g_qwQuestCountTick = g_dwTickCount;
		}
		else if (g_dwTickCount >= g_qwQuestCountTick + 2 * 60 * 1000)
		{
			g_qwQuestCountTick = g_dwTickCount;
			SelectQuest(dwAddress, g_pMainQuestInfo.QuestContainer, g_pMainQuestInfo.nQuestState, TRUE);
		}

		if (g_OtherSetting.bQuestChaoEnable && g_dwTickCount >= g_qwQuestTotalTick + g_OtherSetting.nQuestChaoTime * 60 * 1000)
		{
			ShowStatus(2, 60312, NULL, g_OtherSetting.nQuestChaoTime);
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
		}
	}

	SetDelay(10);
}


int FindPlayerIndex(const WCHAR* szName)
{
	for (int i = 0; i < g_nPlayerCount; i++)
	{
		if (g_pPlayerInfo[i].nCurHp <= 0)
			continue;

		if (!wcscmp(g_pPlayerInfo[i].szName, szName))
			return i;
	}

	return -1;
}


void InviteParty(DWORD* dwAddress, int nIndex)
{
	if (nIndex < 0 || nIndex >= g_nPlayerCount)
		return;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
	{
		int nIndex = 0;
		if ((DWORD64)g_pCharInfo.pManualTarget != g_pPlayerInfo[nIndex].qwPlayerAddr)
		{
			SetManualTarget(dwAddress, (AProjectLH_LHCharacter*)g_pPlayerInfo[nIndex].qwPlayerAddr);
			//AJLog(L"플레이어 \"%s\" 선택", g_pPlayerInfo[nIndex].szName);
		}
		else
		{
			UProjectLH_LHWidget_InGame_Target_Container_Player* C_InGame_Target_Container = (UProjectLH_LHWidget_InGame_Target_Container_Player*)uiInGame->C_InGame_Target_Container;
			if (C_InGame_Target_Container && C_InGame_Target_Container->IsVisible())
			{
				if (C_InGame_Target_Container->C_Btn_PartyInvite)
				{
					g_pPlayerInfo[nIndex].qwPartyInviteTick = g_dwTickCount;

					C_InGame_Target_Container->OnClicked_PartyInvite();
					ShowStatus(1, 60363, g_pPlayerInfo[nIndex].szName);
					//AJLog(L"플레이어 \"%s\" 초대", g_pPlayerInfo[nIndex].szName);
				}
			}
		}
	}
}

typedef struct _Dungeon_Position_
{
	WCHAR	szRegion[MAX_NAME];
	int		nPosCount;
	FVector	pPosition[3];
}Dungeon_Position;
#define MAX_HuntPosition		15
Dungeon_Position g_pDungeonPosition[MAX_HuntPosition] = {
	{_T("1단계 - 균열의 입구"),		3,	{{13982.32f, 1484.32f, 238.89f},	{-4735.50f, 11687.63f, 228.35f},	{-12011.23f, -10774.74f, 203.42f}}},
	{_T("2단계 - 악취 나는 통로"),	3,	{{-9006.22f, -10567.71f, 227.04f},	{-6018.22f, 12166.93f, 224.23f},	{16473.30f, 1678.52f, 216.55f}}},
	{_T("3단계 - 혼돈의 동굴"),		3,	{{-11711.21f, -10551.95f, 203.35f},	{-2395.07f, 11066.48f, 216.27f},	{15205.23f, 1880.62f, 203.56f}}},
	{_T("4단계 - 공포의 내리막"),		3,	{{3682.29f, 16927.16f, -47.88f},	{39353.46f, 2127.27f, 66.08f},		{-39229.18f, -5399.10f, 5022.44f}}},

	{_T("1단계 - 저주받은 길"),		1,	{{-16282.16f, -16306.67f, 10568.75f}}},
	{_T("2단계 - 속삭이는 길"),		1,	{{-16363.65f, -16217.63f, 10568.75f}}},
	{_T("3단계 - 얼어붙은 길"),		1,	{{-16369.06f, -16467.63f, 10568.75f}}},
	{_T("4단계 - 상처입은 길"),		1,	{{-16434.11f, -16808.31f, 10490.51f}}},

	{_T("지하 1층 - 교만의 감옥"),	1,	{{-12911.57f, -11846.39f, 15408.69f}}},
	{_T("지하 2층 - 탐욕의 묘지"),	1,	{{6463.25f, -12041.35f, 4910.04f}}},
	{_T("지하 3층 - 질투의 고문소"),	1,	{{31744.13f, -12653.24f, 17805.89f}}},
	{_T("지하 4층 - 분노의 처형터"),	1,	{{-26024.69f, 20417.77f, 10184.71f}}},
	{_T("지하 5층 - 음욕의 나락"),	1,	{{3398.38f, -12289.58f, 10661.59f}}},
	{_T("지하 6층 - 식탐의 방"),		1,	{{-16286.86f, -16457.71f, 11254.50f}}},
	{_T("지하 7층 - 나태의 지옥"),	1,	{{10768.40f, -46292.55f, 11300.52f}}},
};
void MoveToHuntPosition(DWORD* dwAddress, WCHAR* szRegion)
{
	int nIndex = -1;
	for (int i = 0; i < MAX_HuntPosition; i++)
	{
		if (!wcscmp(g_pCharInfo.szRegion, g_pDungeonPosition[i].szRegion))
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex != -1)
	{
		int nPosIndex = -1, nDistMin = 0;
		for (int i = 0; i < g_pDungeonPosition[nIndex].nPosCount; i++)
		{
			int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pDungeonPosition[nIndex].pPosition[i]);
			if (nPosIndex == -1 || nDistMin > nDist)
			{
				nPosIndex = i;
				nDistMin = nDist;
			}
		}

		if (nPosIndex != -1)
			MovePos(dwAddress, g_pDungeonPosition[nIndex].pPosition[nPosIndex]);
	}
}


void OnGameDoHunt(DWORD* dwAddress)
{
	// -------------------------- //
	if (ShowErrorLog(36))
		return;
	// -------------------------- //

	// 파티 처리 하자					(발할라 매칭이 아니면서 파티던전이 아닐때만)
	if (g_HuntSetting.bPartyEnable && GetMatchingRealmWar(dwAddress) <= 0 &&
		(g_HuntSetting.nMoveMode != 2 || g_pDungeonRes[g_HuntSetting.nDungeonIndex % MAX_DUNGEON].bAloneDungeon))
	{
		if (g_HuntSetting.bPartyMember)
		{
			if (!g_bPartyExist)					// 파티상태가 아니면서
			{
				if (OnAceptPartyInvite(dwAddress))		// 파티초대가 온 경우
				{
					SetDelay(10);
					return;
				}
			}
			else if (g_bPartyDungeon || g_nPartyCount == 0)			// 파티에 혼자만 있는 경우 탈퇴하자
			{
				UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
				if (pPartyWindow)
				{
					pPartyWindow->OnClickedPartyExit();

					SetDelay(5);
					return;
				}
			}
			else if (wcscmp(g_HuntSetting.szPartyMaster, L""))
			{
				BOOL bGetOut = TRUE;
				for (int i = 0; i < g_nPartyCount; i++)
				{
					if (g_pPartyInfo[i].bMaster && !wcscmp(g_HuntSetting.szPartyMaster, g_pPartyInfo[i].szName))
					{
						bGetOut = FALSE;
						break;
					}
				}

				if (bGetOut)					// 파티장이 다른 경우 나오자
				{
					UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
					if (pPartyWindow)
					{
						pPartyWindow->OnClickedPartyExit();
						SetDelay(5);
						return;
					}
				}
			}
		}
		else
		{
			if (g_bPartyExist && !g_bPartyDungeon && !IsPartyMaster())										// 파티인 상태에서 (파티던전 제외) 파장 아니면
			{
				UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
				if (pPartyWindow)
				{
					pPartyWindow->OnClickedPartyExit();
					SetDelay(5);
					return;
				}
			}
			else if (!g_bPartyExist || (!g_bPartyDungeon && IsPartyMaster() && g_nPartyCount < 3))			// 파티가 아니거나 파장인 경우
			{
				for (int i = 0; i < g_nPartyMember; i++)
				{
					if (!g_pPartyMember[i].bEnable)
						continue;

					int nIndex = FindPlayerIndex(g_pPartyMember[i].szName);
					if (nIndex == -1)
						continue;

					if (g_dwTickCount <= g_pPlayerInfo[nIndex].qwPartyInviteTick + 20 * 1000)				// 20초안에는 초대를 하지 말자
						continue;

					InviteParty(dwAddress, nIndex);
					break;
				}
			}
		}
	}

	int nTargetRange = 0;
	if (g_HuntSetting.nTargetRange == 0)
		nTargetRange = 20;
	else if (g_HuntSetting.nTargetRange == 1)
		nTargetRange = 50;
	else if (g_HuntSetting.nTargetRange == 2)
		nTargetRange = 80;

	// -------------------------- //
	if (ShowErrorLog(37))
		return;
	// -------------------------- //

	// 게임 설정 진행하자
	if (ChangeGameSetting(dwAddress, nTargetRange, g_HuntSetting.bMannerMode))
		return;

	// -------------------------- //
	if (ShowErrorLog(38))
		return;
	// -------------------------- //

	// 세팅된 위치에 가서 사냥을 진행하자
	if (g_HuntSetting.nMoveMode == 1)
	{
		g_bDungeonTele = FALSE;

		// 퀘스트 텔레포트 창문 처리
		if (OnQuestTeleport(dwAddress))
		{
			SetDelay(10);
			return;
		}

		// -------------------------- //
		if (ShowErrorLog(39))
			return;
		// -------------------------- //

		// 월드가 다른 경우 무조건 텔레포트 타자
		if (wcscmp(g_szWorldName[g_HuntSetting.nWorldIndex], g_pCharInfo.szWorld))
		{
			TeleportMap(dwAddress, g_szWorldName[g_HuntSetting.nWorldIndex], g_szFieldName[g_HuntSetting.nWorldIndex][g_HuntSetting.nFieldIndex]);
		}
		else if (!g_bMoveHuntPos)							// 진출 못한 경우면
		{
			if (g_pCharInfo.nAutoState != AUTO_NONE)
			{
				AutoAttack(dwAddress);
				SetDelay(5);
				return;
			}

			FVector fTargetPos;
			fTargetPos.X = g_HuntSetting.fHuntPosX;		fTargetPos.Y = g_HuntSetting.fHuntPosY;		fTargetPos.Z = g_HuntSetting.fHuntPosZ;

			if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None &&
				(int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 1000)			// 설정된 사냥점에 도착한 경우
			{
				ShowStatus(0, 60237);			// L"사냥터에 도착하였습니다");
				g_bMoveHuntPos = TRUE;
				goto Hunt_Doing;
			}

			if (!g_bMoveHuntSet && wcscmp(g_pCharInfo.szRegion, g_szFieldName[g_HuntSetting.nWorldIndex][g_HuntSetting.nFieldIndex]))
				TeleportMap(dwAddress, g_szWorldName[g_HuntSetting.nWorldIndex], g_szFieldName[g_HuntSetting.nWorldIndex][g_HuntSetting.nFieldIndex]);
			else if (!IsMovingTargetPos(dwAddress, fTargetPos))
			{
				MovePos(dwAddress, fTargetPos);
				g_bMoveHuntSet = TRUE;
			}
		}
		else
			goto Hunt_Doing;
	}
	// 던전 진출인 경우
	else if (g_HuntSetting.nMoveMode == 2)
	{
		int nDungeonIndex = g_HuntSetting.nDungeonIndex % MAX_DUNGEON;

		// 던전 입장한 경우 사냥을 진행한다
		if (!wcscmp(g_pCharInfo.szWorld, g_pDungeonRes[nDungeonIndex].szRegion))
		{
			// 그림자 성채인 경우 아래로 떨어져야 한다
			if (!wcscmp(g_pDungeonRes[nDungeonIndex].szDungeon, L"그림자 성채") && g_pCharInfo.CurTransform.Translation.Z >= 26000.0f)
			{
				FVector fInitPosA = { -16189.74f, 52071.48f, 26088.38f };
				FVector fInitPosB = { 34197.02f, -33984.80f, 26088.38f };

				FVector fInitPos, fJumpPos;

				int nDistA = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fInitPosA);
				int nDistB = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fInitPosB);
				if (nDistA > nDistB)
				{
					fInitPos = fInitPosB;
					fJumpPos = { 34200.69f, -33747.53f, 26088.38f };
				}
				else
				{
					fInitPos = fInitPosA;
					fJumpPos = { -16181.80f, 51755.17f, 26088.38f };
				}

				if (IsMovingTargetPos(dwAddress, fJumpPos))
					PressKeyAlternate(VK_SPACE);
				else if (!IsMovingTargetPos(dwAddress, fInitPos))
				{
					if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fInitPos) <= 100)
						MovePos(dwAddress, fJumpPos);
					else
						MovePos(dwAddress, fInitPos);
				}

				return;
			}

			goto Hunt_Doing;
		}

		// 마을이 아니면 마을로 이동하자
		if (ReturnVillage(dwAddress))
			OnEnterDungeon(dwAddress, nDungeonIndex);
	}
	// 그냥 아무데서나 사냥하는 경우
	else
	{
		g_bDungeonTele = FALSE;
		goto Hunt_Doing;
	}

	SetDelay(10);
	return;

Hunt_Doing:

	// -------------------------- //
	if (ShowErrorLog(40))
		return;
	// -------------------------- //

	if (g_HuntSetting.bPartyEnable && GetMatchingRealmWar(dwAddress) <= 0 && g_HuntSetting.bPartyMember && g_nPartyCount > 0 &&
		g_HuntSetting.bPartyMove && !IsPartyMaster())			// 파티원일때 (파장으로 이동)
	{
		if (g_pCharInfo.nAutoState != AUTO_FOLLOW && g_pCharInfo.nMoveState != FProjectLH_ProjectLH_EAutoMove::EAutoMove__TargetMove_Location)
		{
			if (g_dwTickCount >= g_qwPartyMoveTick + 2 * 60 * 1000)
			{
				UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
				if (pPartyWindow && pPartyWindow->C_PartyMenuSwitcher && pPartyWindow->C_PartyMenuSwitcher->ActiveWidgetIndex == 1)
				{
					ShowStatus(0, 60300);						// 파장한테 이동
					g_bDungeonTele = FALSE;
					pPartyWindow->OnClickedPartyMasterMove();

					SetDelay(5);
					return;
				}
			}
		}
		else
			g_qwPartyMoveTick = 0;
	}

	// -------------------------- //
	if (ShowErrorLog(41))
		return;
	// -------------------------- //

	if (g_bDungeonTele)
	{
		g_bDungeonTele = FALSE;

		if (g_HuntSetting.bDungeonPos)
		{
			if (!wcscmp(g_pDungeonRes[g_HuntSetting.nDungeonIndex % MAX_DUNGEON].szDungeon, L"그림자 성채") &&
				g_pCharInfo.CurTransform.Translation.Z >= 24500.0f)
			{
				g_bDungeonTele = TRUE;
				PressKeyAlternate(L'F');
				SetDelay(10);
				return;
			}

			FVector fTargetPos;
			fTargetPos.X = g_HuntSetting.fDungeonPosX;
			fTargetPos.Y = g_HuntSetting.fDungeonPosY;
			fTargetPos.Z = g_HuntSetting.fDungeonPosZ;

			ShowStatus(0, 60272);										// 중심점으로 이동합니다
			MovePos(dwAddress, fTargetPos);
		}
		else
		{
			int nIndex = -1;
			for (int i = 0; i < g_nInvenCount; i++)
			{
				if (!wcscmp(g_pInvenInfo[i].szOrgName, L"순간 이동 주문서"))
				{
					nIndex = i;
					break;
				}
			}

			if (nIndex != -1)					// 순간이동주문서 있으면 한번 써주자
			{
				memset(g_szUseItemName, 0, sizeof(WCHAR) * MAX_NAME);
				swprintf(g_szUseItemName, g_pInvenInfo[nIndex].szName);

				g_bDungeonTele = FALSE;
				g_dwNoMonsterTick = g_dwTickCount;
				SetStatus(STATUS_USEITEM);
				return;
			}
			else
			{
				MoveToHuntPosition(dwAddress, g_pCharInfo.szRegion);
				g_qwAttackTick = g_dwTickCount + 1 * 60 * 1000;
			}
		}
	}

	// -------------------------- //
	if (ShowErrorLog(42))
		return;
	// -------------------------- //

	// 몇초이상 몹이 없는 경우 순간이동
	if (IsInDungeon() && g_HuntSetting.bMonTeleport && g_dwTickCount >= g_dwNoMonsterTick + g_HuntSetting.nMonTeleport * 1000)
	{
		int nIndex = -1;
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (!wcscmp(g_pInvenInfo[i].szOrgName, L"순간 이동 주문서"))
			{
				nIndex = i;
				break;
			}
		}

		if (nIndex != -1)
		{
			if (!g_bDungeonTele)
				ShowStatus(2, 60238, NULL, g_HuntSetting.nMonTeleport);			// L"%d초이상 몹이 없으므로 순간이동 합니다"

			memset(g_szUseItemName, 0, sizeof(WCHAR) * MAX_NAME);
			swprintf(g_szUseItemName, g_pInvenInfo[nIndex].szName);

			g_bDungeonTele = FALSE;
			g_dwNoMonsterTick = g_dwTickCount;
			SetStatus(STATUS_USEITEM);
			return;
		}
	}

	// -------------------------- //
	if (ShowErrorLog(43))
		return;
	// -------------------------- //

	// 사냥터가 맞는지 체크하자
	if (!IsExistHuntPlace())
	{
		ShowStatus(0, 60317);													// (사냥터가 아니므로 다시 사냥터로 이동합니다)

		g_bDungeonTele = TRUE;
		g_bMoveHuntPos = FALSE;
		g_bMoveHuntSet = FALSE;

		if (g_pCharInfo.nAutoState != AUTO_NONE)
			AutoAttack(dwAddress);

		return;
	}

	// -------------------------- //
	if (ShowErrorLog(44))
		return;
	// -------------------------- //

	// Auto 눌러서 사냥을 진행하자
	if (g_pCharInfo.nAutoState != AUTO_FOLLOW && g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON &&
		g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
	{
		AutoAttack(dwAddress);
		ShowStatus(0, 60239);		// L"사냥을 시작합니다");
	}
	else
		ClickInteraction(dwAddress);

	// -------------------------- //
	if (ShowErrorLog(45))
		return;
	// -------------------------- //

	// 파티 상태일때 공격방식 설정하자
	if (g_bPartyExist && g_pCharInfo.nAutoState != AUTO_NONE)
	{
		int nType = 2;
		if (!IsPartyMaster() && g_HuntSetting.bPartyEnable && g_HuntSetting.bPartyMember)
		{
			if (g_HuntSetting.nPartyMode == 1)
				nType = 1;
			else if (g_HuntSetting.nPartyMode == 2)
				nType = 0;
		}

		ChangePartyHuntMode(dwAddress, nType);
	}

	// -------------------------- //
	if (ShowErrorLog(46))
		return;
	// -------------------------- //

	// 파티 던전 준비 하자
	OnPartyDungeonState(dwAddress);

	// -------------------------- //
	if (ShowErrorLog(47))
		return;
	// -------------------------- //

	SetDelay(10);
}


BOOL IsInDungeon()
{
	for (int i = 0; i < MAX_DUNGEON; i++)
	{
		if (!wcscmp(g_pCharInfo.szWorld, g_pDungeonRes[i].szRegion))
			return TRUE;
	}

	return FALSE;
}


BOOL OnQuestFinish(DWORD* dwAddress)
{
	if (IsInDungeon() || g_nInvenCount >= g_nMaxInvenCount - 2)
		return FALSE;

	if (g_pMainQuestInfo.nQuestState == QUEST_COMPLETE)
	{
		if (SelectQuest(dwAddress, g_pMainQuestInfo.QuestContainer, g_pMainQuestInfo.nQuestState, FALSE))
			ShowStatus(1, 60254, g_pMainQuestInfo.szName);								// (퀘스트 \"%s\" 을(를) 완료합니다)

		return TRUE;
	}

	for (int i = 0; i < g_nSubQuestCount; i++)
	{
		if (g_pSubQuestInfo[i].nQuestState == QUEST_COMPLETE)
		{
			if (SelectQuest(dwAddress, g_pSubQuestInfo[i].QuestContainer, g_pSubQuestInfo[i].nQuestState, FALSE))
				ShowStatus(1, 60254, g_pSubQuestInfo[i].szName);

			return TRUE;
		}
	}

	for (int i = 0; i < g_nVillageQuestCount; i++)
	{
		if (g_pVillageQuestInfo[i].nQuestState == QUEST_COMPLETE)
		{
			if (SelectQuest(dwAddress, g_pVillageQuestInfo[i].QuestContainer, g_pVillageQuestInfo[i].nQuestState, FALSE))
				ShowStatus(1, 60254, g_pVillageQuestInfo[i].szName);

			return TRUE;
		}
	}

	return FALSE;
}


BOOL IsExistGetItemSetting()
{
	// 장비 찾을것이 있는 경우
	if (g_OtherSetting.bGetStoreEquips)
	{
		int nEquipChars = GetEquipsChar(g_nGameServer);
		if (nEquipChars == 0)
			return TRUE;

		// 이미 찾은 경우라고 볼수 있다
		if (nEquipChars == g_nGameChar + 1)
		{
			g_bGetEquips = TRUE;
			return FALSE;
		}
	}

	// 혹시 창고 장비 목록 나온 경우 검사하자
	for (int i = 0; i < g_nStoreCount; i++)
	{
		if (IsGetableItem(g_pStoreInfo[i]))
			return TRUE;
	}

	// 창고찾기 설정된 아이템이 있다면
	for (int i = 0; i < g_nItemDetailCount; i++)
	{
		if (g_pItemDetailInfo[i].nMode == ItemMode_Get)
			return TRUE;
	}

	// 창고찾기 설정된 일괄 아이템잉 있다면
	for (int i = 0; i < MAX_GRADE; i++)
	{
		for (int j = 0; j < MAX_TYPE; j++)
		{
			if (g_pItemDefault[i][j] == ItemMode_Get)
				return TRUE;
		}
	}

	// 퀘스트 진행중이라면 강화 주문서를 다 찾자
	if (GetMainQuestNo() < 1412)
		return TRUE;

	return FALSE;
}



BOOL CanAceptEventBuff()
{
	if (!g_OtherSetting.bEventBuff)
		return FALSE;

	for (int i = 0; i < g_nBuffCount; i++)
	{
		if (wcsstr(g_pBuffInfo[i].szName, L"1000일 기념 오딘의 축복"))
			return FALSE;
	}

	if (g_pCharInfo.nMapType == MapType_Village)
	{
		for (int i = 0; i < g_nGatherCount; i++)
		{
			if (g_pGatherInfo[i].nType == GatherType_Event)
				return TRUE;
		}
	}

	return FALSE;
}


void OnGameDoAuto(DWORD* dwAddress)
{
	// -------------------------- //
	if (ShowErrorLog(8))
		return;
	// -------------------------- //

	int nMainQuest = GetMainQuestNo();
	if (nMainQuest >= 201)											// 메뉴가 현시가 된 상태에서
	{																// 접속할 서버가 다르면 캐릭 선택창 넘어가자
		if (g_ScheduleSetting.bSelServer && g_ScheduleSetting.nSelServer != g_nGameServer)
		{
			ShowStatus(0, 60173);									// (접속 서버가 다르므로 변경을 진행합니다)
			SetStatus(STATUS_CHARLOGOUT);
			return;
		}
		// 접속할 캐릭 번호가 다르면 캐릭 선택창 넘어가자
		if (g_ScheduleSetting.bSelChar && g_ScheduleSetting.nSelChar != g_nGameChar)
		{
			if (g_OtherSetting.bGetStoreEquips)						// 창고에서 장비 찾아야 하는데
			{
				int nEquipChar = GetEquipsChar(g_nGameServer);
				if (nEquipChar == g_nGameChar + 1)					// 현재 캐릭이 창고에서 장비 장착한 경우
				{
					ShowStatus(0, 60288);							// (마지막으로 접속한 캐릭의 장비를 창고에 보관합니다)

					g_qwGotoNpcTick = 0;
					g_bGotoNPCFail = 0;
					g_bEquipStoreState = 0;
					g_qwEquipIndex = 0;
					g_qwNpcChaoCount = 0;

					AddStoreEquipItems();
					SetStatus(STATUS_STOREEQUIPS);
					return;
				}
			}

			if (g_nStoreListCount > 0)							// 보관할 목록이 있으면
			{
				g_qwGotoNpcTick = 0;
				g_bGotoNPCFail = 0;
				g_bEquipStoreState = 0;
				g_qwEquipIndex = 0;
				g_qwNpcChaoCount = 0;
				ShowStatus(0, 60212);								// L"장착한 장비들을 창고에 보관합니다");
				SetStatus(STATUS_STOREEQUIPS, 10);
				return;
			}

			ShowStatus(0, 60174);									// (접속 캐릭이 다르므로 변경을 진행합니다)
			SetStatus(STATUS_CHARLOGOUT);
			return;
		}

		if (IsCharNeedReturn())										// 캐릭 귀환해야 하는 경우
		{
			g_bExpandShop = TRUE;
			g_bWaitHpVillage = TRUE;
			SetStatus(STATUS_RETURNVILLAGE);
			return;
		}
	}

	// -------------------------- //
	if (ShowErrorLog(9))
		return;
	// -------------------------- //

	if (g_OtherSetting.bAutoEquip && OnAutoEquipItem(dwAddress))				// 자동 장비 장착
	{
		SetDelay(10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(10))
		return;
	// -------------------------- //

	if (OnQuestTeleport(dwAddress) ||									// 퀘스트 텔레포트
		OnQuestTalkBalloon(dwAddress) ||									// 퀘스트 대화
		OnJonJikAvatar(dwAddress) ||									// 전직 아바타
		OnAutoSkillSlot(dwAddress) ||									// 스킬 슬롯
		OnAutoBuffSlot(dwAddress))											// 버프 슬롯
	{
		SetDelay(10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(11))
		return;
	// -------------------------- //

	if (CanAceptEventBuff())										// 마을에서 석상 버프 받을수 있으면
	{
		SetStatus(STATUS_EVENTBUFF);
		return;
	}

	DWORD dwAutoQuestID = GetPlayerAutoQuestId(dwAddress);
	if (dwAutoQuestID && g_dwPreQuestID != dwAutoQuestID)			// 현재 진행중인 퀘스트 정보
	{
		g_dwPreQuestID = dwAutoQuestID;
		if (g_dwPreQuestID == g_pMainQuestInfo.dwQuestID)
		{
			ShowStatus(1, 60157, g_pMainQuestInfo.szName);			// (메인 퀘스트 \"%s\" 을(를) 진행합니다)

			g_nQuestPreCount = g_pMainQuestInfo.nCurCount;
			g_qwQuestCountTick = g_dwTickCount;
			g_qwQuestTotalTick = g_dwTickCount;
		}
		else
		{
			int nSubQuest = -1;
			for (int i = 0; i < g_nSubQuestCount; i++)
			{
				if (g_pSubQuestInfo[i].dwQuestID == g_dwPreQuestID)
				{
					nSubQuest = i;
					break;
				}
			}

			if (nSubQuest != -1)
			{														// (서브 퀘스트 \"%s\" 을(를) 진행합니다)
				ShowStatus(1, 60158, g_pSubQuestInfo[nSubQuest].szName);

				g_nQuestPreCount = g_pSubQuestInfo[nSubQuest].nCurCount;
				g_qwQuestCountTick = g_dwTickCount;
				g_qwQuestTotalTick = g_dwTickCount;
			}
			else
			{
				int nVillageQuest = -1;
				for (int i = 0; i < g_nVillageQuestCount; i++)
				{
					if (g_pVillageQuestInfo[i].dwQuestID == g_dwPreQuestID)
					{
						nVillageQuest = i;
						break;
					}

					if (nVillageQuest != -1)
					{												// (의뢰 퀘스트 \"%s\" 을(를) 진행합니다)
						ShowStatus(1, 60255, g_pVillageQuestInfo[nVillageQuest].szName);

						g_nQuestPreCount = g_pVillageQuestInfo[nVillageQuest].nCurCount;
						g_qwQuestCountTick = g_dwTickCount;
						g_qwQuestTotalTick = g_dwTickCount;
					}
				}
			}
		}
	}

	// -------------------------- //
	if (ShowErrorLog(12))
		return;
	// -------------------------- //
																	// 퀘스트 던전인 경우
	if (g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__AloneQuestDungeon)
	{
		if (ChangeGameSetting(dwAddress, 80, 0, 99))							// 물약 99퍼로 설정하고 보스 패턴 뻗치자
			return;

		if (g_nPartyCount == 0)										// 특정 경우 파티원 없는 오류가 나온다 그런 경우 던전도 안나가지니 캐릭선택으로 넘어가자
		{
			if (g_qwPartyLogoutTick == 0)
				g_qwPartyLogoutTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwPartyLogoutTick + 1 * 60 * 1000)
			{
				ShowStatus(0, 60261);									// (파티 던전 오류가 발생하여 캐릭 선택창으로 나갑니다)
				g_qwPartyLogoutTick = 0;
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
			}

			SetDelay(5);
			return;
		}
		else
			g_qwPartyLogoutTick = 0;

		if (!wcscmp(g_pCharInfo.szWorld, L"맹독의 뱀 둥지"))
		{
			if (g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
			{
				if (!g_bInitAloneDungeon)
				{
					FVector fInitPos = { -9712.30f, 12363.65f, -194.45f };
					FVector fMovePos = { -7826.67f, 12503.58f, -193.42f };
					if (MovePos(dwAddress, fMovePos))
						g_bInitAloneDungeon = TRUE;
				}

				if (!g_dwLastPartyDungeonBossSkillID[0])
					AutoAttack(dwAddress);
			}

			OnQuestInstance(dwAddress);

			FVector g_fPartyDungeonMovePos[7] =
			{
				{59286.976562f, -27809.271484f, 12090.777344f},
				{59236.664062f, -28697.960938f, 12131.283203f},
				{60078.992188f, -28661.605469f, 12303.522461f},
				{60544.203125f, -28323.007812f, 12279.107422f},
				{61102.16f, -27435.93f, 12068.07f},	//{61150.199219f, -28013.947266f, 12103.698242f},
				{61068.929688f, -27035.025391f, 12036.945312f},
				{60248.523438f, -26692.361328f, 12176.492188f},
			};

			static int s_nIndex = 0;
			if (g_dwLastPartyDungeonBossSkillID[0])
			{
				if (g_pCharInfo.nAutoState != AUTO_NONE)
					AutoAttack(dwAddress);

				s_nIndex = (s_nIndex) % 7;
				if (GETDIST2D(g_pCharInfo.CurTransform.Translation, g_fPartyDungeonMovePos[s_nIndex]) < 200.0f)
					s_nIndex = (s_nIndex + 1) % 7;

				if (!IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
				{
					MovePos(dwAddress, g_fPartyDungeonMovePos[s_nIndex]);
					SetDelay(1);
				}
			}
		}
		else
		{
			int nIndex = GetMonsterIndex(L"펜리르");		// 잊혀진 거인의 동굴
			if (nIndex != -1)
			{
				// 나를 보고있으면 그냥 오토 중지하고 가까운 구석에 가있자
				if ((DWORD64)g_pMonsterInfo[nIndex].qwTargetAddr == g_pCharInfo.qwCharAddr || g_pCharInfo.nCurHp * 100 / (max(1, g_pCharInfo.nMaxHp)) < 75)
				{
					FVector g_fPartyDungeonMovePos[9] =
					{
						{62841.95f, -37567.76f, -11570.30f},
						{62784.98f, -33218.80f, -11594.25f},
						{63700.55f, -28402.92f, -11570.30f},
						{67310.46f, -26648.15f, -11595.70f},
						{70618.22f, -28923.61f, -11593.44f},
						{71146.54f, -32460.69f, -11590.44f},
						{70537.09f, -36893.01f, -11592.05f},
						{66592.16f, -38455.13f, -11590.06f},
						{62783.43f, -37937.16f, -11569.33f},
					};

					if (g_pCharInfo.nAutoState != AUTO_NONE)
						AutoAttack(dwAddress);

					if (g_nQuestDungeonIndex == -1)
					{
						int nDistMax = 0, nDist = 0;
						for (int i = 0; i < 9; i++)
						{
							nDist = (int)GETDIST2D(g_fPartyDungeonMovePos[i], g_pCharInfo.CurTransform.Translation);
							if (nDist > nDistMax)
							{
								nDistMax = nDist;
								g_nQuestDungeonIndex = i;
							}
						}
					}

					if ((int)GETDIST2D(g_fPartyDungeonMovePos[g_nQuestDungeonIndex], g_pCharInfo.CurTransform.Translation) < 150)
						g_nQuestDungeonIndex = -1;
					else if (!IsMovingTargetPos(dwAddress, g_fPartyDungeonMovePos[g_nQuestDungeonIndex]))
					{
						MovePos(dwAddress, g_fPartyDungeonMovePos[g_nQuestDungeonIndex]);
						SetDelay(5);
					}

					return;
				}

				g_nQuestDungeonIndex = -1;
				if ((DWORD64)g_pMonsterInfo[nIndex].qwTargetAddr != 0)
				{
					OnQuestInstance(dwAddress);

					if (g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
						AutoAttack(dwAddress);
				}
				else
				{
					if (g_pCharInfo.nAutoState != AUTO_NONE)
						AutoAttack(dwAddress);
				}
			}
			else
			{
				g_nQuestDungeonIndex = -1;

				BOOL bMove = TRUE;
				for (int i = 0; i < g_nMonsterCount; i++)
				{
					if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pMonsterInfo[i].CurTransform.Translation) <= 3500)
					{
						bMove = FALSE;
						break;
					}
				}

				// 몬스터가 없으면 이동하고
				if (bMove)
				{
					if (g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
						AutoAttack(dwAddress);
				}
				// 몬스터가 있으면 NPC가 싸우게 하자
				else
				{
					if (g_pCharInfo.nAutoState != AUTO_NONE)
						AutoAttack(dwAddress);
				}
			}
		}

		return;
	}
	else
	{
		g_qwPartyLogoutTick = 0;
		g_bInitAloneDungeon = FALSE;
		g_dwLastPartyDungeonBossSkillID[0] = 0;
	}

	// -------------------------- //
	if (ShowErrorLog(13))
		return;
	// -------------------------- //

	if (nMainQuest == 0)											// 로딩이 제대로 안되는 경우도 있다
	{
		if (g_dwTickCount >= g_qwMainQuestTick + 10 * 1000)
		{
			ShowStatus(0, 60292);									// 메인 퀘스트 정보가 없어 재접속합니다.
			g_qwMainQuestTick = g_dwTickCount;
			SetStatus(STATUS_CHARLOGOUT);
		}

		SetDelay(5);
		return;
	}
	else
		g_qwMainQuestTick = g_dwTickCount;
	// 퀘스트 인스턴스 던전 처리하자
	if (g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
	{
		if (g_pMainQuestInfo.nQuestState == QUEST_DOING)
		{
			if (ChangeGameSetting(dwAddress, 80, 0, 99))
				return;

			if (g_pCharInfo.nLevel > 30 &&
				((!IsBuffExist(L"신속의 주문서") && UseQuickSlot(L"신속의 주문서 (귀속)")) ||
					(!IsBuffExist(L"전투의 주문서") && UseQuickSlot(L"전투의 주문서 (귀속)")) ||
					(!IsBuffExist(L"방어의 주문서") && UseQuickSlot(L"방어의 주문서 (귀속)")) ||
					(!IsBuffExist(L"저항의 주문서") && UseQuickSlot(L"저항의 주문서 (귀속)"))))
			{
				SetDelay(5);
				return;
			}

			int nIndex = GetMonsterIndex(L"용맹한 파르바");
			if (nIndex != -1)										// 파르바인 경우 우선 주문서를 다 사용하자
			{
				if (g_nBossStep < 3 && g_pMonsterInfo[nIndex].qwTargetAddr == 0)
				{
					FVector m_pBossStartPos[3] = { {-22085.06f, 91069.91f, -20952.62f}, {-19156.30f, 91260.63f, -20908.91f}, {-17914.01f, 95089.01f, -20864.03f}, };

					int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, m_pBossStartPos[g_nBossStep]);
					if (nDist <= 200)
						g_nBossStep++;

					if (g_nBossStep < 3)
					{
						if (MovePos(dwAddress, m_pBossStartPos[g_nBossStep]))
							SetDelay(3);

						return;
					}
				}

				if (g_nMonsterCount > 1)
				{
					int nDistMin = -1, nMonsterIndex = -1;
					for (int i = 0; i < g_nMonsterCount; i++)
					{
						if (g_pMonsterInfo[i].nCurHp <= 0 || nIndex == i)
							continue;

						int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pMonsterInfo[i].CurTransform.Translation);
						if (nDistMin == -1 || nDist < nDistMin)
						{
							nMonsterIndex = i;
							nDistMin = nDist;
						}
					}

					if ((DWORD64)g_pCharInfo.pManualTarget != g_pMonsterInfo[nMonsterIndex].qwMonsterAddr)
						SetManualTarget(dwAddress, (AProjectLH_LHCharacter*)g_pMonsterInfo[nMonsterIndex].qwMonsterAddr);
					else
						ManualAttack(dwAddress);

					return;
				}
			}

			if (g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
			{
				AutoAttack(dwAddress);
			}
			else
			{
				OnQuestInstance(dwAddress);
			}
		}
		else
		{
			g_bBossRunAround = 0;
			g_nBossStep = 0;
			SelectQuest(dwAddress, g_pMainQuestInfo.QuestContainer, g_pMainQuestInfo.nQuestState, FALSE);
			SetDelay(10);
		}

		return;
	}
	else
	{
		g_bBossRunAround = 0;
		g_nBossStep = 0;
	}

	// -------------------------- //
	if (ShowErrorLog(14))
		return;
	// -------------------------- //

	if (OnQuestFinish(dwAddress))											// 퀘스트 끝난것들 보상 받자
	{
		SetDelay(10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(15))
		return;
	// -------------------------- //
																	// 창고에서 장비 찾아야 하는 경우 (마을에 와야 한다)
	if (nMainQuest >= 201 && !g_bGetEquips && (g_pCharInfo.nMapType == MapType_Village || g_pCharInfo.dwFlyingID != 0) && IsExistGetItemSetting())
	{
		g_qwGotoNpcTick = 0;
		g_bGotoNPCFail = 0;
		g_bEquipStoreState = 0;
		g_qwNpcChaoCount = 0;
		ShowStatus(0, 60160);									// (창고에서 장비들을 찾아 장착합니다)
		SetStatus(STATUS_GETEQUIPS);
		return;
	}
	// 탈것 갱신해야 하는 경우
	if (nMainQuest >= 207 && !IsChaoStatus(STATUS_VEHICLE))
	{
		if (IsExistCombineVehicle() || GetHighVehicleID(FALSE, dwAddress) != -1 || GetHighVehicleID(TRUE, dwAddress) != -1)
		{
			ShowStatus(0, 60161);									// (탈것 합성 및 장착 을(를) 진행합니다)
			SetStatus(STATUS_VEHICLE);
			return;
		}
		else if (g_bOpenVehicle)
		{
			if (OnCloseVehicle(dwAddress))
			{
				SetDelay(10);
				return;
			}

			if (g_qwVehicleStart == 0)
				g_qwVehicleStart = (rand() % 3 + 1) * 60 * 1000 + g_dwTickCount;

			if (g_dwTickCount >= g_qwVehicleStart)
			{
				g_qwVehicleStart = 0;
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Vehicle);

				SetDelay(10);
				return;
			}
		}
	}

	// -------------------------- //
	if (ShowErrorLog(16))
		return;
	// -------------------------- //
																	// 스킬북 구매 해야 하는 경우
	if (nMainQuest >= 301 && GetBuySkillBookRegion() >= 0)
	{
		g_qwGotoNpcTick = 0;
		g_bGotoNPCFail = 0;
		g_bOpenSkill = TRUE;
		g_nSkillCount = 0;
		g_qwNpcChaoCount = 0;
		ShowStatus(0, 60162);										// (스킬 배우기 및 퀵슬롯 등록을 진행합니다)
		SetStatus(STATUS_SKILLPROC);
		return;
	}
	// 아바타 합성 혹은 좋은거 있는 경우
	if (nMainQuest >= 309 && (IsExistCombineAvatar() || GetHighAvatarID() != -1) && !IsChaoStatus(STATUS_AVATAR))
	{
		ShowStatus(0, 60163);										// (아바타 합성 및 장착 을(를) 진행합니다)
		SetStatus(STATUS_AVATAR);
		return;
	}
	// 무기 형상 합성 및 좋은거 있는 경우
	if (nMainQuest >= 912 && (IsExistCombineWeapon() || GetHighWeaponID() != -1) && !IsChaoStatus(STATUS_WEAPONSHAPE))
	{
		ShowStatus(0, 60388);										// (무기 형상 합성 및 장착 을(를) 진행합니다)
		SetStatus(STATUS_WEAPONSHAPE);
		return;
	}
	// 업적 보상
	if (nMainQuest >= 205 && g_OtherSetting.bAchieveReward && IsExistAchievement(dwAddress) && !IsChaoStatus(STATUS_ACHIEVEMENT))
	{
		ShowStatus(0, 60164);										// (업적 보상 을(를) 확인합니다)
		SetStatus(STATUS_ACHIEVEMENT);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(17))
		return;
	// -------------------------- //
																	// 우편 확인
	if (IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__Mail))
	{
		if (nMainQuest >= 102 && !g_bPostMail && !IsChaoStatus(STATUS_MAIL) && (g_OtherSetting.bAccountMail || g_OtherSetting.bCharacMail))
		{
			if (g_qwMailboxStart == 0)
				g_qwMailboxStart = (rand() % 5 + 1) * 60 * 1000 + g_dwTickCount;

			if (g_dwTickCount >= g_qwMailboxStart)
			{
				g_qwMailboxStart = 0;

				ShowStatus(0, 60165);								// (우편함 을(를) 확인합니다)

				g_nPostIndex = 0;
				SetStatus(STATUS_MAIL);
				return;
			}
		}
		else
			g_qwMailboxStart = 0;
	}
	else
		g_bPostMail = FALSE;

	// -------------------------- //
	if (ShowErrorLog(18))
		return;
	// -------------------------- //
																	// 이벤트 확인
	if (IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__GameEvent))
	{
		if (nMainQuest >= 201 && !g_bEventReward[0] && !IsChaoStatus(STATUS_EVENT) && g_OtherSetting.bEventReward)
		{
			ShowStatus(0, 60166);									// (이벤트 보상 을(를) 확인합니다)

			g_nEventIndex = 0;
			g_qwEventSceneTick = 0;
			SetStatus(STATUS_EVENT);
			return;
		}
	}
	else
		g_bEventReward[0] = FALSE;

	// -------------------------- //
	if (ShowErrorLog(19))
		return;
	// -------------------------- //

	if (IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__SpecialPackage))
	{
		if (nMainQuest >= 201 && !g_bEventReward[1] && !IsChaoStatus(STATUS_ODINPASS) && g_OtherSetting.bEventReward && !g_PackageShopVisited)
		{
			ShowStatus(0, 60166);									// (이벤트 보상 을(를) 확인합니다)

			g_nEventIndex = 0;
			g_qwEventSceneTick = 0;
			SetStatus(STATUS_ODINPASS);
			return;
		}
	}
	else
		g_bEventReward[1] = FALSE;

	// -------------------------- //
	if (ShowErrorLog(20))
		return;
	// -------------------------- //
																	// 캐시샵 확인
	if (nMainQuest >= 201 && GetBuyCashItemIndex() != -1 && !IsChaoStatus(STATUS_CASHSHOP))
	{
		if (g_qwCashShopStart == 0)
			g_qwCashShopStart = (rand() % 10 + 1) * 60 * 1000 + g_dwTickCount;

		if (g_dwTickCount >= g_qwCashShopStart)
		{
			g_qwCashShopStart = 0;

			ShowStatus(0, 60167);									// (캐시샵 아이템 구매를 진행합니다)

			g_nLastCashIndex = -1;
			SetStatus(STATUS_CASHSHOP);
			return;
		}
	}
	// 사망 경험치 복구
	if (!IsChaoStatus(STATUS_RECOVEREXP) && IsExistRecoverExp(dwAddress) && CanRecoverExp())
	{
		ShowStatus(0, 60168);										// (사망 경험치 복구를 진행합니다)
		SetStatus(STATUS_RECOVEREXP);
		return;
	}
	// 장착 장비 강화하자
	if (nMainQuest >= 102 && GetEnchantEquipIndex() != -1)
	{
		ShowStatus(0, 60169);										// (장착한 장비들을 강화합니다)
		SetStatus(STATUS_ENCHANTEQUIP);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(21))
		return;
	// -------------------------- //
																	// 스킬목록 불이 들어왔으면 퀵슬롯 설정하자
	if (nMainQuest >= 301 && IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__Skill))
	{
		ShowStatus(0, 60170);										// (퀵슬롯(스킬) 설정을 확인합니다)
		SetStatus(STATUS_SKILLSLOT);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(22))
		return;
	// -------------------------- //
																	// 거래소 진행하자
	if (nMainQuest >= 1221 && !IsChaoStatus(STATUS_TRADE) && (IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__Exchange) || IsExistTradeItem()))
	{
		if (g_qwTradeStart == 0)
			g_qwTradeStart = (rand() % 5 + 1) * 30 * 1000 + g_dwTickCount;

		if (g_dwTickCount >= g_qwTradeStart)
		{
			g_qwTradeStart = 0;

			g_bTradeInit = TRUE;
			g_nTradeRegIndex = 0;
			memset(g_szTradeRegName, 0, sizeof(g_szTradeRegName));
			memset(g_szTradeOrgName, 0, sizeof(g_szTradeOrgName));

			ShowStatus(0, 60262);									// (거래소 물품 확인을 진행합니다)

			SetStatus(STATUS_TRADE);
			return;
		}
	}

	// -------------------------- //
	if (ShowErrorLog(23))
		return;
	// -------------------------- //

	if (nMainQuest >= 102 && g_OtherSetting.bCollectItem && IsMenuRedDot(dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup::EMarkTypeGroup__Collection) &&
		!IsChaoStatus(STATUS_COLLECTION))
	{
		if (g_qwCollectProcStart == 0)
			g_qwCollectProcStart = (rand() % 3 + 1) * 30 * 1000 + g_dwTickCount;

		if (g_dwTickCount >= g_qwCollectProcStart)
		{
			ShowStatus(0, 60263);										// (아이템 컬렉션 등록을 진행합니다)

			g_nAutoEquip = 0;
			g_nCollectionIndex = 0;
			g_qwCollectProcStart = 0;
			SetStatus(STATUS_COLLECTION);
			return;
		}
	}
	else
		g_qwCollectProcStart = 0;

	// -------------------------- //
	if (ShowErrorLog(24))
		return;
	// -------------------------- //

	if (IsExistInvenProc(dwAddress, nMainQuest))								// 아이템 처리할거 있으면 처리하자
	{
		if (g_qwInvenProcStart == 0)
			g_qwInvenProcStart = (rand() % 3 + 1) * 30 * 1000 + g_dwTickCount;

		if (g_dwTickCount >= g_qwInvenProcStart)
		{
			g_qwInvenProcStart = 0;
			g_nQuickSlotIndex = 0;
			g_nInvenIndex = 0;
			g_nTryInvenCount = 0;
			g_qwLastUseItemAddr = 0;
			SetStatus(STATUS_INVENPROC);
			return;
		}
	}

	if (nMainQuest >= 102 && GetEnchantDetailItem() != -1)			// 강화할거 있으면 처리하자
	{
		if (g_qwEnchantProcStart == 0)
			g_qwEnchantProcStart = (rand() % 3 + 1) * 30 * 1000 + g_dwTickCount;

		if (g_dwTickCount >= g_qwEnchantProcStart)
		{
			ShowStatus(0, 60381);									// 장비 강화를 진행합니다
			SetStatus(STATUS_ITEMENCHANT);
			return;
		}
	}

	if (nMainQuest >= 420 && !IsChaoStatus(STATUS_GUILD))			// 길드 체크 진행하자
	{
		if (wcscmp(g_pCharInfo.szGuild, L""))						// 길드 가입한 경우
		{
			if (g_OtherSetting.bGuildCheck && !g_bGuildCheck[g_nGameChar % 5])
			{
				if (g_qwGuildCheckStart == 0)
					g_qwGuildCheckStart = (rand() % 5 + 1) * 60 * 1000 + g_dwTickCount;

				if (g_dwTickCount >= g_qwGuildCheckStart)
				{
					g_qwGuildCheckStart = 0;

					ShowStatus(0, 60275);							// (길드 출석을 확인합니다)
					SetStatus(STATUS_GUILD);
					return;
				}
			}
		}															// 길드 가입 못한 경우
		else if (g_OtherSetting.bGuildJoin && g_dwTickCount >= g_qwGuildJoinTick[g_nGameChar % 5])
		{
			if (g_qwGuildCheckStart == 0)
				g_qwGuildCheckStart = (rand() % 5 + 1) * 60 * 1000 + g_dwTickCount;

			if (g_dwTickCount >= g_qwGuildCheckStart)
			{
				g_qwGuildCheckStart = 0;

				ShowStatus(0, 60276);								// (길드 자동 가입을 진행합니다)
				SetStatus(STATUS_GUILD);
				return;
			}
		}
	}

	// -------------------------- //
	if (ShowErrorLog(25))
		return;
	// -------------------------- //
																	// 발할라 진행하자
	if (nMainQuest >= 815 && g_OtherSetting.bValhallaFight && GetMatchingRealmWar(dwAddress) == 0)
	{
		ShowStatus(0, 60290);										// (발할라 대전을 신청합니다)
		SetStatus(STATUS_MATCHREALMWAR, 10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(26))
		return;
	// -------------------------- //
																	// 파티 던전 진행하자
	if (nMainQuest >= 1301 && CheckBigSnakeDungeon(dwAddress))
	{
		ShowStatus(0, 60318);										// 파티 던전 입장 신청을 진행합니다
		SetStatus(STATUS_MATCHBIGSNAKE, 10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(27))
		return;
	// -------------------------- //
																	// 월드 보스 타임 체크하자
	if (nMainQuest >= 1301 && g_pCharInfo.nLevel >= 30 && CheckWorldBossTime())
	{
		g_bWorldBoss = 0;
		g_qwWorldBossTick = 0;

		ShowStatus(0, 60335);
		SetStatus(STATUS_WORLDBOSS, 10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(28))
		return;
	// -------------------------- //
																	// 보물 상자 체크하자
	if (!IsChaoStatus(STATUS_TREASUREBOX) && CheckTreasureState())
	{
		g_qwTreasureTick = 0;
		g_bTreasureTeleport = FALSE;

		ShowStatus(0, 60345);										// 보물 상자 채집을 진행합니다
		SetStatus(STATUS_TREASUREBOX, 10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(29))
		return;
	// -------------------------- //

	if (!IsChaoStatus(STATUS_WEAPONTREASURE) && CheckWeaponTreasureState())
	{
		g_qwWeaponTreasureTick = 0;
		g_bWeaponTreasureTeleport = FALSE;

		ShowStatus(0, 60400);										// 보물 상자 채집을 진행합니다
		SetStatus(STATUS_WEAPONTREASURE, 10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(30))
		return;
	// -------------------------- //
																	// 30초이상 몹 공격을 못하는 경우 (Auto 눌린 상태인데 안될수 있다)
	if (g_pCharInfo.nAutoState == AUTO_HUNTING)
	{
		if (g_dwTickCount >= g_qwAttackTick + 30 * 1000 && (DWORD64)g_pCharInfo.pAutoTarget)
		{
			// 3분이내에 5번 이상 공격 못하는 상태면 렉 걸린 상태다
			if (g_nAttackChaoCount >= 5 && g_qwAttackChaoTick[4] - g_qwAttackChaoTick[0] <= 3 * 60 * 1000)
			{
				g_nAttackChaoCount = 0;
				ShowStatus(0, 60359);
				SetStatus(STATUS_ATTACKCHAO, 10);
				return;
			}

			if ((DWORD64)g_pCharInfo.pManualTarget != (DWORD64)g_pCharInfo.pAutoTarget)
				SetManualTarget(dwAddress, g_pCharInfo.pAutoTarget);
			else
			{
				ShowStatus(0, 60339);								// 30초이상 공격 못하여 수동 조작

				g_qwAttackTick = g_dwTickCount;
				ManualAttack(dwAddress);

				if (g_nAttackChaoCount >= 5)
				{
					g_nAttackChaoCount = 5;

					for (int i = 0; i < 5; i++)
						g_qwAttackChaoTick[i] = g_qwAttackChaoTick[i + 1];

					g_qwAttackChaoTick[g_nAttackChaoCount - 1] = g_dwTickCount;
				}
				else
				{
					g_qwAttackChaoTick[g_nAttackChaoCount++] = g_dwTickCount;
				}
			}

			SetDelay(10);
			return;
		}
	}
	else
		g_qwAttackTick = g_dwTickCount;

	// -------------------------- //
	if (ShowErrorLog(31))
		return;
	// -------------------------- //
																	// 캐릭 이동중 비정상적인 움직임이 있으면
	if (g_dwMoveCharTick && g_dwTickCount >= g_dwMoveCharTick + 10 * 1000)
	{
		AJLog(L"1. g_dwMoveCHartick = %d, g_dwTickCount = %d", g_dwMoveCharTick, g_dwTickCount);
		g_dwMoveCharTick = g_dwTickCount;
		ShowStatus(0, 60172);										// (캐릭 이동중 비정상적인 움직임이 발견되였습니다)

		int nInteractionType = GetShowInteractionType(dwAddress);
		if (nInteractionType == 1)
			PutChaoGatherObject();
		else if (nInteractionType == 2)
			ClickInteraction(dwAddress, TRUE);

		if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb)
			PressKeyAlternate(L'F');

		if (IsInDungeon() && g_pCharInfo.pAutoTarget != NULL)	// 던전에서 특정 몹 못잡는 경우 무시하자
			*(BYTE*)(&g_pCharInfo.pAutoTarget->UnknownData00[2]) = 1;

		if (!g_OtherSetting.bMoveChaoEnable)
			g_nMoveChaoCount = 0;
		else if (g_nMoveChaoCount < MAX_CHAO)
			g_qwMoveChaoTick[g_nMoveChaoCount++] = g_dwTickCount;
		else
		{
			g_nMoveChaoCount = MAX_CHAO;
			for (int i = 0; i < g_nMoveChaoCount - 1; i++)
				g_qwMoveChaoTick[i] = g_qwMoveChaoTick[i + 1];

			g_qwMoveChaoTick[g_nMoveChaoCount - 1] = g_dwTickCount;
		}

		if (g_OtherSetting.bMoveChaoEnable)
		{														// 캐릭 이동 오류 자주 나오는 경우
			if (g_OtherSetting.nMoveChaoCount <= 1 || (g_nMoveChaoCount >= g_OtherSetting.nMoveChaoCount &&
				g_qwMoveChaoTick[g_nMoveChaoCount - 1] - g_qwMoveChaoTick[g_nMoveChaoCount - g_OtherSetting.nMoveChaoCount] <= g_OtherSetting.nMoveChaoTime * 60 * 1000))
			{
				ShowStatus(4, 60313, NULL, g_OtherSetting.nMoveChaoTime, g_OtherSetting.nMoveChaoCount);
				SetStatus(STATUS_FORCERETURN, 10);
				SetDelay(10);
				return;
			}
		}

		AutoAttack(dwAddress);
		SetDelay(10);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(32))
		return;
	// -------------------------- //
																	// 의뢰 퀘스트 진행하자
	if (nMainQuest >= 514 && !IsChaoStatus(STATUS_VILLAGEQUEST) && CanDoVillageQuest(dwAddress))
	{
		ShowStatus(0, 60171);										// L"마을 의뢰 퀘스트를 확인합니다");
		SetStatus(STATUS_VILLAGEQUEST);
		return;
	}

	// -------------------------- //
	if (ShowErrorLog(33))
		return;
	// -------------------------- //

	if (nMainQuest < GetTargetMainQuest())							// 입장 퀘스트 못한 상태면
	{
		if (g_pCharInfo.nLevel >= 30 && g_HuntSetting.nMoveMode == 0 && g_HuntSetting.bContinueMainQuest)
		{
			if (g_HuntSetting.bQuestLevel && g_pCharInfo.nLevel >= g_HuntSetting.nQuestLevel)
			{
				ShowStatus(2, 60342, NULL, g_HuntSetting.nQuestLevel);

				ChangeSchedule();
				return;
			}

			if (g_HuntSetting.bQuestWorld)
			{
				BOOL bQuestStop = FALSE;
				if (g_HuntSetting.nQuestWorld == 0 && nMainQuest >= 201)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 1 && nMainQuest >= 1301)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 2 && nMainQuest >= 2301)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 3 && nMainQuest >= 3301)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 4 && nMainQuest >= 4401)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 5 && nMainQuest >= 5401)
					bQuestStop = TRUE;
				if (g_HuntSetting.nQuestWorld == 6 && nMainQuest >= 6401)
					bQuestStop = TRUE;

				if (bQuestStop)
				{
					ShowStatus(1, 60343, g_szWorldName[g_HuntSetting.nQuestWorld % MAX_WORLD]);

					ChangeSchedule();
					return;
				}
			}
		}

		if (g_bStartAuto != 1)
		{
			g_bStartAuto = 1;
			ShowStatus(0, 60175);									// (퀘스트 육성을 진행합니다)
		}

		OnGameDoQuest(dwAddress, nMainQuest);
	}
	else
	{
		if (g_nSubQuestNo < 0)
			g_nSubQuestNo = LoadSubQuestInfo();

		if (g_OtherSetting.bEnableSubQuest && g_nSubQuestNo != GetMainQuestNo())	// 서브 퀘스트 진행하는 경우
		{
			ShowStatus(0, 60392);

			g_nSubQuestChapter = 1;
			g_dwPreQuestID = 0;
			g_dwSubQuestID = 0;
			SetStatus(STATUS_SUBQUEST, 10);
			return;
		}

		if (g_bStartAuto != 2)
		{
			g_bStartAuto = 2;
			ShowStatus(0, 60159);									// (퀘스트가 완료되어 사냥으로 넘어갑니다)
		}

		// -------------------------- //
		if (ShowErrorLog(34))
			return;
		// -------------------------- //

		OnGameDoHunt(dwAddress);
	}

	// -------------------------- //
	if (ShowErrorLog(48))
		return;
	// -------------------------- //

	if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
		OnSkillInteraction(dwAddress);
}


BOOL OnJonJikAvatar(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Quest_AvatarClassInfo* uiAvatarReward = (UProjectLH_LHWidget_Quest_AvatarClassInfo*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestAvatarSelectInfo));
	if (uiAvatarReward && uiAvatarReward->IsVisible())
	{
		uiAvatarReward->OnAvatarSelectBtn();
		return TRUE;
	}

	UProjectLH_LHWidget_QuestAvatarSelectReward* uiAvatarSelect = (UProjectLH_LHWidget_QuestAvatarSelectReward*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestAvatarSelectReward));
	if (uiAvatarSelect && uiAvatarSelect->IsVisible())
	{
		if (g_bCreateCharClass == 0)
			uiAvatarSelect->OnAvatarLeftSelectBtn();
		else if (g_bCreateCharClass == 1)
			uiAvatarSelect->OnAvatarRightSelectBtn();
		else if (g_bCreateCharClass == 2)
			uiAvatarSelect->OnThirdAvatarSelectBtn();

		return TRUE;
	}

	return FALSE;
}


BOOL UseQuickSlot(const WCHAR* szName)
{
	int nIndex = -1;
	for (int i = 0; i < g_nItemSlotCount; i++)
	{
		if (!wcscmp(g_pItemSlotInfo[i].dwItem.szName, szName))
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex != -1 && GetInvenCount(g_pItemSlotInfo[nIndex].dwItem.szName) > 0)
	{
		g_pItemSlotInfo[nIndex].quickSlotCommon->OnClicked_Slot((UProjectLH_LHItem*)g_pItemSlotInfo[nIndex].dwItem.qwItemAddr, 0);
		return TRUE;
	}

	return FALSE;
}


BOOL OnSpecialQuest(DWORD* dwAddress)
{
	if (g_pMainQuestInfo.nQuestState != QUEST_DOING)
		return FALSE;

	switch (g_pMainQuestInfo.dwQuestID)
	{
	case 0x2714:			// 원기 회복 (HP 회복 물약 사용)
	{
		ShowStatus(0, 60176);			// L"HP 회복 물약을 사용합니다");
		PressKeyAlternate(L'Q');
	}
	break;
	case 0x2716:			// 자동 장비 장착
	{
		UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
		if (!uiInven || !uiInven->IsVisible())
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		else if (!AutoEquipItems(dwAddress))
		{
			if (g_nEquipCount > 0)
				SelectEquipItem(dwAddress, 0);
		}

		SetDelay(10);
	}
	break;
	case 0x2721:			// 시승식 (탈것 장착해야 한다)
	case 0x2726:			// 창공의 지배자 (탈것 장착해야 한다)
	{
		ShowStatus(0, 60161);			// L"탈것 합성 및 장착 을(를) 진행합니다");
		SetStatus(STATUS_VEHICLE);
	}
	break;
	case 0x27DB:			// 스킬 공부 (스킬북 사용해야 한다)
	{
		g_bUseSkillBook = TRUE;
		g_nQuickSlotIndex = 0;
		g_nInvenIndex = 0;
		g_nTryInvenCount = 0;
		g_qwLastUseItemAddr = 0;
		SetStatus(STATUS_INVENPROC);
	}
	break;
	case 0x273A:			// 부담 갖지 마 (아바타 착용해야 한다)
	{
		ShowStatus(0, 60163);			// L"아바타 합성 및 장착 을(를) 진행합니다");
		SetStatus(STATUS_AVATAR);
	}
	break;
	case 0x27D7:			// 분해의 장인 (분해)
	case 0x27D9:			// 강화의 달인 (강화)
	{
		UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
		if (!uiInven || !uiInven->IsVisible())
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		else
			uiInven->C_BP_Widget_Inven->OnTapExitBtn();
	}
	break;
	case 0x27D8:			// 제작의 고수 (제작)
	{
		UProjectLH_LHWidget_Production_Main* uiProduction = (UProjectLH_LHWidget_Production_Main*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Production_Main));
		if (!uiProduction || !uiProduction->IsVisible())
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Production);
		else
			uiProduction->C_Widget_Topmenu->OnTapExitBtn();
	}
	break;
	case 0x27C8:			// 평원의 수호자 (맹독뱀 입장 못하는 경우)
	{
		FVector fChaoPos = { -43732.84f, 70849.63f, -9321.17f };

		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fChaoPos);
		if (nDist > 1000)
			return FALSE;

		if (!IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
		{
			fChaoPos.X = -42256.84f;	fChaoPos.Y = 70205.62f;		fChaoPos.Z = -9351.81f;
			MovePos(dwAddress, fChaoPos);
		}

		SetDelay(10);
	}
	break;
	default:
	{
		return FALSE;
	}
	break;
	}

	return TRUE;
}


#pragma pack(push, 1)
struct TMapKeyEnumIter
{
	DWORD		dwIndex;
	DWORD		dwIterIndex;
	DWORD64		qwKeyEntity;
	DWORD		dwUnknown2;
	DWORD		dwKeyIndex;
	DWORD		dwKeyIterPoint;
	DWORD		dwUnknow4;
};

struct TMapDataEnumIter
{
	DWORD64			qwMapEntity;
	TMapKeyEnumIter	mapKeyEnumIter;
};
#pragma pack(pop)
INVENINFO GetItemInfo(DWORD* dwAddress, DWORD64 qwAddr)
{
	INVENINFO itemInfo;
	memset(&itemInfo, 0, sizeof(INVENINFO));

	if (qwAddr)
	{
		itemInfo.qwItemAddr = qwAddr;
		itemInfo.dwItemBranch = *(char*)(qwAddr + OFFSET_ITEMBRANCH);
		itemInfo.qwItemUID = *(DWORD64*)(qwAddr + OFFSET_ITEMUID);
		itemInfo.nCount = *(int*)(qwAddr + OFFSET_ITEMCOUNT);
		itemInfo.nEnchant = *(int*)(qwAddr + OFFSET_ITEMCOUNT + 4);
		itemInfo.nBelongType = *(char*)(qwAddr + OFFSET_ITEMDETAIL + OFFSET_ITEMBELONG);
		itemInfo.bLocked = *(char*)(qwAddr + OFFSET_ITEMDETAIL + OFFSET_ITEMLOCKED);

		itemInfo.nSegongCount = 0;
		int nSegong = *(int*)(qwAddr + OFFSET_ITEMDETAIL + OFFSET_ITEMSEGONG + 8);
		//AJLog(L"*** nSegong = %d", nSegong);
		for (int i = 0; i < nSegong; i++)
		{
			if (!*(DWORD64*)(qwAddr + OFFSET_ITEMDETAIL + OFFSET_ITEMSEGONG))
				continue;

			if (*(DWORD*)(*(DWORD64*)(qwAddr + OFFSET_ITEMDETAIL + OFFSET_ITEMSEGONG) + 8 * i + 4))
				itemInfo.nSegongCount++;
		}

		UProjectLH_LHItem* LHItem = (UProjectLH_LHItem*)qwAddr;
		itemInfo.DetailInfo = LHItem->ItemInfoRecord;

		if (*(DWORD64*)((BYTE*)LHItem + OFFSET_ITEMDETAIL + OFFSET_GET_LHITEM_LIMITDATE) != 0)
			itemInfo.bLimitDate = TRUE;
		else
			itemInfo.bLimitDate = FALSE;

		WCHAR* szName = GetGameString(dwAddress, itemInfo.DetailInfo->NameCode);
		if (szName == NULL)
			return itemInfo;

		swprintf(itemInfo.szOrgName, L"%s", szName);

		if (itemInfo.nEnchant > 0)
			swprintf(itemInfo.szName, L"+%d %s", itemInfo.nEnchant, szName);
		else
			swprintf(itemInfo.szName, L"%s", szName);

		//FreeGarbageMemory(dwAddress, (DWORD64)szName);
		FreeGarbageMemory((DWORD64)szName);

		if (itemInfo.nBelongType == 0)
			wcscat(itemInfo.szName, L" (귀속)");
		else if (itemInfo.nBelongType == 1)
			wcscat(itemInfo.szName, L" (캐릭터 귀속)");

		_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

		DWORD64 qwItemParam[5];
		qwItemParam[0] = 0;
		qwItemParam[1] = 14;

		initString((DWORD64)qwItemParam, 0);
		memcpy((void*)qwItemParam[0], L"ItemTable.tbl", 28);

		DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
		if (qwQuestTableData)
		{
			_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
			DWORD64	qwItemTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwItemParam);
			if (qwItemTable)
			{
				_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
				UCommonSource_ItemUseLimitRecord* itemUseLimitRecord = (UCommonSource_ItemUseLimitRecord*)getQuestInfo(*(DWORD64*)(qwItemTable + OFFSET_ITEMDETAILINFO), itemInfo.DetailInfo->Index);
				if (itemUseLimitRecord)
					itemInfo.nNeedLevel = itemUseLimitRecord->NeedPlayerLevel;
			}
		}

		if (itemInfo.DetailInfo->ItemCategory == 1)
			itemInfo.nItemType = ItemType_Weapon;
		else if (itemInfo.DetailInfo->ItemCategory == 2)
			itemInfo.nItemType = ItemType_Armor;
		else if (itemInfo.DetailInfo->ItemCategory == 3)
			itemInfo.nItemType = ItemType_Accessory;
		else if (wcsstr(itemInfo.szName, L" 입장권") || wcsstr(itemInfo.szName, L"노른의 모래시계"))
			itemInfo.nItemType = ItemType_Dungeon;
		else if (wcsstr(itemInfo.szName, L"금빛 인장") || wcsstr(itemInfo.szName, L"은빛 인장"))
			itemInfo.nItemType = ItemType_Gold;
		else if (wcsstr(itemInfo.szName, L"스킬 기술서") || wcsstr(itemInfo.szName, L"스킬 교본") || wcsstr(itemInfo.szName, L"스킬북"))
			itemInfo.nItemType = ItemType_Skill;
		else
			itemInfo.nItemType = ItemType_Material;
	}

	return itemInfo;
}


void IterateItemTMap(DWORD* dwAddress, DWORD64 qwTMapEntity, UProjectLH_LHInventoryMgr* objInventoryMgr)
{
	_callFunc1 IterMapData = (_callFunc1)(PATCHADDR(dwAddress[ADDR_ITERMAPDATA], dwAddress[0]));

	DWORD		dwCount = *(DWORD*)(qwTMapEntity + OFFSET_ITEMMAPCOUNT);
	DWORD64		qwKeyIter = qwTMapEntity + OFFSET_ITEMMAPDATA;
	DWORD		dwKeyIndex = 0;

	DWORD	v13 = 0;
	DWORD	v12 = 0;
	DWORD64	v19 = 0;
	DWORD	v20 = 0;

	TMapKeyEnumIter		tmapKeyEnumIter;
	TMapDataEnumIter	tmapDataEnumIter;

	tmapKeyEnumIter.qwKeyEntity = qwKeyIter;
	tmapKeyEnumIter.dwIndex = 0;
	tmapKeyEnumIter.dwIterIndex = 1;
	tmapKeyEnumIter.dwKeyIterPoint = 0;
	tmapKeyEnumIter.dwUnknow4 = 0;
	tmapKeyEnumIter.dwUnknown2 = -1;
	tmapKeyEnumIter.dwKeyIndex = 0;

	DWORD dwKeyIterPoint = 0;
	if (dwCount)
	{
		int* v10 = (int*)qwKeyIter;
		if (*(DWORD64*)(qwKeyIter + 16))
			v10 = *(int**)(qwKeyIter + 16);

		DWORD	 i;
		for (i = *v10; !i; i = v10[dwKeyIndex])
		{
			++dwKeyIndex;
			dwKeyIterPoint += 32;
			tmapKeyEnumIter.dwIndex = dwKeyIndex;
			tmapKeyEnumIter.dwKeyIterPoint = dwKeyIterPoint;
			if (dwKeyIndex > (dwCount - 1) / 32)
				goto LABEL_11;

			tmapKeyEnumIter.dwUnknown2 = -1;
		}

		v12 = !_BitScanReverse((DWORD*)&v13, i & (0 - i));
		tmapKeyEnumIter.dwIterIndex = i & (0 - i);

		DWORD v14;
		if (v12)
			v14 = 32;
		else
			v14 = 31 - v13;

		tmapKeyEnumIter.dwKeyIndex = dwKeyIterPoint - v14 + 31;
		if (tmapKeyEnumIter.dwKeyIndex > dwCount)
		{
		LABEL_11:
			tmapKeyEnumIter.dwKeyIndex = dwCount;
			goto LABEL_12;
		}
	}
LABEL_12:

	DWORD v15 = *(DWORD*)(qwTMapEntity + OFFSET_ITEMMAPCOUNT);
	tmapDataEnumIter.qwMapEntity = qwTMapEntity;

	DWORD v25 = v15;
	DWORD v17 = v15 / 32;
	DWORD v18 = v15 - 32;

	tmapDataEnumIter.mapKeyEnumIter = tmapKeyEnumIter;

	if (v15 == dwCount)
		goto LABEL_23;

	v19 = qwKeyIter;
	if (*(DWORD64*)(qwKeyIter + 16))
		v19 = *(DWORD64*)(qwKeyIter + 16);

	v20 = (-1 << (v15 & 0x1F)) & *(DWORD*)(v19 + 4 * v17);
	if (!v20)
	{
		while (1)
		{
			++v17;
			v18 += 32;
			if (v17 > (dwCount - 1) / 32)
				break;

			v20 = *(DWORD*)(v19 + 4 * v17);
			if (v20)
				goto LABEL_18;
		}
	LABEL_22:
		v25 = dwCount;
		goto LABEL_23;
	}
LABEL_18:
	v12 = !_BitScanReverse((DWORD*)&v20, v20 & (0 - v20));

	DWORD v21;
	if (v12)
		v21 = 32;
	else
		v21 = 31 - v20;

	v25 = v18 - v21 + 31;
	if (v25 > dwCount)
		goto LABEL_22;
LABEL_23:

	while (tmapDataEnumIter.mapKeyEnumIter.dwKeyIndex != v25 || tmapDataEnumIter.mapKeyEnumIter.qwKeyEntity != qwKeyIter || tmapDataEnumIter.qwMapEntity != qwTMapEntity)
	{
		DWORD64 qwEntity = *(DWORD64*)(*(DWORD64*)tmapDataEnumIter.qwMapEntity + 24 * tmapDataEnumIter.mapKeyEnumIter.dwKeyIndex + 8);

		if (qwEntity)
		{
			INVENINFO itemInfo = GetItemInfo(dwAddress, qwEntity);
			if (itemInfo.dwItemBranch == 0 && g_nInvenCount < MAX_INVEN)
			{
				BOOL bExist = FALSE;
				if (itemInfo.DetailInfo->ItemCategory > 0 && itemInfo.DetailInfo->ItemCategory < 5)
				{
					UProjectLH_LHEquipItemMgr* equipItemMgr = objInventoryMgr->EquipItemMgr;
					if (equipItemMgr)
					{
						int nCurSlot = *(int*)((DWORD64)equipItemMgr + OFFSET_CURPRESET);
						for (int i = 0; i < equipItemMgr->EquipPreset[nCurSlot].ItemList.Num(); i++)
						{
							DWORD64 qwItemUID = equipItemMgr->EquipPreset[nCurSlot].ItemList[i].m_Data;
							if (itemInfo.qwItemUID == qwItemUID)
							{
								if (g_nEquipCount < MAX_EQUIP)
								{
									swprintf(g_pEquipInfo[g_nEquipCount].szName, itemInfo.szName);
									g_pEquipInfo[g_nEquipCount].nSlot = equipItemMgr->EquipPreset[nCurSlot].ItemList[i].m_SlotIndex;
									g_pEquipInfo[g_nEquipCount].nGrade = itemInfo.DetailInfo->ItemGrade;
									g_pEquipInfo[g_nEquipCount].qwItemUID = qwItemUID;
									g_pEquipInfo[g_nEquipCount].qwItemAddr = itemInfo.qwItemAddr;
									g_pEquipInfo[g_nEquipCount].nEnchant = itemInfo.nEnchant;
									g_pEquipInfo[g_nEquipCount].bLock = itemInfo.bLocked;
									g_pEquipInfo[g_nEquipCount].nDestroyType = itemInfo.DetailInfo->ItemDestroyType;
									g_pEquipInfo[g_nEquipCount].nSegongCount = itemInfo.nSegongCount;
									g_pEquipInfo[g_nEquipCount].DetailInfo = itemInfo.DetailInfo;
									g_nEquipCount++;
								}

								bExist = TRUE;
								break;
							}
						}

						if (!bExist)
						{
							for (int nSlot = 0; nSlot < equipItemMgr->EquipPreset.Num(); nSlot++)
							{
								if (nCurSlot == nSlot)
									continue;

								BOOL bGetOut = FALSE;
								for (int i = 0; i < equipItemMgr->EquipPreset[nSlot].ItemList.Num(); i++)
								{
									DWORD64 qwItemUID = equipItemMgr->EquipPreset[nSlot].ItemList[i].m_Data;
									if (itemInfo.qwItemUID == qwItemUID)
									{
										itemInfo.bEquiped = TRUE;
										bGetOut = TRUE;
										break;
									}
								}

								if (bGetOut)
									break;
							}
						}
					}
				}

				if (!bExist)
					g_pInvenInfo[g_nInvenCount++] = itemInfo;
			}
			else if (itemInfo.dwItemBranch == 1 && g_nStoreCount < MAX_STORE)
			{
				g_pStoreInfo[g_nStoreCount++] = itemInfo;
			}
		}

		tmapDataEnumIter.mapKeyEnumIter.dwUnknown2 &= ~tmapDataEnumIter.mapKeyEnumIter.dwIterIndex;
		IterMapData((DWORD64)&tmapDataEnumIter.mapKeyEnumIter.dwIndex);
	}
}


void UpdateBuffIinfo(DWORD* dwAddress)
{
	g_nBuffCount = 0;

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHCharacterMgr* objCharacterMgr = objGameInstance->CharacterMgr;
	if (!objCharacterMgr)
		return;

	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwSkillParam[5];
	qwSkillParam[0] = 0;
	qwSkillParam[1] = 15;

	initString((DWORD64)qwSkillParam, 0);
	memcpy((void*)qwSkillParam[0], L"SkillTable.tbl", 30);

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);

	DWORD64	qwSkilTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwSkillParam);
	if (!qwSkilTable)
		return;

	DWORD64 qwItemParam[5];

	qwItemParam[0] = 0;
	qwItemParam[1] = 14;

	initString((DWORD64)qwItemParam, 0);
	memcpy((void*)qwItemParam[0], L"ItemTable.tbl", 28);

	DWORD64	qwItemTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwItemParam);
	if (!qwItemTable)
		return;

	for (int i = 0; i < objCharacterMgr->BuffParam->BuffParams.Num(); i++)
	{
		FProjectLH_BuffParam buffParam = objCharacterMgr->BuffParam->BuffParams[i];
		UCommonSource_BuffInfoRecord* qwBuffInfo = (UCommonSource_BuffInfoRecord*)getQuestInfo(*(DWORD64*)(qwSkilTable + OFFSET_BUFFINFO), buffParam.Info.m_BuffIndex);
		if (!qwBuffInfo)
			continue;

		if (g_nBuffCount < MAX_BUFF)
		{
			g_pBuffInfo[g_nBuffCount].dwBuffID = buffParam.Info.m_BuffIndex;
			g_pBuffInfo[g_nBuffCount].qwBuffInfo = qwBuffInfo;

			swprintf(g_pBuffInfo[g_nBuffCount].szName, L"%s", GetGameString(dwAddress, qwBuffInfo->NameCode));
			if (qwBuffInfo->BuffType != 60 && qwBuffInfo->BuffType != 56)
			{
				_callFunc2 getItemInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETBUFFITEMINFO], dwAddress[0]);

				UCommonSource_ItemInfoRecord* itemInfoRecord = (UCommonSource_ItemInfoRecord*)getItemInfo(qwItemTable, buffParam.Info.m_BuffIndex);
				if (itemInfoRecord)
				{
					WCHAR* szItemName = GetGameString(dwAddress, itemInfoRecord->NameCode);
					swprintf(g_pBuffInfo[g_nBuffCount].szName, L"%s", szItemName);

					//FreeGarbageMemory(dwAddress, (DWORD64)szItemName);
					FreeGarbageMemory((DWORD64)szItemName);
				}
			}

			WCHAR* szEnd = wcsstr(g_pBuffInfo[g_nBuffCount].szName, L" (");
			if (szEnd != NULL)
				szEnd[0] = 0;

			g_nBuffCount++;
		}
	}
}


void UpdateInvenInfo(DWORD* dwAddress)
{
	g_nInvenCount = 0;
	g_nEquipCount = 0;
	g_nStoreCount = 0;

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHCharacterMgr* objCharacterMgr = objGameInstance->CharacterMgr;
	if (!objCharacterMgr)
		return;

	UProjectLH_LHInventoryMgr* objInventoryMgr = objGameInstance->CharacterMgr->InventoryMgr;
	if (!objInventoryMgr)
		return;

	IterateItemTMap(dwAddress, (DWORD64)(&objInventoryMgr->ItemMap), objInventoryMgr);

	for (int i = 0; i < g_nEquipCount - 1; i++)
	{
		for (int j = i + 1; j < g_nEquipCount; j++)
		{
			if (g_pEquipInfo[i].nSlot > g_pEquipInfo[j].nSlot)
			{
				EQUIPINFO pTemp;
				memcpy(&pTemp, &g_pEquipInfo[i], sizeof(EQUIPINFO));
				memcpy(&g_pEquipInfo[i], &g_pEquipInfo[j], sizeof(EQUIPINFO));
				memcpy(&g_pEquipInfo[j], &pTemp, sizeof(EQUIPINFO));
			}
		}
	}
}


void UpdateItemSlotInfo(DWORD* dwAddress)
{
	g_nItemSlotCount = 0;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_QuickSlot_CommonWindow* C_QuickSlot_CommonWindow = uiInGame->C_QuickSlot_CommonWindow;
	if (!C_QuickSlot_CommonWindow)
		return;

	_callFunc3 getQuickSlotCommonList = (_callFunc3)PATCHADDR(dwAddress[ADDR_GETQUICKSLOTCOMMONLIST], dwAddress[0]);
	for (int i = 0; i < C_QuickSlot_CommonWindow->EquipSlot_Datas.Num(); i++)
	{
		UProjectLH_LHQuickSlotCommonListData* commonList = (UProjectLH_LHQuickSlotCommonListData*)C_QuickSlot_CommonWindow->EquipSlot_Datas[i];
		UProjectLH_LHLoopListView* C_LHLoopListView_Common = C_QuickSlot_CommonWindow->C_LHLoopListView_Common;

		DWORD64 qwRetData[5];
		getQuickSlotCommonList((DWORD64)C_LHLoopListView_Common->UnknownData00, (DWORD64)qwRetData, (DWORD64)&commonList);
		if (!qwRetData[0])
			continue;

		UProjectLH_LHWidget_QuickSlot_CommonList* quickSlotCommonList = (UProjectLH_LHWidget_QuickSlot_CommonList*)*(DWORD64*)(qwRetData[0] + OFFSET_QUICKSLOTCOMMONLIST);
		if (!quickSlotCommonList)
			continue;

		for (int j = 0; j < quickSlotCommonList->C_SlotArray.Num(); j++)
		{
			UProjectLH_LHWidget_QuickSlot_Common* slot = quickSlotCommonList->C_SlotArray[j];
			if (!slot)
				continue;

			UProjectLH_LHWidget_InventoryItem_Container* C_InventoryItem_Container = slot->C_InventoryItem_Container;
			if (!C_InventoryItem_Container || !C_InventoryItem_Container->CurrentItem)
				continue;

			ITEMSLOTINFO slotInfo;
			slotInfo.qwItemSlotInfo = (DWORD64)slot->UnknownData00 + OFFSET_QUICKSLOTINFO;
			slotInfo.bIsAuto = *(char*)(slotInfo.qwItemSlotInfo + OFFSET_QUICKSLOTAUTOSTATE);

			slotInfo.nSlotIndex = (i + 1) * 10 + (j + 1);
			slotInfo.quickSlotCommon = quickSlotCommonList->C_SlotArray[j];
			slotInfo.dwItem = GetItemInfo(dwAddress, (DWORD64)C_InventoryItem_Container->CurrentItem);

			if (g_nItemSlotCount < MAX_ITEMSLOT)
				g_pItemSlotInfo[g_nItemSlotCount++] = slotInfo;
		}
	}
}


SKILLDETAIL GetSkillInfoData(DWORD* dwAddress, DWORD dwSkillID)
{
	SKILLDETAIL skillInfo;
	memset(&skillInfo, 0, sizeof(SKILLDETAIL));

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!dwSkillID || !qwQuestTableData)
		return skillInfo;

	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwSkillParam[5];
	qwSkillParam[0] = 0;
	qwSkillParam[1] = 15;

	initString((DWORD64)qwSkillParam, 0);

	memcpy((void*)qwSkillParam[0], L"SkillTable.tbl", 30);

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64	qwSkilTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwSkillParam);

	if (!qwSkilTable)
		return skillInfo;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	UCommonSource_SkillInfoRecord* qwSkillInfo = (UCommonSource_SkillInfoRecord*)getQuestInfo(*(DWORD64*)(qwSkilTable + OFFSET_QUESTINFO), dwSkillID);
	if (!qwSkillInfo)
		return skillInfo;

	_callFunc4 getGameString = (_callFunc4)PATCHADDR(dwAddress[ADDR_GETGAMESTRING], dwAddress[0]);

	DWORD64	qwSkillName[3];
	getGameString(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwSkillName, qwSkillInfo->NameCode, 0);

	swprintf(skillInfo.szName, L"%s", (WCHAR*)qwSkillName[0]);

	//FreeGarbageMemory(dwAddress, qwSkillName[0]);
	FreeGarbageMemory(qwSkillName[0]);

	_callFunc2 getSkillInfoRes = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSKILLINFO], dwAddress[0]);
	skillInfo.SkillRecord = (UCommonSource_PlayerSkillRecord*)getSkillInfoRes(qwSkilTable, dwSkillID);

	skillInfo.dwPrevSkillID = qwSkillInfo->PrevSkillIndex;
	return skillInfo;
}


void UpdateSkillSlotInfo(DWORD* dwAddress)
{
	g_nSkillSlotCount = 0;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_QuickSlotWindow* C_QuickSlotWindow = uiInGame->C_QuickSlotWindow;
	if (!C_QuickSlotWindow)
		return;

	for (int i = 0; i < C_QuickSlotWindow->QuickSlot_SkillDatas.Num(); i++)
	{
		UProjectLH_LHQuickSlotSkillListData* commonList = (UProjectLH_LHQuickSlotSkillListData*)C_QuickSlotWindow->QuickSlot_SkillDatas[i];
		UProjectLH_LHLoopListView* C_LHLoopListView_Common = C_QuickSlotWindow->C_LHLoopListView_Skill;

		DWORD64 qwRetData[5];

		_callFunc3 getQuickSlotCommonList = (_callFunc3)PATCHADDR(dwAddress[ADDR_GETQUICKSLOTCOMMONLIST], dwAddress[0]);
		getQuickSlotCommonList((DWORD64)C_LHLoopListView_Common->UnknownData00, (DWORD64)qwRetData, (DWORD64)&commonList);
		if (!qwRetData[0])
			continue;

		UProjectLH_LHWidget_QuickSlot_SkillList* quickSlotSkillList = (UProjectLH_LHWidget_QuickSlot_SkillList*)*(DWORD64*)(qwRetData[0] + OFFSET_QUICKSLOTCOMMONLIST);
		if (!quickSlotSkillList)
			continue;

		for (int j = 0; j < quickSlotSkillList->C_SlotArray.Num(); j++)
		{
			UProjectLH_LHWidget_QuickSlot_Skill* slot = quickSlotSkillList->C_SlotArray[j];
			if (!slot)
				continue;

			DWORD64	qwSlotInfo = (DWORD64)slot->UnknownData00 + OFFSET_QUICKSLOTINFO;
			if (!qwSlotInfo)
				continue;

			SKILLSLOTINFO quickSlotInfo;

			quickSlotInfo.dwSkillID = *(DWORD*)(qwSlotInfo + OFFSET_QUICKSLOTSKILLID);
			if (!quickSlotInfo.dwSkillID)
				continue;

			quickSlotInfo.bAutoState = *(char*)(qwSlotInfo + OFFSET_QUICKSLOTAUTOSTATE);
			quickSlotInfo.qwSkillInfo = qwSlotInfo;
			quickSlotInfo.dwDetailInfo = GetSkillInfoData(dwAddress, quickSlotInfo.dwSkillID);

			if (g_nSkillSlotCount < MAX_SKILLSLOT)
				g_pSkillSlotInfo[g_nSkillSlotCount++] = quickSlotInfo;
		}
	}
}


BOOL ChangeQuickSlot(DWORD* dwAddress, DWORD64  qwSlotInfo)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return FALSE;

	UProjectLH_LHCharacterMgr* objCharacterMgr = objGameInstance->CharacterMgr;
	if (!objCharacterMgr)
		return FALSE;

	DWORD64	qwSetQuickSlotInfoData[10];
	memcpy((void*)qwSetQuickSlotInfoData, (void*)qwSlotInfo, 0x20);

	*(char*)((DWORD64)qwSetQuickSlotInfoData + OFFSET_QUICKSLOTAUTOSTATE) = *(char*)(qwSlotInfo + OFFSET_QUICKSLOTAUTOSTATE) > 0 ? 0 : 1;

	_callFunc2 changeQuickSlot = (_callFunc2)PATCHADDR(dwAddress[ADDR_CHANGEQUICKSLOTSTATE], dwAddress[0]);
	changeQuickSlot((DWORD64)objCharacterMgr->QuickSlotMgr, (DWORD64)qwSetQuickSlotInfoData);
	return TRUE;
}



BOOL OnAutoSkillSlot(DWORD* dwAddress)
{
	BOOL bPaladinJin = FALSE;
	if (g_pCharInfo.nClassType == 43)			// 팔라딘인 경우
	{
		for (int i = 0; i < g_nSkillSlotCount; i++)
		{
			if (!g_pSkillSlotInfo[i].dwSkillID)
				continue;

			if (wcsstr(g_pSkillSlotInfo[i].dwDetailInfo.szName, L"의 진") && g_pSkillSlotInfo[i].bAutoState)
			{
				bPaladinJin = TRUE;
				break;
			}
		}
	}

	for (int i = 0; i < g_nSkillSlotCount; i++)
	{
		if (!g_pSkillSlotInfo[i].dwSkillID || g_pSkillSlotInfo[i].bAutoState)
			continue;

		if (g_pCharInfo.nClassType == 43 && wcsstr(g_pSkillSlotInfo[i].dwDetailInfo.szName, L"의 진") && bPaladinJin)
			continue;

		if (wcsstr(g_pSkillSlotInfo[i].dwDetailInfo.szName, L"차가운 기운"))
			continue;

		if (ChangeQuickSlot(dwAddress, g_pSkillSlotInfo[i].qwSkillInfo))
			return TRUE;
	}

	return FALSE;
}


BOOL OnAutoBuffSlot(DWORD* dwAddress)
{
	for (int i = 0; i < g_nItemSlotCount; i++)
	{
		if (g_pItemSlotInfo[i].bIsAuto)
			continue;

		if (!wcscmp(g_pItemSlotInfo[i].dwItem.szName, L"순록 스테이크 (귀속)") ||
			!wcscmp(g_pItemSlotInfo[i].dwItem.szName, L"프라낭 연어 (귀속)") ||
			!wcscmp(g_pItemSlotInfo[i].dwItem.szName, L"벌꿀술 (귀속)") ||
			!wcscmp(g_pItemSlotInfo[i].dwItem.szName, L"사리풀 (귀속)"))
		{
			SetItemSlotState(dwAddress, g_pItemSlotInfo[i].qwItemSlotInfo);
			return TRUE;
		}
	}

	return FALSE;
}


BOOL OnCloseInven(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (uiInven && uiInven->IsVisible())
	{
		uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseNpcShop(DWORD* dwAddress)
{
	UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
	if (!uiNPCShop)
		return FALSE;

	uiNPCShop->C_Widget_Topmenu->OnTapExitBtn();
	return TRUE;
}


void UpdateAvatarInfo(DWORD* dwAddress)
{
	g_nAvatarCount = 0;

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return;

	UProjectLH_LHCharacterMgr* CharacterMgr = pInstance->CharacterMgr;
	if (!CharacterMgr)
		return;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return;

	int nTotalCount = *(int*)((BYTE*)&InventoryMgr->AvatarMap + 0x08);
	DWORD64 qwAddr = *(DWORD64*)((BYTE*)&InventoryMgr->AvatarMap + 0x00);

	g_pCharInfo.dwAvatarID = InventoryMgr->EquipAvatarIndex;
	for (int i = 0; i < nTotalCount; i++)
	{
		DWORD dwID = *(DWORD*)(qwAddr + i * OFFSET_AVATARINFO_SIZE + 0x00);
		int nCount = *(int*)(qwAddr + i * OFFSET_AVATARINFO_SIZE + 0x08);

		if (g_nAvatarCount < MAX_AVATAR)
		{
			int nResIndex = -1;
			for (int j = 0; j < MAX_AVATARRES; j++)
			{
				if (g_pAvatarRes[j].dwID == dwID)
				{
					nResIndex = j;
					break;
				}
			}

			if (nResIndex != -1)
			{
				g_pAvatarInfo[g_nAvatarCount].szName = g_pAvatarRes[nResIndex].szName;
				g_pAvatarInfo[g_nAvatarCount].dwID = dwID;
				g_pAvatarInfo[g_nAvatarCount].nCount = nCount - 1;
				g_pAvatarInfo[g_nAvatarCount].nGrade = g_pAvatarRes[nResIndex].nGrade;
				g_pAvatarInfo[g_nAvatarCount].nClass = g_pAvatarRes[nResIndex].nType;
				g_nAvatarCount++;
			}
		}
	}
}


BOOL IsRedDotTab(UProjectLH_LHTabList* tabList, DWORD  dwIdx)
{
	DWORD dwNum = tabList->EntryWidgetPool.ActiveWidgets.Num();
	if (dwIdx >= dwNum)
		return FALSE;

	UProjectLH_LHWidget_TabUserWidget* tabUserWidget = (UProjectLH_LHWidget_TabUserWidget*)tabList->EntryWidgetPool.ActiveWidgets[dwIdx];
	return tabUserWidget->C_Noti->IsVisible();
}


BOOL SelectTab(UProjectLH_LHTabList* tabList, DWORD  dwIdx)
{
	DWORD dwNum = tabList->EntryWidgetPool.ActiveWidgets.Num();
	if (dwIdx >= dwNum)
		return FALSE;

	if (*(DWORD*)((DWORD64)tabList + OFFSET_SELECTEDTAB) == dwIdx)
		return TRUE;

	UProjectLH_LHWidget_TabUserWidget* tabUserWidget = (UProjectLH_LHWidget_TabUserWidget*)tabList->EntryWidgetPool.ActiveWidgets[dwIdx];
	tabUserWidget->OnClicked_TapSlot();
	return FALSE;
}


BOOL IsExistCombineAvatar()
{
	if (!g_OtherSetting.bCombineAvatar)
		return FALSE;

	int	nCount[6] = { 0, 0, 0, 0, 0, 0 };

	for (int i = 0; i < g_nAvatarCount; i++)
	{
		if (g_pAvatarInfo[i].nCount <= 0)
			continue;

		int nGrade = g_pAvatarInfo[i].nGrade % 6;
		nCount[nGrade] += g_pAvatarInfo[i].nCount;
		if (nCount[nGrade] >= 4)
			return TRUE;
	}

	return FALSE;
}


BOOL IsExistCombineWeapon()
{
	if (!g_OtherSetting.bCombineWeapon)
		return FALSE;

	int	nCount[6] = { 0, 0, 0, 0, 0, 0 };

	for (int i = 0; i < g_nWeaponShapeCount; i++)
	{
		if (g_pWeaponShapeInfo[i].nCount <= 0)
			continue;

		int nGrade = g_pWeaponShapeInfo[i].nGrade % 6;
		nCount[nGrade] += g_pWeaponShapeInfo[i].nCount;
		if (nCount[nGrade] >= 4)
			return TRUE;
	}

	return FALSE;
}


int GetHighAvatarID()
{
	int nTempIndex = -1;
	for (int i = 0; i < MAX_AVATARRES; i++)
	{
		// 다른 클래스는 무시하자
		if (g_pAvatarRes[i].nType / 10 != g_pCharInfo.nClassType / 10)
			continue;

		// 현재 획득되었는가 확인하자
		int nIndex = -1;
		for (int j = 0; j < g_nAvatarCount; j++)
		{
			if (g_pAvatarRes[i].dwID == g_pAvatarInfo[j].dwID)
			{
				nIndex = j;
				break;
			}
		}

		if (nIndex == -1)
			continue;

		// 직업을 확인하자
		if (g_pCharInfo.nClassType % 10 != 1 && g_pAvatarRes[i].nType != g_pCharInfo.nClassType)
			continue;

		if (g_pCharInfo.nClassType % 10 == 1)
		{
			if (nTempIndex == -1)
				nTempIndex = nIndex;

			if (g_pAvatarRes[i].nType != g_pCharInfo.nClassType + 1 + g_bCreateCharClass)
				continue;
		}

		// 제일 좋은거 선택이 안되어있으면
		if (g_pCharInfo.dwAvatarID != g_pAvatarInfo[nIndex].dwID)
			return nIndex;
		else
			return -1;
	}

	return nTempIndex;
}


int GetHighWeaponID()
{
	for (int i = 0; i < MAX_WEAPONRES; i++)
	{
		// 클래스가 다른 경우 무시
		if (g_pWeaponRes[i].nType != g_pCharInfo.nClassType)
			continue;

		// 획득된것이 없으면 무시
		int nIndex = -1;
		for (int j = 0; j < g_nWeaponShapeCount; j++)
		{
			if (g_pWeaponShapeInfo[j].dwID == g_pWeaponRes[i].dwID)
			{
				nIndex = j;
				break;
			}
		}

		if (nIndex == -1)
			continue;

		if (g_pCharInfo.dwWeaponShapeID != g_pWeaponShapeInfo[nIndex].dwID)
			return nIndex;

		break;
	}

	return -1;
}


void OnGameWeaponShape(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bWaitHpVillage = TRUE;
		g_bExpandShop = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_WeaponSystem* pWeaponSystem = reinterpret_cast<UProjectLH_LHWidget_WeaponSystem*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_WeaponSystem::StaticClass()));
	if (!pWeaponSystem)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__WeaponShape);
		SetDelay(10);
	}
	else
	{
		UProjectLH_LHTabList* C_MainTabList = pWeaponSystem->C_MainTabList;

		// 합성할것이 있으면 합성을 진행하자
		if (IsExistCombineWeapon())
		{
			SetDelay(10);

			if (SelectTab(C_MainTabList, 1))
			{
				UProjectLH_LHWidget_WeaponShape_ComposeTab* C_WeaponShape_ComposeTab = pWeaponSystem->C_WeaponShape_ComposeTab;
				if (C_WeaponShape_ComposeTab)
				{
					if (g_nStepStatus == 0)
					{
						ShowStatus(0, 60177);			// L"합성할 재료들을 등록합니다");

						C_WeaponShape_ComposeTab->OnTapAuto();
						SetDelay(20);
					}
					else
					{
						ShowStatus(0, 60178);			// L"등록된 재료들을 합성합니다");

						C_WeaponShape_ComposeTab->OnTapCompose();
						SetDelay(30);
					}

					g_nStepStatus = (g_nStepStatus + 1) % 2;
				}
			}

			return;
		}

		// 현재 장착한것보다 높은 등급이 있으면 바꾸자
		int nIndex = GetHighWeaponID();
		if (nIndex != -1)
		{
			if (SelectTab(C_MainTabList, 0))
			{
				TArray<class UCommonSource_WeaponShapeInfoRecord*> WeaponShapeArray = pWeaponSystem->WeaponShapeArray;
				UProjectLH_LHScrollBox* C_AvatarScrollBox = pWeaponSystem->C_AvatarScrollBox;
				if (!C_AvatarScrollBox)
					return;

				DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_AvatarScrollBox->UnknownData00[0x18];
				int nCount = *(int*)&C_AvatarScrollBox->UnknownData00[0x20];
				for (int i = 0; i < nCount; i++)
				{
					UProjectLH_LHWidget_WeaponShape_Container* pItemContainer = (UProjectLH_LHWidget_WeaponShape_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
					if (!pItemContainer)
						continue;

					UCommonSource_WeaponShapeInfoRecord* CurrentRecord = (UCommonSource_WeaponShapeInfoRecord*)*(DWORD64*)&pItemContainer->UnknownData00[0x08];
					if (CurrentRecord->Index != g_pWeaponShapeInfo[nIndex].dwID)
						continue;

					if (CurrentRecord->Index != *(int*)((BYTE*)pWeaponSystem + OFFSET_WEAPON_SELECTID))
					{
						_callFunc2 funcSelect = (_callFunc2)PATCHADDR(dwAddress[ADDR_SELECT_WEAPONSHAPE], dwAddress[0]);
						funcSelect((DWORD64)pWeaponSystem->UnknownData00, (DWORD64)pItemContainer);
					}
					else
					{
						ShowStatus(1, 60390, g_pWeaponShapeInfo[nIndex].szName);
						pWeaponSystem->OnTapEquip();
					}

					break;
				}
			}

			SetDelay(10);
			return;
		}

		// 장착, 합성할것이 없으니 기존상태로 돌아가자
		UProjectLH_LHWidget_Topmenu* TopMenu = pWeaponSystem->C_Widget_Topmenu;
		if (TopMenu)
			TopMenu->OnTapExitBtn();

		ShowStatus(0, 60389);
		SetStatus(g_nPreStatus, 10);
	}
}


void OnGameAvatar(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_AvatarSystem* pAvataSystem = reinterpret_cast<UProjectLH_LHWidget_AvatarSystem*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_AvatarSystem::StaticClass()));

	// 전투중에는 아바타 변경할수 없으니까 오토 중지하자
	int nIndex = GetHighAvatarID();
	if (nIndex != -1 && g_pCharInfo.nAutoState != AUTO_NONE)
	{
		if (pAvataSystem)
		{
			UProjectLH_LHWidget_Topmenu* TopMenu = pAvataSystem->C_Widget_Topmenu;
			if (TopMenu)
				TopMenu->OnTapExitBtn();

			SetDelay(5);
			return;
		}

		AutoAttack(dwAddress);
		SetDelay(5);
		return;
	}

	if (!pAvataSystem)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Avatar);
		SetDelay(10);
	}
	else
	{
		UProjectLH_LHTabList* C_MainTabList = pAvataSystem->C_MainTabList;

		// 합성할것이 있으면 합성을 진행하자
		if (IsExistCombineAvatar())
		{
			SetDelay(10);

			if (SelectTab(C_MainTabList, 1))
			{
				UProjectLH_LHWidget_Avatar_ComposeTab* C_Avatar_ComposeTab = pAvataSystem->C_Avatar_ComposeTab;
				if (C_Avatar_ComposeTab)
				{
					if (g_nStepStatus == 0)
					{
						ShowStatus(0, 60177);			// L"합성할 재료들을 등록합니다");

						C_Avatar_ComposeTab->OnTapAuto();
						SetDelay(20);
					}
					else
					{
						ShowStatus(0, 60178);			// L"등록된 재료들을 합성합니다");

						C_Avatar_ComposeTab->OnTapCompose();
						SetDelay(30);
					}

					g_nStepStatus = (g_nStepStatus + 1) % 2;
				}
			}

			return;
		}

		// 현재 장착한것보다 높은 등급이 있으면 바꾸자

		if (nIndex != -1)
		{
			if (SelectTab(C_MainTabList, 0))
			{
				TArray<class UCommonSource_AvatarInfoRecord*>AvatarArray = pAvataSystem->AvatarArray;
				if (!AvatarArray.Num())
					return;

				UProjectLH_LHScrollBox* C_AvatarScrollBox = pAvataSystem->C_AvatarScrollBox;
				if (!C_AvatarScrollBox)
					return;

				DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_AvatarScrollBox->UnknownData00[0x18];
				int nExistCount = *(int*)&C_AvatarScrollBox->UnknownData00[0x20];

				UCommonSource_AvatarInfoRecord* pContainerSelected = (UCommonSource_AvatarInfoRecord*)*(DWORD64*)&pAvataSystem->UnknownData01[0x20];

				for (int i = 0; i < nExistCount; i++)
				{
					UProjectLH_LHWidget_Avatar_Container* pItemContainer = (UProjectLH_LHWidget_Avatar_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
					if (!pItemContainer)
						continue;

					UCommonSource_AvatarInfoRecord* CurrentRecord = pItemContainer->CurrentRecord;
					if (CurrentRecord->Index != g_pAvatarInfo[nIndex].dwID)
						continue;

					if (CurrentRecord != pContainerSelected)
						pAvataSystem->OnTapAvatarContainer(pItemContainer);
					else
					{
						ShowStatus(1, 60179, g_pAvatarInfo[nIndex].szName);			// L"아바타 \"%s\" 을(를) 장착합니다", 
						pAvataSystem->OnTapEquip();
					}

					break;
				}
			}

			SetDelay(10);
			return;
		}

		// 장착, 합성할것이 없으니 기존상태로 돌아가자
		UProjectLH_LHWidget_Topmenu* TopMenu = pAvataSystem->C_Widget_Topmenu;
		if (TopMenu)
			TopMenu->OnTapExitBtn();

		ShowStatus(0, 60180);			// L"아바타 합성 및 장착 을(를) 진행하였습니다");
		SetStatus(g_nPreStatus, 10);
	}
}


void UpdateVehicleInfo(DWORD* dwAddress)
{
	g_nVehicleCount = 0;

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return;

	UProjectLH_LHVehicleMgr* VehicleMgr = pInstance->VehicleMgr;
	if (!VehicleMgr)
		return;

	int nTotalCount = *(int*)((DWORD64)VehicleMgr + OFFSET_VEHICLE_TOTALCOUNT);

	DWORD64 qwAddr = *(DWORD64*)((DWORD64)VehicleMgr + OFFSET_VEHICLE_BASEADDR);
	if (!qwAddr)
		return;

	DWORD64 CurrentSum = *(DWORD64*)((DWORD64)VehicleMgr + OFFSET_CURRENTSUMINFO);
	if (CurrentSum)
	{
		g_pCharInfo.dwRidingID = *(DWORD*)(CurrentSum + 4);			//현재 착용한 탈것 ID
		g_pCharInfo.dwFlyingID = *(DWORD*)(CurrentSum + 8);			//현재 착용한 날탈 ID
	}

	for (int i = 0; i < nTotalCount; i++)
	{
		DWORD dwID = *(DWORD*)(qwAddr + (i * OFFSET_VEHICLE_ADDRSIZE) + 0x00);
		int nCount = *(int*)(qwAddr + (i * OFFSET_VEHICLE_ADDRSIZE) + 0x0C);

		if (g_nVehicleCount < MAX_VEHICLE)
		{
			int nResIndex = -1;
			for (int j = 0; j < MAX_VEHICLERES; j++)
			{
				if (g_pVehicleRes[j].dwID == dwID)
				{
					nResIndex = j;
					break;
				}
			}

			if (nResIndex != -1)
			{
				g_pVehicleInfo[g_nVehicleCount].szName = g_pVehicleRes[nResIndex].szName;
				g_pVehicleInfo[g_nVehicleCount].dwID = dwID;
				g_pVehicleInfo[g_nVehicleCount].nCount = nCount;
				g_pVehicleInfo[g_nVehicleCount].nGrade = g_pVehicleRes[nResIndex].nGrade;
				g_pVehicleInfo[g_nVehicleCount].bIsFly = g_pVehicleRes[nResIndex].bIsFly - 1;
				g_nVehicleCount++;
			}
		}
	}
}


void UpdateWeaponShapeInfo(DWORD* dwAddress)
{
	g_nWeaponShapeCount = 0;

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return;

	UProjectLH_LHCharacterMgr* CharacterMgr = pInstance->CharacterMgr;
	if (!CharacterMgr)
		return;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return;

	g_pCharInfo.dwWeaponShapeID = InventoryMgr->EquipWeaponShapeIndex;

	int nTotalCount = *(int*)((BYTE*)&InventoryMgr->WeaponShapeMap + 0x08);
	DWORD64 qwAddr = *(DWORD64*)((BYTE*)&InventoryMgr->WeaponShapeMap + 0x00);
	for (int i = 0; i < nTotalCount; i++)
	{
		DWORD dwID = *(DWORD*)(qwAddr + i * OFFSET_WEAPONSHAPE_SIZE + 0x00);
		int nCount = *(int*)(qwAddr + i * OFFSET_WEAPONSHAPE_SIZE + 0x08);

		if (g_nWeaponShapeCount < MAX_WEAPON)
		{
			int nResIndex = -1;
			for (int j = 0; j < MAX_WEAPONRES; j++)
			{
				if (g_pWeaponRes[j].dwID == dwID)
				{
					nResIndex = j;
					break;
				}
			}

			if (nResIndex != -1)
			{
				g_pWeaponShapeInfo[g_nWeaponShapeCount].szName = g_pWeaponRes[nResIndex].szName;
				g_pWeaponShapeInfo[g_nWeaponShapeCount].dwID = dwID;
				g_pWeaponShapeInfo[g_nWeaponShapeCount].nCount = nCount - 1;
				g_pWeaponShapeInfo[g_nWeaponShapeCount].nGrade = g_pWeaponRes[nResIndex].nGrade;
				g_pWeaponShapeInfo[g_nWeaponShapeCount].nClass = g_pWeaponRes[nResIndex].nType;
				g_nWeaponShapeCount++;
			}
		}
	}
}


BOOL IsExistCombineVehicle()
{
	if (!g_OtherSetting.bCombineRide)
		return FALSE;

	int	nCount[6] = { 0, 0, 0, 0, 0, 0 };

	for (int i = 0; i < g_nVehicleCount; i++)
	{
		if (g_pVehicleInfo[i].nCount <= 0)
			continue;

		int nGrade = g_pVehicleInfo[i].nGrade % 6;
		nCount[nGrade] += g_pVehicleInfo[i].nCount;
		if (nCount[nGrade] >= 4)
			return TRUE;
	}

	return FALSE;
}


int GetHighVehicleID(BOOL bIsFly,DWORD* dwAddress)
{
// 	DWORD g_pCharInfoRidingGrade = NULL;
// 	for (int i = 0; i < MAX_VEHICLERES; i++)
// 	{
// 		if (g_pVehicleRes[i].dwID == g_pCharInfo.dwRidingID)
// 		{
// 			g_pCharInfoRidingGrade = g_pVehicleRes[i].nGrade;
// 			break;
// 		}
// 	}

	for (int i = 0; i < MAX_VEHICLERES; i++)
	{
		// 같은 종류가 아니면 무시하자
		if (g_pVehicleRes[i].bIsFly - 1 != bIsFly)
			continue;

		int nIndex = -1;
		for (int j = 0; j < g_nVehicleCount; j++)
		{
			if (g_pVehicleInfo[j].dwID == g_pVehicleRes[i].dwID)
			{
				nIndex = j;
				break;
			}
		}

		if (nIndex == -1)
			continue;
		AJLog(L"g_pCharInfo_FlyingID = %p, g_pVehicleInfo.dwId = %p", g_pCharInfo.dwFlyingID, g_pVehicleInfo[nIndex].dwID);
		AJLog(L"g_pCharInfo_dwRidingID = %p, g_pVehicleInfo.dwId = %p", g_pCharInfo.dwRidingID, g_pVehicleInfo[nIndex].dwID);

		if (bIsFly && g_pCharInfo.dwFlyingID != g_pVehicleInfo[nIndex].dwID) {
			AJLog(L"g_pCharInfo_FlyingID = %p, g_pVehicleInfo.dwId = %p", g_pCharInfo.dwFlyingID, g_pVehicleInfo[nIndex].dwID);
			return nIndex;
		}
			

		if (!bIsFly && g_pCharInfo.dwRidingID != g_pVehicleInfo[nIndex].dwID) {
			AJLog(L"g_pCharInfo_dwRidingID = %p, g_pVehicleInfo.dwId = %p", g_pCharInfo.dwRidingID, g_pVehicleInfo[nIndex].dwID);
			return nIndex;
		}


		break;
	}

	return -1;
}



void OnGameVehicle(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_VehicleWindow* pVehicle = reinterpret_cast<UProjectLH_LHWidget_VehicleWindow*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_VehicleWindow::StaticClass()));
	if (!pVehicle)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Vehicle);
		SetDelay(10);
	}
	else
	{
		if (g_bOpenVehicle)
			g_bOpenVehicle = FALSE;

		UProjectLH_LHTabList* C_MainTabList = pVehicle->C_MainTabList;

		// 합성할것이 있으면 합성 먼저 처리하자
		if (IsExistCombineVehicle())
		{
			SetDelay(10);

			if (SelectTab(C_MainTabList, 1))
			{
				UProjectLH_LHWidget_VehicleCompose* pVehicleCompose = reinterpret_cast<UProjectLH_LHWidget_VehicleCompose*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_VehicleCompose::StaticClass()));
				if (pVehicleCompose)
				{
					if (g_nStepStatus == 0)
					{
						ShowStatus(0, 60177);			// L"합성할 재료들을 등록합니다");

						pVehicleCompose->OnClicked_Auto();
						SetDelay(20);
					}
					else
					{
						ShowStatus(0, 60178);			// L"등록된 재료들을 합성합니다");

						pVehicleCompose->OnClicked_Compose();
						SetDelay(30);
					}

					g_nStepStatus = (g_nStepStatus + 1) % 2;
				}
			}

			return;
		}

		// 탈것 상위 버젼 있으면 교체하자
		int nIndex = GetHighVehicleID(FALSE, dwAddress);
		if (nIndex == -1)
			nIndex = GetHighVehicleID(TRUE, dwAddress);

		if (nIndex != -1)
		{
			if (SelectTab(C_MainTabList, 0))
			{
				UProjectLH_LHScrollBox* C_AvatarScrollBox = pVehicle->C_ScrollBox_VehicleList;
				if (C_AvatarScrollBox)
				{
					DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_AvatarScrollBox->UnknownData00[0x18];
					DWORD64 dwCount = *(DWORD*)&C_AvatarScrollBox->UnknownData00[0x20];
					for (int i = 0; i < dwCount; i++)
					{
						UProjectLH_LHWidget_VehicleList_Container* pItemContainer = (UProjectLH_LHWidget_VehicleList_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
						if (!pItemContainer)
							continue;

						if (*(DWORD*)((BYTE*)&pItemContainer->UnknownData00[0x18]) == g_pVehicleInfo[nIndex].dwID)
						{
							pVehicle->OnClicked_InvenSlot(pItemContainer);
							pVehicle->OnClicked_VehicleEquip();

							if (g_pVehicleInfo[nIndex].bIsFly)
								ShowStatus(1, 60181, g_pVehicleInfo[nIndex].szName);			// L"탈것(공중) \"%s\" 을(를) 장착합니다", 
							else
								ShowStatus(1, 60182, g_pVehicleInfo[nIndex].szName);			// L"탈것(지상) \"%s\" 을(를) 장착합니다", 

							break;
						}
					}
				}
			}

			SetDelay(10);
			return;
		}

		// 처리가 다 끝낫으면 기존 상태로 돌아가자
		UProjectLH_LHWidget_Topmenu* TopMenu = pVehicle->C_Topmenu;
		if (TopMenu)
			TopMenu->OnTapExitBtn();

		ShowStatus(0, 60183);				// L"탈것 합성 및 장착 을(를) 진행하였습니다");

		if (g_nPreStatus == STATUS_VEHICLE)
		{
			g_nPreStatus = STATUS_DOAUTO;
		}
		SetStatus(g_nPreStatus, 10);
	}
}


BOOL GetTextFromTextBlock(UUMG_TextBlock* pParam, WCHAR* szBuffer)
{
	if (pParam && szBuffer && wcslen(WC(pParam->Text)))
	{
		swprintf_s(szBuffer, MAX_PATH, L"%s", WC(pParam->Text));
		return TRUE;
	}

	return FALSE;
}



BOOL OnMessageProc(DWORD* dwAddress)
{
	AProjectLH_LHPlayerController* playerController = GetPlayerController(dwAddress);
	if (!playerController)
		return FALSE;

	AProjectLH_LHHUD* LHHud = (AProjectLH_LHHUD*)playerController->MyHUD;
	if (!LHHud || LHHud->MsgBoxStack.Num() == 0)
		return FALSE;

	UProjectLH_LHWidget_MsgBoxBase* msgBoxBase = (UProjectLH_LHWidget_MsgBoxBase*)LHHud->MsgBoxStack[LHHud->MsgBoxStack.Num() - 1];
	if (!msgBoxBase)
		return FALSE;

	UProjectLH_LHWidget_MsgBoxBasic* msgBoxBasic = (UProjectLH_LHWidget_MsgBoxBasic*)LHHud->MsgBoxStack[LHHud->MsgBoxStack.Num() - 1];
	if (!msgBoxBasic)
		return FALSE;

	WCHAR* szMessage = WC(msgBoxBase->C_TextMessage->Text);

	if (!szMessage)
		return FALSE;

#ifdef _TEST_VERSION_

	AJLog(L"Message: %s", szMessage);

#endif // _TEST_VERSION_

	SetDelay(10);

	if (wcsstr(szMessage, L"던전에서 나가시겠습니까"))
	{
		if (IsInDungeon())
		{
			if (g_nDungeonReturnCount < 5)
				g_qwDungeonReturnTick[g_nDungeonReturnCount++] = g_dwTickCount;
			else
			{
				g_nDungeonReturnCount = 5;
				for (int i = 0; i < g_nDungeonReturnCount - 1; i++)
					g_qwDungeonReturnTick[i] = g_qwDungeonReturnTick[i + 1];
				g_qwDungeonReturnTick[g_nDungeonReturnCount - 1] = g_dwTickCount;
			}

			// 2분사이에 5번이상 던전에서 나가려는 경우
			if (g_nDungeonReturnCount >= 5 &&
				g_qwDungeonReturnTick[4] - g_qwDungeonReturnTick[0] <= 2 * 60 * 1000)
			{
				if (g_nMonsterCount > 0)
				{
					g_nDungeonReturnCount = 0;
					MovePos(dwAddress, g_pMonsterInfo[0].CurTransform.Translation);
				}
				else if (g_nPlayerCount > 0)
				{
					g_nDungeonReturnCount = 0;
					MovePos(dwAddress, g_pPlayerInfo[0].CurPos);
				}

				// 				ShowStatus(0, 60411);			// 2분사이에 5번이상 던전 귀환 실패
				// 				SetStatus(STATUS_CHARLOGOUT, 30);

				msgBoxBasic->OnTapLeft();
				return TRUE;
			}
		}

		ShowStatus(0, 60184);			// L"던전에서 퇴장하였습니다");
		msgBoxBasic->OnTapLeft();
		SetDelay(30);
	}
	else if (wcsstr(szMessage, L"마을로 귀환하시겠습니까"))
	{
		if (g_nVillageReturnCount < 5)
			g_qwVillageReturnTick[g_nVillageReturnCount++] = g_dwTickCount;
		else
		{
			g_nVillageReturnCount = 5;
			for (int i = 0; i < g_nVillageReturnCount - 1; i++)
				g_qwVillageReturnTick[i] = g_qwVillageReturnTick[i + 1];
			g_qwVillageReturnTick[g_nVillageReturnCount - 1] = g_dwTickCount;
		}

		// 2분사이에 5번이상 던전에서 나가려는 경우
		if (g_nVillageReturnCount >= 5 &&
			g_qwVillageReturnTick[4] - g_qwVillageReturnTick[0] <= 1 * 60 * 1000)
		{

			ShowStatus(0, 60411);			// 2분사이에 5번이상 귀환 실패
			SetStatus(STATUS_CHARLOGOUT, 30);

			msgBoxBasic->OnTapLeft();
			return TRUE;
		}

		g_bTreasureTeleport = FALSE;
		ShowStatus(0, 60185);			// L"마을로 귀환합니다");
		msgBoxBasic->OnTapLeft();
		SetDelay(30);
	}
	else if (wcsstr(szMessage, L"현재 네트워크 접속이 끊어졌습니다"))
	{
		if (g_HuntSetting.bReconnectStop)
		{
			if (g_nReconnectCount < 50)
				g_dwReconnectTime[g_nReconnectCount++] = g_dwTickCount;
			else
			{
				g_nReconnectCount = 50;
				for (int i = 0; i < 49; i++)
					g_dwReconnectTime[i] = g_dwReconnectTime[i + 1];

				g_dwReconnectTime[g_nReconnectCount - 1] = g_dwTickCount;
			}

			if (g_HuntSetting.nReconnectCount <= 1 || (g_nReconnectCount >= g_HuntSetting.nReconnectCount &&
				g_dwReconnectTime[g_nReconnectCount - 1] - g_dwReconnectTime[g_nReconnectCount - g_HuntSetting.nReconnectCount] <= g_HuntSetting.nReconnectTime * 60 * 1000))
			{
				ShowStatus(4, 60186, NULL, g_HuntSetting.nReconnectTime, g_HuntSetting.nReconnectCount);				// L"%d분사이 재접속이 %d회 이상이므로 게임 종료합니다", 
				TerminateProcess(GetCurrentProcess(), 0);
				return TRUE;
			}
		}
		else
			g_nReconnectCount = 0;

		ShowStatus(0, 60187);			// L"네트워크 접속이 끊어졌으므로 재접속합니다");
		msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"카카오 로그인 인증이 되지 않았습니다"))
	{
		ShowStatus(0, 60188);			// L"카카오 인증이 실패하여 게임을 종료합니다");
		TerminateProcess(GetCurrentProcess(), 0);
	}
	else if (wcsstr(szMessage, L"서버 점검이 현재") || wcsstr(szMessage, L"서버 임시 점검"))
	{
		ShowStatus(0, 60189);			// L"서버 점검중이므로 게임을 종료합니다");
		TerminateProcess(GetCurrentProcess(), 0);
	}
	else if (wcsstr(szMessage, L"다운로드를 바로 진행합니다"))
	{
		ShowStatus(0, 60190);			// L"게임 업데이트를 진행합니다");
		msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"캐릭터 선택 화면으로 이동하시겠습니까?") || wcsstr(szMessage, L"입장하시겠습니까") ||
		wcsstr(szMessage, L"모든 기록을 삭제하시겠습니까") || wcsstr(szMessage, L"편지를 모두 삭제하시겠습니까") ||
		wcsstr(szMessage, L"선택한 아이템을 판매하시겠습니까?") || wcsstr(szMessage, L"수락하지 않은 의뢰를 포기하고") ||
		wcsstr(szMessage, L"퀘스트를 수행하기 위해") || wcsstr(szMessage, L"퀘스트를 포기하시겠습니까?") ||
		wcsstr(szMessage, L"장시간 응답이 없어 서버와의") || wcsstr(szMessage, L"권장 전투력대비") || wcsstr(szMessage, L"발할라 대전에 참가") ||
		wcsstr(szMessage, L"정말로 초대하시겠습니까") || wcsstr(szMessage, L"파티 던전 입장 시간이 종료되어") || (wcsstr(szMessage, L"파티") && wcsstr(szMessage, L"참여")) ||
		wcsstr(szMessage, L"해당 아이템을 찾을 수 없습니다") || wcsstr(szMessage, L"마을로 귀환하여") || wcsstr(szMessage, L"모든 파티원이 준비 완료 상태") ||
		wcsstr(szMessage, L"장시간 응답이 없어 서버와의 연결이") || wcsstr(szMessage, L"해당 위치에서 탈출하시겠습니까?") || wcsstr(szMessage, L"부족하여 매칭이") ||
		wcsstr(szMessage, L"현재 선택한 난이도는") || wcsstr(szMessage, L"해당 아이템을 버리시겠습니까") /*|| wcsstr(szMessage, L"서버와의 연결이 끊어졌습니다")*/ ||
		wcsstr(szMessage, L"정말로 초대하시겠습니까?") || wcsstr(szMessage, L"아이템의 시세보다 너무 높은") || wcsstr(szMessage, L"던전에 입장하지 않는"))
	{
		msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"서버와의 연결이 끊어졌습니다"))
	{
		ShowStatus(0, 60386);
		TerminateProcess(GetCurrentProcess(), 0);
		SetDelay(10);
		return TRUE;
	}
	else if (wcsstr(szMessage, L"다른 기기에서"))
	{
		msgBoxBasic->OnTapLeft();
		msgBoxBasic->OnTapRight();
	}
	else if (wcsstr(szMessage, L"이동하시겠습니까?"))
	{
		if (g_dwMessageTick == 0)
			g_dwMessageTick = g_dwTickCount;
		else
		{
			BOOL bWorldMove = FALSE;
			for (int i = 0; i < MAX_WORLD; i++)
			{
				if (wcsstr(szMessage, g_szWorldName[i]))
				{
					bWorldMove = TRUE;
					break;
				}
			}

			if (bWorldMove)
				msgBoxBasic->OnTapRight();
			else
				msgBoxBasic->OnTapLeft();

			SetDelay(20);
		}
	}
	else if (wcsstr(szMessage, L"다운로드를 할수 없습니다"))
	{
		ShowStatus(0, 60191);			// L"네트워크 혹은 중복 업데이트로 인하여 다운로드 실패하였습니다");
		msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"랜덤 텔레포트를 사용"))
	{
		msgBoxBasic->OnTapLeft();

		if (g_nCurStatus != STATUS_RETURNVILLAGE)
			SetStatus(STATUS_RETURNVILLAGE);
	}
	else if (wcsstr(szMessage, L"현재 파티에서 탈퇴하시겠습니까?"))
	{
		msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"파티에서 탈퇴 시") && wcsstr(szMessage, L"던전에서 나가집니다"))
	{
		if (!g_bPartyDungeonOut && IsPartyDungeon())
			msgBoxBasic->OnTapRight();
		else
			msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"파티 던전 중간에 나갈 경우, 보상을 획득할 수 없으며"))
	{
		BOOL bPlayerAlive = FALSE;
		for (int i = 0; i < g_nPlayerCount; i++)
		{
			if (g_pPlayerInfo[i].nCurHp > 0)
			{
				bPlayerAlive = TRUE;
				break;
			}
		}

		if (!g_bPartyDungeonOut && bPlayerAlive)
			msgBoxBasic->OnTapRight();
		else
			msgBoxBasic->OnTapLeft();
	}
	else if (wcsstr(szMessage, L"파티에 초대하셨습니다"))
	{
		BOOL bAcept = TRUE;
		if (!g_HuntSetting.bPartyEnable || !g_HuntSetting.bPartyMember)
			bAcept = FALSE;
		else if (wcscmp(g_HuntSetting.szPartyMaster, L""))
		{
			WCHAR szMaster[MAX_NAME] = { 0, };
			swprintf_s(szMaster, MAX_NAME, L">%s<", g_HuntSetting.szPartyMaster);

			if (!wcsstr(szMessage, szMaster))
				bAcept = FALSE;
		}

		if (bAcept)
		{
			ShowStatus(0, 60299);						// 파티 초대 수락하였습니다
			msgBoxBasic->OnTapLeft();
		}
		else
			msgBoxBasic->OnTapRight();
	}
	else if (wcsstr(szMessage, L"미미르의 지혜가 최대 보유량을"))
	{
		g_nStepStatus = 0;
		g_nPostIndex = 1;

		msgBoxBasic->OnTapRight();
	}

	return TRUE;
}


UCommonSource_PlayerLevelRecord* GetPlayerLevelRecord(DWORD* dwAddress, int nLevel)
{
	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwQuestParam[5];
	qwQuestParam[0] = 0;
	qwQuestParam[1] = 0x10;

	initString((DWORD64)qwQuestParam, 0);
	memcpy((void*)qwQuestParam[0], L"PlayerTable.tbl", 30);

	DWORD64 qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);
	if (!qwQuestTable)
		return NULL;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	return (UCommonSource_PlayerLevelRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_GETPLAYERLEVERECORD), nLevel);
}


BOOL CanRecoverExp()
{
	if (g_OtherSetting.bRecoverFree)
	{
		if (g_nRecoverFreeCount < 0 || g_nRecoverFreeCount > 0)
			return TRUE;

		if (g_OtherSetting.bRecoverGold && g_pCharInfo.nGoods[0] >= 100000)
		{
			// 			UCommonSource_PlayerLevelRecord* pRecord = GetPlayerLevelRecord(g_pCharInfo.nLevel);
			// 			if (pRecord && g_pCharInfo.nGoods[0] >= pRecord->RestoreExpGold)
			// 				return TRUE;
		}
	}

	return FALSE;
}


BOOL IsExistRecoverExp(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return FALSE;

	UProjectLH_LHCharacterMgr* CharacterMgr = objGameInstance->CharacterMgr;
	if (!CharacterMgr)
		return FALSE;

	return CharacterMgr->IsPenaltyExist;
}


void OnGameRecoverExp(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ExpRecovery_Popup* pPopup = reinterpret_cast<UProjectLH_LHWidget_ExpRecovery_Popup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_ExpRecovery_Popup::StaticClass()));
	if (IsChaoStatus(STATUS_RECOVEREXP) || !IsExistRecoverExp(dwAddress) || !CanRecoverExp())
	{
	Recover_Finish:
		if (pPopup)
			pPopup->OnClickedClose();

		ShowStatus(0, 60192);			// L"경험치 복구가 끝났습니다");
		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (pPopup)										// 복구창 열린 상태면
	{
		WCHAR szMsg[MAX_NAME] = { 0, };
		GetTextFromTextBlock((UUMG_TextBlock*)pPopup->C_Text_FreeRecovery, szMsg);

		WCHAR* szEnd = wcsstr(szMsg, L"/");
		if (szEnd != NULL)							// 무료 복구 횟수 구하자
		{
			szMsg[szEnd - szMsg] = 0;
			int nFreeCount = max(_wtoi(szMsg), 0);

			if (nFreeCount != g_nRecoverFreeCount)
			{
				g_nRecoverFreeCount = nFreeCount;
				ShowStatus(2, 60193, NULL, g_nRecoverFreeCount);			//  L"무료 복구 횟수 갱신 (%d번 남음)",
			}
		}

		int nRecoverCount = *(int*)&pPopup->UnknownData00[0x08];
		if (nRecoverCount == 0)
			goto Recover_Finish;										// 복구할 경험치가 없으면

		int* nSelectIndex = (int*)&pPopup->UnknownData00[0x18];
		if (nSelectIndex[0] <= 0)			// 선택된 경험치가 없으면
		{
			UProjectLH_LHScrollBox* C_Scroll = pPopup->C_ScrollContents;
			if (C_Scroll)
			{
				DWORD64 qwMyScrollBoxItem = *(DWORD64*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM);
				if (qwMyScrollBoxItem)
				{
					int nListCount = *(int*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
					for (int i = 0; i < nListCount; i++)
					{
						UProjectLH_LHWidget_ExpRecovery_Container* pContainer = (UProjectLH_LHWidget_ExpRecovery_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
						if (!pContainer || !pContainer->IsVisible())
							continue;

						pPopup->OnSelectItem(pContainer);
						SetDelay(10);
						return;
					}
				}
			}

			PutChaoStatus(g_nCurStatus);
		}
		else										// 무료복구 가능하거나 골드 층분한 경우
		{
			if (g_nRecoverFreeCount > 0)
			{
				pPopup->OnClickedRecovery();
				nSelectIndex[0] = -1;
			}
			else if (g_OtherSetting.bRecoverGold && g_pCharInfo.nGoods[0] >= 100000)
			{
				// 				UCommonSource_PlayerLevelRecord* pRecord = GetPlayerLevelRecord(g_pCharInfo.nLevel);
				// 				if (pRecord && g_pCharInfo.nGoods[0] >= pRecord->RestoreExpGold)
				pPopup->OnClickedRecovery();
				nSelectIndex[0] = -1;
			}
			else
				goto Recover_Finish;
		}

		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_InGameCharacterInfo* C_CharacterInfo = uiInGame->C_CharacterInfo;
	if (!C_CharacterInfo)
		return;

	C_CharacterInfo->OnClicked_ExpRecovery();
	SetDelay(10);
}


BOOL OnUnPackItemPackage(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InventoryMultipleUseItem* inventoryMultipleUseItem = (UProjectLH_LHWidget_InventoryMultipleUseItem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InventoryMultipleUseItem));
	if (!inventoryMultipleUseItem || !inventoryMultipleUseItem->IsVisible())
		return FALSE;

	BOOL bMaxClick = TRUE;
	UProjectLH_LHItem* CurItem = inventoryMultipleUseItem->CurItem;
	if (CurItem)
	{
		WCHAR* szName = GetGameString(dwAddress, CurItem->ItemInfoRecord->NameCode);
		if (szName && (wcsstr(szName, L"대형 미미르의 샘물") || wcsstr(szName, L"중형 미미르의 샘물") || wcsstr(szName, L"소형 미미르의 샘물") ||
			wcsstr(szName, L"유일 장신구 선택 상자")))
			bMaxClick = FALSE;

		//FreeGarbageMemory(dwAddress, (DWORD64)szName);
		FreeGarbageMemory((DWORD64)szName);
	}

	if (bMaxClick && (*(DWORD*)((DWORD64)inventoryMultipleUseItem + OFFSET_UNPACKITEMCURCOUNT)) != (*(DWORD*)((DWORD64)inventoryMultipleUseItem + OFFSET_UNPACKITEMMAXCOUNT)))
		inventoryMultipleUseItem->OnTapMax();
	else
		inventoryMultipleUseItem->OnTapOK();

	return TRUE;
}


BOOL OnCloseTakeItemWidget(DWORD* dwAddress)
{
	UProjectLH_LHWidget_TakeItem* widget = (UProjectLH_LHWidget_TakeItem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_TakeItem));
	if (!widget || !widget->IsVisible())
		return FALSE;

	widget->PlayCloseAni();
	return TRUE;
}


BOOL IsMovingTargetPos(DWORD* dwAddress, FVector fPos)
{
	AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
	if (!qwPlayerController || !qwPlayerController->Pawn)
		return FALSE;

	AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
	if (!playerPlayable->AutoMoveComponent)
		return FALSE;

	FVector targetPos = playerPlayable->AutoMoveComponent->AutoMoveData.AutoMoveLocation;
	int nDist = (int)GETDIST2D(targetPos, fPos);
	if (nDist <= 100)
		return TRUE;

	return FALSE;
}


BOOL MovePos(DWORD* dwAddress, FVector fPos)
{
	//if (GetPlayerState() == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Moveable)
	{
		AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
		if (qwPlayerController && qwPlayerController->Pawn)
		{
			AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
			if (playerPlayable->AutoMoveComponent)
			{
				FVector targetPos = playerPlayable->AutoMoveComponent->AutoMoveData.AutoMoveLocation;
				if (playerPlayable->AutoMoveComponent->AutoMoveData.AutoMode == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None || targetPos.X != fPos.X || targetPos.Y != fPos.Y || targetPos.Z != fPos.Z)
				{
					_callFunc5 moveToPos = (_callFunc5)PATCHADDR(dwAddress[ADDR_MOVETOPOS], dwAddress[0]);
					moveToPos((DWORD64)qwPlayerController->Pawn, 3, (DWORD64)&fPos, 0, 0);
					return TRUE;
				}
			}
		}
	}

	return FALSE;
}


void AutoAttack(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
		uiInGame->OnTapAuto();
}


void UpdateNpcSlotInfo(DWORD* dwAddress)
{
	g_nNpcSlotCount = 0;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_QuickSlotWindow* C_QuickSlotWindow = uiInGame->C_QuickSlotWindow;
	if (!C_QuickSlotWindow)
		return;

	_callFunc3 getQuickSlotCommonList = (_callFunc3)PATCHADDR(dwAddress[ADDR_GETQUICKSLOTCOMMONLIST], dwAddress[0]);
	for (int i = 0; i < C_QuickSlotWindow->QuickSlot_NpcDatas.Num(); i++)
	{
		UProjectLH_LHQuickSlotSkillListData* commonList = (UProjectLH_LHQuickSlotSkillListData*)C_QuickSlotWindow->QuickSlot_NpcDatas[i];
		UProjectLH_LHLoopListView* C_LHLoopListView_Common = C_QuickSlotWindow->C_LHLoopListView_Npc;

		DWORD64 qwRetData[5];
		getQuickSlotCommonList((DWORD64)C_LHLoopListView_Common->UnknownData00, (DWORD64)qwRetData, (DWORD64)&commonList);
		if (!qwRetData[0])
			continue;

		UProjectLH_LHWidget_QuickSlot_NpcList* quickSlotSkillList = (UProjectLH_LHWidget_QuickSlot_NpcList*)*(DWORD64*)(qwRetData[0] + OFFSET_QUICKSLOTCOMMONLIST);
		if (!quickSlotSkillList)
			continue;

		for (int j = 0; j < quickSlotSkillList->C_QuickSlotArray.Num(); j++)
		{
			UProjectLH_LHWidget_QuickSlot_Npc* slot = quickSlotSkillList->C_QuickSlotArray[j];
			if (!slot)
				continue;

			if (g_nNpcSlotCount < MAX_NPCSLOT)
			{
				g_pNpcSlotInfo[g_nNpcSlotCount].slot = slot;
				swprintf(g_pNpcSlotInfo[g_nNpcSlotCount].szName, L"%s", WC(slot->C_Text_NpcFunc->Text));
				g_nNpcSlotCount++;

			}
		}
	}
}


void UpdateSellListInfo(DWORD* dwAddress, UProjectLH_LHWidget_NPCShop* uiNPCShop)
{
	g_nSellListCount = 0;

	DWORD64 qwMyItemHScrollBox = (DWORD64)uiNPCShop->C_MyItemLHScrollBox;
	if (!qwMyItemHScrollBox)
		return;

	TArray<class UObject*>* sellList = (TArray<class UObject*>*)((DWORD64)uiNPCShop + OFFSET_SELLITEMLIST);

	int nCount = *(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	DWORD64	qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (*(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY) == -1)
		return;

	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_InventoryItem_Container* qwItemContainer = (UProjectLH_LHWidget_InventoryItem_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer || !qwItemContainer->CurrentItem)
			continue;

		if (g_nSellListCount < MAX_INVEN)
		{
			g_pSellListInfo[g_nSellListCount].ItemContainer = qwItemContainer;
			g_pSellListInfo[g_nSellListCount].dwItemInfo = GetItemInfo(dwAddress, (DWORD64)qwItemContainer->CurrentItem);
			g_pSellListInfo[g_nSellListCount].bSelected = FALSE;

			for (int j = 0; j < min(i + 1, sellList->Num()); j++)
			{
				UProjectLH_LHItem* qwSellItem = (UProjectLH_LHItem*)*(DWORD64*)(*(DWORD64*)sellList + 8 * j);
				if (qwSellItem == qwItemContainer->CurrentItem)
				{
					g_pSellListInfo[g_nSellListCount].bSelected = TRUE;
					break;
				}
			}

			g_nSellListCount++;
		}
	}
}


BOOL IsSellItem(INVENINFO dwItemInfo)
{
	if (dwItemInfo.bLocked || dwItemInfo.bEquiped /*|| dwItemInfo.bLimitDate*/)		// 잠금된 상태면 무시
		return FALSE;
	// 세부 설정이 되어있나 체크하자
	int nDetailIndex = GetItemDetailIndex(dwItemInfo);
	if (nDetailIndex != -1)								// 세부 설정에 판매로 설정되어있으면 팔자
	{
		if (g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Sell)
			return TRUE;
	}
	else if (dwItemInfo.DetailInfo->ItemGrade < 6)		// 세부 설정 없으면 일괄설정 적용하자
	{
		if (g_pItemDefault[dwItemInfo.DetailInfo->ItemGrade][dwItemInfo.nItemType] == ItemMode_Sell)
			return TRUE;
	}

	return FALSE;
}


void UpdateBuyListInfo(DWORD* dwAddress, UProjectLH_LHWidget_NPCShop* uiNPCShop)
{
	g_nBuyListCount = 0;

	int nCount = uiNPCShop->ProductContainerPool.ActiveUIs.Num();
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_Product_Container* productContainer = (UProjectLH_LHWidget_Product_Container*)uiNPCShop->ProductContainerPool.ActiveUIs[i];
		if (!productContainer)
			continue;

		UCommonSource_ShopItemInfoRecord* shopItemInfoRecord = (UCommonSource_ShopItemInfoRecord*)*(DWORD64*)((DWORD64)productContainer + OFFSET_SHOPITEMINFO);
		if (!shopItemInfoRecord)
			continue;

		UCommonSource_ItemInfoRecord* itemInfoRecord = (UCommonSource_ItemInfoRecord*)*(DWORD64*)((DWORD64)productContainer + OFFSET_SHOPITEINFORECORD);
		if (!itemInfoRecord)
			continue;

		if (g_nBuyListCount < MAX_BUYLIST)
		{
			g_pBuyListInfo[g_nBuyListCount].ProductContainer = productContainer;
			g_pBuyListInfo[g_nBuyListCount].szName = &itemInfoRecord->Name;
			g_pBuyListInfo[g_nBuyListCount].nLimitMaxCount = shopItemInfoRecord->Max;
			g_pBuyListInfo[g_nBuyListCount].nLimitBuyCount = *(int*)((DWORD64)productContainer + OFFSET_SHOPBUYTEDCOUNT);
			g_pBuyListInfo[g_nBuyListCount].nCount = shopItemInfoRecord->count;
			g_pBuyListInfo[g_nBuyListCount].nPrice = shopItemInfoRecord->Price;
			g_pBuyListInfo[g_nBuyListCount].nPriceType = shopItemInfoRecord->ShopPriceType;

			for (int j = 0; j < MAX_EXCHANGE; j++)
			{
				if (wcscmp(g_pExchangeRes[j].szName, g_pBuyListInfo[g_nBuyListCount].szName->c_str()))
					continue;

				g_pExchangeRes[j].nCurCount = g_pBuyListInfo[g_nBuyListCount].nLimitBuyCount;
				g_pExchangeRes[j].nPrice = g_pBuyListInfo[g_nBuyListCount].nPrice;
				g_pExchangeRes[j].nGoodsType = g_pBuyListInfo[g_nBuyListCount].nPriceType;
				break;
			}

			if (!g_OtherSetting.bBuyBigPotion || GetMainQuestNo() < 1301 || (!wcsstr(g_pBuyListInfo[g_nBuyListCount].szName->c_str(), L"소형 HP 회복 물약") &&
				!wcsstr(g_pBuyListInfo[g_nBuyListCount].szName->c_str(), L"중형 HP 회복 물약")))
				g_nBuyListCount++;
		}
	}
}


int GetBuyItemCount(BOOL bExchange, const WCHAR* szName)
{
	int nCount = 0;

	BOOL bBuyPotion = FALSE;
	if (wcsstr(szName, L"형 HP 회복 물약"))
		bBuyPotion = TRUE;

	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (bBuyPotion)
		{
			if (wcsstr(g_pInvenInfo[i].szName, L"형 HP 회복 물약"))
				nCount += g_pInvenInfo[i].nCount;
		}
		else if (wcsstr(g_pInvenInfo[i].szName, szName) == g_pInvenInfo[i].szName)
			nCount += g_pInvenInfo[i].nCount;
	}

	if (!bExchange)
	{
		// 물약 소지 개수가 넘은 경우
		if (bBuyPotion && nCount >= g_pCharInfo.nPotionLimit)
			return 0;

		int nNeedCount = 0;
		for (int i = 0; i < g_nBuyExpendCount; i++)
		{
			if (!g_pBuyExpendInfo[i].bEnable)
				continue;

			if (bBuyPotion && !wcsstr(g_pBuyExpendInfo[i].szName, L"HP 회복 물약"))
				continue;

			if (!bBuyPotion && wcsstr(g_pBuyExpendInfo[i].szName, szName) != g_pBuyExpendInfo[i].szName)
				continue;

			if (g_pBuyExpendInfo[i].nCurCount < nCount)
				continue;

			nNeedCount += g_pBuyExpendInfo[i].nMaxCount;
		}

		if (bBuyPotion && nNeedCount >= g_pCharInfo.nPotionLimit)
			nNeedCount = g_pCharInfo.nPotionLimit;

		if (nCount < nNeedCount)
			return nNeedCount - nCount;
	}
	else
	{
		// 우선 목록에 있는지 체크부터 하자
		int nExchangeIndex = -1;
		for (int i = 0; i < MAX_EXCHANGE; i++)
		{
			if (!wcscmp(g_pExchangeRes[i].szName, szName))
			{
				nExchangeIndex = i;
				break;
			}
			else if (wcsstr(szName, L"희귀 스킬 기술서") || wcsstr(szName, L"희귀 스킬 교본") || wcsstr(szName, L"영웅 스킬 기술서"))
			{
				if (wcsstr(szName, g_pExchangeRes[i].szName) == szName)
				{
					nExchangeIndex = i;
					break;
				}
			}
		}

		if (nExchangeIndex == -1)
			return 0;

		// 상점 구매 개수 제한 체크하자
		if (g_pExchangeRes[nExchangeIndex].nLimitCount != 0 && g_pExchangeRes[nExchangeIndex].nCurCount >= g_pExchangeRes[nExchangeIndex].nLimitCount)
			return 0;

		int nNeedCount = 0;
		for (int i = 0; i < g_nBuyExchangeCount; i++)
		{
			if (!g_pBuyExchangeInfo[i].bEnable)
				continue;

			if (wcsstr(szName, g_pBuyExchangeInfo[i].szName) != szName)
				continue;

			if (g_pBuyExchangeInfo[i].nCurCount < nCount)
				continue;

			nNeedCount += g_pBuyExchangeInfo[i].nMaxCount;
		}

		if (nCount < nNeedCount)
		{
			if (g_pExchangeRes[nExchangeIndex].nLimitCount != 0)
				return min(nNeedCount - nCount, g_pExchangeRes[nExchangeIndex].nLimitCount - g_pExchangeRes[nExchangeIndex].nCurCount);
			else
				return nNeedCount - nCount;
		}
	}

	return 0;
}


void OnGameExpendShop(DWORD* dwAddress, BOOL bExchange)
{
	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	// 소모품 상인은 제일 높은 마을로 가자
	if (!bExchange && g_pCharInfo.nMapType == MapType_Village)
	{
		int nVillageIndex = 0;
		if (GetMainQuestNo() >= 2301)
			nVillageIndex = 2;
		else if (GetMainQuestNo() >= 1301)
			nVillageIndex = 1;

		int nCurVillageIndex = 0;
		for (int i = 0; i < MAX_WORLD; i++)
		{
			if (!wcscmp(g_szWorldName[i], g_pCharInfo.szWorld))
			{
				nCurVillageIndex = i;
				break;
			}
		}

		if (nVillageIndex == 2 && nCurVillageIndex > nVillageIndex)
			nVillageIndex = nCurVillageIndex;

		if (wcscmp(g_pCharInfo.szRegion, g_szVillageName[nVillageIndex]))
		{
			g_qwGotoNpcTick = 0;
			TeleportMap(dwAddress, g_szWorldName[nVillageIndex], g_szVillageName[nVillageIndex]);
			return;
		}
	}

	UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
	if (!uiNPCShop || !uiNPCShop->IsVisible())					// 상점이 안열린 상태
	{
		g_bGotoNPCFail = 0;

		if (IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
			g_qwNpcChaoCount = 0;

		if (g_qwGotoNpcTick != 0 && g_dwTickCount >= g_qwGotoNpcTick + 2 * 60 * 1000 ||			// 2분이상 이동 못하는 경우
			(g_bCharFallDown == 0 && g_qwNpcChaoCount >= 5 && g_qwNpcChaoTick[4] - g_qwNpcChaoTick[0] < 1 * 60 * 1000))
		{
			int nRet = OnGameForceReturn(dwAddress);
			if (nRet != 0)
			{
				if (nRet == 1)
					ShowStatus(0, 60315);

				g_qwGotoNpcTick = 0;
				g_qwNpcChaoCount = 0;
			}

			SetDelay(10);
			return;
		}

		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		if (ReturnVillage(dwAddress) && !IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
		{
			if (g_qwGotoNpcTick == 0)
				g_qwGotoNpcTick = g_dwTickCount;

			if (bExchange)
			{
				ShowStatus(0, 60194);		// L"교환 상인에게 이동합니다");
				GoToNpc(dwAddress, L"교환 상인");
			}
			else
			{
				ShowStatus(0, 60195);		// L"소모품 상인에게 이동합니다");
				GoToNpc(dwAddress, L"소모품 상인");
			}

			if (g_qwNpcChaoCount < 5)
				g_qwNpcChaoTick[g_qwNpcChaoCount] = g_dwTickCount;
			g_qwNpcChaoCount++;
		}

		SetDelay(10);
		return;
	}

	if (g_bGotoNPC != 0)				// 바로 창문 여는 경우 정보 갱신이 안될수도 있다.
	{
		g_bGotoNPC = 0;
		SetDelay(10);
		return;
	}

	if (g_bGotoNPCFail != 0)			// NPC 이동 오류인 경우
	{
		PressKeyAlternate(VK_ESCAPE);
		SetDelay(10);
		return;
	}

	g_qwGotoNpcTick = 0;

	// 판매할 아이템들 처리하자
	UpdateSellListInfo(dwAddress, uiNPCShop);
	for (int i = 0; i < g_nSellListCount; i++)
	{
		if (g_pSellListInfo[i].bSelected)
			continue;

		if (IsSellItem(g_pSellListInfo[i].dwItemInfo))
		{
			ShowStatus(1, 60196, g_pSellListInfo[i].dwItemInfo.szName);				// L"아이템 \"%s\" 을(를) 선택합니다", 
			uiNPCShop->OnTapReturnThisContainer(g_pSellListInfo[i].ItemContainer);
			SetDelay(10);
			return;
		}
	}

	TArray<class UObject*>* sellList = (TArray<class UObject*>*)((DWORD64)uiNPCShop + OFFSET_SELLITEMLIST);
	if (sellList->Num() > 0)									// 판매할 아이템들 선택되었으면
	{
		ShowStatus(0, 60197);			// L"선택된 아이템들을 판매합니다");
		uiNPCShop->OnTapItemSale();
		SetDelay(10);
		return;
	}

	// 구매할 아이템들 처리하자
	UProjectLH_LHWidget_Purchase* uiPurchage = (UProjectLH_LHWidget_Purchase*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Purchase));
	_callFunc1 refreshPurchage = (_callFunc1)PATCHADDR(dwAddress[ADDR_REFRESHPURCHAGE], dwAddress[0]);

	UpdateBuyListInfo(dwAddress, uiNPCShop);
	for (int i = 0; i < g_nBuyListCount; i++)
	{															// 구매 제한 걸린 상태 무시
		if (g_pBuyListInfo[i].nLimitMaxCount != 0 && g_pBuyListInfo[i].nLimitBuyCount >= g_pBuyListInfo[i].nLimitMaxCount)
		{
			if (wcsstr(g_pBuyListInfo[i].szName->c_str(), L"은총의 순간 이동 주문서"))
				g_bShopItemOring[0] = TRUE;
			else if (wcsstr(g_pBuyListInfo[i].szName->c_str(), L"순간 이동 주문서"))
				g_bShopItemOring[1] = TRUE;

			continue;
		}

		if (g_pCharInfo.nGoods[g_pBuyListInfo[i].nPriceType % 6] < g_pBuyListInfo[i].nPrice)		// 가격이 부족한 경우 (Type 따지자)
			continue;

		int nCount = GetBuyItemCount(bExchange, g_pBuyListInfo[i].szName->c_str());					// 구매할 개수를 구하자
		if (nCount <= 0)
			continue;

		nCount /= g_pBuyListInfo[i].nCount;
		if (nCount == 0)
			nCount = 1;

		uiNPCShop->OnSelectShopItem((UProjectLH_LHWidget_Product_Container*)g_pBuyListInfo[i].ProductContainer);
		if (!uiPurchage || !uiPurchage->IsVisible())
		{
			SetDelay(10);
			return;
		}

		if (nCount > *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT))
			nCount = *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT);

		*(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGECOUNT) = nCount;
		refreshPurchage((DWORD64)uiPurchage);

		WCHAR szTmp[MAX_NAME] = { 0, };
		wcscpy(szTmp, g_pBuyListInfo[i].szName->c_str());
		ShowStatus(3, 60198, szTmp, nCount * g_pBuyListInfo[i].nCount);			// L"아이템 \"%s\"을(를) %d개 구매합니다", 

		uiPurchage->OnTapBuy();
		SetDelay(10);
		return;
	}

	// 창문을 종료하고 기존 상태로 돌아가자
	ShowStatus(0, 60199);			// L"상점 처리가 끝났습니다");
	uiNPCShop->C_Widget_Topmenu->OnTapExitBtn();

	g_dwPreQuestID = 0;
	g_bMoveHuntPos = FALSE;
	g_bMoveHuntSet = FALSE;
	g_dwNoMonsterTick = g_dwTickCount;
	SetStatus(g_nPreStatus, 10);
}


BOOL OpenMenuWindow(DWORD* dwAddress, FProjectLH_ProjectLH_EGameMenuType MenuID)
{
	if (OnCloseOpenWindow(dwAddress))
		return FALSE;

	UProjectLH_LHWidget_InGame* InGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!InGame)
		return FALSE;

	UProjectLH_LHWidget_InGameMenu_Container* InGameMenu = InGame->C_InGameMenu_Container;
	if (!InGameMenu)
		return FALSE;

	InGameMenu->OnInputGameMenu(MenuID);
	return TRUE;
}


int GetMainQuestNo()
{
	int nQuestNo = 0;
	for (int i = 0; i < MAX_MAINQUEST; i++)
	{
		if (g_pMainQuest[i].dwQuestID == g_pMainQuestInfo.dwQuestID)
		{
			nQuestNo = g_pMainQuest[i].nChapter * 100 + g_pMainQuest[i].nScene;
			break;
		}
	}

	return nQuestNo;
}


void SetItemSlotState(DWORD* dwAddress, DWORD64 qwSlotInfo)
{
	DWORD64	qwSetQuickSlotInfoData[10];

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHCharacterMgr* objCharacterMgr = objGameInstance->CharacterMgr;
	if (!objCharacterMgr)
		return;

	memcpy((void*)qwSetQuickSlotInfoData, (void*)qwSlotInfo, 0x20);
	*(char*)((DWORD64)qwSetQuickSlotInfoData + OFFSET_QUICKSLOTAUTOSTATE) = *(char*)(qwSlotInfo + OFFSET_QUICKSLOTAUTOSTATE) > 0 ? 0 : 1;

	_callFunc2 changeQuickSlot = (_callFunc2)PATCHADDR(dwAddress[ADDR_CHANGEITEMQUICKSLOTSTATE], dwAddress[0]);
	changeQuickSlot((DWORD64)objCharacterMgr->QuickSlotMgr, (DWORD64)qwSetQuickSlotInfoData);
}


BOOL IsChaoNpcLack()
{
	int nIndex = -1;
	for (int i = 0; i < MAX_WORLD; i++)
	{
		if (!wcscmp(g_pWorldMap[i].szName, g_pCharInfo.szWorld))
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex >= 0 && nIndex < 3)
	{
		for (int i = 0; i < 4; i++)
		{
			int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pVillageNpcInfo[nIndex][i].CurPos);
			if (nDist < 500.0f)			// 5미터안에 있으면서 NPC가 안보이면
			{
				if (GetNpcIndex(g_pVillageNpcInfo[nIndex][i].szName) == -1)
					return TRUE;
			}
		}
	}

	return FALSE;
}


void GoToNpc(DWORD* dwAddress, const WCHAR* szName)
{
	// 렉으로 인해 NPC가 없는 경우 캐릭선택하자
	if (IsChaoNpcLack())
	{
		ShowStatus(0, 60344);					// NPC가 없어 캐릭 재선택 진행합니다
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);

		return;
	}

	for (int i = 0; i < g_nNpcSlotCount; i++)
	{
		if (!wcscmp(g_pNpcSlotInfo[i].szName, szName))
		{
			g_bGotoNPC = 1;
			g_pNpcSlotInfo[i].slot->OnClicked_Slot();

			return;
		}
	}

	int nCurWorld = 0;
	for (int i = 0; i < MAX_WORLD; i++)
	{
		if (!wcscmp(g_szWorldName[i], g_pCharInfo.szWorld))
		{
			nCurWorld = i;
			break;
		}
	}

	if (nCurWorld < 3)
	{
		int nIndex = -1;
		for (int i = 0; i < 4; i++)
		{
			if (!wcscmp(g_pVillageNpcInfo[nCurWorld][i].szJob, szName))
			{
				nIndex = i;
				break;
			}
		}

		if (nIndex == -1)
			return;

		int nNpcIndex = GetNpcIndex(g_pVillageNpcInfo[nCurWorld][nIndex].szName);
		if (nNpcIndex != -1)
		{
			int nDist = (int)GETDIST3D(g_pNPCInfo[nNpcIndex].CurPos, g_pCharInfo.CurTransform.Translation);
			if (nDist < 200 && ClickInteraction(dwAddress, TRUE))
				return;

			MovePos(dwAddress, g_pNPCInfo[nNpcIndex].CurPos);
			return;
		}

		MovePos(dwAddress, g_pVillageNpcInfo[nCurWorld][nIndex].CurPos);
	}
}


FProjectLH_ProjectLH_EAutoMove GetAutoMoveMode(DWORD* dwAddress)
{
	if (g_pCharInfo.nCurHp <= 0)
		return FProjectLH_ProjectLH_EAutoMove::EAutoMove__None;

	AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
	if (!qwPlayerController || !qwPlayerController->Pawn)
		return FProjectLH_ProjectLH_EAutoMove::EAutoMove__None;

	AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
	if (!playerPlayable || !playerPlayable->AutoMoveComponent)
		return FProjectLH_ProjectLH_EAutoMove::EAutoMove__None;

	return playerPlayable->AutoMoveComponent->AutoMoveData.AutoMode;
}


BOOL IsMoving(FProjectLH_ProjectLH_EAutoMove nAutoMove)
{
	return g_pCharInfo.nMoveState == nAutoMove;
}


BOOL IsDeleteOrDecompose(int nIndex)
{
	if (g_pInvenInfo[nIndex].bLocked || g_pInvenInfo[nIndex].bEquiped)
		return FALSE;

	// 장비인 경우
	if (g_pInvenInfo[nIndex].DetailInfo->ItemCategory > 0 && g_pInvenInfo[nIndex].DetailInfo->ItemCategory < 5)
	{
		// 거래소 자동 분해인 경우
		if (g_OtherSetting.bTradeDissolve)
		{
			for (int i = 0; i < g_nTradeDissolveCount; i++)
			{
				if (!wcscmp(g_pTradeDissolveItem[i].szName, g_pInvenInfo[nIndex].szName))
					return TRUE;
			}
		}

		// 해체를 하지 않으면 무시
		if (!g_OtherSetting.bDissolveItem)
			return FALSE;

		// 장비 등급
		if (!g_OtherSetting.bDissolveGrade[0] && g_pInvenInfo[nIndex].DetailInfo->ItemGrade == 0)
			return FALSE;

		if (!g_OtherSetting.bDissolveGrade[1] && g_pInvenInfo[nIndex].DetailInfo->ItemGrade == 1)
			return FALSE;

		if (!g_OtherSetting.bDissolveGrade[2] && g_pInvenInfo[nIndex].DetailInfo->ItemGrade == 2)
			return FALSE;

		if (!g_OtherSetting.bDissolveGrade[3] && g_pInvenInfo[nIndex].DetailInfo->ItemGrade == 3)
			return FALSE;

		if (g_pInvenInfo[nIndex].DetailInfo->ItemGrade >= 4)
			return FALSE;

		// 강화 장비
		if (!g_OtherSetting.bDissolveEnchant && g_pInvenInfo[nIndex].nEnchant > 0)
			return FALSE;

		// 세공 장비
		if (!g_OtherSetting.bDissolveManufacture && g_pInvenInfo[nIndex].nSegongCount > 0)
			return FALSE;

		// 귀속 아이템
		if (!g_OtherSetting.bDissolveBelong && wcsstr(g_pInvenInfo[nIndex].szName, L"귀속"))
			return FALSE;

		// 비귀속 아이템
		if (!g_OtherSetting.bDissolveNotBelong && !wcsstr(g_pInvenInfo[nIndex].szName, L"귀속"))
			return FALSE;
	}

	// 	if (g_pInvenInfo[nIndex].DetailInfo->ItemDestroyType == 3)
	// 		return FALSE;

	int nDetailIndex = GetItemDetailIndex(g_pInvenInfo[nIndex]);
	if (nDetailIndex != -1)
	{
		if (g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Decompose || g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Delete)
			return TRUE;
	}
	else if (g_pInvenInfo[nIndex].DetailInfo->ItemGrade < 6)
	{
		if (g_pItemDefault[g_pInvenInfo[nIndex].DetailInfo->ItemGrade][g_pInvenInfo[nIndex].nItemType] == ItemMode_Decompose ||
			g_pItemDefault[g_pInvenInfo[nIndex].DetailInfo->ItemGrade][g_pInvenInfo[nIndex].nItemType] == ItemMode_Delete)
			return TRUE;
	}

	return FALSE;
}


DWORD64 GetSelectInvenItem(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (!uiInven || !uiInven->IsVisible())
		return 0;

	UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
	if (!uiItemInfo || !uiItemInfo->IsVisible())
		return 0;

	return (DWORD64)uiItemInfo->CurrentItem;
}


void SelectInvenItem(DWORD* dwAddress, int nIndex)
{
	DWORD64 dwInvenRcx = GetWidget(dwAddress, OFFSET_INVENWIDGETID);
	if (!dwInvenRcx || nIndex < 0)
		return;

	UProjectLH_LHWidget_Inventory* widgetInventory = (UProjectLH_LHWidget_Inventory*)dwInvenRcx;
	UProjectLH_LHItem* iTem = (UProjectLH_LHItem*)g_pInvenInfo[nIndex].qwItemAddr;

	widgetInventory->OnTapInventoryItem(iTem);
}


BOOL IsBuffExist(const WCHAR* szName)
{
	for (int i = 0; i < g_nBuffCount; i++)
	{
		if (!wcscmp(g_pBuffInfo[i].szName, szName))
			return TRUE;
	}

	return FALSE;
}


BOOL CanGetMimirPoint(DWORD* dwAddress, int nMimirPoint)
{
	DWORD64 qwGameInstance = *(DWORD64*)PATCHADDR(dwAddress[ADDR_LHGameInstance], dwAddress[0]);
	if (qwGameInstance)
	{
		_callFunc2 funcCheck = (_callFunc2)(PATCHADDR(dwAddress[ADDR_CHECKMIMIRPOINT], dwAddress[0]));
		if ((BYTE)funcCheck(*(DWORD64*)(qwGameInstance + OFFSET_LHCharacterMgr), nMimirPoint) == 0)
			return TRUE;
	}

	return FALSE;
}


BOOL IsUsableItem(DWORD* dwAddress, int nIndex)
{
	if (g_pCharInfo.nLevel < g_pInvenInfo[nIndex].nNeedLevel)
		return FALSE;

	if (g_pInvenInfo[nIndex].bLocked || g_pInvenInfo[nIndex].bEquiped)
		return FALSE;

	if (IsBuffExist(g_pInvenInfo[nIndex].DetailInfo->Name.c_str()))
		return FALSE;

	if (!wcscmp(g_pInvenInfo[nIndex].szOrgName, L"소형 미미르의 샘물"))
	{
		if (!CanGetMimirPoint(dwAddress, 2000))
			return FALSE;

		if (g_OtherSetting.bMimirPotion)
			return TRUE;
	}

	if (!wcscmp(g_pInvenInfo[nIndex].szOrgName, L"중형 미미르의 샘물"))
	{
		if (!CanGetMimirPoint(dwAddress, 10000))
			return FALSE;

		if (g_OtherSetting.bMimirPotion)
			return TRUE;
	}

	if (!wcscmp(g_pInvenInfo[nIndex].szOrgName, L"대형 미미르의 샘물"))
	{
		if (!CanGetMimirPoint(dwAddress, 20000))
			return FALSE;

		if (g_OtherSetting.bMimirPotion)
			return TRUE;
	}

	if (wcsstr(g_pInvenInfo[nIndex].szName, L"마을 의뢰서 ("))
	{
		if (g_nVillageQuestCount >= 6)				// 의뢰 퀘스트는 6개까지 가능하다
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"7챕터 ") && GetMainQuestNo() < 6401)
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"6챕터 ") && GetMainQuestNo() < 5401)
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"5챕터 ") && GetMainQuestNo() < 4401)
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"4챕터 ") && GetMainQuestNo() < 3301)
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"3챕터 ") && GetMainQuestNo() < 2301)
			return FALSE;

		if (wcsstr(g_pInvenInfo[nIndex].szName, L"2챕터 ") && GetMainQuestNo() < 1301)
			return FALSE;
	}

	if (wcsstr(g_pInvenInfo[nIndex].szName, L"귀속)"))
	{
		if (wcsstr(g_pInvenInfo[nIndex].szName, L"음식 바구니") || wcsstr(g_pInvenInfo[nIndex].szName, L"강화석 보급 상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"무기 강화석 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"방어구 강화석 상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"주문서 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"골드 보급 상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"GM로키의 선물") || wcsstr(g_pInvenInfo[nIndex].szName, L"룬 상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"발할라의 전사 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"가름의 은상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"장비 수집가의 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"발두르의 은상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"축복의 세공석 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"아우둠라의 은상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"성장 지원 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"[이벤트] 희귀 등급 무기/방어구 상자") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"[이벤트] 설원의 무기 선택 상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"환영 꾸러미 (신규)") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"성장 지원상자") || wcsstr(g_pInvenInfo[nIndex].szName, L"이벤트용 유일 등급 장신구 선택 패키지"))
			return TRUE;

		if (GetMainQuestNo() >= 310 && GetNeedCashAccessory() != 0 && wcsstr(g_pInvenInfo[nIndex].szName, L"유일 장신구 선택 상자"))
			return TRUE;

		if ((wcsstr(g_pInvenInfo[nIndex].szName, L"아바타") || wcsstr(g_pInvenInfo[nIndex].szName, L"탈 것") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"룬") || wcsstr(g_pInvenInfo[nIndex].szName, L"무기 형상") ||
			wcsstr(g_pInvenInfo[nIndex].szName, L"[이벤트]"))
			&& wcsstr(g_pInvenInfo[nIndex].szName, L"소환권") && !wcsstr(g_pInvenInfo[nIndex].szName, L"선택권"))
			return TRUE;

		if (GetMainQuestNo() < 1600)
		{
			WCHAR* szClassName = GetGameClassName(g_pCharInfo.nClassType);
			if (szClassName != NULL && g_pMainQuest->dwQuestID != 0x27DB && wcsstr(g_pInvenInfo[nIndex].szName, L"스킬북") && wcsstr(g_pInvenInfo[nIndex].szName, szClassName))
				return TRUE;
		}
	}

	int nDetailIndex = GetItemDetailIndex(g_pInvenInfo[nIndex]);
	if (nDetailIndex != -1)
	{
		if (g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Use)
			return TRUE;
	}
	else if (g_pInvenInfo[nIndex].DetailInfo->ItemGrade < 6)
	{
		if (g_pItemDefault[g_pInvenInfo[nIndex].DetailInfo->ItemGrade][g_pInvenInfo[nIndex].nItemType] == ItemMode_Use)
			return TRUE;
	}

	return FALSE;
}


void AddItemQuickSlot(DWORD* dwAddress, int nMainSlot, int nSubSlot, int nIndex, UProjectLH_LHWidget_Inventory* uiInven)
{
	DWORD64 dwInvenRcx = GetWidget(dwAddress, OFFSET_INVENWIDGETID);
	if (!dwInvenRcx)
		return;

	UProjectLH_LHWidget_Inventory* widgetInventory = (UProjectLH_LHWidget_Inventory*)dwInvenRcx;
	if (!widgetInventory || !widgetInventory->IsVisible())
		return;

	UProjectLH_LHWidget_Inventory_QuickSlotWindow* C_QuickSlot_Window = widgetInventory->C_QuickSlot_Window;
	if (!C_QuickSlot_Window || !C_QuickSlot_Window->IsVisible())
	{
		widgetInventory->OnTouchedQuickSlotSetting();
		return;
	}

	if (*(DWORD64*)((DWORD64)C_QuickSlot_Window + OFFSET_INVENCURQUICKITEM) != g_pInvenInfo[nIndex].qwItemAddr ||
		!uiInven->C_ItemToolTip_Container)
		SelectInvenItem(dwAddress, nIndex);
	else
	{
		ShowStatus(5, 60200, g_pInvenInfo[nIndex].szName, nMainSlot + 1, nSubSlot + 1);			// L"아이템 \"%s\"을(를) 퀵슬롯 (%d, %d)번에 등록합니다", 
		C_QuickSlot_Window->OnClicked_Slot(nMainSlot, nSubSlot, (UProjectLH_LHItem*)g_pInvenInfo[nIndex].qwItemAddr);

		g_nQuickSlotIndex++;
	}
}


BOOL IsExistEquipItem(DWORD* dwAddress)
{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].DetailInfo->ReqClassType != 100 &&
			g_pInvenInfo[i].DetailInfo->ReqClassType != g_pCharInfo.nClassType &&
			g_pInvenInfo[i].DetailInfo->ReqClassType != (g_pCharInfo.nClassType / 10) * 10)
			continue;

		if (g_pInvenInfo[i].DetailInfo->ItemCategory > 0 && g_pInvenInfo[i].DetailInfo->ItemCategory < 5)
		{
			if (g_pInvenInfo[i].DetailInfo->ItemType == 6 && g_pCharInfo.nLevel < 25)									// 망토는 25레벨부터 장착가능하다
				continue;

			if (g_pInvenInfo[i].DetailInfo->ItemType == 23 && g_pCharInfo.nLevel < 70)									// 각반은 70레벨부터 장착가능하다
				continue;

			if (g_pInvenInfo[i].DetailInfo->ItemType == 28 && g_pCharInfo.nLevel < 75)									// 보조무기는 75레벨부터 장착가능하다
				continue;

			if (IsHigherItem(dwAddress, (UProjectLH_LHItem*)g_pInvenInfo[i].qwItemAddr))
				return TRUE;
		}
	}

	return FALSE;
}


BOOL AutoEquipItems(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (uiInven && uiInven->IsVisible() && IsExistEquipItem(dwAddress))
	{
		ShowStatus(0, 60201);			// L"자동 장착을 진행합니다");
		uiInven->OnTapAutoEquip();
		return TRUE;
	}

	return FALSE;
}


void OnGameInvenProc(DWORD* dwAddress)
{
	if (OnQuestFinish(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (g_nPreStatus != STATUS_RETURNVILLAGE && IsCharNeedReturn() && g_pCharInfo.nMapType != MapType_Village)
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (!uiInven || !uiInven->IsVisible())
	{
		g_nInvenIndex = 0;
		g_nTryInvenCount = 0;
		g_qwLastUseItemAddr = 0;

		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		SetDelay(10);
	}
	else
	{
		// 자동 장착할것이 있다면
		if (AutoEquipItems(dwAddress))
		{
			SetDelay(10);
			return;
		}

		DWORD64 qwSelectAddr = GetSelectInvenItem(dwAddress);

		// 아이템 분해
		UProjectLH_LHWidget_DecompositionItem* uiDecomposeItem = (UProjectLH_LHWidget_DecompositionItem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_DecompositionItem));
		if (uiDecomposeItem && uiDecomposeItem->IsVisible())
		{
			uiDecomposeItem->OnDismantleItemConfirm();
			SetDelay(10);
			return;
		}

		// 아이템 삭제
		UProjectLH_LHWidget_InventoryDeleteItem* inventoryDeleteItem = (UProjectLH_LHWidget_InventoryDeleteItem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InventoryDeleteItem));
		if (inventoryDeleteItem && inventoryDeleteItem->IsVisible())
		{
			inventoryDeleteItem->OnTapOK();
			SetDelay(10);
			return;
		}

		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (IsDeleteOrDecompose(i))
			{
				if (qwSelectAddr != g_pInvenInfo[i].qwItemAddr)
					SelectInvenItem(dwAddress, i);
				else
				{
					UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
					if (uiItemInfo)
					{
						if (g_pInvenInfo[i].DetailInfo->ItemCategory >= 1 && g_pInvenInfo[i].DetailInfo->ItemCategory <= 3)
							ShowStatus(1, 60202, g_pInvenInfo[i].szName);				// L"아이템 \"%s\" 을(를) 분해합니다", 
						else
							ShowStatus(1, 60203, g_pInvenInfo[i].szName);				// L"아이템 \"%s\" 을(를) 삭제합니다", 

						uiItemInfo->OnTapDelete();
					}
				}

				SetDelay(10);
				return;
			}
		}

		// 아이템 사용
		for (int i = g_nInvenIndex; i < g_nInvenCount; i++)
		{
			if (g_pCharInfo.nLevel < g_pInvenInfo[i].nNeedLevel)
				continue;

			// 퀘스트 진행중 스킬북 사용해야 하는 경우
			if (g_bUseSkillBook && wcsstr(g_pInvenInfo[i].szName, L"스킬북 - ") && wcsstr(g_pInvenInfo[i].szName, L" (캐릭터 귀속)"))
			{
				UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
				if (uiItemInfo && uiItemInfo->IsVisible() && (DWORD64)uiItemInfo->CurrentItem == g_pInvenInfo[i].qwItemAddr)
				{
					uiItemInfo->OnTapButton03();
					ShowStatus(1, 60204, g_pInvenInfo[i].szName);			// L"아이템 \"%s\" 을(를) 사용합니다", 
					SetDelay(10);
					return;
				}

				SelectInvenItem(dwAddress, i);
				SetDelay(10);
				return;
			}

			if (IsUsableItem(dwAddress, i))
			{
				UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
				if (uiItemInfo && uiItemInfo->IsVisible() && (DWORD64)uiItemInfo->CurrentItem == g_pInvenInfo[i].qwItemAddr)
				{
					uiItemInfo->OnTapButton03();
					ShowStatus(1, 60204, g_pInvenInfo[i].szName);			// L"아이템 \"%s\" 을(를) 사용합니다", 
					SetDelay(10);
					return;
				}

				if (qwSelectAddr == g_pInvenInfo[i].qwItemAddr)
				{
					if (g_qwLastUseItemAddr != g_pInvenInfo[i].qwItemAddr)
					{
						g_nTryInvenCount = 0;
						g_qwLastUseItemAddr = g_pInvenInfo[i].qwItemAddr;
					}
					else
					{
						g_nTryInvenCount++;
						if (g_nTryInvenCount >= 2)							// 2번이상 사용했는데도 실패한 경우 그다음부터 진행하자
						{
							g_nTryInvenCount = 0;
							g_nInvenIndex = i + 1;

							continue;
						}
					}
				}

				SelectInvenItem(dwAddress, i);
				SetDelay(10);
				return;
			}
		}

		g_bUseSkillBook = FALSE;

		// 퀵슬롯 등록
		for (int i = g_nQuickSlotIndex; i < g_nInvenCount; i++)
		{
			int nSlotIndex = -1;
			if (!wcscmp(g_pInvenInfo[i].szName, L"순록 스테이크 (귀속)"))
				nSlotIndex = 12;
			if (!wcscmp(g_pInvenInfo[i].szName, L"프라낭 연어 (귀속)"))
				nSlotIndex = 13;
			if (!wcscmp(g_pInvenInfo[i].szName, L"벌꿀술 (귀속)"))
				nSlotIndex = 14;
			if (!wcscmp(g_pInvenInfo[i].szName, L"사리풀 (귀속)"))
				nSlotIndex = 15;

			if (!wcscmp(g_pInvenInfo[i].szName, L"신속의 주문서 (귀속)"))
				nSlotIndex = 21;
			if (!wcscmp(g_pInvenInfo[i].szName, L"전투의 주문서 (귀속)"))
				nSlotIndex = 22;
			if (!wcscmp(g_pInvenInfo[i].szName, L"방어의 주문서 (귀속)"))
				nSlotIndex = 23;
			if (!wcscmp(g_pInvenInfo[i].szName, L"저항의 주문서 (귀속)"))
				nSlotIndex = 24;

			if (nSlotIndex == -1)
			{
				g_nQuickSlotIndex++;
				continue;
			}

			BOOL bExist = FALSE;
			for (int j = 0; j < g_nItemSlotCount; j++)
			{
				if (g_pItemSlotInfo[j].nSlotIndex != nSlotIndex)
					continue;

				if (!wcscmp(g_pItemSlotInfo[j].dwItem.szName, g_pInvenInfo[i].szName))
				{
					bExist = TRUE;
					break;
				}
			}

			if (bExist)
			{
				g_nQuickSlotIndex++;
				continue;
			}

			AddItemQuickSlot(dwAddress, nSlotIndex / 10 - 1, nSlotIndex % 10 - 1, i, uiInven);
			SetDelay(10);

			return;
		}

		// 처리할것이 없으므로 기존 상태로 돌아가자
		uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		SetStatus(g_nPreStatus, 10);
	}
}


int GetUsableSkillBookIndex()
{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (wcsstr(g_pInvenInfo[i].szName, L" (캐릭터 귀속)") && (wcsstr(g_pInvenInfo[i].szName, L"스킬북 - ") || wcsstr(g_pInvenInfo[i].szName, L"스킬북-")))
		{
			if (g_pCharInfo.nLevel < g_pInvenInfo[i].nNeedLevel)
				continue;

			if (g_pInvenInfo[i].DetailInfo->ReqClassType != g_pCharInfo.nClassType && g_pInvenInfo[i].DetailInfo->ReqClassType != (g_pCharInfo.nClassType / 10) * 10)
				continue;

			return i;
		}
	}

	return -1;
}



void OnGameSkillProc(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	// 스킬 창문 켜진 상태면 퀵슬롯 등록하자
	UProjectLH_LHWidget_InGameMenu_SkillWindow* uiSkillWindow = (UProjectLH_LHWidget_InGameMenu_SkillWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skill));
	if (uiSkillWindow && uiSkillWindow->IsVisible())
	{
		if (g_bGotoNPC != 0)
		{
			g_bGotoNPC = 0;
			SetDelay(10);
			return;
		}

		UpdateSkillInfo(dwAddress);

		UProjectLH_LHWidget_SkillEquipWindow* C_SkillEquipWindow = uiSkillWindow->C_SkillEquipFullSlotWindow;
		if (!C_SkillEquipWindow->IsVisible())
			uiSkillWindow->OnClicked_EquipSkillOpen();
		else
		{
			ShowStatus(0, 60205);			// L"퀵슬롯[스킬] 자동 등록을 진행합니다");

			C_SkillEquipWindow->OnClicked_AutoEquip();
			uiSkillWindow->C_Topmenu->OnTapExitBtn();

			for (int i = 0; i < g_nSkillCount; i++)
			{
				if (!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"용맹의 칼날") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"밀쳐내기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"흡수 강타") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"화염구") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"출혈 강타"))
					g_bSkillCheck[0] = 1;

				if (!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"둔화의 방패") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"용맹의 심판") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"지면 강타") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"속박 화살") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"인장 폭발") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"매 날리기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"보호의 축복") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"열정의 강타") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"알레그로") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"화염 작렬") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"독성 화살") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"빛의 불꽃") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"방패 강타") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"강렬한 움직임"))
					g_bSkillCheck[1] = 1;

				if (!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"두번 베기") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"내려 찍기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"자성 망치") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"얼음 보호막") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"부패") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"빛의 창") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"삼중 연사") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"전투 준비") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"추격하는 매") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"하늘의 심판") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"저항의 진") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"앙코르") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"정면 돌파") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"올가미"))
					g_bSkillCheck[2] = 1;

				if (!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"사자의 포효") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"회전 베기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"번개 돌진") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"화염 사슬") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"석화") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"어둠 쇄도") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"공중 제비") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"연속 각인") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"약점 할퀴기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"강인한 기운") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"가시 보호막") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"레가토") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"사기 증진") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"회전 도끼"))
					g_bSkillCheck[3] = 1;

				if (!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"방패 치기") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"받아 치기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"사자의 심장") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"화염 폭발") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"독성 폭발") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"섬광 충격") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"흡혈 연사") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"기습 공격") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"물어뜯기") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"정화") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"신속의 진") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"희망의 찬가") ||
					!wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"대지 가르기") || !wcscmp(g_pSkillInfo[i].dwDetailInfo.szName, L"급습"))
					g_bSkillCheck[4] = 1;
			}

			SetSkillLearnInfo();
		}

		SetDelay(10);
		return;
	}

	// 인벤 켜진 상태면 스킬북 사용하자
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (uiInven && uiInven->IsVisible())
	{
		int nIndex = GetUsableSkillBookIndex();
		if (nIndex != -1)
		{
			UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
			if (uiItemInfo && uiItemInfo->IsVisible() && (DWORD64)uiItemInfo->CurrentItem == g_pInvenInfo[nIndex].qwItemAddr)
			{
				uiItemInfo->OnTapButton03();
				ShowStatus(1, 60204, g_pInvenInfo[nIndex].szName);			// L"아이템 \"%s\" 을(를) 사용합니다", 
				SetDelay(10);
				return;
			}

			g_bOpenSkill = TRUE;

			SelectInvenItem(dwAddress, nIndex);
			SetDelay(10);
			return;
		}

		uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		SetDelay(10);
		return;
	}

	// 스킬 상점 켜진 상태면 스킬북 구매하자
	UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
	if (uiNPCShop && uiNPCShop->IsVisible())
	{
		if (g_bGotoNPC != 0)
		{
			g_bGotoNPC = 0;
			SetDelay(10);
			return;
		}

		g_qwGotoNpcTick = 0;

		if (g_bGotoNPCFail != 0)			// NPC 이동 오류인 경우
		{
			PressKeyAlternate(VK_ESCAPE);
			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_Purchase* uiPurchage = (UProjectLH_LHWidget_Purchase*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Purchase));
		_callFunc1 refreshPurchage = (_callFunc1)PATCHADDR(dwAddress[ADDR_REFRESHPURCHAGE], dwAddress[0]);

		UpdateBuyListInfo(dwAddress, uiNPCShop);
		for (int i = 0; i < g_nBuyListCount; i++)
		{
			if (g_pBuyListInfo[i].nLimitMaxCount != 0 && g_pBuyListInfo[i].nLimitBuyCount >= g_pBuyListInfo[i].nLimitMaxCount)
				continue;

			BOOL bBuyItem = FALSE;
			if (g_pBuyListInfo[i].nPrice == 0)
				bBuyItem = TRUE;
			else if (g_BuySetting.bSkillGold && g_pCharInfo.nGoods[0] >= g_pBuyListInfo[i].nPrice + g_BuySetting.nSkillGold)
			{
				WCHAR* szClassName = GetGameClassName(g_pCharInfo.nClassType);
				if (szClassName != NULL && wcsstr(g_pBuyListInfo[i].szName->c_str(), szClassName))
					bBuyItem = TRUE;
			}

			if (!bBuyItem)
				break;

			BOOL bExistSKill = FALSE;
			for (int j = 0; j < g_nSkillCount; j++)
			{
				WCHAR szSkillBook[MAX_NAME] = { 0, };
				swprintf(szSkillBook, L"[%s]", g_pSkillInfo[j].dwDetailInfo.szName);

				if (wcsstr(g_pBuyListInfo[i].szName->c_str(), szSkillBook))
				{
					bExistSKill = TRUE;
					break;
				}

				if (wcsstr(szSkillBook, L"[공중 제비]") && wcsstr(g_pBuyListInfo[i].szName->c_str(), L"[백텀블링]"))
				{
					bExistSKill = TRUE;
					break;
				}
			}

			// 이미 배운 스킬이면 무시하자
			if (bExistSKill)
				continue;

			uiNPCShop->OnSelectShopItem((UProjectLH_LHWidget_Product_Container*)g_pBuyListInfo[i].ProductContainer);
			if (uiPurchage && uiPurchage->IsVisible())
			{
				*(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGECOUNT) = 1;
				refreshPurchage((DWORD64)uiPurchage);

				WCHAR szTmp[MAX_NAME] = { 0, };
				wcscpy(szTmp, g_pBuyListInfo[i].szName->c_str());
				ShowStatus(1, 60206, szTmp);			// L"아이템 \"%s\"을(를) 구매합니다", 
				uiPurchage->OnTapBuy();
			}

			SetDelay(10);
			return;
		}

		g_bOpenSkill = TRUE;
		uiNPCShop->C_Widget_Topmenu->OnTapExitBtn();
		SetDelay(10);
		return;
	}

	g_bGotoNPCFail = 0;

	// 사용할수 있는 스킬북 있으면 인벤 열자
	if (GetUsableSkillBookIndex() != -1)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		SetDelay(10);
		return;
	}

	// 스킬북 사용한적이 있으면 스킬 열자
	if (g_bOpenSkill)
	{
		g_bOpenSkill = FALSE;

		if (OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__SkillBook))
			g_bGotoNPC = 1;

		SetDelay(10);
		return;
	}

	// 스킬 퀵슬롯 개수 따지자
	int nSkillRegion = GetBuySkillBookRegion();
	if (nSkillRegion < 0)
	{
		ShowStatus(0, 60207);			// L"스킬 배우기 및 퀵슬롯 등록을 진행하였습니다");
		SetStatus(g_nPreStatus);
		return;
	}

	// 스킬 배우는 위치가 다른 경우 월드 이동하자
	if (g_pCharInfo.nMapType == MapType_Village && wcscmp(g_szWorldName[nSkillRegion], g_pCharInfo.szWorld))
	{
		TeleportMap(dwAddress, g_szWorldName[nSkillRegion], g_szVillageName[nSkillRegion]);
		return;
	}

	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
		g_qwNpcChaoCount = 0;

	if (g_qwGotoNpcTick != 0 && g_dwTickCount >= g_qwGotoNpcTick + 2 * 60 * 1000 ||			// 2분이상 이동 못하는 경우
		(g_bCharFallDown == 0 && g_qwNpcChaoCount >= 5 && g_qwNpcChaoTick[4] - g_qwNpcChaoTick[0] < 1 * 60 * 1000))
	{
		int nRet = OnGameForceReturn(dwAddress);
		if (nRet != 0)
		{
			if (nRet == 1)
				ShowStatus(0, 60315);

			g_qwGotoNpcTick = 0;
			g_qwNpcChaoCount = 0;
		}

		SetDelay(10);
		return;
	}

	// 스킬 상인에게 이동하자
	if (ReturnVillage(dwAddress) && !IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
	{
		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		if (g_qwGotoNpcTick == 0)
			g_qwGotoNpcTick = g_dwTickCount;

		if (g_qwNpcChaoCount < 5)
			g_qwNpcChaoTick[g_qwNpcChaoCount] = g_dwTickCount;
		g_qwNpcChaoCount++;

		ShowStatus(0, 60208);			// L"스킬북 상인에게 이동합니다");
		GoToNpc(dwAddress, L"스킬북 상인");
	}

	SetDelay(10);
}



void LoadScheduleInfo()
{
	if (!wcscmp(g_szScheduleName, L""))
		return;

	WCHAR szPath[MAX_PATH];

	swprintf(szPath, L"%s\\Setting\\%d\\Detail.dat", g_szAppPath, g_nIndex);
	g_bFrameEnable = GetPrivateProfileInt(L"GameFrame", L"Enable", 0, szPath);
	g_nFrameValue = GetPrivateProfileInt(L"GameFrame", L"Value", 20, szPath);

	swprintf(szPath, L"%s\\Schedule\\%s\\Hunt.dat", g_szAppPath, g_szScheduleName);

	g_nReturnCount = 0;
	if (g_pReturnInfo)
		delete[] g_pReturnInfo;
	g_pReturnInfo = NULL;

	memset(&g_HuntSetting, 0, sizeof(HUNT_SETTING));

	FILE* fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(&g_nReturnCount, sizeof(int), 1, fp);
		if (g_nReturnCount > 0)
		{
			g_pReturnInfo = new ITEM_RETURN[g_nReturnCount];
			if (g_pReturnInfo)
			{
				memset(g_pReturnInfo, 0, sizeof(ITEM_RETURN) * g_nReturnCount);
				fread(g_pReturnInfo, sizeof(ITEM_RETURN), g_nReturnCount, fp);

				for (int i = 0; i < g_nReturnCount; i++)
				{
					WCHAR* szEnd = wcsstr(g_pReturnInfo[i].szName, L" (");
					if (szEnd != NULL)
						g_pReturnInfo[i].szName[szEnd - g_pReturnInfo[i].szName] = 0;
				}
			}
		}

		fread(&g_HuntSetting, sizeof(HUNT_SETTING), 1, fp);
		fclose(fp);
	}

	swprintf(szPath, L"%s\\Schedule\\%s\\Buy.dat", g_szAppPath, g_szScheduleName);

	g_nBuyExpendCount = 0;
	if (g_pBuyExpendInfo)
		delete[] g_pBuyExpendInfo;
	g_pBuyExpendInfo = NULL;

	g_nBuyExchangeCount = 0;
	if (g_pBuyExchangeInfo)
		delete[] g_pBuyExchangeInfo;
	g_pBuyExchangeInfo = NULL;

	memset(&g_BuySetting, 0, sizeof(BUY_SETTING));

	fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(&g_nBuyExpendCount, sizeof(int), 1, fp);
		if (g_nBuyExpendCount > 0)
		{
			g_pBuyExpendInfo = new ITEM_BUY[g_nBuyExpendCount];
			if (g_pBuyExpendInfo)
			{
				memset(g_pBuyExpendInfo, 0, sizeof(ITEM_BUY) * g_nBuyExpendCount);
				fread(g_pBuyExpendInfo, sizeof(ITEM_BUY), g_nBuyExpendCount, fp);
			}

			for (int i = 0; i < g_nBuyExpendCount; i++)
			{
				WCHAR* szEnd = wcsstr(g_pBuyExpendInfo[i].szName, L" (");
				if (szEnd != NULL)
					szEnd[0] = 0;
			}
		}

		fread(&g_nBuyExchangeCount, sizeof(int), 1, fp);
		if (g_nBuyExchangeCount > 0)
		{
			g_pBuyExchangeInfo = new ITEM_BUY[g_nBuyExchangeCount];
			if (g_pBuyExchangeInfo)
			{
				memset(g_pBuyExchangeInfo, 0, sizeof(ITEM_BUY) * g_nBuyExchangeCount);
				fread(g_pBuyExchangeInfo, sizeof(ITEM_BUY), g_nBuyExchangeCount, fp);
			}
		}

		fread(&g_BuySetting, sizeof(BUY_SETTING), 1, fp);
		fclose(fp);
	}

	swprintf(szPath, L"%s\\Schedule\\%s\\Items.dat", g_szAppPath, g_szScheduleName);

	memset(g_pItemDefault, 0, MAX_GRADE * MAX_TYPE);

	g_nItemDetailCount = 0;
	if (g_pItemDetailInfo)
		delete[] g_pItemDetailInfo;
	g_pItemDetailInfo = NULL;

	fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(g_pItemDefault, sizeof(BYTE), MAX_GRADE * MAX_TYPE, fp);

		fread(&g_nItemDetailCount, sizeof(int), 1, fp);
		if (g_nItemDetailCount > 0)
		{
			g_pItemDetailInfo = new DETAIL_ITEM[g_nItemDetailCount];
			if (g_pItemDetailInfo)
			{
				memset(g_pItemDetailInfo, 0, sizeof(DETAIL_ITEM) * g_nItemDetailCount);
				fread(g_pItemDetailInfo, sizeof(DETAIL_ITEM), g_nItemDetailCount, fp);

				for (int i = 0; i < g_nItemDetailCount; i++)
				{
					if (g_pItemDetailInfo[i].nMode != ItemMode_Trade)
						continue;

					if (g_pItemDetailInfo[i].nMarketMode != 1)
						continue;

					if (g_pItemDetailInfo[i].nMarketPrice < 0)
						g_pItemDetailInfo[i].nMarketPrice = 0;
				}
			}
		}

		fclose(fp);
	}

	swprintf(szPath, L"%s\\Schedule\\%s\\Other.dat", g_szAppPath, g_szScheduleName);

	memset(&g_OtherSetting, 0, sizeof(OTHER_SETTING));

	fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(&g_OtherSetting, sizeof(OTHER_SETTING), 1, fp);
		fclose(fp);
	}

	swprintf(szPath, L"%s\\Schedule\\%s\\Main.dat", g_szAppPath, g_szScheduleName);

	memset(&g_ScheduleSetting, 0, sizeof(SCHEDULE_SETTING));

	fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(&g_ScheduleSetting, sizeof(SCHEDULE_SETTING), 1, fp);
		fclose(fp);
	}

	g_nPartyMember = 0;
	if (g_pPartyMember)
		delete[] g_pPartyMember;
	g_pPartyMember = NULL;

	swprintf(szPath, L"%s\\Schedule\\%s\\Party.dat", g_szAppPath, g_szScheduleName);
	fp = _wfopen(szPath, L"rb");
	if (fp)
	{
		fread(&g_nPartyMember, sizeof(int), 1, fp);
		if (g_nPartyMember > 0)
		{
			g_pPartyMember = new PARTYMEMBER[g_nPartyMember];
			memset(g_pPartyMember, 0, sizeof(PARTYMEMBER) * g_nPartyMember);
			fread(g_pPartyMember, sizeof(PARTYMEMBER), g_nPartyMember, fp);
		}

		fclose(fp);
	}

	// 거래소 카오 목록도 초기화해주자
	g_nTradeChaoCount = 0;

	ShowStatus(0, 60209);			// L"설정 정보가 갱신되었습니다");
}


void AddStoreEquipItems()
{
	for (int i = 0; i < g_nEquipCount; i++)
	{
		if (g_nStoreListCount >= MAX_INVEN * 2)
			break;

		if (!wcsstr(g_pEquipInfo[i].szName, L"(캐릭터 귀속)"))
		{
			if (IsStorableItemUID(g_pEquipInfo[i].qwItemUID))
				continue;

			g_qwStoreList[g_nStoreListCount++] = g_pEquipInfo[i].qwItemUID;
		}
	}
}


void SetStoreItemList(BOOL bEquip)
{
	g_nStoreListCount = 0;

	if (bEquip)						// 장착 장비 정보
	{
		for (int i = 0; i < g_nEquipCount; i++)
		{
			if (g_nStoreListCount >= MAX_INVEN * 2)
				break;

			if (!wcsstr(g_pEquipInfo[i].szName, L"(캐릭터 귀속)"))
				g_qwStoreList[g_nStoreListCount++] = g_pEquipInfo[i].qwItemUID;
		}
	}

	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_nStoreListCount >= MAX_INVEN * 2)
			break;

		if (!wcscmp(g_pInvenInfo[i].szName, L"무기 강화석 (귀속)") || !wcscmp(g_pInvenInfo[i].szName, L"방어구 강화석 (귀속)") || !wcscmp(g_pInvenInfo[i].szName, L"장신구 강화석 (귀속)"))
			g_qwStoreList[g_nStoreListCount++] = g_pInvenInfo[i].qwItemUID;
		else if (IsStorableItem(i))
			g_qwStoreList[g_nStoreListCount++] = g_pInvenInfo[i].qwItemUID;
	}
}


void ChangeSchedule()
{
	for (int i = 0; i < MAX_DUNGEON; i++)				// 던전 시간도 바꾸자
		g_pDungeonRes[i].nRemainTime = -1;

	if (!wcscmp(g_szScheduleName, g_pGameMapping->szSchedule))			// 진행하던 스케줄이 완료된 상태면
	{
		g_pGameMapping->bLogType = LogType_FinishSchedule;
		ShowStatus(1, 60210, g_szScheduleName);						//L"스케줄 \"%s\" 이(가) 완료되었습니다", 

		g_bWaitDelay = TRUE;
		SetStatus(STATUS_WAITDELAY);
	}
	else																// 스케줄 변경해야 하는 경우
	{
		memset(g_szScheduleName, 0, sizeof(WCHAR) * MAX_NAME);
		wcscpy(g_szScheduleName, g_pGameMapping->szSchedule);

		//g_pGameMapping->bSettingChanged = 1;

		if (wcscmp(g_szScheduleName, L""))
		{
			// 보관할 목록들 다시 정리하자
			SetStoreItemList(g_OtherSetting.bStoreEquips);

			g_pGameMapping->bLogType = LogType_ChangeSchedule;
			ShowStatus(1, 60211, g_szScheduleName);					// L"스케줄 \"%s\" 을(를) 진행합니다", 

			LoadScheduleInfo();
		}

		if (g_nCurScene == SCENE_INGAME)
		{
			g_bStartAuto = 0;
			g_dwPreQuestID = 0;
			g_bMoveHuntPos = FALSE;
			g_bMoveHuntSet = FALSE;
			g_dwNoMonsterTick = g_dwTickCount;
			SetStatus(STATUS_DOAUTO, 10);
		}
	}
}


BOOL IsGetableItem(INVENINFO pItem)
{
	int nDetailIndex = GetItemDetailIndex(pItem);
	if (nDetailIndex != -1)
	{
		if (g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Get)
			return TRUE;
	}
	else if (pItem.DetailInfo->ItemGrade < 6)
	{
		if (g_pItemDefault[pItem.DetailInfo->ItemGrade][pItem.nItemType] == ItemMode_Get)
			return TRUE;
	}

	// 육성방식이면 강화석 다 꺼내자
	if (GetMainQuestNo() < 1412)
	{
		if (!wcscmp(pItem.szName, L"무기 강화석 (귀속)") || !wcscmp(pItem.szName, L"방어구 강화석 (귀속)"))
			return TRUE;
	}

	return FALSE;
}


BOOL IsStorableItem(int nIndex)
{
	if (g_pInvenInfo[nIndex].bEquiped)
		return FALSE;

	if (wcsstr(g_pInvenInfo[nIndex].szName, L"(캐릭터 귀속)"))
		return FALSE;

	int nDetailIndex = GetItemDetailIndex(g_pInvenInfo[nIndex]);
	if (nDetailIndex != -1)
	{
		if (g_pItemDetailInfo[nDetailIndex].nMode == ItemMode_Store)
			return TRUE;
	}
	else if (g_pInvenInfo[nIndex].DetailInfo->ItemGrade < 6)
	{
		if (g_pItemDefault[g_pInvenInfo[nIndex].DetailInfo->ItemGrade][g_pInvenInfo[nIndex].nItemType] == ItemMode_Store)
			return TRUE;
	}

	// 강화석들은 창고에 무조건 보관하자
	if (!wcscmp(g_pInvenInfo[nIndex].szName, L"무기 강화석 (귀속)") || !wcscmp(g_pInvenInfo[nIndex].szName, L"방어구 강화석 (귀속)") || !wcscmp(g_pInvenInfo[nIndex].szName, L"장신구 강화석 (귀속)"))
		return TRUE;

	return FALSE;
}


void UpdateStoreSellInfo(DWORD* dwAddress)
{
	g_nSellListCount = 0;
	UProjectLH_LHWidget_Warehouse* uiStore = (UProjectLH_LHWidget_Warehouse*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Warehouse));
	if (!uiStore || !uiStore->IsVisible())
		return;

	DWORD64 qwMyItemHScrollBox = (DWORD64)uiStore->C_ListScrollBox;
	if (!qwMyItemHScrollBox)
		return;

	DWORD64	qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	if (*(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY) == -1)
		return;

	TArray<class UObject*>* storeList = (TArray<class UObject*>*)((DWORD64)uiStore + OFFSET_STOREITEMINVENLIST);

	int nCount = *(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_InventoryItem_Container* qwItemContainer = (UProjectLH_LHWidget_InventoryItem_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer || !qwItemContainer->CurrentItem)
			continue;

		if (g_nSellListCount < MAX_INVEN)
		{
			g_pSellListInfo[g_nSellListCount].ItemContainer = qwItemContainer;
			g_pSellListInfo[g_nSellListCount].dwItemInfo = GetItemInfo(dwAddress, (DWORD64)qwItemContainer->CurrentItem);
			g_pSellListInfo[g_nSellListCount].bSelected = FALSE;

			for (int j = 0; j < storeList->Num(); j++)
			{
				if (g_pSellListInfo[g_nSellListCount].dwItemInfo.qwItemUID == *(DWORD64*)(*(DWORD64*)storeList + 8 * j))
				{
					g_pSellListInfo[g_nSellListCount].bSelected = TRUE;
					break;
				}
			}

			g_nSellListCount++;
		}
	}
}


int GetInvenCurCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return 0;

	UProjectLH_LHCharacterMgr* CharacterMgr = objGameInstance->CharacterMgr;
	if (!CharacterMgr)
		return 0;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return 0;

	_callFunc2 getStoreCurCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTORECURCOUNT], dwAddress[0]);
	_callFunc2 getStoreMaxCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTOREMAXCOUNT], dwAddress[0]);

	int nCurCount = (int)getStoreCurCount((DWORD64)InventoryMgr, 0);
	int nMaxCount = (int)getStoreMaxCount((DWORD64)InventoryMgr, 0);

	return nCurCount;
}


int GetInvenMaxCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return 0;

	UProjectLH_LHCharacterMgr* CharacterMgr = objGameInstance->CharacterMgr;
	if (!CharacterMgr)
		return 0;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return 0;

	_callFunc2 getStoreMaxCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTOREMAXCOUNT], dwAddress[0]);
	int nMaxCount = (int)getStoreMaxCount((DWORD64)InventoryMgr, 0);

	return nMaxCount;
}


int GetStoreCurCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return 0;

	UProjectLH_LHCharacterMgr* CharacterMgr = objGameInstance->CharacterMgr;
	if (!CharacterMgr)
		return 0;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return 0;

	_callFunc2 getStoreCurCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTORECURCOUNT], dwAddress[0]);
	_callFunc2 getStoreMaxCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTOREMAXCOUNT], dwAddress[0]);

	int nCurCount = (int)getStoreCurCount((DWORD64)InventoryMgr, 1);
	int nMaxCount = (int)getStoreMaxCount((DWORD64)InventoryMgr, 1);

	return nCurCount;
}


int GetStoreMaxCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return 0;

	UProjectLH_LHCharacterMgr* CharacterMgr = objGameInstance->CharacterMgr;
	if (!CharacterMgr)
		return 0;

	UProjectLH_LHInventoryMgr* InventoryMgr = CharacterMgr->InventoryMgr;
	if (!InventoryMgr)
		return 0;

	_callFunc2 getStoreMaxCount = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSTOREMAXCOUNT], dwAddress[0]);
	int nMaxCount = (int)getStoreMaxCount((DWORD64)InventoryMgr, 1);

	return nMaxCount;
}


void UpdateStoreBuyInfo(DWORD* dwAddress)
{
	g_nSellListCount = 0;

	UProjectLH_LHWidget_Warehouse* uiStore = (UProjectLH_LHWidget_Warehouse*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Warehouse));
	if (!uiStore || !uiStore->IsVisible())
		return;

	DWORD64 qwMyItemHScrollBox = (DWORD64)uiStore->C_WarehouseLHScrollBox;
	if (!qwMyItemHScrollBox)
		return;

	DWORD64	qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	if (*(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY) == -1)
		return;

	TArray<class UObject*>* storeList = (TArray<class UObject*>*)((DWORD64)uiStore + OFFSET_SOTREITEMLIST);

	//int nCount = GetStoreCount();
	int nCount = *(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_InventoryItem_Container* qwItemContainer = (UProjectLH_LHWidget_InventoryItem_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer || !(DWORD64)qwItemContainer->CurrentItem)
			continue;

		if (g_nSellListCount < MAX_INVEN)
		{
			g_pSellListInfo[g_nSellListCount].ItemContainer = qwItemContainer;
			g_pSellListInfo[g_nSellListCount].dwItemInfo = GetItemInfo(dwAddress, (DWORD64)qwItemContainer->CurrentItem);
			g_pSellListInfo[g_nSellListCount].bSelected = FALSE;

			for (int i = 0; i < storeList->Num(); i++)
			{
				if (g_pSellListInfo[g_nSellListCount].dwItemInfo.qwItemUID == *(DWORD64*)(*(DWORD64*)storeList + 8 * i))
				{
					g_pSellListInfo[g_nSellListCount].bSelected = TRUE;
					break;
				}
			}

			g_nSellListCount++;
		}
	}
}


BOOL IsStorableItemUID(DWORD64 qwItemUID)
{
	for (int i = 0; i < g_nStoreListCount; i++)
	{
		if (g_qwStoreList[i] == qwItemUID)
			return TRUE;
	}

	return FALSE;
}


void SelectEquipItem(DWORD* dwAddress, int nIndex)
{
	DWORD64 dwInvenRcx = GetWidget(dwAddress, OFFSET_INVENWIDGETID);
	if (!dwInvenRcx || nIndex < 0)
		return;

	UProjectLH_LHWidget_Inventory* widgetInventory = (UProjectLH_LHWidget_Inventory*)dwInvenRcx;
	UProjectLH_LHItem* iTem = (UProjectLH_LHItem*)g_pEquipInfo[nIndex].qwItemAddr;

	widgetInventory->OnTapInventoryItem(iTem);
}


int GetUnEquipItemIndex()
{
	for (int i = 0; i < g_nEquipCount; i++)
	{
		if (wcsstr(g_pEquipInfo[i].szName, L"(캐릭터 귀속)"))
			continue;

		for (int j = 0; j < g_nStoreListCount; j++)
		{
			if (g_qwStoreList[j] == g_pEquipInfo[i].qwItemUID)
				return i;
		}
	}

	return -1;
}


void OnGameStoreEquips(DWORD* dwAddress)
{
	// 마을 귀환 먼저 진행하자
	if (!ReturnVillage(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (g_nStoreListCount > 0)
	{
		// 우선 장착한 장비 해제할거 있는지 체크하자
		int nIndex = GetUnEquipItemIndex();
		if (nIndex != -1 && g_nInvenCount < g_nMaxInvenCount)
		{
			// 			if (g_qwEquipIndex != g_pEquipInfo[nIndex].qwItemUID)
			// 			{
			// 				g_qwEquipIndex = g_pEquipInfo[nIndex].qwItemUID;
			// 				ShowStatus(1, 60213, g_pEquipInfo[nIndex].szName);				// 장비 [] 을(를) 해제합니다
			// 			}

			if (!uiInven || !uiInven->IsVisible())
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
			else
			{
				//SelectEquipItem(dwAddress, nIndex);
				ShowStatus(0, 60418);											// 장착한 장비를 해제합니다
				uiInven->OnTapAutoUnEquip();
			}

			SetDelay(10);
			return;
		}
	}

	if (uiInven && uiInven->IsVisible())
	{
		uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		SetDelay(10);
		return;
	}

	// 창고 처리 진행하자
	UProjectLH_LHWidget_Warehouse* uiStore = (UProjectLH_LHWidget_Warehouse*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Warehouse));
	if (g_nStoreListCount > 0)
	{
		if (!uiStore || !uiStore->IsVisible())
		{
			g_bGotoNPCFail = 0;

			if (g_qwGotoNpcTick == 0)
				g_qwGotoNpcTick = g_dwTickCount;

			if (IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
				g_qwNpcChaoCount = 0;

			if (g_dwTickCount >= g_qwGotoNpcTick + 2 * 60 * 1000 ||			// 2분이상 이동 못하는 경우
				(g_bCharFallDown == 0 && g_qwNpcChaoCount >= 5 && g_qwNpcChaoTick[4] - g_qwNpcChaoTick[0] < 1 * 60 * 1000))
			{
				int nRet = OnGameForceReturn(dwAddress);
				if (nRet != 0)
				{
					if (nRet == 1)
						ShowStatus(0, 60315);

					g_qwGotoNpcTick = 0;
					g_qwNpcChaoCount = 0;
				}

				SetDelay(10);
				return;
			}

			if (OnCloseOpenWindow(dwAddress))
			{
				SetDelay(10);
				return;
			}

			if (!IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
			{
				ShowStatus(0, 60214);		// L"창고로 이동합니다");
				GoToNpc(dwAddress, L"창고");

				if (g_qwNpcChaoCount < 5)
					g_qwNpcChaoTick[g_qwNpcChaoCount] = g_dwTickCount;
				g_qwNpcChaoCount++;
			}

			SetDelay(10);
			return;
		}

		if (g_bGotoNPC != 0)
		{
			g_bGotoNPC = 0;
			SetDelay(10);
			return;
		}

		g_qwGotoNpcTick = 0;

		if (g_bGotoNPCFail != 0)			// NPC 이동 오류인 경우
		{
			PressKeyAlternate(VK_ESCAPE);
			SetDelay(10);
			return;
		}

		// 창고에 보관할 아이템들 선택하자
		UpdateStoreBuyInfo(dwAddress);
		if (GetStoreCurCount(dwAddress) < GetStoreMaxCount(dwAddress))					// 창고에 보관할 자리가 있는 경우에만
		{
			BOOL bStore = FALSE;

			UpdateStoreSellInfo(dwAddress);
			for (int i = 0; i < g_nSellListCount; i++)
			{
				if (g_pSellListInfo[i].bSelected)
				{
					bStore = TRUE;
					continue;
				}

				if (wcsstr(g_pSellListInfo[i].dwItemInfo.szName, L"(캐릭터 귀속)"))
					continue;

				if (IsStorableItemUID(g_pSellListInfo[i].dwItemInfo.qwItemUID))
				{
					if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory > 0 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory < 5)
						g_bEquipStoreState = 1;													// 장비인 경우 기발 세워주자

					ShowStatus(1, 60196, g_pSellListInfo[i].dwItemInfo.szName);					// L"아이템 \"%s\" 을(를) 선택합니다", 
					uiStore->OnTapReturnThisContainer(g_pSellListInfo[i].ItemContainer);
					SetDelay(10);
					return;
				}
			}

			if (bStore)
			{
				ShowStatus(0, 60215);															// L"선택된 아이템들을 창고에 보관합니다");
				uiStore->OnTapStorage();
				SetDelay(10);
				return;
			}
		}

		g_nStoreListCount = 0;
	}

	if (IsExistGetEquips())
		SetEquipsChar(g_nGameServer, 0);													// 찾을 장비가 있다면
	else
		SetEquipsChar(g_nGameServer, -1);

	if (uiStore && uiStore->IsVisible())
		uiStore->C_WidgetTopmenu->OnTapExitBtn();

	SetStatus(STATUS_DOAUTO, 0);
}


void OnGameCharLogOut(DWORD* dwAddress)
{
	// 마을 귀환 먼저 진행하자
	//if (ReturnVillage())
	OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);

	SetDelay(10);
}


void UpdateSkillInfo(DWORD* dwAddress)
{
	g_nSkillCount = 0;

	UProjectLH_LHWidget_InGameMenu_SkillWindow* uiSkillWindow = (UProjectLH_LHWidget_InGameMenu_SkillWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skill));
	if (!uiSkillWindow || !uiSkillWindow->IsVisible())
		return;

	for (int i = 0; i < uiSkillWindow->C_ScrollBox_ActiveSkillList->Slots.Num(); i++)
	{
		UUMG_PanelSlot* skillSlot = (UUMG_PanelSlot*)uiSkillWindow->C_ScrollBox_ActiveSkillList->Slots[i];
		if (!skillSlot)
			continue;

		UProjectLH_LHWidget_SkillListCell* skillListCell = (UProjectLH_LHWidget_SkillListCell*)skillSlot->Content;
		if (!skillListCell)
			continue;;

		if (*(int*)((DWORD64)skillListCell + OFFSET_SKILLLEVELLEARN) <= 0)
			continue;

		if (g_nSkillCount < MAX_SKILL)
		{
			g_pSkillInfo[g_nSkillCount].nSkillLevel = *(int*)((DWORD64)skillListCell + OFFSET_SKILLLEVEL);
			if (g_pSkillInfo[g_nSkillCount].nSkillLevel < 0)
				continue;

			g_pSkillInfo[g_nSkillCount].dwSkillID = *(DWORD*)((DWORD64)skillListCell + OFFSET_SKILLLISTITEMID);
			g_pSkillInfo[g_nSkillCount].ListCell = skillListCell;
			g_pSkillInfo[g_nSkillCount].dwDetailInfo = GetSkillInfoData(dwAddress, g_pSkillInfo[g_nSkillCount].dwSkillID);
			if (!g_pSkillInfo[g_nSkillCount].dwDetailInfo.SkillRecord)
				continue;

			if (g_pCharInfo.nPlayerIndex != g_pSkillInfo[g_nSkillCount].dwDetailInfo.SkillRecord->PlayerIndex)
				continue;

			g_nSkillCount++;
		}
	}
}


int GetBuySkillBookRegion()
{
	if (!g_bSkillCheck[0] && g_pCharInfo.nLevel >= 9 && g_nSkillSlotCount < 3)
		return 0;

	if (g_pCharInfo.nClassType % 10 != 1 && g_BuySetting.bSkillGold && g_pCharInfo.nGoods[0] > g_BuySetting.nSkillGold)
	{
		INT64 nSkillGold = g_pCharInfo.nGoods[0] - g_BuySetting.nSkillGold;

		if (nSkillGold >= 500000 && !g_bSkillCheck[1] && g_pCharInfo.nLevel >= 20 && g_nSkillSlotCount < 5)
			return 0;

		if (nSkillGold >= 1000000 && !g_bSkillCheck[2] && g_pCharInfo.nLevel >= 25)
			return 0;

		if (g_BuySetting.bBuyHighSkill)
		{
			if (nSkillGold >= 1500000 && !g_bSkillCheck[3] && g_pCharInfo.nLevel >= 30)
				return 1;

			if (nSkillGold >= 2000000 && !g_bSkillCheck[4] && g_pCharInfo.nLevel >= 35)
				return 1;
		}
	}

	return -1;
}


WCHAR* GetGameClassName(int nClass)
{
	for (int i = 0; i < MAX_CLASS; i++)
	{
		if (g_pClassName[i].nClassType == nClass)
			return g_pClassName[i].szName;
	}

	return NULL;
}


BOOL IsExistGetEquips(BOOL bFull)
{
	for (int i = 0; i < g_nStoreCount; i++)
	{
		if (g_pStoreInfo[i].DetailInfo->ItemCategory > 0 && g_pStoreInfo[i].DetailInfo->ItemCategory < 5)
		{
			if (g_pStoreInfo[i].DetailInfo->ReqClassType != 100 && g_pStoreInfo[i].DetailInfo->ReqClassType != g_pCharInfo.nClassType)
				continue;

			return TRUE;
		}

		if (bFull && IsGetableItem(g_pStoreInfo[i]))
			return TRUE;
	}

	return FALSE;
}



void OnGameGetEquips(DWORD* dwAddress)
{
	// 창고에서 장착 가능한 장비들을 꺼내자
	UProjectLH_LHWidget_Warehouse* uiStore = (UProjectLH_LHWidget_Warehouse*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Warehouse));
	if (uiStore && uiStore->IsVisible())
	{
		if (g_bGotoNPC != 0)
		{
			g_bGotoNPC = 0;
			SetDelay(10);
			return;
		}

		g_qwGotoNpcTick = 0;

		if (g_bGotoNPCFail != 0)			// NPC 이동 오류인 경우
		{
			PressKeyAlternate(VK_ESCAPE);
			SetDelay(10);
			return;
		}

		BOOL bGet = FALSE;
		int nGetCount = 0;
		UpdateStoreBuyInfo(dwAddress);
		for (int i = 0; i < g_nSellListCount; i++)
		{
			// 가방에 빈 자리가 없으면 못꺼내니까 그만두자
			if (g_nMaxInvenCount - g_nInvenCount <= nGetCount)
			{
				g_bGetEquips = TRUE;
				break;
			}

			if (g_pSellListInfo[i].bSelected)
			{
				nGetCount++;
				bGet = TRUE;
				continue;
			}

			// 장비템인 경우
			if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory > 0 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory < 5)
			{
				if (!g_OtherSetting.bGetStoreEquips)
					continue;

				if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ReqClassType != 100 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ReqClassType != g_pCharInfo.nClassType)
					continue;

				if (!IsHigherItem(dwAddress, (UProjectLH_LHItem*)g_pSellListInfo[i].dwItemInfo.qwItemAddr))
					continue;

				if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory == 2 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemType == 6 &&
					g_pCharInfo.nLevel < 25)									// 망토는 25레벨부터 장착가능하다
					continue;

				if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory == 2 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemType == 23 &&
					g_pCharInfo.nLevel < 70)									// 각반은 70레벨부터 장착가능하다
					continue;

				if (g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemCategory == 2 && g_pSellListInfo[i].dwItemInfo.DetailInfo->ItemType == 28 &&
					g_pCharInfo.nLevel < 75)									// 보조무기는 75레벨부터 장착가능하다
					continue;

				g_bEquipStoreState = 1;
			}
			// 기타
			else if (!IsGetableItem(g_pSellListInfo[i].dwItemInfo))
				continue;

			ShowStatus(1, 60196, g_pSellListInfo[i].dwItemInfo.szName);			// L"아이템 \"%s\" 을(를) 선택하였습니다", 
			uiStore->OnTapReturnThisContainer(g_pSellListInfo[i].ItemContainer);
			SetDelay(10);
			return;
		}

		if (bGet)
		{
			ShowStatus(0, 60216);												// L"선택된 아이템들을 창고에서 가져옵니다");
			uiStore->OnTapWarehousePopItem();
		}
		else
		{
			if (g_nSellListCount == 0 && g_bEquipStoreState == 0)
				g_bEquipStoreState = 1;

			g_bGetEquips = TRUE;
			uiStore->C_WidgetTopmenu->OnTapExitBtn();
		}

		SetDelay(10);
		return;
	}

	g_bGotoNPCFail = 0;

	// 인벤 켜져있으면 자동 장착하자
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (uiInven && uiInven->IsVisible())
	{
		if (AutoEquipItems(dwAddress))
		{
			SetDelay(10);
			return;
		}

		if (g_bEquipStoreState != 0)
			SetEquipsChar(g_nGameServer, g_nGameChar + 1);
		else
			SetEquipsChar(g_nGameServer, -1);

		ShowStatus(0, 60217);			// L"창고에서 장비들을 찾아 장착하였습니다");
		uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	// 창고에서 꺼내지 못한 경우
	if (!g_bGetEquips)
	{
		if (g_nStoreCount > 0 && !IsExistGetEquips())
		{
			g_bGetEquips = TRUE;

			ShowStatus(0, 60218);			// L"창고에 맡긴 장비가 없으므로 단계를 건너뜁니다");
			SetStatus(g_nPreStatus, 10);
			return;
		}

		if (g_qwGotoNpcTick == 0)
			g_qwGotoNpcTick = g_dwTickCount;

		if (IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
			g_qwNpcChaoCount = 0;

		if (g_dwTickCount >= g_qwGotoNpcTick + 2 * 60 * 1000 ||										// 2분이상 이동 못하는 경우
			(g_bCharFallDown == 0 && g_qwNpcChaoCount >= 5 && g_qwNpcChaoTick[4] - g_qwNpcChaoTick[0] < 1 * 60 * 1000))		// 1분안에 5회이상 이동 못하는 경우
		{
			int nRet = OnGameForceReturn(dwAddress);
			if (nRet != 0)
			{
				if (nRet == 1)
					ShowStatus(0, 60315);
				g_qwGotoNpcTick = 0;
				g_qwNpcChaoCount = 0;
			}

			SetDelay(10);
			return;
		}

		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		// 마을 귀환 먼저 진행하자
		if (ReturnVillage(dwAddress) && !IsMoving(FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location))
		{
			ShowStatus(0, 60219);			// L"창고로 이동합니다");
			GoToNpc(dwAddress, L"창고");

			if (g_qwNpcChaoCount < 5)
				g_qwNpcChaoTick[g_qwNpcChaoCount] = g_dwTickCount;
			g_qwNpcChaoCount++;
		}

		SetDelay(10);
		return;
	}

	// 창고에서 꺼냈으면 인벤 키자
	OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
	SetDelay(10);
}


int GetInvenCount(const WCHAR* szName, BOOL bOrgName)
{
	int nCount = 0;
	if (wcsstr(szName, L"HP 회복 물약"))				// 물약인 경우 모든 개수 다 합하자
	{
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (wcsstr(g_pInvenInfo[i].szName, L"형 HP 회복 물약"))
				nCount += g_pInvenInfo[i].nCount;
		}
	}
	else
	{
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (bOrgName && !wcscmp(szName, g_pInvenInfo[i].szOrgName))
				nCount += g_pInvenInfo[i].nCount;
			else if (!bOrgName && !wcscmp(szName, g_pInvenInfo[i].szName))
				nCount += g_pInvenInfo[i].nCount;
		}
	}

	return nCount;
}


BOOL IsCharNeedReturn()
{
	// 첫 마을까지 퀘스트 못한 상태면
	if (GetMainQuestNo() < 300 ||
		g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance ||
		g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__AloneQuestDungeon)
		return FALSE;

	// 체력이 부족한 경우 (마을이 아닌 경우에만 따져야 한다)
	if (g_HuntSetting.bHpReturnEnable && g_pCharInfo.nMapType != MapType_Village)
	{
		int nPercent = 100;
		if (g_pCharInfo.nMaxHp > 0)
			nPercent = g_pCharInfo.nCurHp * 100 / g_pCharInfo.nMaxHp;

		if (nPercent <= g_HuntSetting.nHpReturnValue)
		{
			if (g_dwHpReturnTick == 0)
				g_dwHpReturnTick = g_dwTickCount;

			if (g_dwTickCount >= g_dwHpReturnTick + g_HuntSetting.nHpReturnTime * 1000)
			{
				ShowStatus(4, 60220, NULL, g_HuntSetting.nHpReturnTime, g_HuntSetting.nHpReturnValue);			// L"%d초이상 체력이 %d%%미만이므로 귀환합니다", 
				return TRUE;
			}
		}
		else
			g_dwHpReturnTick = 0;
	}
	else
		g_dwHpReturnTick = 0;

	// 무게가 많은 경우
	if (g_HuntSetting.bWeightReturnEnable)
	{
		int nPercent = g_nInvenCount * 100 / g_nMaxInvenCount;
		if (nPercent >= g_HuntSetting.nWeightReturnValue)
		{
			if (g_dwWeightReturnTick == 0)
				g_dwWeightReturnTick = g_dwTickCount;

			if (g_dwTickCount >= g_dwWeightReturnTick + g_HuntSetting.nWeightReturnTime * 1000)
			{
				ShowStatus(4, 60221, NULL, g_HuntSetting.nWeightReturnTime, g_HuntSetting.nWeightReturnValue);			// L"%d초이상 무게가 %d%%이상이므로 귀환합니다", 
				return TRUE;
			}
		}
		else
			g_dwWeightReturnTick = 0;
	}
	else
		g_dwWeightReturnTick = 0;

	if (g_nMaxInvenCount > 0 && g_nInvenCount >= g_nMaxInvenCount)
	{
		ShowStatus(4, 60221, NULL, 1, 100);
		return TRUE;
	}

	if (g_pCharInfo.nLevel >= 10)
	{
		for (int i = 0; i < g_nReturnCount; i++)
		{
			if (!g_pReturnInfo[i].bEnable)
				continue;

			BOOL bOrg = FALSE;

			if (wcsstr(g_pReturnInfo[i].szName, L"은총의 순간 이동 주문서"))
			{
				if (g_bShopItemOring[0])
					continue;

				bOrg = TRUE;
			}
			else if (wcsstr(g_pReturnInfo[i].szName, L"순간 이동 주문서"))
			{
				if (g_bShopItemOring[1])
					continue;

				bOrg = TRUE;
			}
			else if (!wcsstr(g_pReturnInfo[i].szName, L"귀속"))
				bOrg = TRUE;

			int nCount = GetInvenCount(g_pReturnInfo[i].szName, bOrg);
			if (nCount <= g_pReturnInfo[i].nCount)
			{
				ShowStatus(1, 60222, g_pReturnInfo[i].szName);			// L"아이템 \"%s\" 이(가) 부족하여 귀환합니다", 
				return TRUE;
			}
		}
	}

	return FALSE;
}


BOOL ReturnVillage(DWORD* dwAddress)
{
	UpdateGameInfo(dwAddress);
	if (g_pCharInfo.nCurHp > 0 && g_pCharInfo.nAutoState != AUTO_NONE)
	{
		AutoAttack(dwAddress);
		SetDelay(5);
		return FALSE;
	}

	if (g_pCharInfo.nMapType == MapType_Village || g_pCharInfo.dwFlyingID == 0)
		return TRUE;

	if (g_pCharInfo.nCurHp > 0 && g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb)
	{
		PressKeyAlternate(L'F');
		SetDelay(10);
		return FALSE;
	}

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return FALSE;

	UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
	if (!C_InGame_Minimap_Container)
		return FALSE;

	if (g_bPartyDungeon)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
		{
			if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
			{
				pPartyWindow->OnClickedDungeonReady();
				return FALSE;
			}
		}
	}

	if (IsInDungeon() || g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
		C_InGame_Minimap_Container->OnClicked_Exit();
	else
		C_InGame_Minimap_Container->OnClicked_Return();

	return FALSE;
}


BOOL IsExistExchangeItem()
{
	for (int i = 0; i < g_nBuyExchangeCount; i++)
	{
		if (!g_pBuyExchangeInfo[i].bEnable)
			continue;

		int nInvenCount = 0;
		for (int j = 0; j < g_nInvenCount; j++)
		{
			if (wcscmp(g_pInvenInfo[j].szOrgName, g_pBuyExchangeInfo[i].szName))
			{
				if (!wcsstr(g_pBuyExchangeInfo[i].szName, L"희귀 스킬 기술서") && !wcsstr(g_pBuyExchangeInfo[i].szName, L"희귀 스킬 교본") &&
					!wcsstr(g_pBuyExchangeInfo[i].szName, L"영웅 스킬 기술서"))
					continue;

				if (wcsstr(g_pInvenInfo[j].szName, g_pBuyExchangeInfo[i].szName) != g_pInvenInfo[j].szName)
					continue;
			}

			nInvenCount += g_pInvenInfo[j].nCount;
		}

		// 현재 인벤에 층분히 개수가 있으면
		if (g_pBuyExchangeInfo[i].nCurCount < nInvenCount)
			continue;

		int nExchangeIndex = -1;
		for (int j = 0; j < MAX_EXCHANGE; j++)
		{
			if (wcscmp(g_pExchangeRes[j].szName, g_pBuyExchangeInfo[i].szName))
				continue;

			nExchangeIndex = j;
			break;
		}

		// 목록에 없는 물품이면 무시
		if (nExchangeIndex == -1)
			continue;

		// 상점에 남아있는 개수가 없으면 무시
		if (g_pExchangeRes[nExchangeIndex].nLimitCount != 0 && g_pExchangeRes[nExchangeIndex].nCurCount >=
			g_pExchangeRes[nExchangeIndex].nLimitCount)
			continue;

		// 구매 가능한 금액이 없으면 무시
		if (g_pCharInfo.nGoods[g_pExchangeRes[nExchangeIndex].nGoodsType % 6] < g_pExchangeRes[nExchangeIndex].nPrice)
			continue;

		return TRUE;
	}

	return FALSE;
}


void OnGameReturnVillage(DWORD* dwAddress)
{
	// 마을이 아닌 경우 귀환을 계속 하자
	if (!ReturnVillage(dwAddress))
	{
		SetDelay(5);
		return;
	}

	// 무게가 넘치는 경우에 처리할 템이 있으면 
	if (g_HuntSetting.bWeightReturnEnable)
	{
		int nPercent = g_nInvenCount * 100 / g_nMaxInvenCount;
		if (nPercent >= g_HuntSetting.nWeightReturnValue && IsExistInvenProc(dwAddress, GetMainQuestNo()))
		{
			g_nQuickSlotIndex = 0;
			g_nInvenIndex = 0;
			g_nTryInvenCount = 0;
			g_qwLastUseItemAddr = 0;
			SetStatus(STATUS_INVENPROC);
			return;
		}
	}

	if (g_nMaxInvenCount > 0 && g_nInvenCount >= g_nMaxInvenCount)
	{
		g_nQuickSlotIndex = 0;
		g_nInvenIndex = 0;
		g_nTryInvenCount = 0;
		g_qwLastUseItemAddr = 0;
		SetStatus(STATUS_INVENPROC);
		return;
	}

	// 구매 아이템이 있는지 체크하자
	if ((g_pCharInfo.nLevel < 20 && g_pCharInfo.nGoods[0] > 50000) || g_pCharInfo.nGoods[0] >= g_BuySetting.nExpendGold)
	{
		// 요툰하임일때 물약 구매 필요하면 대형물약 구매하러 가자
		if (GetMainQuestNo() >= 1301 && GetMainQuestNo() < 2301 && g_OtherSetting.bBuyBigPotion)
		{
			for (int i = 0; i < g_nBuyExpendCount; i++)
			{
				if (!g_pBuyExpendInfo[i].bEnable)
					continue;

				if (!wcsstr(g_pBuyExpendInfo[i].szName, L"HP 회복 물약"))
					continue;

				if (GetHpPotionCount() < g_pBuyExpendInfo[i].nCurCount)
				{
					g_qwGotoNpcTick = 0;
					g_bGotoNPCFail = 0;
					ShowStatus(1, 60224, g_pBuyExpendInfo[i].szName);			// L"아이템 \"%s\" 이(가) 부족하여 소모품 상인을 찾아갑니다", 
					SetStatus(STATUS_BIGPOTION);
					return;
				}
			}
		}

		if (g_bExpandShop)
		{
			for (int i = 0; i < g_nBuyExpendCount; i++)
			{
				if (!g_pBuyExpendInfo[i].bEnable)
					continue;

				if (wcsstr(g_pBuyExpendInfo[i].szName, L"은총의 순간 이동 주문서"))
				{
					if (g_bShopItemOring[0])
						continue;
				}
				else if (wcsstr(g_pBuyExpendInfo[i].szName, L"순간 이동 주문서"))
				{
					if (g_bShopItemOring[1])
						continue;
				}

				int nCount = GetInvenCount(g_pBuyExpendInfo[i].szName, TRUE);
				if (nCount > g_pBuyExpendInfo[i].nCurCount)
					continue;

				g_qwGotoNpcTick = 0;
				g_bGotoNPCFail = 0;
				g_qwNpcChaoCount = 0;
				g_bExpandShop = FALSE;
				ShowStatus(1, 60224, g_pBuyExpendInfo[i].szName);			// L"아이템 \"%s\" 이(가) 부족하여 소모품 상인을 찾아갑니다", 
				SetStatus(STATUS_EXPENDSHOP);
				return;
			}
		}
	}

	// 판매 아이템이 있는지 체크하자
	if (g_bExpandShop)
	{
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (IsSellItem(g_pInvenInfo[i]))
			{
				g_qwGotoNpcTick = 0;
				g_bGotoNPCFail = 0;
				g_qwNpcChaoCount = 0;
				g_bExpandShop = FALSE;
				ShowStatus(0, 60223);		// L"판매할 아이템이 있어 소모품 상인을 찾아갑니다");
				SetStatus(STATUS_EXPENDSHOP);
				return;
			}
		}
	}

	// 교환 상인 구매할 아이템 체크하자
	if (IsExistExchangeItem())
	{
		g_qwGotoNpcTick = 0;
		g_bGotoNPCFail = 0;
		g_qwNpcChaoCount = 0;
		SetStatus(STATUS_EXCHANGESHOP);
		return;
	}

	// 체력 회복될때까지 기다리자
	int nPercent = 100;
	if (g_pCharInfo.nMaxHp > 0)
		nPercent = g_pCharInfo.nCurHp * 100 / g_pCharInfo.nMaxHp;

	if (nPercent < 60)
	{
		if (g_bWaitHpVillage)
		{
			g_bWaitHpVillage = FALSE;
			ShowStatus(2, 60225, NULL, 60);						// L"체력 회복을 대기합니다 (수치: %d%%)", 
		}

		PressKeyAlternate(L'Q');
		SetDelay(10);
		return;
	}



	// 다음 진행할 동작 체크하자
	g_bWaitHpVillage = TRUE;

	g_dwPreQuestID = 0;
	g_bMoveHuntPos = FALSE;
	g_bMoveHuntSet = FALSE;
	g_dwNoMonsterTick = g_dwTickCount;
	SetStatus(STATUS_DOAUTO, 10);
}


void OnGameCharDead(DWORD* dwAddress)
{
	if (g_pCharInfo.nCurHp <= 0)			// 사망한 상태면
	{
		// 10분이상 사망 확인 창문이 안나오는 경우
		if (g_qwCharDeadChaoTick != 0 && g_dwTickCount >= g_qwCharDeadChaoTick + 10 * 60 * 1000)
		{
			g_qwCharDeadChaoTick = 0;
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
			SetDelay(20);
			return;
		}

		UProjectLH_LHWidget_Revival* pRevival = (UProjectLH_LHWidget_Revival*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Revival));;
		if (pRevival && pRevival->IsVisible())
		{
			if (g_qwCharDeadTick == 0)
				g_qwCharDeadTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwCharDeadTick + 5 * 1000)
			{
				g_qwCharDeadTick = 0;

				switch (pRevival->C_Swicher_Revival->ActiveWidgetIndex)
				{
				case 0:
				{
					ShowStatus(0, 60226);		// L"마을에서 부활합니다");
					pRevival->OnClicked_RevivalReturn();
				}
				break;
				case 2:
				{
					ShowStatus(0, 60227);		// L"인스턴스 던전에서 나갑니다");
					pRevival->OnClicked_ModeOut();
				}
				break;
				case 3:
				{
					// 					ShowStatus(0, 60228);		// L"관전을 진행합니다");
					// 					pRevival->OnClicked_ObserverMode();
				}
				break;
				default:
				{
					AJLog(L"Switcher  Active  %d / %d", pRevival->C_Swicher_Revival->ActiveWidgetIndex, pRevival->C_Switcher_LabelType->ActiveWidgetIndex);
				}
				break;
				}
			}
		}

		SetDelay(20);
	}
	else
	{
		if (g_HuntSetting.bDeadStop)			// 사망 횟수 체크해서 오토 중지하자
		{
			if (g_HuntSetting.nDeadCount <= 1 || (g_nDeadCount >= g_HuntSetting.nDeadCount &&
				g_dwDeadTime[g_nDeadCount - 1] - g_dwDeadTime[g_nDeadCount - g_HuntSetting.nDeadCount] <= g_HuntSetting.nDeadTime * 60 * 1000))
			{
				g_pGameMapping->bAutoRun = FALSE;
				g_pGameMapping->bLogType = LogType_ChangeAutoState;

				g_nDeadCount = 0;
				ShowStatus(4, 60229, NULL, g_HuntSetting.nDeadTime, g_HuntSetting.nDeadCount);			// L"%d분사이 %d번이상 사망하였습니다", 

				g_nResumeTime = -1;
				g_qwResumeTickCount = 0;
				if (g_HuntSetting.bDeadStopResume)
					g_nResumeTime = g_HuntSetting.nDeadStopResume;

				return;
			}
		}

		if (!IsChaoStatus(STATUS_RECOVEREXP) && IsExistRecoverExp(dwAddress) && CanRecoverExp())
		{
			ShowStatus(0, 60230);			// L"사망 경험치 복구를 진행합니다");
			SetStatus(STATUS_RECOVEREXP, 10);
		}
		else
		{										// 살아난 위치가 마을이면 
			if (g_pCharInfo.nMapType == MapType_Village)
				SetStatus(STATUS_RETURNVILLAGE, 10);
			else
			{
				g_dwPreQuestID = 0;
				g_bMoveHuntPos = FALSE;
				g_bMoveHuntSet = FALSE;
				g_dwNoMonsterTick = g_dwTickCount;
				SetStatus(STATUS_DOAUTO, 10);
			}
		}
	}
}


BOOL IsDungeonFinish(int nDungeon)
{
	if (g_pCharInfo.nLevel < g_pDungeonRes[nDungeon].nNeedLevel)			// 레벨보다 낮은 경우
	{
		ShowStatus(1, 60231, g_pDungeonRes[nDungeon].szRegion);				// L"레벨이 낮아 던전 \"%s\"에 입장할수 없습니다", 
		return TRUE;
	}
	// 퀘스트 못한 경우
	if (g_pDungeonRes[nDungeon].nNeedQuest == 0 || GetMainQuestNo() < g_pDungeonRes[nDungeon].nNeedQuest)
	{
		ShowStatus(1, 60232, g_pDungeonRes[nDungeon].szRegion);				// L"던전 \"%s\" 입장 퀘스트를 진행하지 못하였습니다", 
		return TRUE;
	}

	if (g_pCharInfo.nGoods[0] < g_pDungeonRes[nDungeon].nNeedGold)
	{
		ShowStatus(1, 60233, g_pDungeonRes[nDungeon].szRegion);				// L"던전 \"%s\" 입장 비용이 부족합니다", 
		return TRUE;
	}

	// 	if (g_pCharInfo.nPower < g_pDungeonRes[nDungeon].nNeedPower)			// 전투력 부족인 경우
	// 	{
	// 		ShowStatus(1, 60304, g_pDungeonRes[nDungeon].szRegion);				// 던전 [%s] 전투력이 부족합니다
	// 		return TRUE;
	// 	}

	// 	if (!g_pDungeonRes[nDungeon].bAloneDungeon)								// 파티 던전 입장시간 체크하자
	// 	{
	// 		if (GetCurKoreanTime() > 200 && GetCurKoreanTime() < 1000)
	// 		{
	// 			ShowStatus(1, 60340, g_pDungeonRes[nDungeon].szRegion);
	// 			return TRUE;
	// 		}
	// 	}

	if (g_pDungeonRes[nDungeon].nRemainTime == 0)							// 입장시간 없거나 입장권이 없는 경우
	{
		if (!g_pDungeonRes[nDungeon].bAloneDungeon)							// 파티던전인 경우 입장권이 있나 보자
		{
			WCHAR szItem[MAX_NAME] = { 0, };
			swprintf(szItem, L"%s 입장권", g_pDungeonRes[nDungeon].szRegion);
			for (int i = 0; i < g_nInvenCount; i++)
			{
				if (!g_OtherSetting.bUseTicket && !wcsstr(g_pInvenInfo[i].szName, L"귀속)"))				// 귀속 입장권만 사용한다
					continue;

				if (wcsstr(g_pInvenInfo[i].szName, szItem))
					return FALSE;
			}
		}

		if (!g_pDungeonRes[nDungeon].bAloneDungeon)
			ShowStatus(1, 60234, g_pDungeonRes[nDungeon].szRegion);				// L"던전 \"%s\" 입장권이 없습니다", 
		else
			ShowStatus(1, 60235, g_pDungeonRes[nDungeon].szRegion);				// L"던전 \"%s\" 남은 시간이 없습니다", 

		return TRUE;
	}

	if (!wcscmp(g_pDungeonRes[nDungeon].szDungeon, L"그림자 성채") &&				// 그림자 성채 일때
		g_pDungeonRes[nDungeon].nRemainTime > 1)
	{
		WCHAR szItem[MAX_NAME] = { 0, };
		swprintf(szItem, L"그림자 성채 %d단계 이동석 - ", g_pDungeonRes[nDungeon].nRemainTime);

		int nCount = 0;
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (wcsstr(g_pInvenInfo[i].szName, szItem))
			{
				nCount += g_pInvenInfo[i].nCount;
			}
		}

		if (nCount == 0)
		{
			ShowStatus(1, 60340, g_pDungeonRes[nDungeon].szRegion);
			return TRUE;
		}

		// 		int wDay = 0;
		// 		int nTime = GetCurKoreanTime(&wDay);
		// 		if (wDay == 0 || wDay % 2 != 0 || nTime < 2130 || nTime >= 2230)		// 화, 목, 토 21:30 ~ 22:30까지만 입장가능
		// 		{
		//  			ShowStatus(1, 60340, g_pDungeonRes[nDungeon].szRegion);
		//  			return TRUE;
		// 		}
	}

	return FALSE;
}


WCHAR* GetMapName(DWORD* dwAddress, DWORD dwMapId)
{
	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwItemParam[5];
	qwItemParam[0] = 0;
	qwItemParam[1] = 13;

	initString((DWORD64)qwItemParam, 0);
	memcpy((void*)qwItemParam[0], L"MapTable.tbl", 26);

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwVolumeAreaTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwItemParam);

	if (!qwVolumeAreaTable)
		return NULL;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	UCommonSource_MapInfoRecord* mapRecord = (UCommonSource_MapInfoRecord*)getQuestInfo(*(DWORD64*)(qwVolumeAreaTable + OFFSET_QUESTINFO), dwMapId);
	if (!mapRecord)
		return NULL;

	return GetGameString(dwAddress, mapRecord->NameCode);
}


BOOL g_bTeleportInit = FALSE;
BOOL TeleportMap(DWORD* dwAddress, const WCHAR* szWorld, const WCHAR* szField)
{
	BOOL bRet = FALSE;

	SetDelay(10);

	UProjectLH_LHWidget_WorldMapWindow* uiWorldMapWindow = (UProjectLH_LHWidget_WorldMapWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_WorldMapWindow));
	if (!uiWorldMapWindow || !uiWorldMapWindow->IsVisible())
	{
		if (IsInDungeon())
		{
			ReturnVillage(dwAddress);
			SetDelay(20);
			return bRet;
		}

		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return bRet;
		}

		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
			uiInGame->C_InGame_Minimap_Container->OnClicked_WorldMap();

		g_bTeleportInit = FALSE;
		SetDelay(20);
		return bRet;
	}

	UProjectLH_LHWidget_WorldMap* C_AreaInner = uiWorldMapWindow->C_AreaInner;
	if (!C_AreaInner)
		return bRet;

	int nSelectWorld = *(int*)((DWORD64)uiWorldMapWindow + OFFSET_SELECTEDWORLDID);
	if (nSelectWorld == -1)
		return bRet;

	WCHAR* szSelectWorld = GetMapName(dwAddress, nSelectWorld);
	if (!szSelectWorld)
		return bRet;

	BOOL bEqualWorld = !wcscmp(szSelectWorld, szWorld);

	//FreeGarbageMemory(dwAddress, (DWORD64)szSelectWorld);
	FreeGarbageMemory((DWORD64)szSelectWorld);

	UProjectLH_LHWidget_WorldMapTotalView* C_TotalView = uiWorldMapWindow->C_TotalView;

	if (!bEqualWorld)
	{
		if (uiWorldMapWindow->C_WS_Window->ActiveWidgetIndex != 0)
		{
			C_AreaInner->OnClicked_TopArea();
			SetDelay(20);
			return bRet;
		}

		UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
		if (!objGameInstance)
			return bRet;

		AProjectLH_LHGameMode_InGame* inGameMode = objGameInstance->GetInGameMode();
		if (!inGameMode)
			return bRet;

		DWORD dwSelectedWorldIdTemp = *(DWORD*)((DWORD64)inGameMode->WorldMap_Handler->WorldMapSelect_Handler + OFFSET_SELECT_MAPWORLDID);

		int nIndex = -1;
		for (int k = 0; k < MAX_WORLD; k++)
		{
			if (!wcscmp(g_pWorldMap[k].szName, szWorld))
			{
				nIndex = k;
				break;
			}
		}

		if (nIndex != -1)
		{
			if (dwSelectedWorldIdTemp != g_pWorldMap[nIndex].dwId || !g_bTeleportInit)
			{
				g_bTeleportInit = TRUE;
				inGameMode->SetDetailWorldMapFromTotalView(g_pWorldMap[nIndex].dwId);
			}
			else
				C_TotalView->OnTouchBtnEnter();
		}

		SetDelay(20);
		return bRet;
	}

	UProjectLH_LHWidget_WorldMap_ListPopup* C_Widget_WorldMap_ListPopup = C_AreaInner->C_Widget_WorldMap_ListPopup;
	if (!C_Widget_WorldMap_ListPopup || !C_Widget_WorldMap_ListPopup->IsVisible())
	{
		C_AreaInner->OnClicked_AreaList();
		SetDelay(20);
		return bRet;
	}

	UProjectLH_LHWidget_WorldMapSectorInfo* C_BP_SectorInfo = C_AreaInner->C_BP_SectorInfo;
	if (!C_BP_SectorInfo)
		return bRet;

	DWORD dwSelectedArea = *(DWORD*)((DWORD64)C_Widget_WorldMap_ListPopup + OFFSET_SELECTEDVOLUMAREA - 8);
	DWORD dwSelectedTower = *(DWORD*)((DWORD64)C_Widget_WorldMap_ListPopup + OFFSET_SELECTEDVOLUMAREA - 4);

	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwItemParam[5];
	qwItemParam[0] = 0;
	qwItemParam[1] = 20;

	initString((DWORD64)qwItemParam, 0);
	memcpy((void*)qwItemParam[0], L"VolumeAreaTable.tbl", 40);

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return bRet;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwVolumeAreaTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwItemParam);

	if (!qwVolumeAreaTable)
		return bRet;

	int nCount = C_Widget_WorldMap_ListPopup->ListPopup_ContainerPool.ActiveUIs.Num();
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_WorldMap_ListPopup_Container* worldMapAreaContainer = (UProjectLH_LHWidget_WorldMap_ListPopup_Container*)C_Widget_WorldMap_ListPopup->ListPopup_ContainerPool.ActiveUIs[i];
		if (!worldMapAreaContainer)
			continue;

		DWORD dwMapAreaId = *(DWORD*)((DWORD64)worldMapAreaContainer + OFFSET_WORLDMAPID);

		_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
		UCommonSource_NaviVolumeAreaInfoRecord* areaInfoRecord = (UCommonSource_NaviVolumeAreaInfoRecord*)getQuestInfo(*(DWORD64*)(qwVolumeAreaTable + OFFSET_VOLUMEAREAINFO), dwMapAreaId);
		if (!areaInfoRecord)
			continue;

		WCHAR* szMapField = GetGameString(dwAddress, areaInfoRecord->NameCode);
		if (szMapField != NULL && !wcscmp(szField, szMapField))
		{
			//FreeGarbageMemory(dwAddress, (DWORD64)szMapField);
			FreeGarbageMemory((DWORD64)szMapField);

			if (dwSelectedArea != dwMapAreaId)
				worldMapAreaContainer->OnClicked_Select();
			else
			{
				C_BP_SectorInfo->OnTouchBtnFastMove();
				bRet = TRUE;
			}

			break;
		}

		//FreeGarbageMemory(dwAddress, (DWORD64)szMapField);
		FreeGarbageMemory((DWORD64)szMapField);
	}

	SetDelay(20);
	return bRet;
}



void OnGameUseItem(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	int nIndex = -1;
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].bLocked || g_pInvenInfo[i].bEquiped)
			continue;

		if (g_pCharInfo.nLevel < g_pInvenInfo[i].nNeedLevel)
			continue;

		if (!wcscmp(g_pInvenInfo[i].szName, g_szUseItemName))
		{
			nIndex = i;
			break;
		}
	}

	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));

	if (nIndex == -1)								// 사용할 아이템이 없으면
	{
		if (uiInven && uiInven->IsVisible())
			uiInven->C_BP_Widget_Inven->OnTapExitBtn();

		memset(g_szUseItemName, 0, sizeof(WCHAR) * MAX_NAME);
		SetStatus(g_nPreStatus);
		return;
	}

	if (UseQuickSlot(g_szUseItemName))				// 퀵슬롯에 있으면 그냥 사용하자
	{
		SetStatus(g_nPreStatus);
		return;
	}

	if (!uiInven || !uiInven->IsVisible())
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
	else
	{
		UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
		if (uiItemInfo && uiItemInfo->IsVisible() && (DWORD64)uiItemInfo->CurrentItem == g_pInvenInfo[nIndex].qwItemAddr)
		{
			uiItemInfo->OnTapButton03();

			memset(g_szUseItemName, 0, sizeof(WCHAR) * MAX_NAME);
			SetDelay(10);
			return;
		}

		SelectInvenItem(dwAddress, nIndex);
	}

	SetDelay(10);
}


BOOL ChangeGameSetting(DWORD* dwAddress, int nTargetRange, int bManner, int nPotion)
{
	// 프레임
	BOOL bFrameEnable = g_bFrameEnable;
	int nFrameValue = g_nFrameValue;
	if (!bFrameEnable)
	{
		bFrameEnable = g_OtherSetting.bFrameEnable;
		nFrameValue = g_OtherSetting.nFrameValue;
	}

	if (bFrameEnable)
	{
		DWORD64 qwGraphicManager = *(DWORD64*)(PATCHADDR(dwAddress[ADDR_GRAPHIC_MANAGER], dwAddress[0]));
		if (qwGraphicManager)
		{
			_callFuncF1 funcGet = (_callFuncF1)(*(DWORD64*)(*(DWORD64*)qwGraphicManager + OFFSET_GRAPHIC_SETFRAME - 8));
			float fValue = funcGet(qwGraphicManager);
			if (fValue != (float)nFrameValue && nFrameValue > 5)
			{
				_callFunc2F funcSet = (_callFunc2F)(*(DWORD64*)(*(DWORD64*)qwGraphicManager + OFFSET_GRAPHIC_SETFRAME));
				funcSet(qwGraphicManager, (float)nFrameValue);
			}
		}
	}

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return FALSE;

	UProjectLH_LHGameOption* GameOption = pInstance->GameOption;
	if (!GameOption)
		return FALSE;

	UProjectLH_LHSaveData* SaveData = pInstance->SaveData;
	if (!SaveData)
		return FALSE;

	UProjectLH_OptionSaveData* OptionSaveData = SaveData->OptionSaveData;
	if (!OptionSaveData)
		return FALSE;

	UProjectLH_LHWidget_OptionWindow* OptionWindow = reinterpret_cast<UProjectLH_LHWidget_OptionWindow*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_OptionWindow::StaticClass()));

	_callFunc1 pf = (_callFunc1)PATCHADDR(dwAddress[ADDR_GET_CHARID], dwAddress[0]);
	DWORD64 qwCharID = pf((DWORD64)pInstance);
	if (qwCharID)
	{
		// 절전모드 확인하자

		BOOL bSetPowerMode = TRUE;
		DWORD64 qwAddr = *(DWORD64*)((DWORD64)&OptionSaveData->GameOptionSaveData.PowerSaving + 0x00);
		if (qwAddr)
		{
			int nCount = *(int*)((DWORD64)&OptionSaveData->GameOptionSaveData.PowerSaving + 0x08);
			for (int i = 0; i < nCount; i++)
			{
				if (qwCharID != *(DWORD64*)(qwAddr + i * 24))
					continue;

				if (*(BYTE*)(qwAddr + i * 24 + 8) == 0)				// 절전 모드가 오프로 되어있다
				{
					bSetPowerMode = FALSE;
					break;
				}
			}
		}

		if (bSetPowerMode && !g_bSettingChange[0])
		{
			if (OptionWindow && OptionWindow->IsVisible())
			{
				if (SelectTab(OptionWindow->C_MainTabList, 0))
				{
					ShowStatus(0, 60244);								// L"절전 모드를 오프로 설정합니다");

					g_bSettingChange[0] = 1;
					OptionWindow->C_Game->OnClicked_Btn_PowerSaving_Off();
				}
			}
			else
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

			SetDelay(5);
			return TRUE;
		}

		// 카메라 움직임 제거하자

		BOOL bSetFlag = TRUE;
		// 		qwAddr = *(DWORD64*)((DWORD64)& OptionSaveData->GameOptionSaveData.InGameCameraAutoMove + 0x00);
		// 		if (qwAddr)
		// 		{
		// 			int nCount = *(int*)((DWORD64)& OptionSaveData->GameOptionSaveData.InGameCameraAutoMove + 0x08);
		// 			for (int i = 0; i < nCount; i++)
		// 			{
		// 				if (qwCharID != *(DWORD64*)(qwAddr + i * 24))
		// 					continue;
		// 
		// 				if (*(BYTE*)(qwAddr + i * 24 + 8) == 0)
		// 				{
		// 					bSetFlag = FALSE;
		// 					break;
		// 				}
		// 			}
		// 		}
		// 
		// 		if (bSetFlag && !g_bSettingChange[1])
		// 		{
		// 			if (OptionWindow && OptionWindow->IsVisible())
		// 			{
		// 				if (SelectTab(OptionWindow->C_MainTabList, 0))
		// 				{
		// 					g_bSettingChange[1] = 1;
		// 					OptionWindow->C_Game->OnClicked_Btn_InGameCameraAutoMove();
		// 				}
		// 			}
		// 			else
		// 				OpenMenuWindow(FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
		// 
		// 			SetDelay(5);
		// 			return TRUE;
		// 		}

		bSetFlag = TRUE;
		qwAddr = *(DWORD64*)((DWORD64)&OptionSaveData->GameOptionSaveData.CameraShake + 0x00);
		if (qwAddr)
		{
			int nCount = *(int*)((DWORD64)&OptionSaveData->GameOptionSaveData.CameraShake + 0x08);
			for (int i = 0; i < nCount; i++)
			{
				if (qwCharID != *(DWORD64*)(qwAddr + i * 24))
					continue;

				if (*(BYTE*)(qwAddr + i * 24 + 8) == 0)
				{
					bSetFlag = FALSE;
					break;
				}
			}
		}

		if (bSetFlag && !g_bSettingChange[2])
		{
			if (OptionWindow && OptionWindow->IsVisible())
			{
				if (SelectTab(OptionWindow->C_MainTabList, 0))
				{
					g_bSettingChange[2] = 1;
					OptionWindow->C_Game->OnClicked_Btn_CameraShake();
				}
			}
			else
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

			SetDelay(5);
			return TRUE;
		}

		bSetFlag = TRUE;
		qwAddr = *(DWORD64*)((DWORD64)&OptionSaveData->GameOptionSaveData.DynamicCamera + 0x00);
		if (qwAddr)
		{
			int nCount = *(int*)((DWORD64)&OptionSaveData->GameOptionSaveData.DynamicCamera + 0x08);
			for (int i = 0; i < nCount; i++)
			{
				if (qwCharID != *(DWORD64*)(qwAddr + i * 24))
					continue;

				if (*(BYTE*)(qwAddr + i * 24 + 8) == 0)
				{
					bSetFlag = FALSE;
					break;
				}
			}
		}

		if (bSetFlag && !g_bSettingChange[3])
		{
			if (OptionWindow && OptionWindow->IsVisible())
			{
				if (SelectTab(OptionWindow->C_MainTabList, 0))
				{
					g_bSettingChange[3] = 1;
					OptionWindow->C_Game->OnClicked_Btn_DynamicCamera();
				}
			}
			else
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

			SetDelay(5);
			return TRUE;
		}
	}

	// 타겟팅 범위 (50, 80, 0)

	if (nTargetRange != -1 && *(BYTE*)((DWORD64)GameOption + OFFSET_OPTION_TARGETRANGE) != nTargetRange && !g_bSettingChange[4])
	{
		if (OptionWindow && OptionWindow->IsVisible())
		{
			if (SelectTab(OptionWindow->C_MainTabList, 1))
			{
				if (nTargetRange != 0)
				{
					ShowStatus(2, 60240, NULL, nTargetRange);						// L"타겟팅 범위를 %dm로 설정합니다", 

					if (nTargetRange == 80)
						OptionWindow->C_Battle->OnClicked_Btn_AutoBattleTargetRange_4();
					else if (nTargetRange == 50)
						OptionWindow->C_Battle->OnClicked_Btn_AutoBattleTargetRange_3();
					else
						OptionWindow->C_Battle->OnClicked_Btn_AutoBattleTargetRange_2();
				}
				else
				{
					OptionWindow->C_Battle->OnClicked_Btn_AutoBattleTargetRange_Unlimit();

					ShowStatus(0, 60241);											// L"타겟팅 범위를 제한없음으로 설정합니다");
				}

				g_bSettingChange[4] = 1;
			}
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

		SetDelay(5);
		return TRUE;
	}

	// HP 물약 사용 퍼센트 (0 ~ 100)

	if (nPotion > 0 && nPotion < 100 && *(BYTE*)((DWORD64)GameOption + OFFSET_OPTION_HPPOTION) != nPotion && !g_bSettingChange[5])
	{
		if (OptionWindow && OptionWindow->IsVisible())
		{
			if (SelectTab(OptionWindow->C_MainTabList, 1))
			{
				OptionWindow->C_Battle->OnChanged_Slider_AutoPotionValue(nPotion * 1.0f / 100);
				g_bSettingChange[5] = 1;
			}
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

		SetDelay(5);
		return TRUE;
	}

	// 매너 모드 (0, 1)

	if (bManner != -1 && *(BYTE*)((DWORD64)GameOption + OFFSET_OPTION_MANNERMODE) != bManner && !g_bSettingChange[6])
	{
		if (OptionWindow && OptionWindow->IsVisible())
		{
			if (SelectTab(OptionWindow->C_MainTabList, 1))
			{
				if (bManner)
					ShowStatus(0, 60242);		// L"매너 모드를 설정합니다");
				else
					ShowStatus(0, 60243);		// L"매너 모드를 해제합니다");

				OptionWindow->C_Battle->OnClicked_Btn_MannerMode();
				g_bSettingChange[6] = 1;
			}
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

		SetDelay(5);
		return TRUE;
	}

	// 그래픽 품질

// 	if (OptionSaveData->GameOptionSaveData.QualityType)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Quality_Custom();
// 				
// 				g_bSettingChange[7] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 해상도

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.ResolutionType)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Resolution_Low();
// 
// 				g_bSettingChange[8] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 텍스쳐

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.TextureQuality)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Texture_Low();
// 
// 				g_bSettingChange[9] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 이펙트

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.EffectType)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Effect_Hide();
// 
// 				g_bSettingChange[10] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 그림자

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.ShadowQuality)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Shadow_Low();
// 
// 				g_bSettingChange[11] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 안티 엘리싱

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.UseAntiAliasing)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_AntiAliasing();
// 
// 				g_bSettingChange[12] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 모션 블러

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.MotionBlurType)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_MotionBlur_Off();
// 
// 				g_bSettingChange[13] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

// 	if (OptionSaveData->GameOptionSaveData.QualityLevels.FPSType)
// 	{
// 		if (OptionWindow && OptionWindow->IsVisible())
// 		{
// 			if (SelectTab(OptionWindow->C_MainTabList, 2))
// 			{
// 				OptionWindow->C_Environment->OnClicked_Btn_Frame_Low();
// 
// 				g_bSettingChange[14] = 1;
// 			}
// 		}
// 		else
// 			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
// 
// 		SetDelay(5);
// 		return TRUE;
// 	}

	// 획득 등급
	if (g_HuntSetting.bEnablePickGrade && *(BYTE*)((DWORD64)GameOption + OFFSET_OPTION_EQUIPGETGRADE) !=
		g_HuntSetting.nItemPickGrade && !g_bSettingChange[15])
	{
		if (OptionWindow && OptionWindow->IsVisible())
		{
			if (SelectTab(OptionWindow->C_MainTabList, 1))
			{
				if (g_HuntSetting.nItemPickGrade == 0)
					OptionWindow->C_Battle->OnClicked_Btn_EquipGetGrade_Unlimit();
				else if (g_HuntSetting.nItemPickGrade == 1)
					OptionWindow->C_Battle->OnClicked_Btn_EquipGetGrade_High();
				else if (g_HuntSetting.nItemPickGrade == 2)
					OptionWindow->C_Battle->OnClicked_Btn_EquipGetGrade_Rare();
				else
					OptionWindow->C_Battle->OnClicked_Btn_EquipGetGrade_Hero();

				g_bSettingChange[15] = 1;
			}
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);

		SetDelay(5);
		return TRUE;
	}

	if (OptionWindow && OptionWindow->IsVisible())
	{
		for (int i = 0; i < 20; i++)
		{
			if (g_bSettingChange[i])
			{
				UProjectLH_LHWidget_Topmenu* TopMenu = OptionWindow->C_Topmenu;
				if (TopMenu)
					TopMenu->OnTapExitBtn();

				return TRUE;
			}
		}
	}

	memset(g_bSettingChange, 0, sizeof(BYTE) * 20);
	return FALSE;
}


BOOL IsExistAchievement(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return FALSE;

	UProjectLH_LHAchievementMgr* AchievementMgr = pInstance->AchievementMgr;
	if (!AchievementMgr)
		return FALSE;

	_callFunc1 pfGetAchievementState = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETACHIEVEMENTSTATE], dwAddress[0]);
	return (char)pfGetAchievementState((DWORD64)AchievementMgr);
}


void OnGameAchievement(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_Achievement_Main* AchievementMain = reinterpret_cast<UProjectLH_LHWidget_Achievement_Main*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Achievement_Main::StaticClass()));
	if (!AchievementMain)
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Achievement);
	else
	{
		if (IsExistAchievement(dwAddress))
			AchievementMain->OnAllAchievedReward();
		else
		{
			ShowStatus(0, 60245);			// L"업적 보상 을(를) 확인하였습니다");

			UProjectLH_LHWidget_Topmenu* TopMenu = AchievementMain->C_Widget_Topmenu;
			if (TopMenu)
				TopMenu->OnTapExitBtn();

			SetStatus(g_nPreStatus, 10);
			return;
		}
	}

	SetDelay(10);
}


BOOL OnCloseAchievementResult(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Achievement_RewordPopup* AchievementRewardPopup = reinterpret_cast<UProjectLH_LHWidget_Achievement_RewordPopup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Achievement_RewordPopup::StaticClass()));
	if (!AchievementRewardPopup)
		return FALSE;

	AchievementRewardPopup->OnCloseUI();
	return TRUE;
}


BOOL OnCloseMailItem(DWORD* dwAddress)
{
	UProjectLH_LHWidget_TakeItem* TakeItem = reinterpret_cast<UProjectLH_LHWidget_TakeItem*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_TakeItem::StaticClass()));
	if (!TakeItem)
		return FALSE;

	TakeItem->PlayCloseAni();
	return TRUE;
}


BOOL IsMenuRedDot(DWORD* dwAddress, FProjectLH_ProjectLH_EMarkTypeGroup eMark)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return FALSE;

	UProjectLH_LHMarkMgr* markMgr = objGameInstance->MarkMgr;
	if (!markMgr)
		return FALSE;

	UProjectLH_LHAlarmMarker_GameMenu* AlarmMarkerGameMenu = markMgr->AlarmMarkerGameMenu;
	if (!AlarmMarkerGameMenu)
		return FALSE;

	_callFunc2 getNewMark = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETNEWMARK], dwAddress[0]);
	return ((int)getNewMark((DWORD64)AlarmMarkerGameMenu, (DWORD64)eMark) > 0);
}


void OnGameMail(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_MailMain* MailMain = reinterpret_cast<UProjectLH_LHWidget_MailMain*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_MailMain::StaticClass()));
	if (!MailMain)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Mail);
		SetDelay(10);
		return;
	}

	UProjectLH_LHTabList* TabList = MailMain->C_TabList;
	if (!TabList)
	{
		SetDelay(10);
		return;
	}

	TArray<class UUMG_UserWidget*> TabArray = TabList->EntryWidgetPool.ActiveWidgets;
	while (1)
	{
		if (g_nPostIndex >= TabArray.Num())			// 마지막까지 확인한 경우
			break;
		// 캐릭 우편 확인 안하는 경우
		if (!g_OtherSetting.bCharacMail && g_nPostIndex == 0)
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}
		// 계정 우편 확인 안하는 경우
		if (!g_OtherSetting.bAccountMail && g_nPostIndex == 1)
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}

		UProjectLH_LHWidget_TabUserWidget* Tab = (UProjectLH_LHWidget_TabUserWidget*)TabArray[g_nPostIndex];
		if (!Tab)									// !Tab->C_Noti->IsVisible()
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}
		// 선택이 안된 경우
		if (*(DWORD*)((DWORD64)TabList + OFFSET_SELECTEDTAB) != g_nPostIndex)
		{
			Tab->OnClicked_TapSlot();

			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_MailList* MailList = MailMain->C_Widget_MailList;
		if (!MailList)
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}

		DWORD64 dwScrollBox = (DWORD64)MailList->C_Scroll_MailList;
		if (!dwScrollBox)
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}

		int nMailCount = *(int*)(dwScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY);
		if (nMailCount < 0)							// 우편이 없으면
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}

		DWORD64	dwScrollBoxItem = *(DWORD64*)(dwScrollBox + OFFSET_MYSCROLLBOXITEM);
		if (!dwScrollBoxItem)
		{
			g_nStepStatus = 0;
			g_nPostIndex++;
			continue;
		}

		BOOL bReceive = FALSE;
		nMailCount = *(int*)(dwScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
		for (int j = 0; j < nMailCount; j++)
		{
			UProjectLH_LHWidget_MailList_Container* Mail = (UProjectLH_LHWidget_MailList_Container*)*(DWORD64*)(dwScrollBoxItem + 24 * j + 8);
			if (!Mail)
				continue;

			if (Mail->C_BtnType->GetActiveWidgetIndex() == 0)
			{
				bReceive = TRUE;
				break;
			}
		}

		if (bReceive && g_nStepStatus != 1)
		{
			g_nStepStatus = 1;
			MailList->OnClickedAcceptAll();
		}
		else
		{
			g_nStepStatus = 0;
			g_nPostIndex++;

			MailList->OnClickedDeleteAll();
		}

		SetDelay(30);
		return;
	}

	ShowStatus(0, 60246);		// L"우편 확인 을(를) 진행하였습니다");
	UProjectLH_LHWidget_Topmenu* TopMenu = MailMain->C_Widget_Topmenu;
	if (TopMenu)
		TopMenu->OnTapExitBtn();

	g_bPostMail = TRUE;
	SetStatus(g_nPreStatus, 10);
}


BOOL OnCloseEventReward(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Event_RewordPopup* EventRewardPopup = reinterpret_cast<UProjectLH_LHWidget_Event_RewordPopup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Event_RewordPopup::StaticClass()));
	if (!EventRewardPopup)
		return FALSE;

	EventRewardPopup->OnClickReward();
	return TRUE;
}


void OnGameEvent(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		g_qwEventSceneTick = 0;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_Event_Popup* EventPopup = (UProjectLH_LHWidget_Event_Popup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Event_Popup));

	if (g_qwEventSceneTick == 0)
		g_qwEventSceneTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwEventSceneTick + 5 * 60 * 1000)
	{
		if (EventPopup && EventPopup->IsVisible())
			EventPopup->OnClicked_CloseBtn();

		g_qwEventSceneTick = 0;
		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (!EventPopup || !EventPopup->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Event);
		SetDelay(10);
		return;
	}

	UUMG_WidgetSwitcher* Switcher = EventPopup->C_Switcher_Event;
	if (!Switcher)
	{
		SetDelay(10);
		return;
	}

	DWORD64 dwScrollBox = (DWORD64)EventPopup->C_Attendance_Event_ScrollBox;
	if (!dwScrollBox)
	{
		SetDelay(10);
		return;
	}

	DWORD64	dwScrollBoxItem = *(DWORD64*)(dwScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!dwScrollBoxItem)
	{
		SetDelay(10);
		return;
	}

	TArray<class UUMG_PanelSlot*> Slots = Switcher->Slots;
	//int nEventCount = *(int*)(dwScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	int nEventCount = 0;
	while (1)
	{
		if (g_nEventIndex >= nEventCount)
			break;

		UProjectLH_LHWidget_Event_Tap* EventTap = (UProjectLH_LHWidget_Event_Tap*)*(DWORD64*)(dwScrollBoxItem + 24 * g_nEventIndex + 8);

// 		if (!EventTap || !EventTap->C_Attendance_NewIcon->IsVisible())
// 		{
// 			AJLog(L"---------- OnGamEvent c attendance new icon not visible");
// 			g_nEventIndex++;
// 			continue;
// 		}

		if (EventTap != EventPopup->SelectedTap)
		{
			EventTap->OnClickedInfo();

			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_Event_Page* EventPage = (UProjectLH_LHWidget_Event_Page*)Slots[g_nEventIndex]->Content;
		if (!EventPage || !EventPage->EventWidget)
		{
			g_nEventIndex++;
			continue;
		}

		DWORD64 qwEventWidget = *(DWORD64*)EventPage->EventWidget;
		if (qwEventWidget == PATCHADDR(dwAddress[ADDR_ATTENDANCE_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_Attendance_Container* Container = (UProjectLH_LHWidget_Attendance_Container*)EventPage->EventWidget;
			if (!Container)
			{
				g_nEventIndex++;
				continue;
			}

			TArray<class UProjectLH_LHWidget_Attendance_RewardSlot*> RewardSlotArray = Container->RewardSlotArray;
			for (int j = 0; j < RewardSlotArray.Num(); j++)
			{
				UProjectLH_LHWidget_Attendance_RewardSlot* RewardSlot = RewardSlotArray[j];
				if (!RewardSlot || !RewardSlot->C_Noti->IsVisible())
					continue;

				RewardSlot->OnClickedRewardBtn();

				SetDelay(10);
				return;
			}
		}
		else if (qwEventWidget == PATCHADDR(dwAddress[ADDR_ATTENDANCE_EXTENDED_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_Attendance_Extended_Container* Container = (UProjectLH_LHWidget_Attendance_Extended_Container*)EventPage->EventWidget;
			if (!Container)
			{
				g_nEventIndex++;
				continue;
			}

			DWORD64 dwScrollBoxSub = (DWORD64)Container->C_LHScroll_WeekContainer;
			if (!dwScrollBoxSub)
			{
				SetDelay(10);
				return;
			}

			DWORD64	dwScrollBoxItemSub = *(DWORD64*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM);
			if (!dwScrollBoxItemSub)
			{
				SetDelay(10);
				return;
			}

			int nRowCount = *(int*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
			// AJLog(L"nRowCount  = %d", nRowCount);
			for (int j = 0; j < nRowCount; j++)
			{
				UProjectLH_LHWidget_Attendance_WeekSlot_Container* pWeekSlotContainer = (UProjectLH_LHWidget_Attendance_WeekSlot_Container*)
					*(DWORD64*)(dwScrollBoxItemSub + 24 * j + 8);
				if (!pWeekSlotContainer)
				{
					AJLog(L"---------- OnGamEvent else if container not found");
					continue;
				}
				AJLog(L"pWeekSlotContainer = %d", pWeekSlotContainer->RewardSlotArray.Num());
				for (int k = 0; k < pWeekSlotContainer->RewardSlotArray.Num(); k++)
				{
					UProjectLH_LHWidget_Attendance_RewardSlot* pRewardSlot = (UProjectLH_LHWidget_Attendance_RewardSlot*)pWeekSlotContainer->RewardSlotArray[k];
					if (!pRewardSlot || !pRewardSlot->C_Noti || !pRewardSlot->C_Noti->IsVisible())
						continue;

					pRewardSlot->OnClickedRewardBtn();
					SetDelay(10);
					return;
				}
			}

			UProjectLH_LHWidget_Attendance_RewardSlot* pRewardSlot = Container->C_LastSlot;
			if (pRewardSlot && pRewardSlot->C_Noti && pRewardSlot->C_Noti->IsVisible())
			{
				pRewardSlot->OnClickedRewardBtn();
				SetDelay(10);
				return;
			}
		}
		else if (qwEventWidget == PATCHADDR(dwAddress[ADDR_ATTENDANCE_CONDITION_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_Attendance_Condition_Container* Container = (UProjectLH_LHWidget_Attendance_Condition_Container*)EventPage->EventWidget;
			if (!Container)
			{
				g_nEventIndex++;
				continue;
			}

			DWORD64 dwScrollBoxSub = (DWORD64)Container->C_Attendance_Scroll;
			if (!dwScrollBoxSub)
			{
				SetDelay(10);
				return;
			}

			DWORD64	dwScrollBoxItemSub = *(DWORD64*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM);
			if (!dwScrollBoxItemSub)
			{
				SetDelay(10);
				return;
			}

			int nRewardCount = *(int*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
			for (int j = 0; j < nRewardCount + 1; j++)
			{
				UProjectLH_LHWidget_Attendance_RewardSlot* RewardSlot = nullptr;
				if (j == nRewardCount)
					RewardSlot = Container->C_Widget_Fixed_RewardSlot;
				else
					RewardSlot = (UProjectLH_LHWidget_Attendance_RewardSlot*)*(DWORD64*)(dwScrollBoxItemSub + 24 * j + 8);

				if (!RewardSlot || !RewardSlot->C_Noti->IsVisible())
					continue;

				RewardSlot->OnClickedRewardBtn();

				SetDelay(10);
				return;
			}
		}
		else if (qwEventWidget == PATCHADDR(dwAddress[ADDR_MISSION_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_Event_Mission_Container* Container = (UProjectLH_LHWidget_Event_Mission_Container*)EventPage->EventWidget;
			if (!Container)
			{
				g_nEventIndex++;
				continue;
			}

			DWORD64 dwScrollBoxSub = (DWORD64)Container->C_Attendance_Event_ScrollBox;
			if (!dwScrollBoxSub)
			{
				SetDelay(10);
				return;
			}

			DWORD64	dwScrollBoxItemSub = *(DWORD64*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM);
			if (!dwScrollBoxItemSub)
			{
				SetDelay(10);
				return;
			}

			int nRewardCount = *(int*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
			for (int j = 0; j < nRewardCount; j++)
			{
				UProjectLH_LHWidget_Event_MissionSlot_Container* MissionSlot = (UProjectLH_LHWidget_Event_MissionSlot_Container*)*(DWORD64*)(dwScrollBoxItemSub + 24 * j + 8);
				if (!MissionSlot || !MissionSlot->C_Widget_Reward->C_RecivedActive_Overlay->IsVisible())
					continue;

				MissionSlot->OnClickedMissionSlot();

				SetDelay(10);
				return;
			}
		}
		else if (*(DWORD64*)EventPage->EventWidget == PATCHADDR(dwAddress[ADDR_MISSION_DAY_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_Event_MissionDay_Container* Container = (UProjectLH_LHWidget_Event_MissionDay_Container*)EventPage->EventWidget;
			if (!Container)
			{
				g_nEventIndex++;
				continue;
			}

			TArray<class UProjectLH_LHWidget_Event_MissionDay*> MissionDayArray = Container->MissionDayArray;
			for (int j = 0; j < MissionDayArray.Num(); j++)
			{
				if (!MissionDayArray[j] || !MissionDayArray[j]->C_Noti->IsVisible())
					continue;

				// 선택되지 않았으면
				if (!MissionDayArray[j]->C_SelectSwitcher->GetActiveWidgetIndex())
				{
					MissionDayArray[j]->OnClicked_SlotThis();

					SetDelay(10);
					return;
				}

				DWORD64 dwScrollBoxSub = (DWORD64)Container->C_Attendance_Event_ScrollBox;
				if (!dwScrollBoxSub)
				{
					SetDelay(10);
					return;
				}

				DWORD64	dwScrollBoxItemSub = *(DWORD64*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM);
				if (!dwScrollBoxItemSub)
				{
					SetDelay(10);
					return;
				}

				int nRewardCount = *(int*)(dwScrollBoxSub + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
				for (int k = 0; k < nRewardCount; k++)
				{
					UProjectLH_LHWidget_Event_MissionSlot_Container* MissionSlot = (UProjectLH_LHWidget_Event_MissionSlot_Container*)*(DWORD64*)(dwScrollBoxItemSub + 24 * k + 8);
					if (!MissionSlot || !MissionSlot->C_Widget_Reward->C_RecivedActive_Overlay->IsVisible())
						continue;

					MissionSlot->OnClickedMissionSlot();
					SetDelay(10);
					return;
				}
			}
		}

		g_nEventIndex++;
	}

	ShowStatus(0, 60247);		// L"이벤트 보상 을(를) 확인하였습니다");

	g_bEventReward[0] = TRUE;
	g_qwEventSceneTick = 0;
	EventPopup->OnClicked_CloseBtn();
	SetStatus(g_nPreStatus, 10);
}


int GetBuyCashItemIndex(BOOL bCheckGold)
{
	// 소환할 골드가 층분한 경우
	if (!bCheckGold || g_pCharInfo.nGoods[0] >= g_BuySetting.nSummonGold)
	{
		for (int i = 0; i < 3; i++)							// 아바타
		{
			if (!g_BuySetting.bSummonAvatar[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[i].nNeedGold)
				continue;

			if (g_pCashItem[i].nRemainCount == 0)
				continue;

			return i;
		}

		for (int i = 0; i < 3; i++)							// 탈것
		{
			if (!g_BuySetting.bSummonRiding[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[3 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[3 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[3 + i].nNeedGold)
				continue;

			if (g_pCashItem[3 + i].nRemainCount == 0)
				continue;

			return 3 + i;
		}

		for (int i = 0; i < 2; i++)							// 룬
		{
			if (!g_BuySetting.bSummonRune[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[6 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[6 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[6 + i].nNeedGold)
				continue;

			if (g_pCashItem[6 + i].nRemainCount == 0)
				continue;

			return 6 + i;
		}
	}

	if (!bCheckGold || g_pCharInfo.nGoods[0] >= g_BuySetting.nPaperGold)
	{
		for (int i = 0; i < 4; i++)							// 강화석
		{
			if (!g_BuySetting.bPaperBuy[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[8 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[8 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[8 + i].nNeedGold)
				continue;

			if (g_pCashItem[8 + i].nRemainCount < 0 || g_pCashItem[8 + i].nRemainCount > max(0, g_pCashItem[8 + i].nLimitCount - g_BuySetting.nPaperCount[i]))
				return 8 + i;
		}

		for (int i = 0; i < 3; i++)							// 각인 도장, 유물 동전
		{
			if (!g_BuySetting.bCashItemBuy[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[12 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[12 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[12 + i].nNeedGold)
				continue;

			if (g_pCashItem[12 + i].nRemainCount < 0 || g_pCashItem[12 + i].nRemainCount > max(0, g_pCashItem[12 + i].nLimitCount - g_BuySetting.nCashItemBuy[i]))
				return 12 + i;
		}
	}

	if (!bCheckGold || g_pCharInfo.nGoods[0] >= g_BuySetting.nSummonGold)
	{
		for (int i = 0; i < 3; i++)							// 무기 형상
		{
			if (!g_BuySetting.bWeaponType[i])
				continue;

			if (GetMainQuestNo() <= g_pCashItem[14 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[14 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[14 + i].nNeedGold)
				continue;

			if (g_pCashItem[14 + i].nRemainCount == 0)
				continue;

			return 14 + i;
		}

		for (int i = 0; i < 5; i++)							// 미미르
		{
			if (!g_BuySetting.bMimirPotion[i])
				break;

			if (GetMainQuestNo() <= g_pCashItem[17 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[17 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[17 + i].nNeedGold)
				continue;

			if (g_pCashItem[17 + i].nRemainCount == 0)
				continue;

			return 17 + i;
		}

		for (int i = 0; i < 2; i++)
		{
			if (!g_BuySetting.bBlessingStone[i])
				break;

			if (GetMainQuestNo() <= g_pCashItem[22 + i].nNeedQuest)
				continue;

			if (g_pCharInfo.nLevel < g_pCashItem[22 + i].nNeedLevel)
				continue;

			if (g_pCharInfo.nGoods[0] < g_pCashItem[22 + i].nNeedGold)
				continue;

			if (g_pCashItem[22 + i].nRemainCount == 0)
				continue;

			return 22 + i;
		}
	}

	return -1;
}


int GetBuyCashItemCount(int nIndex)
{
	if (nIndex < 3)			// 아바타 소환인 경우
	{
		if (!g_BuySetting.bSummonAvatar[nIndex])
			return 0;
		else
			return 1;
	}
	else if (nIndex < 6)	// 탈것
	{
		if (!g_BuySetting.bSummonAvatar[nIndex - 3])
			return 0;
		else
			return 1;
	}
	else if (nIndex < 8)	// 룬
	{
		if (!g_BuySetting.bSummonRune[nIndex - 6])
			return 0;
		else
			return 1;
	}
	else if (nIndex < 12)	// 강화석
	{
		if (!g_BuySetting.bPaperBuy[nIndex - 8])
			return 0;

		int nCount = g_pCashItem[nIndex].nRemainCount - (g_pCashItem[nIndex].nLimitCount - (BYTE)g_BuySetting.nPaperCount[nIndex - 8]);
		if (nCount < 0)
			nCount = 0;

		return min(nCount, (int)g_pCharInfo.nGoods[0] / g_pCashItem[nIndex].nNeedGold);
	}
	else if (nIndex < 14)
	{
		if (!g_BuySetting.bCashItemBuy[nIndex - 12])
			return 0;

		int nCount = g_pCashItem[nIndex].nRemainCount - (g_pCashItem[nIndex].nLimitCount - (BYTE)g_BuySetting.nCashItemBuy[nIndex - 12]);
		if (nCount < 0)
			nCount = 0;

		return min(nCount, (int)g_pCharInfo.nGoods[0] / g_pCashItem[nIndex].nNeedGold);
	}
	else if (nIndex < 17)
	{
		if (!g_BuySetting.bWeaponType[nIndex - 14])
			return 0;
		else
			return 1;
	}
	else if (nIndex < 22)
	{
		if (!g_BuySetting.bMimirPotion[nIndex - 17])
			return 0;
		else
			return 1;
	}
	else if (nIndex < 24)
	{
		if (!g_BuySetting.bBlessingStone[nIndex - 22])
			return 0;
		else
			return 1;
	}

	return 0;
}


void OnGameCashShop(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	// 캐시샵 안켜졋으면 
	UProjectLH_LHWidget_Scene_CashShop* CashShop = reinterpret_cast<UProjectLH_LHWidget_Scene_CashShop*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Scene_CashShop::StaticClass()));
	if (!CashShop)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__CashShop);
		SetDelay(10);
		return;
	}

	// 구매창 켜진 상태면
	UProjectLH_LHWidget_CashShop_BuyPopup* BuyPopup = reinterpret_cast<UProjectLH_LHWidget_CashShop_BuyPopup*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_CashShop_BuyPopup::StaticClass()));
	if (BuyPopup)
	{
		WCHAR szName[MAX_NAME];
		GetTextFromTextBlock((UUMG_TextBlock*)BuyPopup->C_Tb_ShopItemName, szName);

		int nIndex = -1;
		for (int i = 0; i < MAX_CASH; i++)
		{
			if (!wcscmp(g_pCashItem[i].szName, szName))
			{
				nIndex = i;
				break;
			}
		}

		if (nIndex == -1)			// 다른 상품 잘못 클릭한 경우 취소하자
		{
			BuyPopup->OnTouchClose();
			SetDelay(10);
			return;
		}

		int nCount = GetBuyCashItemCount(nIndex);
		if (nCount <= 0)
		{
			BuyPopup->OnTouchClose();
			SetDelay(10);
			return;
		}

		int nLimit = *(int*)((DWORD64)BuyPopup + OFFSET_CASHSHOP_BUYLIMIT1 + OFFSET_CASHSHOP_BUYLIMIT2);
		if (nLimit > 1 && nCount != (int)BuyPopup->C_Slider_ItemCount->GetValue())
			BuyPopup->OnTapSliderValue((float)nCount);
		else
		{
			ShowStatus(3, 60248, g_pCashItem[nIndex].szName, nLimit > 1 ? nCount : 1);			// L"상품 \"%s\" 을(를) %d개 구매합니다", 
			BuyPopup->OnTouchBuy();
		}

		SetDelay(30);
		return;
	}

	int nCashIndex = GetBuyCashItemIndex(FALSE);
	if (nCashIndex != -1)
	{
		if (g_nLastCashIndex == -1)
			g_nLastCashIndex = nCashIndex;
		else
		{
			if (g_nLastCashIndex < 8 && nCashIndex >= 8)
				nCashIndex = GetBuyCashItemIndex();

			g_nLastCashIndex = nCashIndex;
		}
	}

	if (nCashIndex != -1)
	{
		UProjectLH_LHWidget_Common_TabList* TabList = CashShop->C_Widget_Common_TabList;
		if (!TabList)
		{
			SetDelay(10);
			return;
		}

		int nSelectMain = *(int*)((DWORD64)TabList + OFFSET_CASHSHOP_MAINCATEGORY);
		if (nSelectMain != g_pCashItem[nCashIndex].nMainTab)
		{
			TabList->OnClicked_MainCategory(g_pCashItem[nCashIndex].nMainTab);
			SetDelay(10);
			return;
		}

		int nSelectSub = *(DWORD*)((DWORD64)TabList + OFFSET_CASHSHOP_SUBCATEGORY);
		if (nSelectSub != g_pCashItem[nCashIndex].nSubTab)
		{
			TabList->OnClicked_SubCategory(g_pCashItem[nCashIndex].nSubTab);
			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_CashShop_ItemList* ItemList = CashShop->C_Widget_ItemList;
		if (!ItemList)
			return;

		UProjectLH_LHWidget_CashShop_Item_Container* Container = NULL;

		TArray<class UProjectLH_LHWidget*> Array = ItemList->ItemListSmallPool.ActiveUIs;
		for (int i = 0; i < Array.Num(); i++)
		{
			UProjectLH_LHWidget_CashShop_ItemListSmall* List = (UProjectLH_LHWidget_CashShop_ItemListSmall*)Array[i];
			if (!List)
				continue;

			for (int j = 0; j < 2; j++)
			{
				UProjectLH_LHWidget_CashShop_Item_Container* CashItem;
				if (j)
					CashItem = List->C_UpContainer;
				else
					CashItem = List->C_DownContainer;

				if (!CashItem)
					continue;

				if (CashItem->InfoRecord && CashItem->InfoRecord->CashShopPriceType != 2)
					continue;

				WCHAR szName[MAX_NAME];
				GetTextFromTextBlock((UUMG_TextBlock*)CashItem->C_TB_ItemName, szName);

				WCHAR szTemp[MAX_NAME];
				GetTextFromTextBlock((UUMG_TextBlock*)CashItem->C_TB_BuyCount, szTemp);
				if (!wcsstr(szTemp, L"서버당 매일"))
					continue;

				WCHAR* pCur = wcschr(szTemp, L'(') + 1;
				WCHAR* pLimit = wcschr(szTemp, L'/') + 1;

				int nRemainCount = _wtoi(pCur);
				int nLimitCount = _wtoi(pLimit);

				// 상품 정보들 갱신하자
				for (int k = 0; k < MAX_CASH; k++)
				{
					if (!wcscmp(g_pCashItem[k].szName, szName))
					{
						g_pCashItem[k].nRemainCount = nRemainCount;
						g_pCashItem[k].nLimitCount = nLimitCount;

						if (wcsstr(g_pCashItem[k].szName, L"미미르의 샘물 스텝업 "))
						{
							for (int p = 0; p < k; p++)
							{
								if (wcsstr(g_pCashItem[p].szName, L"미미르의 샘물 스텝업 "))
								{
									g_pCashItem[p].nRemainCount = 0;
									g_pCashItem[p].nLimitCount = 1;
								}
							}
						}

						// 구매할 물품이면서 품절, 잠금 안된 상태, 갱신된 상태에서도 구매할 개수가 있다면
						if (k == nCashIndex && !CashItem->C_CP_SoldOut->IsVisible() && !CashItem->C_CP_Lock->IsVisible() &&
							GetBuyCashItemCount(k) > 0)
							Container = CashItem;

						break;
					}
				}
			}
		}

		if (Container)
			Container->OnTouchContainer();

		SetDelay(10);
		return;
	}

	ShowStatus(0, 60249);		// L"캐시샵 아이템 구매가 완료되었습니다");

	UProjectLH_LHWidget_Topmenu* TopMenu = CashShop->C_Widget_Topmenu;
	if (TopMenu)
		TopMenu->OnTapExitBtn();

	SetStatus(g_nPreStatus, 10);
}


WCHAR* GetGameString(DWORD* dwAddress, DWORD dwId)
{
	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc4 getGameString = (_callFunc4)PATCHADDR(dwAddress[ADDR_GETGAMESTRING], dwAddress[0]);

	DWORD64	qwQuestName[3];
	getGameString(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestName, dwId, 0);
	return (WCHAR*)qwQuestName[0];
}


WCHAR* GetCurWorldName(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return NULL;

	return GetGameString(dwAddress, objGameInstance->MapMgr->CurruntMap->MapRecord->NameCode);
}


int GetMimirPoint(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return 0;

	return objGameInstance->CharacterMgr->MimirWellPoint;
}


FCommonSource_CommonSource_EMapType GetMapState(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return FCommonSource_CommonSource_EMapType::EMapType__Field;

	return (FCommonSource_CommonSource_EMapType)objGameInstance->MapMgr->CurruntMap->MapRecord->MapType;
}


int GetTreasureCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return -1;

	UProjectLH_LHAchievementMgr* AchievementMgr = pInstance->AchievementMgr;
	if (!AchievementMgr)
		return -1;

	DWORD64 dwAddr = *(DWORD64*)((DWORD64)AchievementMgr + OFFSET_ACHIEVEMENTMGR_LIST);
	int nCount = *(int*)((DWORD64)AchievementMgr + OFFSET_ACHIEVEMENTMGR_LISTCNT);
	for (int i = 0; i < nCount; i++)
	{
		DWORD dwQuestID = *(DWORD*)(dwAddr + (i * OFFSET_ACHIEVEMENT_SIZE));
		if (dwQuestID >= 0x0004C6A9 && dwQuestID <= 0x0004C6AD)
			return *(int*)(dwAddr + (i * OFFSET_ACHIEVEMENT_SIZE) + OFFSET_ACHIEVEMENT_PROGRESS);
	}

	return 0;
}


int GetWeaponTreasureCount(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return -1;

	UProjectLH_LHAchievementMgr* AchievementMgr = pInstance->AchievementMgr;
	if (!AchievementMgr)
		return -1;

	DWORD64 dwAddr = *(DWORD64*)((DWORD64)AchievementMgr + OFFSET_ACHIEVEMENTMGR_LIST);
	int nCount = *(int*)((DWORD64)AchievementMgr + OFFSET_ACHIEVEMENTMGR_LISTCNT);
	for (int i = 0; i < nCount; i++)
	{
		DWORD dwQuestID = *(DWORD*)(dwAddr + (i * OFFSET_ACHIEVEMENT_SIZE));
		if (dwQuestID >= 0x000C5F95 && dwQuestID <= 0x000C5F99)
			return *(int*)(dwAddr + (i * OFFSET_ACHIEVEMENT_SIZE) + OFFSET_ACHIEVEMENT_PROGRESS);
	}

	return 0;
}


int GetInvenIndex(const WCHAR* szName, BOOL bLock)
{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].bLocked != bLock)
			continue;

		if (!wcscmp(g_pInvenInfo[i].szName, szName))
			return i;
	}

	return -1;
}


int GetEnchantEquipIndex()
{
	for (int i = 0; i < g_nEquipCount; i++)
	{
		if (g_pEquipInfo[i].bLock)
			continue;

		if (g_pEquipInfo[i].nGrade == 0)			// 일반템은 강화하지 말자
			continue;

		if (g_pEquipInfo[i].nDestroyType == 3)		// 강화 못하는 템
			continue;

		if (g_pEquipInfo[i].nSlot == 0)				// 무기
		{
			if (g_pEquipInfo[i].nEnchant >= 5)
				continue;

			if (GetInvenIndex(L"무기 강화석 (캐릭터 귀속)") != -1 || GetInvenIndex(L"무기 강화석 (귀속)") != -1 ||
				(g_OtherSetting.bEnchantStone[0] && GetInvenIndex(L"무기 강화석") != -1))
				return i;
		}
		else if (g_pEquipInfo[i].nSlot <= 4)		// 방어구
		{
			if (g_pEquipInfo[i].nEnchant >= 5)
				continue;

			int nMaterialIndex1 = GetInvenIndex(L"방어구 강화석 (캐릭터 귀속)");
			int nMaterialIndex2 = GetInvenIndex(L"방어구 강화석 (귀속)");
			int nMaterialIndex3 = GetInvenIndex(L"방어구 강화석");

			int nSegongCount = g_pEquipInfo[i].nSegongCount;

			AJLog(L"***** SegongCount = %d, %d, %d, %d", nSegongCount, g_pEquipInfo[i].bLock, g_pEquipInfo[i].nGrade, g_pEquipInfo[i].nEnchant);
			AJLog(L"***** nMaterialIndex1_nCount = %d", g_pInvenInfo[nMaterialIndex1].nCount);
			if (nMaterialIndex1 != -1 && g_pInvenInfo[nMaterialIndex1].nCount >= nSegongCount)
			{
				return i;
			}
			if (nMaterialIndex2 != -1 && g_pInvenInfo[nMaterialIndex2].nCount >= nSegongCount)
			{
				return i;
			}
			if (g_OtherSetting.bEnchantStone[1] && nMaterialIndex3 != -1 && g_pInvenInfo[nMaterialIndex3].nCount >= nSegongCount)
			{
				return i;
			}

			// 			if (GetInvenIndex(L"방어구 강화석 (캐릭터 귀속)") != -1 || GetInvenIndex(L"방어구 강화석 (귀속)") != -1 ||
			// 				(g_OtherSetting.bEnchantStone[1] && GetInvenIndex(L"방어구 강화석") != -1))
			// 				return i;
		}
		else if (g_pEquipInfo[i].nSlot == 5)		// 망토 (1강)
		{
			if (g_pEquipInfo[i].nEnchant >= 1)
				continue;

			if (GetInvenIndex(L"방어구 강화석 (캐릭터 귀속)") != -1 || GetInvenIndex(L"방어구 강화석 (귀속)") != -1 ||
				(g_OtherSetting.bEnchantStone[1] && GetInvenIndex(L"방어구 강화석") != -1))
				return i;
		}
		else if (g_pEquipInfo[i].nSlot <= 10)		// 장신구
		{
			if (g_pEquipInfo[i].nEnchant >= 1)
				continue;

			if (GetInvenIndex(L"장신구 강화석 (캐릭터 귀속)") != -1 || GetInvenIndex(L"장신구 강화석 (귀속)") != -1 ||
				(g_OtherSetting.bEnchantStone[2] && GetInvenIndex(L"장신구 강화석") != -1))
				return i;
		}
	}

	return -1;
}


void OnGameEnchantEquip(DWORD* dwAddress)
{
	if (OnQuestFinish(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	// 인벤 안켜진 상태면 인벤 키자
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (!uiInven || !uiInven->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		SetDelay(10);
		return;
	}

	int nEquipIndex = GetEnchantEquipIndex(), nMaterialIndex = -1;
	AJLog(L"nEquipIndex = %d", nEquipIndex);
	if (nEquipIndex != -1)
	{
		if (g_pEquipInfo[nEquipIndex].nSlot == 0)
		{
			nMaterialIndex = GetInvenIndex(L"무기 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"무기 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[0])
				nMaterialIndex = GetInvenIndex(L"무기 강화석");
		}
		else if (g_pEquipInfo[nEquipIndex].nSlot <= 5)
		{
			nMaterialIndex = GetInvenIndex(L"방어구 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"방어구 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[1])
				nMaterialIndex = GetInvenIndex(L"방어구 강화석");
		}
		else if (g_pEquipInfo[nEquipIndex].nSlot <= 10)
		{
			nMaterialIndex = GetInvenIndex(L"장신구 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"장신구 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[2])
				nMaterialIndex = GetInvenIndex(L"장신구 강화석");
		}
	}

	UProjectLH_LHWidget_EquipEnchant* uiEnchant = (UProjectLH_LHWidget_EquipEnchant*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_EquipEnchant));

	if (nEquipIndex != -1 && nMaterialIndex != -1)
	{
		if (!uiEnchant || !uiEnchant->IsVisible())
		{
			SelectInvenItem(dwAddress, nMaterialIndex);
			SetDelay(10);
			return;
		}

		// 		if (*(char*)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDTAB) != (char)FProjectLH_ProjectLH_EEnchantSubTabType::EEnchantSubTabType__All)
		// 		{
		// 			uiEnchant->OnSelectSubTab(FProjectLH_ProjectLH_EEnchantSubTabType::EEnchantSubTabType__All, FALSE, TRUE);
		// 			SetDelay(10);
		// 			return;
		// 		}

		UProjectLH_LHItem* selectedScrollItem = *(UProjectLH_LHItem**)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDSCROLLITEM);
		if (selectedScrollItem != (UProjectLH_LHItem*)g_pInvenInfo[nMaterialIndex].qwItemAddr)
		{
			SelectInvenItem(dwAddress, nMaterialIndex);
			SetDelay(10);
			return;
		}

		UProjectLH_LHItem* selectedItem = *(UProjectLH_LHItem**)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDITEM);
		if (selectedItem != (UProjectLH_LHItem*)g_pEquipInfo[nEquipIndex].qwItemAddr)
		{
			uiEnchant->OnTapInventoryItem((UProjectLH_LHItem*)g_pEquipInfo[nEquipIndex].qwItemAddr);
			SetDelay(10);
			return;
		}

		ShowStatus(1, 60250, g_pEquipInfo[nEquipIndex].szName);			// L"장비 \"%s\" 을(를) 강화합니다", 
		uiEnchant->OnTapEnchant();
		SetDelay(30);
		return;
	}

	if (uiEnchant && uiEnchant->IsVisible())
	{
		uiEnchant->C_Widget_Topmenu->OnTapExitBtn();
		SetDelay(10);
		return;
	}

	ShowStatus(0, 60251);		// L"장착한 장비들을 강화하였습니다");
	uiInven->C_BP_Widget_Inven->OnTapExitBtn();
	SetStatus(g_nPreStatus, 10);
}


BOOL OnCloseSafeEnchantScene(DWORD* dwAddress)
{
	UProjectLH_LHWidget_EquipEnchant_Result* uiEnchantResult = (UProjectLH_LHWidget_EquipEnchant_Result*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_EquipEnchant_Result));
	if (!uiEnchantResult || uiEnchantResult->IsVisible() == FALSE)
		return FALSE;

	uiEnchantResult->OnTapOK();
	return TRUE;
}


BYTE SetManualTarget(DWORD* dwAddress, AProjectLH_LHCharacter* pObj)
{
	if (!pObj || !g_pCharInfo.qwCharAddr)
		return 0;

	if (g_pCharInfo.pManualTarget == pObj)
		return 2;

	_callFunc2 func_SetManualTarget = (_callFunc2)PATCHADDR(dwAddress[ADDR_SETMANUALTARGET], dwAddress[0]);
	func_SetManualTarget(g_pCharInfo.qwCharAddr, (DWORD64)pObj);
	return 1;
}


void ManualAttack(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
		uiInGame->C_QuickSlotWindow->OnTapAction();
}


int GetVillageQuestMax(DWORD* dwAddress)
{
	int nCount = 0;

	_callFunc1 getRepeateQuestMax = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETMAXREPEATEQUEST], dwAddress[0]);

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (objGameInstance)
		nCount = (int)getRepeateQuestMax((DWORD64)objGameInstance->QuestMgr);

	return nCount;
}


int GetVillageQuestCount(DWORD* dwAddress)
{
	int nCount = 1000;

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (objGameInstance)
		nCount = *(int*)((DWORD64)objGameInstance->QuestMgr + OFFSET_REPEATEQUESTFINISHCNT);

	return nCount;
}


WCHAR* GetRepeateQuestNameWithId(DWORD* dwAddress, DWORD dwQuestID)
{
	_callFunc1 initQuestParam = (_callFunc1)PATCHADDR(dwAddress[ADDR_INITQUESTPARAM], dwAddress[0]);

	DWORD64 qwQuestParam[5];
	initQuestParam((DWORD64)qwQuestParam);

	DWORD64 qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);
	if (!qwQuestTable)
		return NULL;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	UCommonSource_RepeatQuestRecord* questInfoRecord = (UCommonSource_RepeatQuestRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_REPEATEQUESTINFO), dwQuestID);
	if (!questInfoRecord)
		return NULL;

	return GetGameString(dwAddress, questInfoRecord->NameCode);
}


WCHAR* GetRepeateQuestDescWithId(DWORD* dwAddress, DWORD dwQuestID)
{
	_callFunc1 initQuestParam = (_callFunc1)PATCHADDR(dwAddress[ADDR_INITQUESTPARAM], dwAddress[0]);

	DWORD64 qwQuestParam[5];
	initQuestParam((DWORD64)qwQuestParam);

	DWORD64 qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64	qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);
	if (!qwQuestTable)
		return NULL;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	UCommonSource_RepeatQuestRecord* questInfoRecord = (UCommonSource_RepeatQuestRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_REPEATEQUESTINFO), dwQuestID);
	if (!questInfoRecord)
		return NULL;

	UCommonSource_QuestMissionRecord* questMissionRecord = (UCommonSource_QuestMissionRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_QUESTDESC), questInfoRecord->QuestMissionType);
	if (!questMissionRecord)
		return NULL;

	return GetGameString(dwAddress, questMissionRecord->descCode);
}


void UpdateVillageQuest(DWORD* dwAddress)
{
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHQuestMgr* objQuestMgr = objGameInstance->QuestMgr;
	if (!objQuestMgr)
		return;

	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return;

	UProjectLH_LHWidget_InGame_LeftTab* C_InGame_LeftTab = uiInGame->C_InGame_LeftTab;
	if (!C_InGame_LeftTab)
		return;

	UProjectLH_LHWidget_InGame_Questlist* C_InGame_Questlist = C_InGame_LeftTab->C_InGame_Questlist;
	if (!C_InGame_Questlist)
		return;

	for (int i = 0; i < C_InGame_Questlist->RepeatQuestContainerPool.ActiveUIs.Num(); i++)
	{
		UProjectLH_LHWidget_InGame_Quest_Container* questContainer = (UProjectLH_LHWidget_InGame_Quest_Container*)C_InGame_Questlist->RepeatQuestContainerPool.ActiveUIs[i];
		if (!questContainer)
			continue;

		DWORD dwQuestID = *(unsigned int*)((DWORD64)questContainer + OFFSET_QUESTCONTAINERQUESTID);
		if (!dwQuestID)
			continue;

		_callFunc2 getQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETSUBQUESTINFO], dwAddress[0]);
		_callFunc2 getRepeatQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETREPATEQUESTDOINGINFO], dwAddress[0]);
		_callFunc2 getMainQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETMAINQUESTINFO], dwAddress[0]);

		DWORD64 qwQuestDoingInfo = getRepeatQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
		if (!qwQuestDoingInfo)
			qwQuestDoingInfo = getMainQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);
		if (!qwQuestDoingInfo)
			qwQuestDoingInfo = getQuestDoingInfo((DWORD64)objQuestMgr, dwQuestID);

		if (!qwQuestDoingInfo)
			continue;

		if (g_nVillageQuestCount < MAX_QUEST)
		{
			g_pVillageQuestInfo[g_nVillageQuestCount].nQuestState = (int)*(char*)(qwQuestDoingInfo + OFFSET_QUESTSTATE);
			g_pVillageQuestInfo[g_nVillageQuestCount].nCurCount = *(int*)(qwQuestDoingInfo + OFFSET_QUESTSTATE + 3);
			g_pVillageQuestInfo[g_nVillageQuestCount].dwQuestID = dwQuestID;
			g_pVillageQuestInfo[g_nVillageQuestCount].QuestContainer = questContainer;

			WCHAR* szName = GetRepeateQuestNameWithId(dwAddress, dwQuestID);
			if (szName != NULL)
				swprintf(g_pVillageQuestInfo[g_nVillageQuestCount].szName, L"%s", szName);
			else
				memset(g_pVillageQuestInfo[g_nVillageQuestCount].szName, 0, sizeof(g_pVillageQuestInfo[g_nVillageQuestCount].szName));

			//FreeGarbageMemory(dwAddress, (DWORD64)szName);
			FreeGarbageMemory((DWORD64)szName);

			WCHAR* szDesc = GetRepeateQuestDescWithId(dwAddress, dwQuestID);
			if (szDesc != NULL)
				swprintf_s(g_pVillageQuestInfo[g_nVillageQuestCount].szDesc, 50, L"%s", szDesc);
			else
				memset(g_pVillageQuestInfo[g_nVillageQuestCount].szDesc, 0, sizeof(g_pVillageQuestInfo[g_nVillageQuestCount].szDesc));

			//FreeGarbageMemory(dwAddress, (DWORD64)szDesc);
			FreeGarbageMemory((DWORD64)szDesc);

			g_nVillageQuestCount++;
		}
	}
}


INVENINFO GetItemInfoWithType(DWORD* dwAddress, DWORD dwType)
{
	INVENINFO itemInfo;
	memset(&itemInfo, 0, sizeof(INVENINFO));

	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwItemParam[5];
	qwItemParam[0] = 0;
	qwItemParam[1] = 14;

	initString((DWORD64)qwItemParam, 0);
	memcpy((void*)qwItemParam[0], L"ItemTable.tbl", 28);

	DWORD64	qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return itemInfo;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwItemTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwItemParam);

	if (!qwItemTable)
		return itemInfo;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	UCommonSource_ItemInfoRecord* itemInfoRecord = (UCommonSource_ItemInfoRecord*)getQuestInfo(*(DWORD64*)(qwItemTable + OFFSET_QUESTINFO), dwType);
	if (!itemInfoRecord)
		return itemInfo;

	itemInfo.DetailInfo = itemInfoRecord;
	swprintf(itemInfo.szName, L"%s", itemInfo.DetailInfo->Name.c_str());
	return itemInfo;
}


void UpdateVillageQuestList(DWORD* dwAddress, UProjectLH_LHWidget_Scene_RepeatQuest* uiRepeatQuest)
{
	g_nVillageListCount = 0;

	DWORD64 qwQuestList = (DWORD64)uiRepeatQuest->C_ListScrollBox;
	if (!qwQuestList)
		return;

	DWORD64 qwMyScrollBoxItem = *(DWORD64*)(qwQuestList + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	DWORD64 qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return;

	_callFunc1 initQuestParam = (_callFunc1)PATCHADDR(dwAddress[ADDR_INITQUESTPARAM], dwAddress[0]);
	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);

	int nListCount = *(int*)(qwQuestList + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nListCount; i++)
	{
		UProjectLH_LHWidget_RepeatQuest_Container* qwQuestContainer = (UProjectLH_LHWidget_RepeatQuest_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwQuestContainer)
			continue;

		if (*(char*)((DWORD64)qwQuestContainer + OFFSET_REPEATEQUESTRCVED) != 1)			// 1 - 받지 않은 상태, 2 - 받은 상태
			continue;

		DWORD dwQuestId = *(DWORD*)*(DWORD64*)((DWORD64)qwQuestContainer + OFFSET_REPEATQUESTID);
		if (!dwQuestId)
			continue;

		DWORD64 qwQuestParam[5];
		initQuestParam((DWORD64)qwQuestParam);

		DWORD64	qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);
		if (!qwQuestTable)
			continue;

		UCommonSource_RepeatQuestRecord* questInfoRecord = (UCommonSource_RepeatQuestRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_REPEATEQUESTINFO), dwQuestId);
		if (!questInfoRecord)
			continue;

		// 		repeateQuestInfo.questInfoRecord = questInfoRecord;

		if (g_nVillageListCount < MAX_VILLAGEQUEST)
		{
			WCHAR* szName = GetGameString(dwAddress, questInfoRecord->NameCode);
			if (szName != NULL)
				swprintf(g_pVillageListInfo[g_nVillageListCount].szName, L"%s", szName);

			//FreeGarbageMemory(dwAddress, (DWORD64)szName);
			FreeGarbageMemory((DWORD64)szName);

			int nRewardCount = 0;
			for (int j = 0; j < *(int*)(*(DWORD64*)((DWORD64)qwQuestContainer + OFFSET_REPEATQUESTID) + OFFSET_REPEATEQUETITEMCNT); j++)
			{
				DWORD64 qwItemInfo = *(DWORD64*)(*(DWORD64*)((DWORD64)qwQuestContainer + OFFSET_REPEATQUESTID) + OFFSET_REPEATEQUESTITEM) + OFFSET_REPEATEQUETITEMSIZE * j;
				if (!qwItemInfo)
					continue;

				DWORD dwItemType = *(DWORD*)(qwItemInfo + 4);
				if (!dwItemType)
					continue;

				DWORD dwItemCount = *(DWORD*)(qwItemInfo + 8);
				if (*(char*)qwItemInfo == 1 && nRewardCount < 5)
				{
					g_pVillageListInfo[g_nVillageListCount].dwRewardItem[nRewardCount] = GetItemInfoWithType(dwAddress, dwItemType);
					g_pVillageListInfo[g_nVillageListCount].dwRewardItem[nRewardCount].nCount = dwItemCount;
					nRewardCount++;
				}
			}

			g_pVillageListInfo[g_nVillageListCount].nRewardCount = nRewardCount;
			g_pVillageListInfo[g_nVillageListCount].qwQuestContainer = qwQuestContainer;
			g_nVillageListCount++;
		}
	}
}


int GetVillageListIndex(int nRewardTarget)
{
	for (int i = 0; i < g_nVillageListCount; i++)
	{
		int nTargetCount = 0;
		for (int j = 0; j < g_pVillageListInfo[i].nRewardCount; j++)
		{
			if (wcsstr(g_pVillageListInfo[i].dwRewardItem[j].szName, L"위그드람") ||
				wcsstr(g_pVillageListInfo[i].dwRewardItem[j].szName, L"구드벨") ||
				wcsstr(g_pVillageListInfo[i].dwRewardItem[j].szName, L"마력 깃든 정수") ||
				g_pVillageListInfo[i].dwRewardItem[j].DetailInfo->ItemGrade >= 2)
				nTargetCount++;
		}

		if (nTargetCount >= nRewardTarget)
			return i;
	}

	return -1;
}


int GetVillageQuestItem()
{
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (g_pInvenInfo[i].bLocked || g_pInvenInfo[i].bEquiped)
			continue;

		if (g_pCharInfo.nLevel < g_pInvenInfo[i].nNeedLevel)
			continue;

		if (!wcsstr(g_pInvenInfo[i].szName, L"마을 의뢰서 (캐릭터 귀속)"))
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"7챕터 ") && GetMainQuestNo() < 6401)
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"6챕터 ") && GetMainQuestNo() < 5401)
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"5챕터 ") && GetMainQuestNo() < 4401)
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"4챕터 ") && GetMainQuestNo() < 3301)
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"3챕터 ") && GetMainQuestNo() < 2301)
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, L"2챕터 ") && GetMainQuestNo() < 1301)
			continue;

		return i;
	}

	return -1;
}


void OnGameVillageQuest(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	// 자동 장비 장착
	if (OnAutoEquipItem(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (OnGetoutQuestInstance(dwAddress))
	{
		SetDelay(5);
		return;
	}

	if (IsInDungeon())
	{
		AJLog(L"=============== OnGameVillageQuest ===>>>> IsInDungen ===>>> Return Village");
		ReturnVillage(dwAddress);
		return;
	}

	if (GetMainQuestNo() >= 1301)
	{
		if (g_pCharInfo.nLevel >= 30 && CheckWorldBossTime())
		{
			g_bWorldBoss = 0;
			g_qwWorldBossTick = 0;

			ShowStatus(0, 60335);
			SetStatus(STATUS_WORLDBOSS, 10);
			return;
		}

		if (CheckBigSnakeDungeon(dwAddress))
		{
			ShowStatus(0, 60318);
			SetStatus(STATUS_MATCHBIGSNAKE, 10);
			return;
		}
	}

	if (g_OtherSetting.bVillageRequest)
	{
		// 의뢰 퀘스트 할때 매너방식 끄고 80m로 설정하자
		if (ChangeGameSetting(dwAddress, 80, FALSE))
		{
			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_Scene_RepeatQuest* uiRepeatQuest = (UProjectLH_LHWidget_Scene_RepeatQuest*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Scene_RepeatQuest));
		UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));

		// 의뢰 퀘스트 창문이 켜져있는 상태면
		if (uiRepeatQuest && uiRepeatQuest->IsVisible())
		{
			// 의뢰 퀘스트 더 받을수 없으면 창문을 종료하자
			if (GetVillageQuestCount(dwAddress) >= GetVillageQuestMax(dwAddress) || g_nVillageQuestCount >= 6)
			{
				uiRepeatQuest->C_Widget_Topmenu->OnTapExitBtn();
				SetDelay(10);
				return;
			}

			// 퀘스트를 받을수 있는만큼 받자
			int nRegion = 0;
			if (g_OtherSetting.nVillageRegion == 1 && GetMainQuestNo() >= 1301)
				nRegion = g_OtherSetting.nVillageRegion;
			else if (g_OtherSetting.nVillageRegion == 2 && GetMainQuestNo() >= 2301)
				nRegion = g_OtherSetting.nVillageRegion;
			else if (g_OtherSetting.nVillageRegion == 3 && GetMainQuestNo() >= 3301)
				nRegion = g_OtherSetting.nVillageRegion;
			else if (g_OtherSetting.nVillageRegion == 4 && GetMainQuestNo() >= 4401)
				nRegion = g_OtherSetting.nVillageRegion;
			else if (g_OtherSetting.nVillageRegion == 5 && GetMainQuestNo() >= 5401)
				nRegion = g_OtherSetting.nVillageRegion;
			else if (g_OtherSetting.nVillageRegion == 6 && GetMainQuestNo() >= 6401)
				nRegion = g_OtherSetting.nVillageRegion;

			if (SelectTab(uiRepeatQuest->C_MainTabList, nRegion))		// 미드가르드, 요툰하임
			{
				UpdateVillageQuestList(dwAddress, uiRepeatQuest);

				int nTargetReward = 2;									// 타겟 2개부터 진행하자
				while (nTargetReward > 0)
				{
					int nSelectIndex = GetVillageListIndex(nTargetReward);
					if (nSelectIndex != -1)								// 받을 퀘스트가 있다면
					{
						if (*(DWORD64*)((DWORD64)uiRepeatQuest + OFFSET_SELECTEDREPEATQUEST) != *(DWORD64*)((DWORD64)g_pVillageListInfo[nSelectIndex].qwQuestContainer + OFFSET_REPEATQUESTID))
							uiRepeatQuest->OnTapRepeatQuestContainer(g_pVillageListInfo[nSelectIndex].qwQuestContainer);
						else
						{
							ShowStatus(1, 60252, g_pVillageListInfo[nSelectIndex].szName);			// L"의뢰 퀘스트 \"%s\" 을(를) 수락하였습니다", 
							uiRepeatQuest->OnTapAccept();
						}

						SetDelay(10);
						return;
					}
					// 갱신 횟수가 모자라거나 골드가 부족한 경우
					int nRefreshCount = *(int*)((DWORD64)uiRepeatQuest + OFFSET_REFRESHREPEATEQCOUNT);
					if (nRefreshCount <= 5 || g_pCharInfo.nGoods[0] < (16 - nRefreshCount) * 1000)
					{
						nTargetReward--;
						continue;
					}

					ShowStatus(0, 60253);		// L"의뢰 퀘스트 목록을 갱신합니다");
					uiRepeatQuest->OnTapRefresh();
					SetDelay(10);
					return;
				}
			}
			// 퀘스트 다 받았으니까 창문은 닫자
			uiRepeatQuest->C_Widget_Topmenu->OnTapExitBtn();
			SetDelay(10);
			return;
		}

		// 의뢰 퀘스트 끝난것이 있으면 보상 먼저 받자
		for (int i = 0; i < g_nVillageQuestCount; i++)
		{
			if (g_pVillageQuestInfo[i].nQuestState == QUEST_COMPLETE)
			{
				if (OnCloseOpenWindow(dwAddress))
				{
					SetDelay(10);
					return;
				}

				if (SelectQuest(dwAddress, g_pVillageQuestInfo[i].QuestContainer, g_pVillageQuestInfo[i].nQuestState, FALSE))
					ShowStatus(1, 60254, g_pVillageQuestInfo[i].szName);			// L"의뢰 퀘스트 \"%s\" 을(를) 완료합니다", 

				SetDelay(10);
				return;
			}
		}

		// 수행할 의뢰 퀘스트 미리 다 받자
		if (g_nVillageQuestCount < 6)
		{
			// 마을 의뢰서 아이템 사용하는 경우
			if (g_OtherSetting.bVillageRequest && g_OtherSetting.bUseVillageQuest)
			{
				int nIndex = GetVillageQuestItem();
				if (nIndex != -1)
				{
					if (!uiInven || !uiInven->IsVisible())
					{
						OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
					}
					else
					{
						g_bOpenInven = 1;

						UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
						if (uiItemInfo && uiItemInfo->IsVisible() && (DWORD64)uiItemInfo->CurrentItem == g_pInvenInfo[nIndex].qwItemAddr)
						{
							uiItemInfo->OnTapButton03();
							ShowStatus(1, 60204, g_pInvenInfo[nIndex].szName);			// L"아이템 \"%s\" 을(를) 사용합니다", 
							SetDelay(10);
							return;
						}

						SelectInvenItem(dwAddress, nIndex);
					}

					SetDelay(10);
					return;
				}
			}

			// 의뢰 퀘스트 목록 갱신하자
			if (GetVillageQuestCount(dwAddress) < GetVillageQuestMax(dwAddress))
			{
				if (uiInven && uiInven->IsVisible())
				{
					uiInven->C_BP_Widget_Inven->OnTapExitBtn();
					SetDelay(10);
					return;
				}

				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__DailyMission);
				SetDelay(10);
				return;
			}
		}

		if (g_bOpenInven)
		{
			if (OnCloseOpenWindow(dwAddress))
			{
				SetDelay(10);
				return;
			}

			g_bOpenInven = 0;
		}

		// 의뢰 퀘스트 진행을 하자
		if (g_nVillageQuestCount > 0)
		{
			if (g_OtherSetting.bValhallaFight && GetMainQuestNo() >= 815 && GetMatchingRealmWar(dwAddress) == 0)
			{
				ShowStatus(0, 60290);			// 발할라 대전을 신청합니다

				SetStatus(STATUS_MATCHREALMWAR, 10);
				return;
			}

			// 진행할 퀘스트 얻어내자
			int nCurIndex = -1;
			for (int i = 0; i < g_nVillageQuestCount; i++)
			{
				if (wcsstr(g_pVillageQuestInfo[i].szDesc, L"주변 마물 처치"))
					continue;

				nCurIndex = i;
				break;
			}

			if (g_dwMoveCharTick && g_dwTickCount >= g_dwMoveCharTick + 10 * 1000)
			{
				AJLog(L"2. g_dwMoveCHartick = %d, g_dwTickCount = %d", g_dwMoveCharTick, g_dwTickCount);
				g_dwMoveCharTick = g_dwTickCount;

				ShowStatus(0, 60172);			// L"캐릭 이동 비정상적인 움직임이 발견되였습니다");

				int nInteractionType = GetShowInteractionType(dwAddress);
				if (nInteractionType == 1)
					PutChaoGatherObject();
				else if (nInteractionType == 2)
					ClickInteraction(dwAddress, TRUE);

				if (!g_OtherSetting.bMoveChaoEnable)
					g_nMoveChaoCount = 0;
				else if (g_nMoveChaoCount < MAX_CHAO)
					g_qwMoveChaoTick[g_nMoveChaoCount++] = g_dwTickCount;
				else
				{
					g_nMoveChaoCount = MAX_CHAO;
					for (int i = 0; i < g_nMoveChaoCount - 1; i++)
						g_qwMoveChaoTick[i] = g_qwMoveChaoTick[i + 1];

					g_qwMoveChaoTick[g_nMoveChaoCount - 1] = g_dwTickCount;
				}

				if (g_OtherSetting.bMoveChaoEnable)
				{														// 캐릭 이동 오류 자주 나오는 경우
					if (g_OtherSetting.nMoveChaoCount <= 1 || (g_nMoveChaoCount >= g_OtherSetting.nMoveChaoCount &&
						g_qwMoveChaoTick[g_nMoveChaoCount - 1] - g_qwMoveChaoTick[g_nMoveChaoCount - g_OtherSetting.nMoveChaoCount] <= g_OtherSetting.nMoveChaoTime * 60 * 1000))
					{
						ShowStatus(4, 60313, NULL, g_OtherSetting.nMoveChaoTime, g_OtherSetting.nMoveChaoCount);
						SetStatus(STATUS_FORCERETURN, 10);
						SetDelay(10);
						return;
					}
				}

				if (nCurIndex != -1)
					SelectQuest(dwAddress, g_pVillageQuestInfo[nCurIndex].QuestContainer, g_pVillageQuestInfo[nCurIndex].nQuestState, FALSE);
				else
					AutoAttack(dwAddress);

				SetDelay(10);
				return;
			}

			// 주변 마물 처치 퀘스트인 경우 "옛 대장간 터"에 가서 사냥하자
			if (nCurIndex == -1)
			{
				if (g_dwPreQuestID != g_pVillageQuestInfo[0].dwQuestID)
				{
					g_dwPreQuestID = g_pVillageQuestInfo[0].dwQuestID;
					ShowStatus(1, 60255, g_pVillageQuestInfo[0].szName);			// L"의뢰 퀘스트 \"%s\" 을(를) 진행합니다", 
				}

				if (!wcscmp(g_pCharInfo.szRegion, L"옛 대장간 터"))
				{
					if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction && OnSkillInteraction(dwAddress))
					{
						SetDelay(5);
						return;
					}

					if (!ClickInteraction(dwAddress) && g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
					{
						FVector fTarget = { 11701.83f, -37753.74f, -6443.27f };
						MovePos(dwAddress, fTarget);

						AutoAttack(dwAddress);
					}

					// 파티 던전 준비 하자
					if (OnPartyDungeonState(dwAddress))
					{
						SetDelay(10);
						return;
					}
				}
				else
				{
					g_dwMoveCharTick = g_dwTickCount;

					if (IsInDungeon())
						ReturnVillage(dwAddress);
					else
					{
						// 파티 던전 준비 취소하자
						if (g_bPartyDungeon)
						{
							UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
							if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
							{
								if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
								{
									pPartyWindow->OnClickedDungeonReady();
									return;
								}
							}
						}

						TeleportMap(dwAddress, g_szWorldName[0], L"옛 대장간 터");
					}
				}

				SetDelay(10);
				return;
			}

			// 진행할수 있는 퀘스트면
			if (GetPlayerAutoQuestId(dwAddress) != g_pVillageQuestInfo[nCurIndex].dwQuestID || g_dwPreQuestID != g_pVillageQuestInfo[nCurIndex].dwQuestID)
			{
				g_dwPreQuestID = g_pVillageQuestInfo[nCurIndex].dwQuestID;

				g_nQuestPreCount = g_pVillageQuestInfo[nCurIndex].nCurCount;
				g_qwQuestCountTick = g_dwTickCount;
				g_qwQuestTotalTick = g_dwTickCount;

				if (SelectQuest(dwAddress, g_pVillageQuestInfo[nCurIndex].QuestContainer, g_pVillageQuestInfo[nCurIndex].nQuestState, TRUE))
					ShowStatus(1, 60255, g_pVillageQuestInfo[nCurIndex].szName);			// L"의뢰 퀘스트 \"%s\" 을(를) 진행합니다", 
			}
			else if (!ClickInteraction(dwAddress))
			{
				FVector fTargetPos = GetMoveTargetPosition(dwAddress);

				if (fTargetPos.X != 0.0f || fTargetPos.Y != 0.0f || fTargetPos.Z != 0.0f || g_nQuestPreCount != g_pVillageQuestInfo[nCurIndex].nCurCount)
				{
					if (g_nQuestPreCount != g_pVillageQuestInfo[nCurIndex].nCurCount)
					{
						g_nQuestPreCount = g_pVillageQuestInfo[nCurIndex].nCurCount;
						g_qwQuestTotalTick = g_dwTickCount;
					}

					g_qwQuestCountTick = g_dwTickCount;
				}
				else if (g_dwTickCount >= g_qwQuestCountTick + 2 * 60 * 1000)
				{
					g_qwQuestCountTick = g_dwTickCount;
					SelectQuest(dwAddress, g_pVillageQuestInfo[nCurIndex].QuestContainer, g_pVillageQuestInfo[nCurIndex].nQuestState, TRUE);
				}

				if (g_OtherSetting.bQuestChaoEnable && g_dwTickCount >= g_qwQuestTotalTick + g_OtherSetting.nQuestChaoTime * 60 * 1000)
				{
					ShowStatus(2, 60312, NULL, g_OtherSetting.nQuestChaoTime);
					OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
				}

				// 파티 던전 준비 하자
				if (OnPartyDungeonState(dwAddress))
				{
					SetDelay(10);
					return;
				}
			}

			if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
				OnSkillInteraction(dwAddress);

			SetDelay(10);
			return;
		}

		// 수행할 퀘스트가 있는지 한번 더 확인하자
		if (GetVillageQuestCount(dwAddress) > GetVillageQuestMax(dwAddress))
		{
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__DailyMission);
			SetDelay(10);
			return;
		}
	}

	// 다 진행이 끝났으니까 원래대로 돌아가자
	ShowStatus(0, 60256);		// L"마을 의뢰 퀘스트를 확인하였습니다");
	SetStatus(STATUS_DOAUTO, 10);
}


void OnGameSkillSlot(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	UProjectLH_LHWidget_InGameMenu_SkillWindow* uiSkillWindow = (UProjectLH_LHWidget_InGameMenu_SkillWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skill));
	if (uiSkillWindow && uiSkillWindow->IsVisible())
	{
		UpdateSkillInfo(dwAddress);

		UProjectLH_LHWidget_SkillEquipWindow* C_SkillEquipWindow = uiSkillWindow->C_SkillEquipWindow;
		if (!C_SkillEquipWindow->IsVisible())
		{
			uiSkillWindow->OnClicked_EquipSkillOpen();
		}
		else
		{
			C_SkillEquipWindow->OnClicked_AutoEquip();
			uiSkillWindow->C_Topmenu->OnTapExitBtn();

			ShowStatus(0, 60257);		// L"퀵슬롯(스킬) 설정을 확인하였습니다");
			SetStatus(g_nPreStatus, 10);
			return;
		}
	}
	else
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__SkillBook);

	SetDelay(10);
}


UCommonSource_MapInfoRecord* GetMapInfoRecord(DWORD* dwAddress, DWORD qwID)
{
	_callFunc2 initString = (_callFunc2)PATCHADDR(dwAddress[ADDR_INITSTRING], dwAddress[0]);

	DWORD64 qwQuestParam[5];
	qwQuestParam[0] = 0;
	qwQuestParam[1] = 13;

	initString((DWORD64)qwQuestParam, 0);
	memcpy((void*)qwQuestParam[0], L"MapTable.tbl", 30);

	DWORD64 qwQuestTableData = *(DWORD64*)PATCHADDR(dwAddress[ADDR_QUESTTABLEDATA], dwAddress[0]);
	if (!qwQuestTableData)
		return NULL;

	_callFunc2 getQuestTable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTTABLE], dwAddress[0]);
	DWORD64 qwQuestTable = getQuestTable(*(DWORD64*)(qwQuestTableData + OFFSET_QUESTTABLE), (DWORD64)qwQuestParam);

	if (!qwQuestTable)
		return NULL;

	_callFunc2 getQuestInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTINFO], dwAddress[0]);
	return (UCommonSource_MapInfoRecord*)getQuestInfo(*(DWORD64*)(qwQuestTable + OFFSET_REPEATEQUESTINFO), qwID);
}


void UpdateDungeonInfo(DWORD* dwAddress, BOOL bLog)
{
	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (!pInstance)
		return;

	UProjectLH_LHDungeonInfoMgr* DungeonInfoMgr = pInstance->DungeonInfoMgr;
	if (!DungeonInfoMgr)
		return;

	DWORD64 qwList = *(DWORD64*)((BYTE*)DungeonInfoMgr + OFFSET_DUNGEONLIST_ELITE);
	if (qwList)
	{
		int nDungeonCount = *(int*)((BYTE*)DungeonInfoMgr + OFFSET_DUNGEONLIST_ELITE + 8);
		for (int i = 0; i < nDungeonCount; i++)
		{
			DWORD64 qwAddr = qwList + i * OFFSET_DUNGEONLIST_ELITESIZE;
			if (!qwAddr)
				continue;

			DWORD dwDungeonID = *(DWORD*)(qwAddr + 0x00);
			if (dwDungeonID == 0)
				continue;

			float fRemainSec = *(float*)(qwAddr + 0x04);
			float fChargeSec = *(float*)(qwAddr + 0x08);

			if (bLog)
			{
				AJLog(L"[Dungeon 1] %d, DungeonID: %08X, Time: %d, %d", i + 1, dwDungeonID, (int)fRemainSec, (int)fChargeSec);
			}

			for (int j = 0; j < MAX_DUNGEON; j++)
			{
				if (g_pDungeonRes[j].dwDungeonID == dwDungeonID)
				{
					g_pDungeonRes[j].nRemainTime = (int)fRemainSec + (int)fChargeSec;
				}
			}
		}
	}

	qwList = *(DWORD64*)((BYTE*)DungeonInfoMgr + OFFSET_DUNGEONLIST_PARTY);
	if (!qwList)
		return;

	int nDungeonTicket = GetPartyDungeonCount(dwAddress);

	int nDungeonCount = *(int*)((BYTE*)DungeonInfoMgr + OFFSET_DUNGEONLIST_PARTY + 8);
	for (int i = 0; i < nDungeonCount; i++)
	{
		DWORD64 qwAddr = qwList + i * OFFSET_DUNGEONLIST_PARTYSIZE;
		if (!qwAddr)
			continue;

		DWORD dwDungeonID = *(DWORD*)(qwAddr + 0x00);
		if (dwDungeonID == 0)
			continue;

		if (bLog)
		{
			AJLog(L"[Dungeon 2] %d, DungeonID: %08X, Time: %d", i + 1, dwDungeonID, (int)nDungeonTicket);
		}

		for (int j = 0; j < MAX_DUNGEON; j++)
		{
			if (g_pDungeonRes[j].dwDungeonID == dwDungeonID)
			{
				g_pDungeonRes[j].nRemainTime = nDungeonTicket;
			}
		}

		// 		WCHAR szBuffer[MAX_PATH];
		// 		GetString(pRecord->NameCode, szBuffer);
	}

	for (int i = 0; i < MAX_DUNGEON; i++)
	{
		if (!wcscmp(g_pDungeonRes[i].szRegion, L"할로윈의 악몽"))
		{
			g_pDungeonRes[i].nRemainTime = GetInvenCount(L"할로윈의 악몽 입장권", TRUE);
		}

		if (wcsstr(g_pDungeonRes[i].szDungeon, L"그림자 성채"))
		{
			g_pDungeonRes[i].nRemainTime = g_pDungeonRes[i].dwDungeonID;
		}
	}
}


BOOL IsPartyMaster()
{
	if (!g_bPartyExist)
		return FALSE;

	for (int i = 0; i < g_nPartyCount; i++)
	{
		if (g_pPartyInfo[i].bMaster)
			return FALSE;
	}

	return TRUE;
}


void OnEnterDungeon(DWORD* dwAddress, int nDungeon)
{
	if (!g_pDungeonRes[nDungeon].bAloneDungeon && GetMatchingRealmWar(dwAddress) > 0)
		return;

	if (!g_pDungeonRes[nDungeon].bAloneDungeon && g_bPartyExist)							// 파티 있는 경우
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (!pPartyWindow)
			return;

		if (!g_bPartyDungeon || g_bGetOutParty != 0)										// 파티던전이 아니거나 전멸한 파티면
		{
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}

		if (g_qwPartyWaitTick == 0)
			g_qwPartyWaitTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwPartyWaitTick + 3 * 60 * 1000)								// 3분이상 팟 구성하고있으면
		{
			g_qwPartyWaitTick = 0;
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}

		if (g_nPartyCount > 0)
		{
			if (IsPartyMaster())															// 파장인 경우 파티원들 준비됬는지 체크하자
			{
				BOOL bEnter = TRUE;
				for (int i = 0; i < g_nPartyCount; i++)
				{
					if (!g_pPartyInfo[i].bReady)
					{
						bEnter = FALSE;
						break;
					}
				}

				if (bEnter && g_nPartyCount + 1 >= GetDungeonMemberCount())
				{
					ShowStatus(1, 60258, g_pDungeonRes[nDungeon].szRegion);					// L"파티던전 \"%s\" 에 입장합니다", 
					pPartyWindow->OnClickedDungeonStart();
					SetDelay(30);
				}

				return;
			}
			else if ((g_nPartyCount == 3 && pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 0) ||
				(g_nPartyCount != 3 && pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1))			// 파티원인 경우 준비완료 하자
			{
				pPartyWindow->OnClickedDungeonReady();
				SetDelay(10);
			}
		}

		return;
	}

	g_bGetOutParty = 0;
	g_qwPartyWaitTick = 0;

	// 자동매칭중이면 대기하자
	if (g_bPartyAutoMatch)
		return;

	UProjectLH_LHWidget_InstDungeonList* pInstDungeonList = reinterpret_cast<UProjectLH_LHWidget_InstDungeonList*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonList::StaticClass()));
	if (pInstDungeonList)
	{
		UpdateDungeonInfo(dwAddress);

		// 던전 입장할수 없으면 (접근할수 없는 컨텐츠인 경우)
		if (IsDungeonFinish(nDungeon) || g_bContentFail)
		{
			g_bContentFail = 0;

			if (pInstDungeonList->C_Topmenu)
				pInstDungeonList->C_Topmenu->OnTapExitBtn();

			ChangeSchedule();
			return;
		}
	}

	UProjectLH_LHWidget_InstDungeonRegister* pInstDungeon = reinterpret_cast<UProjectLH_LHWidget_InstDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonRegister::StaticClass()));
	UProjectLH_LHWidget_EliteDungeonRegister* pEliteDungeon = reinterpret_cast<UProjectLH_LHWidget_EliteDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_EliteDungeonRegister::StaticClass()));
	UProjectLH_LHWidget_ShadowDungeonRegister* pShadowDungeon = reinterpret_cast<UProjectLH_LHWidget_ShadowDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_ShadowDungeonRegister::StaticClass()));
	//	UProjectLH_LHWidget_WorldDungeonRegister* pWorldDungeon = reinterpret_cast<UProjectLH_LHWidget_WorldDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_WorldDungeonRegister::StaticClass()));

		// 정예 던전인 경우 (파티던전 입장했을 경우)
	if (g_pDungeonRes[nDungeon].bAloneDungeon && pInstDungeon)
	{
		g_bContentFail = 0;
		pInstDungeon->C_Topmenu->OnTapBackBtn();
		SetDelay(10);
		return;
	}

	// 파티 던전인 경우 (정예던전 입장했을 경우)
	else if (!g_pDungeonRes[nDungeon].bAloneDungeon && pEliteDungeon)
	{
		g_bContentFail = 0;
		pEliteDungeon->C_Topmenu->OnTapBackBtn();
		SetDelay(10);
		return;
	}
	else if (!g_pDungeonRes[nDungeon].bAloneDungeon && pShadowDungeon)
	{
		g_bContentFail = 0;
		pShadowDungeon->Topmenu->OnTapBackBtn();
		SetDelay(10);
		return;
	}

	// 그림자 성채인 경우
	if (!wcscmp(g_pDungeonRes[nDungeon].szDungeon, L"그림자 성채") && (pInstDungeon || pEliteDungeon))
	{
		g_bContentFail = 0;
		if (pInstDungeon)
			pInstDungeon->C_Topmenu->OnTapBackBtn();

		if (pEliteDungeon)
			pEliteDungeon->C_Topmenu->OnTapBackBtn();

		SetDelay(10);
		return;
	}

	// 파티 던전 켜진 상태
	if (pInstDungeon)
	{
		// 던전 난이도 설정하자
		int nCurDifficulty = *(BYTE*)((DWORD64)pInstDungeon + OFFSET_PARTYDUNGEON_DIFFICULTY);

		int nDifficulty = -1;
		if (g_OtherSetting.bPartyDungeon && g_OtherSetting.bDungeonDiff &&
			!wcscmp(g_pDungeonRes[nDungeon].szRegion, g_szPartyDungeonName[g_OtherSetting.nDungeonType % MAX_PARTYDUNGEON]))
			nDifficulty = g_OtherSetting.nDungeonDiff;

		if (nDifficulty >= 0 && nCurDifficulty != nDifficulty)
		{
			if (nDifficulty == 0)
				pInstDungeon->OnClicked_DungeonLevel_Easy();
			else if (nDifficulty == 1)
				pInstDungeon->OnClicked_DungeonLevel_Hard();
			else if (nDifficulty == 2)
				pInstDungeon->OnClicked_DungeonLevel_VeryHard();
			else
				pInstDungeon->OnClicked_DungeonLevel_Hell();

			SetDelay(10);
			return;
		}

		// 파티 목록 갱신해야 하는 경우
		if (g_bRefreshPartyDungeon)
		{
			g_bRefreshPartyDungeon = FALSE;
			pInstDungeon->OnClickedRefreshList();

			SetDelay(10);
			return;
		}

		UProjectLH_LHScrollBox* C_Scroll = pInstDungeon->C_Scroll;
		if (C_Scroll)
		{
			DWORD64 qwMyScrollBoxItem = *(DWORD64*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM);
			if (qwMyScrollBoxItem)
			{
				if (*(int*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCHECK))
				{
					int nIndex = -1;

					int nListCount = *(int*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
					if (nListCount > 0)
					{
						int	nTmpCount = 0;
						int	pTmpIndex[50];

						for (int i = 0; i < nListCount; i++)
						{
							UProjectLH_LHWidget_InstDungeonRegister_Container* pContainer = (UProjectLH_LHWidget_InstDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
							if (!pContainer || !pContainer->IsVisible())
								continue;

							int nPartyDiff = *(int*)((BYTE*)pContainer + OFFSET_DUNGEONPARTY_DIFFICULTY);
							if (nPartyDiff != nCurDifficulty)
								continue;

							int nCurCount = *(int*)((BYTE*)pContainer + OFFSET_DUNGEONPARTY_MEMBERCNT);
							if (nCurCount <= 0 || nCurCount >= 4)
								continue;

							if (nTmpCount >= 50)
								break;

							pTmpIndex[nTmpCount++] = i;
						}

						if (nTmpCount > 0)
							nIndex = pTmpIndex[rand() % nTmpCount];
					}

					if (nIndex != -1)
					{
						UProjectLH_LHWidget_InstDungeonRegister_Container* pPartyContainer = (UProjectLH_LHWidget_InstDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * nIndex + 8);
						if (pPartyContainer)
						{
							g_bRefreshPartyDungeon = FALSE;
							pPartyContainer->OnClicked_Invite();
						}

						//ShowStatus(1, 60295, g_pDungeonRes[nDungeon].szRegion);
						SetDelay(10);
						return;
					}
				}
			}
		}

		// 파티 새로 생성하자
		ShowStatus(1, 60294, g_pDungeonRes[nDungeon].szRegion);
		pInstDungeon->OnClickedRegister();

		SetDelay(10);
		return;
	}

	g_bContentFail = 0;

	// 정예 던전 켜진 상태
	if (pEliteDungeon)
	{
		WCHAR szDungeon[MAX_NAME] = { 0, };

		// 현재 선택된 던전이 입장할 던전이라면
		if (GetTextFromTextBlock((UUMG_TextBlock*)pEliteDungeon->C_Text_Dungeon_Name, szDungeon) && !wcscmp(szDungeon, g_pDungeonRes[nDungeon].szRegion))
		{
			g_bDungeonTele = TRUE;
			g_dwNoMonsterTick = g_dwTickCount;
			ShowStatus(1, 60259, szDungeon);				//L"던전 \"%s\"에 입장합니다", 
			pEliteDungeon->OnClicked_EnterEliteDungeon();

			SetDelay(20);
			return;
		}

		// 입장할 던전을 목록에서 선택하자
		UProjectLH_LHScrollBox* C_Scroll = pEliteDungeon->C_Scroll;
		if (C_Scroll)
		{
			DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_Scroll->UnknownData00[0x18];
			int nScrollCount = *(int*)&C_Scroll->UnknownData00[0x20];
			for (int i = 0; i < nScrollCount; i++)
			{
				UProjectLH_LHWidget_EliteDungeonRegister_Container* pItemContainer = (UProjectLH_LHWidget_EliteDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
				if (!pItemContainer)
					return;

				if (GetTextFromTextBlock((UUMG_TextBlock*)pItemContainer->C_Text_Name, szDungeon))
				{
					if (!wcscmp(szDungeon, g_pDungeonRes[nDungeon].szRegion))
					{
						pItemContainer->OnClickedEliteDungeon();
						SetDelay(10);
						return;
					}
				}
			}
		}

		// 설정된 던전이 없으므로 끝난것으로 처리하자

		if (pEliteDungeon->C_Topmenu)
			pEliteDungeon->C_Topmenu->OnTapExitBtn();

		ShowStatus(1, 60338, g_pDungeonRes[nDungeon].szRegion);
		ChangeSchedule();
		SetDelay(10);
		return;
	}

	// 그림자 성채
	if (pShadowDungeon)
	{
		WCHAR szDungeon[MAX_NAME] = { 0, };

		// 현재 선택된 던전이 입장할 던전이라면
		if (GetTextFromTextBlock((UUMG_TextBlock*)pShadowDungeon->Text_Dungeon_Name, szDungeon) && !wcscmp(szDungeon, g_pDungeonRes[nDungeon].szRegion))
		{
			g_bDungeonTele = TRUE;
			g_dwNoMonsterTick = g_dwTickCount;
			ShowStatus(1, 60259, szDungeon);				//L"던전 \"%s\"에 입장합니다", 
			pShadowDungeon->OnClicked_EnterShadowDungeonA();

			SetDelay(20);
			return;
		}

		// 입장할 던전을 목록에서 선택하자
		UProjectLH_LHScrollBox* C_Scroll = pShadowDungeon->Scroll;
		if (C_Scroll)
		{
			DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_Scroll->UnknownData00[0x18];
			int nScrollCount = *(int*)&C_Scroll->UnknownData00[0x20];
			for (int i = 0; i < nScrollCount; i++)
				{
					UProjectLH_LHWidget_EliteDungeonRegister_Container* pItemContainer = (UProjectLH_LHWidget_EliteDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
					if (!pItemContainer)
						return;

					if (GetTextFromTextBlock((UUMG_TextBlock*)pItemContainer->C_Text_Name, szDungeon))
					{
						if (!wcscmp(szDungeon, g_pDungeonRes[nDungeon].szRegion))
						{
							pItemContainer->OnClickedEliteDungeon();
							SetDelay(10);
							return;
						}
					}
				}
		}

		// 설정된 던전이 없으므로 끝난것으로 처리하자

		if (pShadowDungeon->Topmenu)
			pShadowDungeon->Topmenu->OnTapExitBtn();

		ShowStatus(1, 60338, g_pDungeonRes[nDungeon].szRegion);
		ChangeSchedule();
		SetDelay(10);
		return;
	}

	// 입장할 던전 선택하자
	if (pInstDungeonList)
	{
		if (SelectTab(pInstDungeonList->C_MainTabList, g_pDungeonRes[nDungeon].bAloneDungeon))
		{
			UProjectLH_LHScrollBox* C_Scroll;

			if (g_pDungeonRes[nDungeon].bAloneDungeon == 0) // Party
				C_Scroll = pInstDungeonList->C_Scroll;
			else if (g_pDungeonRes[nDungeon].bAloneDungeon == 1) // Ellite
				C_Scroll = pInstDungeonList->C_EliteScroll;
			else // word
				C_Scroll = pInstDungeonList->C_WorldScroll;

			if (!C_Scroll)
			{
				SetDelay(10);
				return;
			}

			DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_Scroll->UnknownData00[0x18];
			if (!qwMyScrollBoxItem)
			{
				SetDelay(10);
				return;
			}

			int nCount = *(int*)(&C_Scroll->UnknownData00[0x20]);
			for (int i = 0; i < nCount; i++)
			{
				UProjectLH_LHWidget_InstDungeonList_Container* pItemContainer = (UProjectLH_LHWidget_InstDungeonList_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
				if (!pItemContainer)
					continue;

				WCHAR szDungeon[MAX_NAME] = { 0, };
				GetTextFromTextBlock((UUMG_TextBlock*)pItemContainer->C_Text_DungeonName, szDungeon);
				if (!wcscmp(szDungeon, g_pDungeonRes[nDungeon].szDungeon))
				{
					pItemContainer->OnClickedDungeon();
					SetDelay(10);
					return;
				}
			}
		}

		SetDelay(10);
		return;
	}

	OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Dungeon);
	SetDelay(10);
}



BOOL OnCloseContentsTutorial(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ContentsTutorial* uiContentsTutorial = (UProjectLH_LHWidget_ContentsTutorial*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ContentsTutorial));
	if (!uiContentsTutorial || !uiContentsTutorial->IsVisible())
		return FALSE;

	g_bSkipTutorial = 1;
	uiContentsTutorial->OnClicked_Screen();
	return TRUE;
}


UProjectLH_LHWidget_PartyWindow* GetPartyWindow(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
	{
		UProjectLH_LHWidget_InGame_LeftTab* C_InGame_LeftTab = uiInGame->C_InGame_LeftTab;
		if (C_InGame_LeftTab)
			return C_InGame_LeftTab->C_BP_PartyWindow;
	}

	return NULL;
}


void UpdatePartyInfo(DWORD* dwAddress)
{
	g_bPartyAutoMatch = FALSE;
	g_bPartyDungeon = FALSE;
	g_nPartyCount = 0;
	g_bPartyExist = FALSE;

	UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
	if (!pPartyWindow)
		return;

	if (pPartyWindow->C_BP_PartyUserInvite && pPartyWindow->C_BP_PartyUserInvite->C_Switcher_MessageType &&
		pPartyWindow->C_BP_PartyUserInvite->C_Switcher_MessageType->ActiveWidgetIndex == 1)
		g_bPartyAutoMatch = TRUE;

	DWORD64 qwAddr = *(DWORD64*)&pPartyWindow->PartySlotMap;
	if (!qwAddr)
		return;

	int nCount = *(int*)((BYTE*)&pPartyWindow->PartySlotMap + 0x08);
	int nRemainCount = *(int*)((BYTE*)pPartyWindow + OFFSET_PARTYWINDOW_REMAINCOUNT1 + OFFSET_PARTYWINDOW_REMAINCOUNT2);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_PartySlot* pPartySlot = *(UProjectLH_LHWidget_PartySlot**)(qwAddr + 0x08 + i * 0x18);
		if (!pPartySlot || !pPartySlot->IsVisible())
			continue;

		if (g_nPartyCount < MAX_PARTY)
		{
			memset(&g_pPartyInfo[g_nPartyCount], 0, sizeof(PARTYINFO));

			g_pPartyInfo[g_nPartyCount].qwSlotAddr = (DWORD64)pPartySlot;
			g_pPartyInfo[g_nPartyCount].bMaster = (BOOL)(pPartySlot == pPartyWindow->MasterSlot);

			WCHAR szTmp[MAX_NAME] = { 0, };
			GetTextFromTextBlock(pPartySlot->C_Text_PlayerLevel, szTmp);
			g_pPartyInfo[g_nPartyCount].nLevel = _wtoi(szTmp);

			GetTextFromTextBlock(pPartySlot->C_Text_PlayerName, g_pPartyInfo[g_nPartyCount].szName);
			if (pPartySlot->C_CP_Ready)
				g_pPartyInfo[g_nPartyCount].bReady = (BYTE)pPartySlot->C_CP_Ready->IsVisible();
			if (pPartySlot->C_CP_Die)
				g_pPartyInfo[g_nPartyCount].bDead = (BYTE)pPartySlot->C_CP_Die->IsVisible();

			if (g_pPartyInfo[g_nPartyCount].bMaster)
				g_pPartyInfo[g_nPartyCount].bReady = 1;

			for (int j = 0; j < g_nPlayerCount; j++)
			{
				if (!wcscmp(g_pPlayerInfo[j].szName, g_pPartyInfo[g_nPartyCount].szName))
				{
					g_pPartyInfo[g_nPartyCount].dwObjectSerial = g_pPlayerInfo[j].dwObjectSerial;
					break;
				}
			}

			if (wcscmp(g_pPartyInfo[g_nPartyCount].szName, g_pCharInfo.szName))
			{
				if (g_nPartyCount < 3 - nRemainCount)
					g_nPartyCount++;
			}
			else
				g_bPartyExist = TRUE;
		}
	}

	if (pPartyWindow->C_PartyMenuSwitcher->ActiveWidgetIndex == 0)
		g_bPartyDungeon = TRUE;
}



FProjectLH_ProjectLH_ECharacterState GetPlayerState(DWORD* dwAddress)
{
	_callFunc1  getPlayable = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETPLAYABLE], dwAddress[0]);

	DWORD64 qwPlayerController = (DWORD64)GetPlayerController(dwAddress);
	AProjectLH_LHPlayer_Playable* qwPlayable = (AProjectLH_LHPlayer_Playable*)getPlayable(qwPlayerController);
	if (!qwPlayable)
		return FProjectLH_ProjectLH_ECharacterState::ECharacterState__None;

	return qwPlayable->CharacterState;
}


//void FreeGarbageMemory(DWORD* dwAddress, DWORD64 dwData)
void FreeGarbageMemory(DWORD64 dwData)
{
	//_callFunc1 freeMemory = (_callFunc1)PATCHADDR(dwAddress[ADDR_FREEMEMORY], dwAddress[0]);
	_callFunc1 freeMemory = (_callFunc1)GAMEADDR(ADDR_FREEMEMORY);
	if (dwData)
		freeMemory(dwData);
}


int GetPartyDungeonCount(DWORD* dwAddress)
{
	int nTicket = 0;
	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (objGameInstance)
		nTicket = *(int*)((DWORD64)objGameInstance->PartyMgr + OFFSET_PARTYDUNGEONFREECOUNT);

	return nTicket;
}


int GetPartyDungeonType()
{
	int nDungeonIndex = 0;
	if (g_OtherSetting.bPartyDungeon && g_OtherSetting.bDungeonType)
	{
		if (g_OtherSetting.nDungeonType == 1 && GetMainQuestNo() >= 2215)
			nDungeonIndex = g_OtherSetting.nDungeonType;

		if (g_OtherSetting.nDungeonType == 2 && GetMainQuestNo() >= 3211)
			nDungeonIndex = g_OtherSetting.nDungeonType;

		if (g_OtherSetting.nDungeonType == 3 && GetMainQuestNo() >= 4211)
			nDungeonIndex = g_OtherSetting.nDungeonType;
	}

	return nDungeonIndex;
}


int GetBigSnakeCount(DWORD* dwAddress)
{
	int nTicket = GetPartyDungeonCount(dwAddress);
	int nDungeonIndex = GetPartyDungeonType();
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (!wcsstr(g_pInvenInfo[i].szName, L"입장권"))
			continue;

		if (!g_OtherSetting.bUseTicket && !wcsstr(g_pInvenInfo[i].szName, L"귀속)"))
			continue;

		if (wcsstr(g_pInvenInfo[i].szName, g_szPartyDungeonName[nDungeonIndex]))
			nTicket += g_pInvenInfo[i].nCount;
	}

	return nTicket;
}


BOOL CloseOfflineHuntingResult(DWORD* dwAddress)
{
	UProjectLH_LHWidget_OfflineHunting_Result_Popup* uiDungeonRewardPopup = (UProjectLH_LHWidget_OfflineHunting_Result_Popup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_OfflineHunting_Result));
	if (!uiDungeonRewardPopup || !uiDungeonRewardPopup->IsVisible())
		return FALSE;

	uiDungeonRewardPopup->OnTouchOK();
	return TRUE;
}


BOOL OnCloseGuildPopup(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Take_GuildContribution* GuildPopup = reinterpret_cast<UProjectLH_LHWidget_Take_GuildContribution*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Take_GuildContribution::StaticClass()));
	if (!GuildPopup)
		return FALSE;

	GuildPopup->OnTouchedBlock();
	return TRUE;
}


void UpdateQuestWindowInfo(DWORD* dwAddress)
{
	g_nQuestWindowCount = 0;

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return;

	UProjectLH_LHQuestMgr* objQuestMgr = objGameInstance->QuestMgr;
	if (!objQuestMgr)
		return;

	UProjectLH_LHWidget_QuestListWindow* uiQuestWindow = (UProjectLH_LHWidget_QuestListWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestListWindow));
	if (!uiQuestWindow)
		return;

	_callFunc2 getAcceptable = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTACCEPTABLE], dwAddress[0]);
	_callFunc2 getMainQuestDoingInfo = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETMAINQUESTINFO], dwAddress[0]);
	_callFunc2 getCompletedQuest = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETQUESTCOMPLETEDSTATE], dwAddress[0]);

	int nQuestCount = uiQuestWindow->QuestListPool.ActiveUIs.Num();
	for (int i = 0; i < nQuestCount; i++)
	{
		UProjectLH_LHWidget_QuestListInfo_Container* qwListItem = (UProjectLH_LHWidget_QuestListInfo_Container*)uiQuestWindow->QuestListPool.ActiveUIs[i];
		if (!qwListItem)
			continue;

		UCommonSource_QuestInfoRecord* questInfoRecord = (UCommonSource_QuestInfoRecord*)*(DWORD64*)((DWORD64)qwListItem + OFFSET_QUESTCONTAINERQUESTRECORD);
		if (!questInfoRecord)
			continue;

		DWORD dwQuestId = questInfoRecord->Index;
		if (!dwQuestId)
			continue;

		if ((int)getAcceptable((DWORD64)objQuestMgr, dwQuestId) <= 0)			// 수락 받을수 없는 상태면 무시
			continue;

		if (getCompletedQuest((DWORD64)objQuestMgr, dwQuestId))					// 끝난 상태면 무시
			continue;

		if (questInfoRecord->Name.c_str() == NULL)
			continue;

		if (g_nQuestWindowCount < MAX_QUEST)
		{
			memset(&g_pQuestWindowInfo[g_nQuestWindowCount], 0, sizeof(QUESTWINDOW));

			swprintf(g_pQuestWindowInfo[g_nQuestWindowCount].szName, L"%s", questInfoRecord->Name.c_str());

			g_pQuestWindowInfo[g_nQuestWindowCount].QuestContainer = qwListItem;
			g_pQuestWindowInfo[g_nQuestWindowCount].dwQuestID = dwQuestId;

			DWORD64 qwQuestDoingInfo = getMainQuestDoingInfo((DWORD64)objQuestMgr, dwQuestId);
			if (qwQuestDoingInfo)
				g_pQuestWindowInfo[g_nQuestWindowCount].nQuestState = *(char*)(qwQuestDoingInfo + OFFSET_QUESTSTATE);

			g_nQuestWindowCount++;
		}
	}
}


int GetSubQuestIndex()
{
	for (int i = 0; i < g_nSubQuestCount; i++)
	{
		// 퀵슬롯 등록, 길드 가입, 마을 의뢰, 발할라 대전, 스킬 강화
		if (g_pSubQuestInfo[i].dwQuestID == 0x84D1 || g_pSubQuestInfo[i].dwQuestID == 0x84D2 || g_pSubQuestInfo[i].dwQuestID == 0x84D3 ||
			g_pSubQuestInfo[i].dwQuestID == 0x84D4 || g_pSubQuestInfo[i].dwQuestID == 0x84D5)
			continue;

		// 티르, 토르는 무시하자
		if (g_pSubQuestInfo[i].dwQuestID == 0xA186 || g_pSubQuestInfo[i].dwQuestID == 0xA187 ||
			g_pSubQuestInfo[i].dwQuestID == 0xA5F0 || g_pSubQuestInfo[i].dwQuestID == 0xA5F1)
			continue;

		return i;
	}

	return -1;
}


int GetSubQuestWindowIndex()
{
	for (int i = 0; i < g_nQuestWindowCount; i++)
	{
		// 티르, 토르는 무시하자
		if (g_pQuestWindowInfo[i].dwQuestID == 0xA186 || g_pQuestWindowInfo[i].dwQuestID == 0xA187 ||
			g_pSubQuestInfo[i].dwQuestID == 0xA5F0 || g_pSubQuestInfo[i].dwQuestID == 0xA5F1)
			continue;

		if (g_pQuestWindowInfo[i].dwQuestID == 0x84D1 ||			// 효율적인 전투 (퀵슬롯 등록)
			g_pQuestWindowInfo[i].dwQuestID == 0x84D2 ||			// 뜻을 나눈 전우 (길드 가입)
			g_pQuestWindowInfo[i].dwQuestID == 0x84D3 ||			// 친절한 해결사 (마을 의뢰)
			g_pQuestWindowInfo[i].dwQuestID == 0x84D4 ||			// 용감한 선봉장 (발할라 대전)
			g_pQuestWindowInfo[i].dwQuestID == 0x84D5)				// 기술의 강화 (스킬 강화)
		{
			if (g_pQuestWindowInfo[i].nQuestState == QUEST_DOING)
				continue;
		}

		return i;
	}

	return -1;
}


BOOL OnSpecialSubQuest(DWORD* dwAddress, DWORD dwQuestID)
{
	int nIndex = -1;
	for (int i = 0; i < MAX_SUBQUEST_PACKET; i++)
	{
		if (dwQuestID == g_pSubQuestPacket[i].dwQuestID)
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex == -1)
		return FALSE;

	// 매달려 있는 경우
	if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None &&
		g_pCharInfo.nCurHp > 0 && g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb)
	{
		PressKeyAlternate(L'F');
		SetDelay(10);
		return TRUE;
	}

	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction ||
		g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction_End)
	{
		SetDelay(5);
		return TRUE;
	}

	int nDist = (int)GETDIST3D(g_pSubQuestPacket[nIndex].fNpcPos, g_pCharInfo.CurTransform.Translation);
	if (dwQuestID == 0x9C4E)					// 전망대인 경우 바로 이동할수 있는지 체크하자
	{
		if (nDist < 1200 && g_pCharInfo.CurTransform.Translation.Z >= g_pSubQuestPacket[nIndex].fNpcPos.Z)
			return FALSE;
	}

	// Npc 가까운데 있으면 대화하자
	if (nDist < 200)
	{
		if (!ClickInteraction(dwAddress, TRUE) && !IsMovingTargetPos(dwAddress, g_pSubQuestPacket[nIndex].fNpcPos) &&
			g_pCharInfo.nMoveState != FProjectLH_ProjectLH_EAutoMove::EAutoMove__InteractionMove_Actor)
			MovePos(dwAddress, g_pSubQuestPacket[nIndex].fNpcPos);

		SetDelay(10);
		return TRUE;
	}

	// 순간이동 시작점에 있으면
	int nPacketIndex = g_pSubQuestPacket[nIndex].nPacketIndex;
	if (nPacketIndex != -1)
	{
		nDist = (int)GETDIST3D(g_pMovePacket[nPacketIndex].fStartPos, g_pCharInfo.CurTransform.Translation);
		if (nDist < 200)
		{
			if (g_bPartyDungeon)
			{
				UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
				if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
				{
					if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
						pPartyWindow->OnClickedDungeonReady();
				}
			}

			CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MovePacketThread, (LPVOID)nPacketIndex, 0, 0);
			SetDelay(10);
			return TRUE;
		}
	}

	// 미션 진행할 지역이 아니면 텔레포트 하자
	if (wcscmp(g_pCharInfo.szWorld, g_pSubQuestPacket[nIndex].szWorldName) || wcscmp(g_pCharInfo.szRegion, g_pSubQuestPacket[nIndex].szRegionName))
	{
		if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None &&
			TeleportMap(dwAddress, g_pSubQuestPacket[nIndex].szWorldName, g_pSubQuestPacket[nIndex].szRegionName))
			g_bSubQuestReturn = FALSE;

		return TRUE;
	}

	// 마을에서 미션 진행하는 경우
	BOOL bVillageMission = FALSE;
	for (int i = 0; i < MAX_WORLD; i++)
	{
		if (!wcscmp(g_pSubQuestPacket[nIndex].szRegionName, g_szVillageName[i]))
		{
			bVillageMission = TRUE;
			break;
		}
	}

	if (g_bSubQuestReturn && bVillageMission)
	{
		// 마을인 경우 다른 곳으로 이동했다 오자
		if (g_pCharInfo.nMapType == MapType_Village)
		{
			int nCurWorld = 0;
			for (int i = 0; i < MAX_WORLD; i++)
			{
				if (!wcscmp(g_szWorldName[i], g_pCharInfo.szWorld))
				{
					nCurWorld = i;
					break;
				}
			}

			if (TeleportMap(dwAddress, g_pCharInfo.szWorld, g_szFieldName[nCurWorld][0]))
				g_bSubQuestReturn = FALSE;

			SetDelay(10);
			return TRUE;
		}

		// 사냥터인 경우 그냥 귀환하자
		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (!uiInGame)
		{
			g_bSubQuestReturn = FALSE;
			return TRUE;
		}

		UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
		if (!C_InGame_Minimap_Container)
		{
			g_bSubQuestReturn = FALSE;
			return FALSE;
		}

		if (IsInDungeon() || g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
			C_InGame_Minimap_Container->OnClicked_Exit();
		else
		{
			g_bSubQuestReturn = FALSE;
			C_InGame_Minimap_Container->OnClicked_Return();
		}

		SetDelay(10);
		return TRUE;
	}

	// 시작 위치로 이동하자
	if (nPacketIndex != -1)
	{
		if (!IsMovingTargetPos(dwAddress, g_pMovePacket[nPacketIndex].fStartPos))
			MovePos(dwAddress, g_pMovePacket[nPacketIndex].fStartPos);
	}
	else if (!IsMovingTargetPos(dwAddress, g_pSubQuestPacket[nIndex].fNpcPos) &&
		g_pCharInfo.nMoveState != FProjectLH_ProjectLH_EAutoMove::EAutoMove__InteractionMove_Actor)
		MovePos(dwAddress, g_pSubQuestPacket[nIndex].fNpcPos);

	SetDelay(10);
	return TRUE;
}



void UpdateTradeRegInfo(DWORD* dwAddress)
{
	g_nTradeRegCount = 0;
	g_nCurTradeRegCount = 0;

	UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));
	if (!uiExchange || !uiExchange->IsVisible())
		return;

	UProjectLH_LHWidget_Exchange_Sell* C_Widget_Exchange_Sell = uiExchange->C_Widget_Exchange_Sell;
	if (!C_Widget_Exchange_Sell)
		return;

	g_nCurTradeRegCount = C_Widget_Exchange_Sell->MySaleInfoArray.Num();

	DWORD64 qwMyItemHScrollBox = (DWORD64)C_Widget_Exchange_Sell->C_Scroll_ItemList;
	if (!qwMyItemHScrollBox)
		return;

	DWORD64	qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	if (*(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY) == -1)
		return;

	int nCount = *(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_ExchangeList_Container* qwItemContainer = (UProjectLH_LHWidget_ExchangeList_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer)
			continue;

		INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMCONID));
		if (!itemInfo.DetailInfo)
			continue;

		if (g_nTradeRegCount < MAX_TRADE)
		{
			memset(&g_pTradeRegInfo[g_nTradeRegCount], 0, sizeof(TRADE_ITEM));

			g_pTradeRegInfo[g_nTradeRegCount].bState = *(char*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEDEPTH);
			g_pTradeRegInfo[g_nTradeRegCount].dwItem = itemInfo;
			g_pTradeRegInfo[g_nTradeRegCount].nPrice = *(int*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMTOTALTPRICE);
			g_pTradeRegInfo[g_nTradeRegCount].nCount = *(int*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMSELLINGCOUNT);
			g_pTradeRegInfo[g_nTradeRegCount].nEnchant = *(DWORD*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMENCHANT);
			if (!g_pTradeRegInfo[g_nTradeRegCount].nCount)
				g_pTradeRegInfo[g_nTradeRegCount].nCount = *(DWORD*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMBUNCHCOUNT);
			g_pTradeRegInfo[g_nTradeRegCount].pContainer = qwItemContainer;
			g_nTradeRegCount++;
		}
	}
}


void UpdateTradeInvenInfo(DWORD* dwAddress)
{
	g_nTradeInvenCount = 0;

	UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));
	if (!uiExchange || !uiExchange->IsVisible())
		return;

	UProjectLH_LHWidget_Exchange_Sell* C_Widget_Exchange_Sell = uiExchange->C_Widget_Exchange_Sell;
	if (!C_Widget_Exchange_Sell)
		return;

	DWORD64 qwMyItemHScrollBox = (DWORD64)C_Widget_Exchange_Sell->C_Scroll_Inven;
	if (!qwMyItemHScrollBox)
		return;

	DWORD64 qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	int nCount = *(DWORD*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_InventoryItem_Container* qwItemContainer = (UProjectLH_LHWidget_InventoryItem_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer)
			continue;

		if (g_nTradeInvenCount < MAX_INVEN)
		{
			g_pTradeInvenInfo[g_nTradeInvenCount].ItemContainer = qwItemContainer;
			g_pTradeInvenInfo[g_nTradeInvenCount].dwItemInfo = GetItemInfo(dwAddress, (DWORD64)qwItemContainer->CurrentItem);

			if (!wcsstr(g_pTradeInvenInfo[g_nTradeInvenCount].dwItemInfo.szName, L"귀속)"))
				g_nTradeInvenCount++;
		}
	}
}


BOOL OnCloseTradeConfirm(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Exchange_CheckRegister* uiExchangeCheck = (UProjectLH_LHWidget_Exchange_CheckRegister*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_CheckRegister));
	if (!uiExchangeCheck || !uiExchangeCheck->IsVisible())
		return FALSE;

	uiExchangeCheck->OnTouchConfirm();
	return TRUE;
}


void UpdateTradeSellInfo(DWORD* dwAddress)
{
	g_nTradeSellCount = 0;

	UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));
	if (!uiExchange || !uiExchange->IsVisible())
		return;

	UProjectLH_LHWidget_Exchange_Buy* C_Widget_Exchange_Buy = uiExchange->C_Widget_Exchange_Buy;
	if (!C_Widget_Exchange_Buy)
		return;

	DWORD64 qwMyItemHScrollBox = (DWORD64)C_Widget_Exchange_Buy->C_Scroll_ItemList;
	if (!qwMyItemHScrollBox)
		return;

	DWORD64	qwMyScrollBoxItem = *(DWORD64*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM);
	if (!qwMyScrollBoxItem)
		return;

	if (*(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOX_ISEMPTY) == -1)
		return;

	int nCount = *(int*)(qwMyItemHScrollBox + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
	for (int i = 0; i < nCount; i++)
	{
		UProjectLH_LHWidget_ExchangeList_Container* qwItemContainer = (UProjectLH_LHWidget_ExchangeList_Container*)*(DWORD64*)(qwMyScrollBoxItem + 24 * i + 8);
		if (!qwItemContainer)
			continue;

		DWORD dwItemType = *(DWORD*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMCONID);
		INVENINFO itemInfo = GetItemInfoWithType(dwAddress, dwItemType);
		if (!itemInfo.DetailInfo)
			continue;

		if (g_nTradeSellCount < MAX_TRADE)
		{
			memset(&g_pTradeSellInfo[g_nTradeSellCount], 0, sizeof(TRADE_ITEM));

			g_pTradeSellInfo[g_nTradeSellCount].bState = *(char*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEDEPTH);
			g_pTradeSellInfo[g_nTradeSellCount].dwItem = itemInfo;
			g_pTradeSellInfo[g_nTradeSellCount].nPrice = *(int*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMTOTALTPRICE);
			g_pTradeSellInfo[g_nTradeSellCount].nCount = *(int*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMSELLINGCOUNT);
			g_pTradeSellInfo[g_nTradeSellCount].nEnchant = *(DWORD*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMENCHANT);
			if (!g_pTradeSellInfo[g_nTradeSellCount].nCount)
				g_pTradeSellInfo[g_nTradeSellCount].nCount = *(int*)((DWORD64)qwItemContainer + OFFSET_EXCHANGEITEMBUNCHCOUNT);
			g_pTradeSellInfo[g_nTradeSellCount].pContainer = qwItemContainer;
			g_nTradeSellCount++;
		}
	}
}


BOOL IsChaoTradeItem(const WCHAR* szName)
{
	for (int i = 0; i < g_nTradeChaoCount; i++)
	{
		if (!wcscmp(g_pszTradeChaoName[i], szName))
			return TRUE;
	}

	return FALSE;
}


void PutChaoTradeItem(const WCHAR* szName)
{
	if (g_nTradeChaoCount < MAX_CHAO)
	{
		memset(g_pszTradeChaoName[g_nTradeChaoCount], 0, sizeof(WCHAR) * MAX_NAME);
		wcscpy(g_pszTradeChaoName[g_nTradeChaoCount], szName);
		g_nTradeChaoCount++;
	}
	else
	{
		g_nTradeChaoCount = MAX_CHAO;
		memcpy(&g_pszTradeChaoName[0], &g_pszTradeChaoName[1], sizeof(WCHAR) * MAX_NAME * (g_nTradeChaoCount - 1));
		memset(g_pszTradeChaoName[g_nTradeChaoCount - 1], 0, sizeof(WCHAR) * MAX_NAME);
		wcscpy(g_pszTradeChaoName[g_nTradeChaoCount - 1], szName);
	}
}


BOOL IsCheckTradeItem(const WCHAR* szName, int nCount)
{
	for (int i = 0; i < g_nTradeCheckCount; i++)
	{
		if (!wcscmp(g_pTradeCheckInfo[i].szName, szName))
		{
			if (g_pTradeCheckInfo[i].nCount > nCount)
				return FALSE;

			break;
		}
	}

	if (g_OtherSetting.bTradeDissolve)
	{
		for (int i = 0; i < g_nTradeDissolveCount; i++)
		{
			if (!wcscmp(g_pTradeDissolveItem[i].szName, szName))
				return FALSE;
		}
	}

	return TRUE;
}


void PutDissolveTradeItem(const WCHAR* szName)
{
	for (int i = 0; i < g_nTradeDissolveCount; i++)
	{
		if (!wcscmp(g_pTradeDissolveItem[i].szName, szName))
			return;
	}

	if (g_nTradeDissolveCount < MAX_TRADEDISSOLVE)
	{
		memset(&g_pTradeDissolveItem[g_nTradeDissolveCount], 0, sizeof(TRADE_DISSOLVE));
		wcscpy(g_pTradeDissolveItem[g_nTradeDissolveCount].szName, szName);
		g_nTradeDissolveCount++;
	}
	else
	{
		g_nTradeDissolveCount = MAX_TRADEDISSOLVE;

		memcpy(&g_pTradeDissolveItem[0], &g_pTradeDissolveItem[1], sizeof(TRADE_DISSOLVE) * (g_nTradeDissolveCount - 1));

		memset(&g_pTradeDissolveItem[g_nTradeDissolveCount - 1], 0, sizeof(TRADE_DISSOLVE));
		wcscpy(g_pTradeDissolveItem[g_nTradeDissolveCount - 1].szName, szName);
	}
}


void PutCheckTradeItem(const WCHAR* szName, int nCount)
{
	for (int i = 0; i < g_nTradeCheckCount; i++)
	{
		if (!wcscmp(g_pTradeCheckInfo[i].szName, szName))
		{
			g_pTradeCheckInfo[i].nCount = nCount;
			return;
		}
	}

	if (g_nTradeCheckCount < MAX_CHAO)
	{
		memset(&g_pTradeCheckInfo[g_nTradeCheckCount], 0, sizeof(TRADE_CHECK));

		wcscpy(g_pTradeCheckInfo[g_nTradeCheckCount].szName, szName);
		g_pTradeCheckInfo[g_nTradeCheckCount].nCount = nCount;
		g_nTradeCheckCount++;
	}
	else
	{
		g_nTradeCheckCount = MAX_CHAO;

		memcpy(&g_pTradeCheckInfo[0], &g_pTradeCheckInfo[1], sizeof(TRADE_CHECK) * (g_nTradeCheckCount - 1));

		memset(&g_pTradeCheckInfo[g_nTradeCheckCount - 1], 0, sizeof(TRADE_CHECK));
		wcscpy(g_pTradeCheckInfo[g_nTradeCheckCount - 1].szName, szName);
		g_pTradeCheckInfo[g_nTradeCheckCount - 1].nCount = nCount;
	}
}


BOOL IsExistTradeCalculate()
{
	for (int i = 0; i < g_nTradeRegCount; i++)
	{
		if (g_pTradeRegInfo[i].bState == 9)
		{
			return TRUE;
		}
	}

	return FALSE;
}


void CloseUI(DWORD* dwAddress, DWORD64 qwUI)
{
	_callFunc1 closeUI = (_callFunc1)PATCHADDR(dwAddress[ADDR_CLOSEUI], dwAddress[0]);
	if (qwUI)
		closeUI(qwUI);
}


void OnGameTrade(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));

	// 거래소를 열자
	if (!uiExchange || !uiExchange->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Exchange);
		SetDelay(10);
		return;
	}

	// 거래소 들어오자마자 판매목록 눌러서 갱신해주자
	if (g_bTradeInit && !SelectTab(uiExchange->C_MainTabList, 1))
	{
		g_bTradeInit = FALSE;
		SetDelay(10);
		return;
	}

	UpdateTradeRegInfo(dwAddress);				// 등록된 물품
	UpdateTradeInvenInfo(dwAddress);				// 등록할수 있는 물품
	UpdateTradeSellInfo(dwAddress);				// 현재 거래소 물품

	// 판매된 물품이 있으면 정산하자
	//if (IsRedDotTab(uiExchange->C_MainTabList, 1))
	if (IsExistTradeCalculate())
	{
		if (!SelectTab(uiExchange->C_MainTabList, 1))
		{
			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_Exchange_Sell* C_Widget_Exchange_Sell = uiExchange->C_Widget_Exchange_Sell;
		if (C_Widget_Exchange_Sell)
		{
			ShowStatus(0, 60264);		// L"판매된 물품들을 정산합니다");

			C_Widget_Exchange_Sell->OnTapAllReceive();
		}

		SetDelay(10);
		return;
	}

	// 회수할 물품 있으면 처리하자
	int nIndex = -1;
	for (int i = 0; i < g_nTradeRegCount; i++)
	{
		if (g_pTradeRegInfo[i].bState == 8)
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex != -1)
	{
		if (!SelectTab(uiExchange->C_MainTabList, 1))
		{
			SetDelay(10);
			return;
		}

		ShowStatus(1, 60265, g_pTradeRegInfo[nIndex].dwItem.szName);			// L"아이템 \"%s\" 을(를) 회수합니다", 
		g_pTradeRegInfo[nIndex].pContainer->OnTouchCancelBtn();
		SetDelay(10);
		return;
	}

	// 판매할 아이템들 등록하자 (최대 등록개수는 30개다)
	if (g_nCurTradeRegCount < 30)
	{
		// 등록할 물품 번호를 얻자
		int nInvenIndex = -1, nSettingIndex = -1;
		for (int i = 0; i < g_nTradeInvenCount; i++)
		{
			if (g_pTradeInvenInfo[i].dwItemInfo.bLocked || g_pTradeInvenInfo[i].dwItemInfo.bEquiped)
				continue;

			// 세부 설정 있는지 체크하자
			nSettingIndex = GetItemDetailIndex(g_pTradeInvenInfo[i].dwItemInfo);
			if (nSettingIndex != -1)
			{
				if (g_pItemDetailInfo[nSettingIndex].nMode != ItemMode_Trade)				// 거래 등록이 아니면 무시하자
					continue;

				if (g_pItemDetailInfo[nSettingIndex].nMarketCount <= 0)
					continue;

				if (g_pItemDetailInfo[nSettingIndex].nMarketCount > g_pTradeInvenInfo[i].dwItemInfo.nCount)
					continue;

				if (g_pTradeInvenInfo[i].dwItemInfo.DetailInfo->ItemType > 0 && g_pTradeInvenInfo[i].dwItemInfo.DetailInfo->ItemType < 12 &&
					g_pItemDetailInfo[nSettingIndex].bItemEnchant && g_pItemDetailInfo[nSettingIndex].nItemEnchant > 0 &&
					g_pTradeInvenInfo[i].dwItemInfo.nEnchant < g_pItemDetailInfo[nSettingIndex].nItemEnchant)
					continue;
			}
			// 일반 설정에 거래소로 설정되어있으면
			else if (g_pTradeInvenInfo[i].dwItemInfo.DetailInfo->ItemGrade < 6 && g_pItemDefault[g_pTradeInvenInfo[i].dwItemInfo.DetailInfo->ItemGrade][g_pTradeInvenInfo[i].dwItemInfo.nItemType] == ItemMode_Trade &&
				IsCheckTradeItem(g_pTradeInvenInfo[i].dwItemInfo.szName, g_pTradeInvenInfo[i].dwItemInfo.nCount))
				nSettingIndex = -2;

			// 세부 및 일반 설정이 안되어있으면 무시하자
			if (nSettingIndex == -1)
				continue;

			// 시세정보 없는 물품은 무시하자
			if (IsChaoTradeItem(g_pTradeInvenInfo[i].dwItemInfo.szName))
				continue;

			// 분해할 아이템이면 무시하자
			if (g_OtherSetting.bTradeDissolve)
			{
				BOOL bContinue = FALSE;
				for (int j = 0; j < g_nTradeDissolveCount; j++)
				{
					if (!wcscmp(g_pTradeDissolveItem[j].szName, g_pTradeInvenInfo[i].dwItemInfo.szOrgName))
					{
						bContinue = TRUE;
						break;
					}
				}

				if (bContinue)
					continue;
			}

			nInvenIndex = i;
			break;
		}

		// 등록할 물품이 있는 경우
		if (nInvenIndex != -1)
		{
			// 고정가로 등록하는 경우는 바로 진행하자
			if (nSettingIndex >= 0 && g_pItemDetailInfo[nSettingIndex].nMarketMode == 0)
			{
				// 등록 탭 선택하고
				if (SelectTab(uiExchange->C_MainTabList, 1))
				{
					int nPrice = g_pItemDetailInfo[nSettingIndex].nMarketPrice;
					if (nPrice < 10)
						nPrice = 10;

					int nCount = min(1000, g_pItemDetailInfo[nSettingIndex].nMarketCount);

					UProjectLH_LHWidget_Exchange_Sell* C_Widget_Exchange_Sell = uiExchange->C_Widget_Exchange_Sell;
					if (!C_Widget_Exchange_Sell)
						return;

					UProjectLH_LHWidget_Exchange_RegisterItem* C_Widget_RegisterItem = C_Widget_Exchange_Sell->C_Widget_RegisterItem;
					if (!C_Widget_RegisterItem)
						return;

					g_pTradeInvenInfo[nInvenIndex].ItemContainer->OnTapSelect();

					ShowStatus(5, 60266, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName, nPrice, nCount);			// L"아이템 \"%s\" 을(를) %d 다이아에 %d개 등록합니다", 

					*(int*)((DWORD64)C_Widget_RegisterItem + OFFSET_EXCHANGEITEMCOUNT) = nCount;
					*(int*)((DWORD64)C_Widget_RegisterItem + OFFSET_EXCHANGEITEMPIRCE) = nPrice;
					C_Widget_RegisterItem->OnTouchRegister();

					g_nTradeRegIndex = 0;
					memset(g_szTradeRegName, 0, sizeof(g_szTradeRegName));
					memset(g_szTradeOrgName, 0, sizeof(g_szTradeOrgName));
				}

				SetDelay(10);
				return;
			}

			// 검색할 물품을 설정하자
			if (wcscmp(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szOrgName, g_szTradeRegName))
			{
				g_bTradeEnchant = 0;
				memset(g_szTradeRegName, 0, sizeof(g_szTradeRegName));
				swprintf(g_szTradeOrgName, L"%s", g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->Name.c_str());
				swprintf(g_szTradeRegName, L"%s", g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szOrgName);
				g_nTradeRegIndex = g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->Index;
			}

			UProjectLH_LHWidget_Exchange_Buy* C_Widget_Exchange_Buy = uiExchange->C_Widget_Exchange_Buy;
			// 검색을 하지 않은 상태
			if (g_nTradeSellCount <= 0 || wcscmp(g_pTradeSellInfo[0].dwItem.szName, g_szTradeOrgName))
			{
				if (SelectTab(uiExchange->C_MainTabList, 0))
				{
					// 강화 수치로 검색한 경우에 결과가 없으면 해당 시세가 없다고 보고 카오로 처리하자
					if (g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant > 0 && g_bTradeEnchant && C_Widget_Exchange_Buy &&
						*(char*)((DWORD64)C_Widget_Exchange_Buy + OFFSET_SEARCHEXCHANGEOPTION + 2) == max(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant, 0))
					{
						ShowStatus(1, 60267, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);			// L"물품 \"%s\"의 시세정보가 없습니다", 

						g_bTradeEnchant = 0;
						PutChaoTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
						return;
					}

					// 해당 물품으로 검색하자
					UProjectLH_LHWidget_Exchange_ItemSearchPopup* uiItemSearch = (UProjectLH_LHWidget_Exchange_ItemSearchPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_ItemSearchPopup));
					if (uiItemSearch && uiItemSearch->IsVisible())
					{
						UProjectLH_LHWidget_Exchange_Search* C_Widget_SearchPage = uiItemSearch->C_Search;
						if (C_Widget_SearchPage)
						{
							ShowStatus(1, 60268, g_szTradeRegName);			// L"물품 \"%s\" 시세를 검색합니다", 

							//FString  strSearch(g_szTradeRegName);
							C_Widget_SearchPage->OnTouchExchangeSearchItem(g_nTradeRegIndex);
							CloseUI(dwAddress, (DWORD64)uiItemSearch);
						}
					}
					else
						uiExchange->OnTouchSearchName();
				}

				SetDelay(10);
				return;
			}

			// 현재 시세가 검색이 된 상태면
			// 거래소 등록된 물품이 없으면 카오목록에 추가하자
			if (g_pTradeSellInfo[0].nCount <= 0)
			{
				ShowStatus(1, 60267, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
				PutChaoTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
				return;
			}

			// 일괄목록인 경우 세부목록으로 들어가자
			if (g_pTradeSellInfo[0].bState == 2)
			{
				if (SelectTab(uiExchange->C_MainTabList, 0))
				{
					if (C_Widget_Exchange_Buy && g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant > 0)
					{
						*(char*)((DWORD64)C_Widget_Exchange_Buy + OFFSET_SEARCHEXCHANGEOPTION + 2) = max(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant, 0);
						*(char*)((DWORD64)C_Widget_Exchange_Buy + OFFSET_SEARCHEXCHANGEOPTION + 3) = min(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant + 1, 10);

						g_bTradeEnchant = TRUE;
					}

					g_pTradeSellInfo[0].pContainer->OnTouchItemContainer();
				}

				SetDelay(10);
				return;
			}

			// 세부 목록 나와야 하는데 안나온 경우는 무슨 상황인지 모르니까 오류로 처리하자
			if (g_pTradeSellInfo[0].bState != 3 && g_pTradeSellInfo[0].bState != 4)
				return;

			// 재검색했는데 강화수치가 다르면 해당 물품이 없다고 보구 카오목록에 추가하자
			if (g_pTradeSellInfo[0].nEnchant != g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant)
			{
				ShowStatus(1, 60267, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
				PutChaoTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
				return;
			}

			int nRegPrice = 0, nRegCount = 0;

			// 세부 설정이 되어있는 경우 해당 번호 시세 얻어내자
			if (nSettingIndex >= 0)
			{
				int nSellCount = 0;
				for (int i = 0; i < g_nTradeSellCount; i++)
				{
					if (g_pTradeSellInfo[i].nEnchant != g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nEnchant)
						break;

					nSellCount++;
				}

				int nRegIndex = g_pItemDetailInfo[nSettingIndex].nMarketIndex;
				if (nRegIndex >= nSellCount)
					nRegIndex = nSellCount - 1;

				float fPrice = (float)g_pTradeSellInfo[nRegIndex - 1].nPrice / g_pTradeSellInfo[nRegIndex - 1].nCount;

				// 					AJLog(L"물품 \"%s\" %d번 시세: %d, 개수: %d, 개당가격: %.2f",
				// 						g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName, nRegIndex, g_pTradeSellInfo[nRegIndex - 1].nPrice, g_pTradeSellInfo[nRegIndex - 1].nCount, fPrice);

				nRegCount = min(1000, g_pItemDetailInfo[nSettingIndex].nMarketCount);
				nRegPrice = (int)(fPrice * nRegCount);
				nRegPrice += g_pItemDetailInfo[nSettingIndex].nMarketPrice;
				if (nRegPrice < 10)
					nRegPrice = 10;

				// 거래 가격에 따라 분해 처리해야 할 장비인가 따지자
				if (g_OtherSetting.bTradeDissolve && g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->ItemCategory > 0 &&
					g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->ItemCategory < 5 && nRegPrice <= g_OtherSetting.nTradeDissolve)
				{
					ShowStatus(2, 60410, NULL, g_OtherSetting.nTradeDissolve);
					PutDissolveTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szOrgName);
					return;
				}
			}
			// 일반 설정이 되어있으면 제일 최소값으로 설정하자
			else
			{
				float fPrice = (float)g_pTradeSellInfo[0].nPrice / g_pTradeSellInfo[0].nCount;

				// 					AJLog(L"물품 \"%s\" 1번 시세: %d, 개수: %d, 개당가격: %.2f",
				// 						g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName, g_pTradeSellInfo[0].nPrice, g_pTradeSellInfo[0].nCount, fPrice);

				nRegCount = 1;
				nRegPrice = (int)fPrice;

				// 거래 가격에 따라 분해 처리해야 할 장비인가 따지자
				if (g_OtherSetting.bTradeDissolve && g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->ItemCategory > 0 &&
					g_pTradeInvenInfo[nInvenIndex].dwItemInfo.DetailInfo->ItemCategory < 5 && nRegPrice <= g_OtherSetting.nTradeDissolve)
				{
					ShowStatus(2, 60410, NULL, g_OtherSetting.nTradeDissolve);
					PutDissolveTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szOrgName);
					return;
				}

				if (nRegPrice < 10)			// 10 다야 미만인 경우
				{
					int nNeedCount = (int)(10.0f / fPrice) + 1;
					if (g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nCount >= nNeedCount)			// 등록할 개수가 층분한 경우
					{
						nRegCount = min(1000, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nCount);
						nRegPrice = (int)(fPrice * nRegCount) + 0;
					}
					else																		// 개수가 모자라면
					{
						ShowStatus(1, 60298, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName);
						PutCheckTradeItem(g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName, nNeedCount);
						return;
					}
				}
				else
				{
					nRegCount = min(1000, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.nCount);
					nRegPrice = (int)(fPrice * nRegCount) + 0;
				}
			}

			// 설정된 가격과 개수로 등록하자
			if (SelectTab(uiExchange->C_MainTabList, 1))
			{
				UProjectLH_LHWidget_Exchange_Sell* C_Widget_Exchange_Sell = uiExchange->C_Widget_Exchange_Sell;
				if (!C_Widget_Exchange_Sell)
					return;

				UProjectLH_LHWidget_Exchange_RegisterItem* C_Widget_RegisterItem = C_Widget_Exchange_Sell->C_Widget_RegisterItem;
				if (!C_Widget_RegisterItem)
					return;

				g_pTradeInvenInfo[nInvenIndex].ItemContainer->OnTapSelect();

				ShowStatus(5, 60266, g_pTradeInvenInfo[nInvenIndex].dwItemInfo.szName, nRegPrice, nRegCount);			// L"아이템 \"%s\" 을(를) %d 다이아에 %d개 등록합니다", 

				*(int*)((DWORD64)C_Widget_RegisterItem + OFFSET_EXCHANGEITEMCOUNT) = nRegCount;
				*(int*)((DWORD64)C_Widget_RegisterItem + OFFSET_EXCHANGEITEMPIRCE) = nRegPrice;
				C_Widget_RegisterItem->OnTouchRegister();

				g_nTradeRegIndex = 0;
				memset(g_szTradeRegName, 0, sizeof(g_szTradeRegName));
				memset(g_szTradeOrgName, 0, sizeof(g_szTradeOrgName));
			}

			SetDelay(10);
			return;
		}
	}

	// 거래소 닫기
	ShowStatus(0, 60269);		// L"거래소 물품 확인을 진행하였습니다");

	uiExchange->C_Widget_Topmenu->OnTapExitBtn();
	SetStatus(g_nPreStatus, 10);
}


void UpdateCollectionInfo(DWORD* dwAddress)
{
	g_nCollectionCount = 0;

	if (!g_OtherSetting.bCollectItem)
		return;

	UProjectLH_LHWidget_ItemCollection_Window* uiItemCollection = (UProjectLH_LHWidget_ItemCollection_Window*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemCollection_Window));
	if (!uiItemCollection || !uiItemCollection->IsVisible())
		return;

	UProjectLH_LHWidget_Item_Collection* C_Widget_Item_Collection = uiItemCollection->C_Widget_Item_Collection;
	if (!C_Widget_Item_Collection)
		return;

	for (int i = 0; i < C_Widget_Item_Collection->ItemCollectionContainerArray.Num(); i++)
	{
		UProjectLH_LHWidget_Item_Collection_Container* collectionContainer = (UProjectLH_LHWidget_Item_Collection_Container*)C_Widget_Item_Collection->ItemCollectionContainerArray[i];
		if (!collectionContainer)
			continue;

		UCommonSource_CollectionRewardInfoRecord* collectionInfo = *(UCommonSource_CollectionRewardInfoRecord**)((DWORD64)collectionContainer + OFFSET_ITEMCOLLECTIONANME);
		if (!collectionInfo)
			continue;

		// 		WCHAR* szName = GetGameString(collectionInfo->NameCode);
		// 		FreeGarbageMemory(dwAddress, (DWORD64)szName);

				// 필터링
		if (g_OtherSetting.bCollectFilter)
		{
			BOOL bExist = FALSE;

			DWORD64 qwCollectionDetailInfo = *(DWORD64*)((DWORD64)collectionContainer + OFFSET_COLLECTIONDETAILINFO);
			if (qwCollectionDetailInfo)
			{
				int nTypeCount = *(int*)(qwCollectionDetailInfo + OFFSET_COLLECTIONDETAILINFO1 + OFFSET_COLLECTIONDETAILINFOCOUNT);
				for (int j = 0; j < nTypeCount; j++)
				{
					char nCollectType = *(char*)(*(DWORD64*)(qwCollectionDetailInfo + OFFSET_COLLECTIONDETAILINFO1) + j);

					// 명중 컬렉션
					if (g_OtherSetting.bCollectType[0])
					{
						if (nCollectType >= 10 && nCollectType <= 13)
						{
							bExist = TRUE;
							break;
						}
					}

					// 대미지 컬렉션
					if (g_OtherSetting.bCollectType[1])
					{
						if (nCollectType == 9 || (nCollectType >= 15 && nCollectType <= 20) || (nCollectType >= 24 && nCollectType <= 29))
						{
							bExist = TRUE;
							break;
						}
					}

					// 방어 컬렉션
					if (g_OtherSetting.bCollectType[2])
					{
						if (nCollectType == 30)
						{
							bExist = TRUE;
							break;
						}
					}

					// 회피 컬렉션
					if (g_OtherSetting.bCollectType[3])
					{
						if (nCollectType >= 31 && nCollectType <= 34)
						{
							bExist = TRUE;
							break;
						}
					}

					// HP 회복량
					if (g_OtherSetting.bCollectType[4])
					{
						if (nCollectType == 2 || nCollectType == 59)
						{
							bExist = TRUE;
							break;
						}
					}

					// MP 회복량
					if (g_OtherSetting.bCollectType[5])
					{
						if (nCollectType == 3 || nCollectType == 60)
						{
							bExist = TRUE;
							break;
						}
					}
				}
			}

			// 등록할 컬렉션이 아닌 경우
			if (!bExist)
				continue;
		}

		int dwCollectionItemCount = min(collectionContainer->ItemContainerArray.Num(), collectionInfo->CollectionCount);
		for (int j = 0; j < dwCollectionItemCount; j++)
		{
			UProjectLH_LHWidget_Collection_NeedItem_Container* needItemContainer = (UProjectLH_LHWidget_Collection_NeedItem_Container*)collectionContainer->ItemContainerArray[j];
			if (!needItemContainer || !needItemContainer->CurrentItemRecord)
				continue;

			// 일반 등급
			if (!g_OtherSetting.bCollectGrade[0] && needItemContainer->CurrentItemRecord->ItemGrade == 0)
				continue;

			// 고급 등급
			if (!g_OtherSetting.bCollectGrade[1] && needItemContainer->CurrentItemRecord->ItemGrade == 1)
				continue;

			// 희귀 등급
			if (!g_OtherSetting.bCollectGrade[2] && needItemContainer->CurrentItemRecord->ItemGrade == 2)
				continue;

			// 영웅 등급
			if (!g_OtherSetting.bCollectGrade[3] && needItemContainer->CurrentItemRecord->ItemGrade >= 3)
				continue;

			int nNeedLevel = *(int*)((DWORD64)needItemContainer->C_ItemContainer + OFFSET_ITEMCONTAINERLV);
			int nCurLevel = -1;
			if (needItemContainer->CurrentItem)
				nCurLevel = *(int*)((DWORD64)needItemContainer->CurrentItem + OFFSET_ITEMCOUNT + 4);

			if (nCurLevel != nNeedLevel)
				continue;

			// 강화된 장비 컬렉션 안하는 경우
			if (!g_OtherSetting.bCollectEnchant)
			{
				if (nNeedLevel > 0)
					continue;
			}
			else if (g_OtherSetting.bCollectEnchant)
			{
				if (nNeedLevel < g_OtherSetting.nCollectMin || nNeedLevel > g_OtherSetting.nCollectMax)
					continue;
			}

			if (g_nCollectionCount < MAX_COLLECTION)
				g_pCollectionInfo[g_nCollectionCount++] = needItemContainer;
			else
				break;
		}

		if (g_nCollectionCount >= MAX_COLLECTION)
			break;
	}
}


BOOL OnCloseCollectionPopup(DWORD* dwAddress)
{
	UProjectLH_LHWidget_CheckPopup* uiCollectionPopup = (UProjectLH_LHWidget_CheckPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_CheckPopup));
	if (!uiCollectionPopup || !uiCollectionPopup->IsVisible())
		return FALSE;

	*(char*)((DWORD64)uiCollectionPopup + OFFSET_CHECKPOPUPCHECKER) = 1;
	uiCollectionPopup->OnClicked_OK();
	return TRUE;
}


void OnGameCollection(DWORD* dwAddress)
{
	// 자동 장착할수 있는가 체크하자
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (g_nAutoEquip == 0 && IsExistEquipItem(dwAddress))
	{
		if (uiInven && uiInven->IsVisible())
		{
			if (!AutoEquipItems(dwAddress))
				g_nAutoEquip = 1;
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);

		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_ItemCollection_Window* uiItemCollection = (UProjectLH_LHWidget_ItemCollection_Window*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_ItemCollection_Window));
	if (g_OtherSetting.bCollectItem)
	{
		// 아이템 수집 진행하자
		if (!uiItemCollection || !uiItemCollection->IsVisible())
		{
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Collection);
			SetDelay(10);
			return;
		}

		UpdateCollectionInfo(dwAddress);

		// 아이템 툴팁창 현시된 경우
		UProjectLH_LHWidget_ItemToolTip_Container* C_Widget_ItemCollection_ToolTip_Container = uiItemCollection->C_Widget_ItemCollection_ToolTip_Container;
		if (C_Widget_ItemCollection_ToolTip_Container && C_Widget_ItemCollection_ToolTip_Container->IsVisible())
		{
			if (g_nCollectionCount > 0 && C_Widget_ItemCollection_ToolTip_Container->CurrentItem == g_pCollectionInfo[0]->CurrentItem)
			{
				C_Widget_ItemCollection_ToolTip_Container->OnTapButton03();
				SetDelay(5);
				return;
			}
		}

		// 등록할 아이템들 얻자
		for (int i = g_nCollectionIndex; i < 4; i++)
		{
			if (g_OtherSetting.bCollectTab[i] == 0)								// 설정이 안된 경우
				continue;

			if (!IsRedDotTab(uiItemCollection->C_MainTabList, i))				// 빨간점이 있는 탭 선택하자
				continue;

			if (!SelectTab(uiItemCollection->C_MainTabList, i))
			{
				SetDelay(5);
				return;
			}

			if (g_nCollectionCount == 0)
			{
				g_nCollectionIndex = i + 1;
				continue;
			}

			g_pCollectionInfo[0]->OnTapItem();									// 첫번째 컬렉션 아이템 등록하자
			SetDelay(5);
			return;
		}
	}

	ShowStatus(0, 60270);														// L"아이템 컬렉션 등록을 진행하였습니다");
	if (uiItemCollection && uiItemCollection->IsVisible())
		uiItemCollection->C_Widget_Topmenu->OnTapExitBtn();

	SetStatus(g_nPreStatus, 10);
}


BOOL OnCloseCancelTrade(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Exchange_CheckCancel* uiExchangeCancel = (UProjectLH_LHWidget_Exchange_CheckCancel*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_CheckCancel));
	if (!uiExchangeCancel || !uiExchangeCancel->IsVisible())
		return FALSE;

	uiExchangeCancel->OnTouchConfirm();
	return TRUE;
}


BOOL IsExistTradeItem()
{
	if (g_nCurTradeRegCount < 30)
	{
		for (int i = 0; i < g_nInvenCount; i++)
		{
			if (g_pInvenInfo[i].bLocked || g_pInvenInfo[i].bEquiped)
				continue;

			if (wcsstr(g_pInvenInfo[i].szName, L"귀속"))
				continue;

			if (IsChaoTradeItem(g_pInvenInfo[i].szName))
				continue;

			int nDetailIndex = GetItemDetailIndex(g_pInvenInfo[i]);
			if (nDetailIndex != -1)
			{
				if (g_pItemDetailInfo[nDetailIndex].nMode != ItemMode_Trade)				// 거래 등록이 아니면 무시하자
					continue;

				if (g_pItemDetailInfo[nDetailIndex].nMarketCount <= 0)
					continue;

				if (g_pItemDetailInfo[nDetailIndex].nMarketCount > g_pInvenInfo[i].nCount)
					continue;

				if (g_pInvenInfo[i].DetailInfo->ItemType > 0 && g_pInvenInfo[i].DetailInfo->ItemType < 12 &&
					g_pItemDetailInfo[nDetailIndex].bItemEnchant && g_pItemDetailInfo[nDetailIndex].nItemEnchant > 0 &&
					g_pInvenInfo[i].nEnchant < g_pItemDetailInfo[nDetailIndex].nItemEnchant)
					continue;

				return TRUE;
			}
			else if (g_pInvenInfo[i].DetailInfo->ItemGrade < 6 && g_pItemDefault[g_pInvenInfo[i].DetailInfo->ItemGrade][g_pInvenInfo[i].nItemType] == ItemMode_Trade &&
				IsCheckTradeItem(g_pInvenInfo[i].szName, g_pInvenInfo[i].nCount))
				return TRUE;
		}
	}

	return FALSE;
}



BOOL OnWarningProc(DWORD* dwAddress)
{
	AProjectLH_LHPlayerController* playerController = GetPlayerController(dwAddress);
	if (!playerController)
		return FALSE;

	AProjectLH_LHHUD* LHHud = (AProjectLH_LHHUD*)playerController->MyHUD;
	if (!LHHud)
		return FALSE;

	_callFunc5 getInstanceMsgEcx = (_callFunc5)PATCHADDR(dwAddress[ADDR_GETINSTANCEMSG], dwAddress[0]);
	UProjectLH_LHWidget_InstantMessage* qwInstanceMsg = (UProjectLH_LHWidget_InstantMessage*)getInstanceMsgEcx((DWORD64)LHHud, OFFSET_INSTANTMESSAGE_VALUE, 0, 0, 0);
	if (!qwInstanceMsg)
		return FALSE;

	if (*(int*)((DWORD64)qwInstanceMsg + OFFSET_WARNINGCOUNT) <= 0)
		return FALSE;

	DWORD64 qwWarningInfo = *(DWORD64*)((DWORD64)qwInstanceMsg + OFFSET_WARNINGINFO);
	if (!qwWarningInfo)
		return FALSE;

	UProjectLH_LHWidget_InstantMsgContainer* qwWarningContainer = (UProjectLH_LHWidget_InstantMsgContainer*)*(DWORD64*)(qwWarningInfo + 8);
	if (!qwWarningContainer)
		return FALSE;

	WCHAR* szWarning = WC(qwWarningContainer->C_Msg->Text);
	if (!szWarning)
		return FALSE;

	g_qwWarningTick = g_dwTickCount;

	if (g_szPreWarning[0] != 0 && wcsstr(szWarning, g_szPreWarning))
		return FALSE;

	swprintf_s(g_szPreWarning, 200, L"%s", szWarning);

#ifdef _TEST_VERSION_

	AJLog(L"Warning: %s", g_szPreWarning);

#endif

	if (wcsstr(szWarning, L"계정 생성 제한 상태입니다"))
	{
		g_pGameMapping->bAutoRun = FALSE;
		g_pGameMapping->bLogType = LogType_ChangeAutoState;

		g_nGameServer = -1;
		ShowStatus(0, 60280);					// 캐릭터 생성이 제한된 서버입니다

		return TRUE;
	}
	else if (wcsstr(szWarning, L"서버와의 연결이 끊어졌습니다"))
	{
		ShowStatus(0, 60386);
		TerminateProcess(GetCurrentProcess(), 0);
		SetDelay(10);
		return TRUE;
	}
	else if (wcsstr(szWarning, L"다른 기기에서"))
	{
		ShowStatus(0, 60188);
		TerminateProcess(GetCurrentProcess(), 0);
	}
	else if (wcsstr(szWarning, L"해당 파티는 이미 인원이 꽉") || wcsstr(szWarning, L"알 수 없는 오류가 발생했습니다") || wcsstr(szWarning, L"입장할 맵이 존재하지") ||
		wcsstr(szWarning, L"전투가 종료되어 입장할 수 없습니다"))
		g_bRefreshPartyDungeon = TRUE;
	else if (wcsstr(szWarning, L"동일한 맵에서만 지원하는 기능입니다"))
		g_qwPartyMoveTick = g_dwTickCount;
	else if (wcsstr(szWarning, L"해당 콘텐츠는 운영자에 의해 임시로 잠금된"))
	{
		ShowStatus(2, 60305, NULL, g_nCurStatus);
		PutChaoStatus(g_nCurStatus);

		g_dwPreQuestID = 0;
		g_dwNoMonsterTick = g_dwTickCount;
		SetStatus(STATUS_DOAUTO, 10);

		memset(g_szPreWarning, 0, sizeof(WCHAR) * 200);
		return TRUE;
	}
	else if (wcsstr(szWarning, L"길드에서 추방되어") || wcsstr(szWarning, L"길드원이 가득") || wcsstr(szWarning, L"공성전"))
		g_qwGuildJoinTick[g_nGameChar % 5] = g_dwTickCount + (rand() % 235 + 66) * 1000 * 60;
	else if (wcsstr(szWarning, L"빠른 이동을 할수 없는 상태입니다") || wcsstr(szWarning, L"빠른 이동을 사용할 수 없는 상태입니다"))
		g_bSubQuestFly = 1;
	else if (wcsstr(szWarning, L"카카오 접속 정보가 유효하지 않습니다"))
	{
		ShowStatus(0, 60188);
		TerminateProcess(GetCurrentProcess(), 0);
	}
	else if (wcsstr(szWarning, L"파티가 존재하지 않습니다"))
	{
		g_bRefreshPartyDungeon = TRUE;
		if (g_bPartyExist)					// 파티 없는데 파티상태로 나오는 경우 캐선 하자
		{
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
			return TRUE;
		}
		else
		{
			UProjectLH_LHWidget_InstDungeonList* pInstDungeonList = reinterpret_cast<UProjectLH_LHWidget_InstDungeonList*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonList::StaticClass()));
			if (pInstDungeonList)
			{
				pInstDungeonList->C_Topmenu->OnTapExitBtn();
				return TRUE;
			}
		}
	}
	else if (wcsstr(szWarning, L"입장할 맵이 존재하지 않습니다"))
	{
		UProjectLH_LHWidget_InstDungeonList* pInstDungeonList = reinterpret_cast<UProjectLH_LHWidget_InstDungeonList*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonList::StaticClass()));
		if (pInstDungeonList)
		{
			pInstDungeonList->C_Topmenu->OnTapExitBtn();
			return TRUE;
		}
	}
	else if (wcsstr(szWarning, L"같은 회차에는 한 번만 참여"))
		g_bValhala = TRUE;
	else if (wcsstr(szWarning, L"NPC를 찾을 수 없습니다"))
		g_bGotoNPCFail = 1;
	else if (wcsstr(szWarning, L"하루에 사용할 수 있는 탈출하기를 모두 사용했습니다"))
		g_bCharFallDown = 1;
	else if (wcsstr(szWarning, L"접근할 수 없는 콘텐츠입니다"))
		g_bContentFail = 1;
	else if (wcsstr(szWarning, L"서버와 접속이 원활하지 않아"))
	{
		if (g_nDisconnectCount < 50)
			g_dwDisconnectTime[g_nDisconnectCount++] = g_dwTickCount;
		else
		{
			g_nDisconnectCount = 50;
			for (int i = 0; i < 49; i++)
				g_dwDisconnectTime[i] = g_dwDisconnectTime[i + 1];

			g_dwDisconnectTime[g_nDisconnectCount - 1] = g_dwTickCount;
		}

		if ((g_nDisconnectCount >= 10 && g_dwDisconnectTime[g_nDisconnectCount - 1] - g_dwDisconnectTime[g_nDisconnectCount - 10] <= 2 * 60 * 1000))
		{
			ShowStatus(0, 60360);
			TerminateProcess(GetCurrentProcess(), 0);
			return TRUE;
		}
	}
	else if (wcsstr(szWarning, L"알 수 없는 힘에 의해서 지나갈 수 없습니다"))
		g_bDungeonDoorLock = 1;
	else if (wcsstr(szWarning, L"현재 지역에서는 월드맵을 "))
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
		SetDelay(20);
		return TRUE;
	}

	return FALSE;
}


void OnGameGuild(DWORD* dwAddress)
{
	UProjectLH_LHWidget_GuildMain* GuildMain = reinterpret_cast<UProjectLH_LHWidget_GuildMain*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_GuildMain::StaticClass()));
	UProjectLH_LHWidget_GuildJoin* GuildJoin = reinterpret_cast<UProjectLH_LHWidget_GuildJoin*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_GuildJoin::StaticClass()));
	if (!GuildMain && !GuildJoin)
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Guild);

		SetDelay(10);
		return;
	}

	if (GuildMain)											// 가입한 길드 정보가 나와야 한다
	{
		g_bGuildCheck[g_nGameChar % 5] = 1;					// 길드 출석을 했으니까 기발 세워주자

		UProjectLH_LHWidget_GuildInfo* GuildInfo = GuildMain->C_Guild_Info;
		if (GuildInfo)
		{
			if (g_OtherSetting.bGuildDonate && g_pCharInfo.nGoods[0] >= g_OtherSetting.nGuildDonate && !g_bGuildDonate[g_nGameChar % 5])
			{
				if (SelectTab(GuildMain->C_MainTabList, 1))
				{
					WCHAR szName[MAX_NAME];
					GetTextFromTextBlock(GuildInfo->C_Text_DonateCount, szName);
					if (!wcscmp(szName, L"0/3"))
						g_bGuildDonate[g_nGameChar % 5] = 1;
					else
					{
						ShowStatus(0, 60274);			// L"길드 골드 기부를 진행합니다");
						GuildInfo->OnClicked_Donate_Gold();
					}
				}

				SetDelay(10);
				return;
			}
		}

		UProjectLH_LHWidget_Topmenu* Topmenu = GuildMain->C_Topmenu;
		if (Topmenu)
			Topmenu->OnTapExitBtn();

		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (GuildJoin)											// 길드 가입
	{
		if (g_dwTickCount >= g_qwGuildJoinTick[g_nGameChar % 5])
		{
			g_qwGuildJoinTick[g_nGameChar % 5] = g_dwTickCount + (rand() % 235 + 66) * 1000 * 60;

			UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
			if (pInstance)
			{
				UProjectLH_LHGuildMgr* GuildMgr = pInstance->GuildMgr;
				if (GuildMgr)
					GuildMgr->Send_Guild_Auto_Join();
			}

			SetDelay(10);
			return;
		}

		UProjectLH_LHWidget_Topmenu* Topmenu = GuildJoin->C_Topmenu;
		if (Topmenu)
			Topmenu->OnTapExitBtn();

		SetStatus(g_nPreStatus, 10);
	}
}


BOOL OnCloseGuildJoinPopup(DWORD* dwAddress)
{
	UProjectLH_LHWidget_GuildComplete_Alert* Alert = reinterpret_cast<UProjectLH_LHWidget_GuildComplete_Alert*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_GuildComplete_Alert::StaticClass()));
	if (Alert)
	{
		PressKeyAlternate(VK_ESCAPE);
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseVillageRequest(DWORD* dwAddress)
{
	UProjectLH_LHWidget_RepeatQuestPaper* repeatQuest = (UProjectLH_LHWidget_RepeatQuestPaper*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RepeatQuestPaper));
	if (!repeatQuest || !repeatQuest->IsVisible())
		return FALSE;

	BOOL bAceptQuest = FALSE;
	if (g_OtherSetting.bVillageRequest && g_OtherSetting.bUseVillageQuest)
	{
		for (int i = 0; i < repeatQuest->RewardItemContainerArray.Num(); i++)
		{
			UProjectLH_LHWidget_InventoryItem_Container* rewardItemContainer = repeatQuest->RewardItemContainerArray[i];
			if (!rewardItemContainer)
				continue;

			UProjectLH_LHWidget_Item_Container* ItemContainer = rewardItemContainer->C_BP_Widget_Item_Container;
			if (!ItemContainer)
				continue;

			INVENINFO itemInfo = GetItemInfoWithType(dwAddress, *(DWORD*)((DWORD64)ItemContainer + OFFSET_REPEATQUESTPAPERITEMID));
			if (wcsstr(itemInfo.szName, L"위그드람") || wcsstr(itemInfo.szName, L"구드벨") || wcsstr(itemInfo.szName, L"마력 깃든 정수") ||
				itemInfo.DetailInfo->ItemGrade >= 2)				// 희귀 장비이거나
			{
				bAceptQuest = TRUE;
				break;
			}
		}

		if (!bAceptQuest)											// 보상이 시원치 않으면 갱신하자
		{
			if (!repeatQuest->CurrentRefreshRecord)
				bAceptQuest = TRUE;
			else
			{
				if (repeatQuest->CurrentRefreshRecord->RefreshCount > 10 || g_pCharInfo.nGoods[0] < repeatQuest->CurrentRefreshRecord->RefreshCount * 1000)
					bAceptQuest = TRUE;
				else
					repeatQuest->OnTapRefresh();
			}
		}
	}
	else
		bAceptQuest = TRUE;

	if (bAceptQuest)
		repeatQuest->OnTapAccept();

	SetDelay(10);
	return TRUE;
}



void SetEquipsChar(int nServer, int nChar)
{
	WCHAR szPath[MAX_PATH] = { 0, };
	swprintf(szPath, L"%s\\Setting\\%d\\Equips.dat", g_szAppPath, g_nIndex);

	WCHAR szKey[MAX_NAME] = { 0, };
	swprintf(szKey, L"Server_%d", nServer);

	WCHAR szVal[MAX_NAME] = { 0, };
	swprintf(szVal, L"%d", nChar);

	WritePrivateProfileString(L"EquipInfo", szKey, szVal, szPath);
}



int GetEquipsChar(int nServer)
{
	WCHAR szPath[MAX_PATH] = { 0, };
	swprintf(szPath, L"%s\\Setting\\%d\\Equips.dat", g_szAppPath, g_nIndex);

	WCHAR szKey[MAX_NAME] = { 0, };
	swprintf(szKey, L"Server_%d", nServer);

	return GetPrivateProfileInt(L"EquipInfo", szKey, 0, szPath);
}


void HidePlayerObjects(DWORD* dwAddress, BOOL bHide)
{
	if (g_bHidePlayer == bHide)
		return;

	DWORD64 qwAddr = PATCHADDR(dwAddress[ADDR_ADDPLAYER], dwAddress[0]);
	if ((bHide && *(BYTE*)(qwAddr) == 0xC3) || (!bHide && *(BYTE*)(qwAddr) == 0x48))
	{
		g_bHidePlayer = bHide;
		return;
	}

	DWORD dwOldProtect;
	VirtualProtect((LPVOID)qwAddr, 0x01, PAGE_EXECUTE_READWRITE, &dwOldProtect);
	if (bHide)
		*(BYTE*)qwAddr = 0xC3;
	else
		*(BYTE*)qwAddr = 0x48;
	VirtualProtect((LPVOID)qwAddr, 0x01, dwOldProtect, &dwOldProtect);

	g_bHidePlayer = bHide;
}



void OnGameRealMWar(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Revival* pRevival = (UProjectLH_LHWidget_Revival*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Revival));;
	if (pRevival && pRevival->IsVisible())
	{
		if (g_qwCharDeadTick == 0)
			g_qwCharDeadTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwCharDeadTick + 5 * 1000)
		{
			g_qwCharDeadTick = 0;

			switch (pRevival->C_Swicher_Revival->ActiveWidgetIndex)
			{
			case 3:
			{
				ShowStatus(0, 60228);		// L"관전을 진행합니다");
				pRevival->OnClicked_ObserverMode();
			}
			break;
			}
		}
	}

	if (g_pCharInfo.nCurHp > 0 && g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
		AutoAttack(dwAddress);

	if (g_pCharInfo.nCurHp > 0 && g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
		OnSkillInteraction(dwAddress);

	SetDelay(5);
}


int GetMatchingRealmWar(DWORD* dwAddress)
{
	if (IsInDungeon())
		return -1;

	if (g_bPartyDungeon && g_bPartyExist)
		return -1;

	UProjectLH_LHWidget_InGame_EventMarker_Realmwar* pRealmWar = reinterpret_cast<UProjectLH_LHWidget_InGame_EventMarker_Realmwar*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InGame_EventMarker_Realmwar::StaticClass()));
	if (pRealmWar && pRealmWar->IsVisible())
	{
		_callFunc2 funcCheck = (_callFunc2)PATCHADDR(dwAddress[ADDR_WIDGET_ISSAMEANIMATION], dwAddress[0]);
		return (BYTE)funcCheck((DWORD64)pRealmWar, (DWORD64)pRealmWar->RealmWarReadyLoopAni) & 0xFF;
	}

	g_bValhala = 0;
	return -1;
}


BOOL ApplyRealmWar(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame_EventMarker_Realmwar* pRealmWar = reinterpret_cast<UProjectLH_LHWidget_InGame_EventMarker_Realmwar*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InGame_EventMarker_Realmwar::StaticClass()));
	if (pRealmWar && pRealmWar->IsVisible())
	{
		_callFunc2 funcCheck = (_callFunc2)PATCHADDR(dwAddress[ADDR_WIDGET_ISSAMEANIMATION], dwAddress[0]);
		BYTE bRet = funcCheck((DWORD64)pRealmWar, (DWORD64)pRealmWar->RealmWarReadyLoopAni) & 0xFF;
		if (!bRet)
		{
			pRealmWar->OnClicked_RealmWar_Action();
			return TRUE;
		}
	}

	return FALSE;
}


DWORD64 InsertJmpCodes(DWORD64 dwTargetAdr, DWORD64 dwAdrToJmp, OUT BYTE* pOrigCodes)
{	
	BYTE* pAddress;
	DWORD dwOldProtect;

	if (!VirtualProtect((LPVOID)dwTargetAdr, 0x12, PAGE_EXECUTE_READWRITE, &dwOldProtect))
	{
		DWORD error = GetLastError();
		AJLog(L"[InsertJmpCodes] ERROR: VirtualProtect failed with error: %d", error);
		return error;
	}
	AJLog(L"[InsertJmpCodes] Memory protection changed successfully. Old protection: 0x%X", dwOldProtect);

	pAddress = (BYTE*)dwTargetAdr;

	if (pOrigCodes)
		CopyMemory(pOrigCodes, pAddress, 0x12);

	memset((void*)dwTargetAdr, 0x90, 0x12);

	*(BYTE*)(pAddress) = 0x48;					//mov rax, dwAdrToJmp
	*(BYTE*)(pAddress + 1) = 0xB8;				//
	*(DWORD64*)(pAddress + 2) = dwAdrToJmp;		//
	*(BYTE*)(pAddress + 0xA) = 0xFF;			//jmp rax
	*(BYTE*)(pAddress + 0xB) = 0xE0;			//

	if (!VirtualProtect((LPVOID)dwTargetAdr, 0x12, dwOldProtect, &dwOldProtect))
	{
		DWORD error = GetLastError();
		AJLog(L"[InsertJmpCodes] ERROR: Failed to restore memory protection. Error: %d", error);
		return error;
	}

	return 0;
}


BOOL IsPartyDungeon()
{
	if (/*g_pCharInfo.nMapType == MapType_Dungeon && */g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__PartyDungeon)
	{
		AJLog(L"================ Is Party Dungeon Map ===================");
		return TRUE;
	}

	return FALSE;
}


void OnGamePartyDungeon(DWORD* dwAddress)
{
	AJLog(L"################## OnGamePartyDungeon function called");
	if (!IsPartyDungeon())
	{
		AJLog(L"################## Is not in Party Dungeon");

		g_dwPreQuestID = 0;
		g_qwPartyLogoutTick = 0;
		g_bMoveHuntPos = FALSE;
		g_bMoveHuntSet = FALSE;
		g_dwNoMonsterTick = g_dwTickCount;
		g_qwInvenProcStart = 0;
		g_qwEnchantProcStart = 0;

		SetStatus(STATUS_DOAUTO, 10);
		return;
	}

	AJLog(L"################## Step1");
	if (g_pCharInfo.nCurHp <= 0)
	{
		BOOL bPlayerAlive = FALSE;
		for (int i = 0; i < g_nPlayerCount; i++)
		{
			if (g_pPlayerInfo[i].nCurHp > 0)
			{
				bPlayerAlive = TRUE;
				break;
			}
		}

		UProjectLH_LHWidget_Revival* pRevival = (UProjectLH_LHWidget_Revival*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Revival));;
		if (pRevival && pRevival->IsVisible())
		{
			if (g_qwCharDeadTick == 0)
				g_qwCharDeadTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwCharDeadTick + 5 * 1000)
			{
				g_qwCharDeadTick = 0;

				switch (pRevival->C_Swicher_Revival->ActiveWidgetIndex)
				{
				case 2:
				{
					if (!bPlayerAlive)
					{
						g_bGetOutParty = 1;			// 전멸했으므로 다른 파티 구하자
						ShowStatus(0, 60227);		// L"인스턴스 던전에서 나갑니다");
						pRevival->OnClicked_ModeOut();
					}
				}
				break;
				case 3:
				{
					ShowStatus(0, 60228);		// L"관전을 진행합니다");

					pRevival->OnClicked_ObserverMode();
				}
				break;
				}
			}
		}
		else if (!bPlayerAlive)
		{
			if (g_qwCharDeadTick == 0)
				g_qwCharDeadTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwCharDeadTick + 5 * 1000)
			{
				g_qwCharDeadTick = 0;

				g_bGetOutParty = 1;
				ShowStatus(0, 60227);
				ReturnVillage(dwAddress);
			}
		}

		SetDelay(10);
		return;
	}

	AJLog(L"################## Step2");
	if (ChangeGameSetting(dwAddress, -1, -1, 90))
	{
		AJLog(L"################## Step2 - 1");
		SetDelay(10);
		return;
	}

	g_qwPartyWaitTick = 0;

	AJLog(L"################## Step3");
	if (!g_bInitAloneDungeon)
	{
		AJLog(L"################## Step3-1");
		if (!wcscmp(g_pCharInfo.szWorld, L"맹독의 뱀 둥지"))
		{
			FVector fInitPos = { -9712.30f, 12363.65f, -194.45f };
			FVector fMovePos = { -7826.67f, 12503.58f, -193.42f };
			if (MovePos(dwAddress, fMovePos))
				g_bInitAloneDungeon = TRUE;
		}
	}
	AJLog(L"################## Step4");

	if ((!IsBuffExist(L"신속의 주문서") && UseQuickSlot(L"신속의 주문서 (귀속)")) ||
		(!IsBuffExist(L"전투의 주문서") && UseQuickSlot(L"전투의 주문서 (귀속)")) ||
		(!IsBuffExist(L"방어의 주문서") && UseQuickSlot(L"방어의 주문서 (귀속)")) ||
		(!IsBuffExist(L"저항의 주문서") && UseQuickSlot(L"저항의 주문서 (귀속)")))
	{
		AJLog(L"################## Step4-1");
		SetDelay(5);
		return;
	}

	AJLog(L"################## Step5");
	if (!wcscmp(g_pCharInfo.szWorld, L"맹독의 뱀 둥지"))
	{
		AJLog(L"################## Step5-1");
		int nBossIndex = GetMonsterIndex(L"요르문간드");
		if (nBossIndex == -1/* || (DWORD64)g_pMonsterInfo[nBossIndex].qwTargetAddr == g_pCharInfo.qwCharAddr*/)
			OnQuestInstance(dwAddress);

		FVector fPos = { 2001.02f, -9780.07f, -398.22f };
		if (g_nMonsterCount == 0)
		{
			if (!IsMovingTargetPos(dwAddress, fPos))
				MovePos(dwAddress, fPos);
		}
		else if (IsMovingTargetPos(dwAddress, fPos))
			MovePos(dwAddress, g_pCharInfo.CurTransform.Translation);
	}
	else if (!wcscmp(g_pCharInfo.szWorld, L"잊혀진 거인의 동굴"))
	{
		AJLog(L"################## Step5-2");
		FVector fPos = { 57893.19f, -33156.32f, -10490.27f };

		if (g_nMonsterCount == 0)
		{
			if (g_bDungeonDoorLock && g_pCharInfo.nAutoState != AUTO_NONE)
			{
				if (g_pCharInfo.nAutoState != AUTO_NONE)
					AutoAttack(dwAddress);

				FVector fInitPos = { 69.69f, -9363.36f, -838.82f };
				if (!IsMovingTargetPos(dwAddress, fInitPos))
					MovePos(dwAddress, fInitPos);

				SetDelay(10);
				return;
			}

			if (!IsMovingTargetPos(dwAddress, fPos))
				MovePos(dwAddress, fPos);
		}
		else
		{
			g_bDungeonDoorLock = FALSE;

			if (IsMovingTargetPos(dwAddress, fPos))
				MovePos(dwAddress, g_pCharInfo.CurTransform.Translation);
		}
	}
	else if (!wcscmp(g_pCharInfo.szWorld, L"난쟁이 왕가의 무덤"))
	{
		AJLog(L"################## Step5-3");
		FVector fPos = { 34738.79f, 387.53f, 1521.45f };
		if (g_nMonsterCount == 0)
		{
			if (!IsMovingTargetPos(dwAddress, fPos))
				MovePos(dwAddress, fPos);
		}
		else if (IsMovingTargetPos(dwAddress, fPos))
			MovePos(dwAddress, g_pCharInfo.CurTransform.Translation);
	}
	AJLog(L"################## Step6");
	if (g_pCharInfo.nAutoState != AUTO_HUNTING && g_pCharInfo.nAutoState != AUTO_PARTYDUNGEON)
	{
		AJLog(L"################## Step6-1");
		AutoAttack(dwAddress);
	}
	else
	{
		AJLog(L"################## Step7-1");
		ChangePartyHuntMode(dwAddress, 2);							// Auto 설정
	}

	AJLog(L"################## Step8");
	if (g_pCharInfo.nPlayerState >= FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb_Begin
		&& g_pCharInfo.nPlayerState <= FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb_Action)
	{
		AJLog(L"################## Step8-1");
		PressKeyAlternate(VK_SPACE);
		SetDelay(5);
		return;
	}
	AJLog(L"################## Step9");
	if ((!g_OtherSetting.bPartyDungeon || !g_OtherSetting.bMemberCount ||
		g_OtherSetting.nMemberCount > 1) && g_nPartyCount == 0)								// 특정 경우 파티원 없는 오류가 나온다 그런 경우 던전도 안나가지니 캐릭선택으로 넘어가자
	{
		AJLog(L"################## Step9-1");
		if (g_qwPartyLogoutTick == 0)
			g_qwPartyLogoutTick = g_dwTickCount;

		if (g_dwTickCount >= g_qwPartyLogoutTick + 1 * 60 * 1000)
		{
			ShowStatus(0, 60261);								// (파티 던전 오류가 발생하여 캐릭 선택창으로 나갑니다)
			g_qwPartyLogoutTick = 0;
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
		}
	}
	else
		g_qwPartyLogoutTick = 0;

	if (g_nMonsterCount != 0)
		g_qwPartyDungeonTick = 0;
	else if (g_qwPartyDungeonTick == 0)
		g_qwPartyDungeonTick = g_dwTickCount;

	// 1분이상 몹이 없는 경우 카오로 확인하고 던전에서 나가자
	if (g_qwPartyDungeonTick != 0 && g_dwTickCount >= g_qwPartyDungeonTick + 1 * 60 * 1000)
	{
		g_qwPartyDungeonTick = 0;

		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (pPartyWindow)
		{
			g_bPartyDungeonOut = TRUE;
			pPartyWindow->OnClickedPartyExit();
		}
		else
		{
			ShowStatus(0, 60261);
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
			SetDelay(10);
			return;
		}
	}

	if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
		OnSkillInteraction(dwAddress);

	SetDelay(5);
}


BOOL OnCloseDungeonReward(DWORD* dwAddress)
{
	UProjectLH_LHWidget_DungeonRewardPopup* uiDungeonRewardPopup = (UProjectLH_LHWidget_DungeonRewardPopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_DungeonRewardPopup));
	if (!uiDungeonRewardPopup || !uiDungeonRewardPopup->IsVisible())
		return FALSE;

	//uiDungeonRewardPopup->OnClicked_Close();
	return TRUE;
}


BOOL OnGetoutQuestInstance(DWORD* dwAddress)
{
	if (g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
	{
		if (g_bPartyDungeon)
		{
			UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
			if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
			{
				if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
				{
					pPartyWindow->OnClickedDungeonReady();
					return TRUE;
				}
			}
		}

		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
		{
			UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
			if (C_InGame_Minimap_Container)
			{
				C_InGame_Minimap_Container->OnClicked_Exit();
				return TRUE;
			}
		}
	}

	return FALSE;
}


BOOL OnCloseCashShop(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Scene_CashShop* CashShop = reinterpret_cast<UProjectLH_LHWidget_Scene_CashShop*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Scene_CashShop::StaticClass()));
	if (CashShop)
	{
		CashShop->C_Widget_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}



BOOL OnCloseSkillBook(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGameMenu_SkillWindow* uiSkillWindow = (UProjectLH_LHWidget_InGameMenu_SkillWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Skill));
	if (uiSkillWindow && uiSkillWindow->IsVisible())
	{
		uiSkillWindow->C_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseAvatar(DWORD* dwAddress)
{
	UProjectLH_LHWidget_AvatarSystem* pAvataSystem = reinterpret_cast<UProjectLH_LHWidget_AvatarSystem*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_AvatarSystem::StaticClass()));
	if (pAvataSystem)
	{
		pAvataSystem->C_Widget_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}



BOOL OnCloseVehicle(DWORD* dwAddress)
{
	UProjectLH_LHWidget_VehicleWindow* pVehicle = reinterpret_cast<UProjectLH_LHWidget_VehicleWindow*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_VehicleWindow::StaticClass()));
	if (pVehicle)
	{
		if (g_bOpenVehicle)
			g_bOpenVehicle = FALSE;

		pVehicle->C_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseTrade(DWORD* dwAddress)
{
	UProjectLH_LHWidget_ExchangeMain* uiExchange = (UProjectLH_LHWidget_ExchangeMain*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Exchange_Main));
	if (uiExchange && uiExchange->IsVisible())
	{
		uiExchange->C_Widget_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseAchievement(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Achievement_Main* AchievementMain = reinterpret_cast<UProjectLH_LHWidget_Achievement_Main*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Achievement_Main::StaticClass()));
	if (AchievementMain)
	{
		AchievementMain->C_Widget_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}



BOOL OnCloseDungeon(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InstDungeonList* pInstDungeon = reinterpret_cast<UProjectLH_LHWidget_InstDungeonList*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonList::StaticClass()));
	if (pInstDungeon)
	{
		pInstDungeon->C_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseMail(DWORD* dwAddress)
{
	UProjectLH_LHWidget_MailMain* MailMain = reinterpret_cast<UProjectLH_LHWidget_MailMain*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_MailMain::StaticClass()));
	if (MailMain)
	{
		MailMain->C_Widget_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseOption(DWORD* dwAddress)
{
	UProjectLH_LHWidget_OptionWindow* OptionWindow = reinterpret_cast<UProjectLH_LHWidget_OptionWindow*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_OptionWindow::StaticClass()));
	if (OptionWindow)
	{
		OptionWindow->C_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseRealmWar(DWORD* dwAddress)
{
	UProjectLH_LHWidget_RealmWar* uiRealmwar = (UProjectLH_LHWidget_RealmWar*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RealmWar));
	if (uiRealmwar && uiRealmwar->IsVisible())
	{
		uiRealmwar->C_Topmenu->OnTapExitBtn();
		return TRUE;
	}

	return FALSE;
}


BOOL OnCloseOpenWindow(DWORD* dwAddress)
{
	if (OnCloseNpcShop(dwAddress) ||
		OnCloseCashShop(dwAddress) ||
		OnCloseInven(dwAddress) ||
		OnCloseSkillBook(dwAddress) ||
		OnCloseAvatar(dwAddress) ||
		OnCloseVehicle(dwAddress) ||
		OnCloseCollection(dwAddress) ||
		OnCloseTrade(dwAddress) ||
		OnCloseAchievement(dwAddress) ||
		OnCloseDungeon(dwAddress) ||
		OnCloseMail(dwAddress) ||
		OnCloseOption(dwAddress) ||
		OnCloseRealmWar(dwAddress))
		return TRUE;

	return FALSE;
}


BOOL OnAceptPartyInvite(DWORD* dwAddress)
{
	UProjectLH_LHWidget_PartyMessage_Container* pPartyMessageContainer = reinterpret_cast<UProjectLH_LHWidget_PartyMessage_Container*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_PartyMessage_Container::StaticClass(), 0));
	if (pPartyMessageContainer)
	{
		if (wcscmp(g_HuntSetting.szPartyMaster, L""))
		{
			WCHAR szMessage[300] = { 0, }, szMaster[MAX_NAME] = { 0, };
			GetTextFromTextBlock((UUMG_TextBlock*)pPartyMessageContainer->C_Text_PartyRequester, szMessage);

			swprintf_s(szMaster, MAX_NAME, L">%s<", g_HuntSetting.szPartyMaster);
			if (!wcsstr(szMessage, szMaster))
				return FALSE;
		}

		pPartyMessageContainer->OnClicked_MessageSlot();
		return TRUE;
	}

	return FALSE;
}


BOOL ChangePartyHuntMode(DWORD* dwAddress, int nType)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return FALSE;

	UProjectLH_LHWidget_InGame_AutoMenu* C_Widget_PartyAutoMenu = uiInGame->C_Widget_PartyAutoMenu;
	if (!C_Widget_PartyAutoMenu)
		return FALSE;

	if (uiInGame->C_Switcher_AutoType->ActiveWidgetIndex == nType)
		return FALSE;

	if (C_Widget_PartyAutoMenu->UnknownData00[0] == 0)
	{
		uiInGame->OnTapPartyAuto();
		return TRUE;
	}

	if (nType == 0 && C_Widget_PartyAutoMenu->C_Slot00)
	{
		ShowStatus(0, 60301);									// 사냥 방식 변경 (파장 타겟)
		C_Widget_PartyAutoMenu->C_Slot00->OnClicked();
	}

	if (nType == 1 && C_Widget_PartyAutoMenu->C_Slot01)
	{
		ShowStatus(0, 60302);									// 사냥 방식 변경 (파장 주변)
		C_Widget_PartyAutoMenu->C_Slot01->OnClicked();
	}

	if (nType == 2 && C_Widget_PartyAutoMenu->C_Slot02)
	{
		ShowStatus(0, 60303);									// 사냥 방식 변경 (Auto)
		C_Widget_PartyAutoMenu->C_Slot02->OnClicked();
	}

	return TRUE;
}


void GetSkillLearnInfo()
{
	WCHAR szPath[MAX_PATH];
	swprintf_s(szPath, L"%s\\Setting\\%d\\Skill.dat", g_szAppPath, g_nIndex);

	WCHAR szKey[MAX_PATH];
	swprintf_s(szKey, L"Server_%d_%d", g_nGameServer, g_pCharInfo.nClassType);

	WCHAR szVal[MAX_PATH] = { 0, };
	for (int i = 0; i < (int)wcslen(g_pCharInfo.szName); i++)
		swprintf_s(szVal + wcslen(szVal), MAX_PATH, L"%02X", g_pCharInfo.szName[i]);

	int nValue = GetPrivateProfileInt(szKey, szVal, 0, szPath);

	memset(g_bSkillCheck, 0, 5);
	for (int i = 0; i < 5; i++)
	{
		g_bSkillCheck[4 - i] = ((nValue & (1 << i)) >> i);
	}
}


void SetSkillLearnInfo()
{
	WCHAR szPath[MAX_PATH];
	swprintf_s(szPath, L"%s\\Setting\\%d\\Skill.dat", g_szAppPath, g_nIndex);

	int nValue = 0;
	for (int i = 0; i < 5; i++)
	{
		nValue = (nValue << 1) + g_bSkillCheck[i];
	}

	WCHAR szKey[MAX_PATH];
	swprintf_s(szKey, L"Server_%d_%d", g_nGameServer, g_pCharInfo.nClassType);

	WCHAR szVal[MAX_PATH];
	swprintf_s(szVal, L"%d", nValue);

	WCHAR szChar[MAX_PATH] = { 0, };
	for (int i = 0; i < (int)wcslen(g_pCharInfo.szName); i++)
		swprintf_s(szChar + wcslen(szChar), MAX_PATH, L"%02X", g_pCharInfo.szName[i]);

	WritePrivateProfileString(szKey, szChar, szVal, szPath);
}


BOOL IsChaoStatus(int nStatus)
{
	for (int i = 0; i < g_nChaoStatusCount; i++)
	{
		if (g_pChaoStatusInfo[i] == nStatus)
			return TRUE;
	}

	return FALSE;
}


void PutChaoStatus(int nStatus)
{
	for (int i = 0; i < g_nChaoStatusCount; i++)
	{
		if (g_pChaoStatusInfo[i] == nStatus)
			return;
	}

	if (g_nChaoStatusCount < 50)
		g_pChaoStatusInfo[g_nChaoStatusCount++] = nStatus;
	else
	{
		g_nChaoStatusCount = 50;
		memcpy(&g_pChaoStatusInfo[0], &g_pChaoStatusInfo[1], sizeof(BYTE) * (g_nChaoStatusCount - 1));
		g_pChaoStatusInfo[g_nChaoStatusCount - 1] = nStatus;
	}
}


int GetItemCount(const WCHAR* szName)
{
	int nCount = 0;
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (!wcscmp(g_pInvenInfo[i].szName, szName))
			nCount += g_pInvenInfo[i].nCount;
	}

	return nCount;
}



void OnGameQuestPotion(DWORD* dwAddress)
{
	// 	if (!ReturnVillage(dwAddress))
	// 	{
	// 		SetDelay(5);
	// 		return;
	// 	}

	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	// 거미 군락이 아니면 거기로 이동하자
	if (wcscmp(g_pCharInfo.szRegion, L"거미 군락"))
	{
		TeleportMap(dwAddress, g_szWorldName[1], L"거미 군락");
		SetDelay(5);
		return;
	}

	// 소형, 중형 HP 물약은 버리자
	if (GetItemCount(L"소형 HP 회복 물약 (귀속)") > 0 || GetItemCount(L"중형 HP 회복 물약 (귀속)") > 0)
	{
		UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
		if (uiInven && uiInven->IsVisible())
		{
			UProjectLH_LHWidget_InventoryDeleteItem* inventoryDeleteItem = (UProjectLH_LHWidget_InventoryDeleteItem*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InventoryDeleteItem));
			if (inventoryDeleteItem && inventoryDeleteItem->IsVisible())
			{
				DWORD64	qwDeleteItemInfo = *(DWORD64*)((DWORD64)inventoryDeleteItem + OFFSET_DELETEITEMINFO);
				if (qwDeleteItemInfo)
				{
					int nMaxCount = *(int*)(qwDeleteItemInfo + OFFSET_ITEMCOUNT);
					int nDelCount = *(int*)((DWORD64)inventoryDeleteItem + OFFSET_DELETEITEMCURCOUNT);
					if (nDelCount != nMaxCount)
					{
						*(int*)((DWORD64)inventoryDeleteItem + OFFSET_DELETEITEMCURCOUNT) = nMaxCount;
						SetDelay(10);
						return;
					}
				}

				inventoryDeleteItem->OnTapOK();
				SetDelay(10);
				return;
			}

			for (int i = 0; i < g_nInvenCount; i++)
			{
				if (wcsstr(g_pInvenInfo[i].szName, L"소형 HP 회복 물약 (귀속)") ||
					wcsstr(g_pInvenInfo[i].szName, L"중형 HP 회복 물약 (귀속)"))
				{
					if (GetSelectInvenItem(dwAddress) != g_pInvenInfo[i].qwItemAddr)
						SelectInvenItem(dwAddress, i);
					else
					{
						UProjectLH_LHWidget_ItemToolTip_Container* uiItemInfo = uiInven->C_ItemToolTip_Container;
						if (uiItemInfo)
							uiItemInfo->OnTapDelete();
					}

					SetDelay(10);
					return;
				}
			}

			uiInven->C_BP_Widget_Inven->OnTapExitBtn();
		}
		else
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);

		SetDelay(10);
		return;
	}

	// 소모품 상인에게 이동하자
	UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
	if (uiNPCShop && uiNPCShop->IsVisible())
	{
		if (g_bGotoNPC != 0)
		{
			g_bGotoNPC = 0;
			SetDelay(10);
			return;
		}

		g_qwGotoNpcTick = 0;

		UProjectLH_LHWidget_Purchase* uiPurchage = (UProjectLH_LHWidget_Purchase*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Purchase));
		_callFunc1 refreshPurchage = (_callFunc1)PATCHADDR(dwAddress[ADDR_REFRESHPURCHAGE], dwAddress[0]);

		if (uiPurchage && uiPurchage->IsVisible())
		{
			if (*(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGECOUNT) != *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT))
			{
				*(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGECOUNT) = *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT);
				refreshPurchage((DWORD64)uiPurchage);
			}
			else
				uiPurchage->OnTapBuy();

			SetDelay(10);
			return;
		}

		// 물약 개수가 모자라면
		if (GetQuestPotionCount() < 400)
		{
			UpdateBuyListInfo(dwAddress, uiNPCShop);
			for (int i = 0; i < g_nBuyListCount; i++)
			{
				if (!wcsstr(g_pBuyListInfo[i].szName->c_str(), L"대형 HP 회복 물약"))
					continue;

				uiNPCShop->OnSelectShopItem((UProjectLH_LHWidget_Product_Container*)g_pBuyListInfo[i].ProductContainer);
				SetDelay(10);
				return;
			}
		}

		uiNPCShop->C_Widget_Topmenu->OnTapExitBtn();
		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (OnCloseOpenWindow(dwAddress))
	{
		SetDelay(10);
		return;
	}

	int nIndex = GetNpcIndex(L"발포드르");
	FVector fNpcPos = { -114541.04f, 141135.56f, -25429.60f };
	if (nIndex == -1)
	{
		if (!IsMovingTargetPos(dwAddress, fNpcPos))
		{
			MovePos(dwAddress, fNpcPos);
			g_qwGotoNpcTick = g_dwTickCount;
		}
		else if (g_qwGotoNpcTick != 0 && g_dwTickCount >= g_qwGotoNpcTick + 5 * 60 * 1000)
		{
			g_qwGotoNpcTick = 0;
			UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
			if (uiInGame)
			{
				UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
				if (C_InGame_Minimap_Container)
					C_InGame_Minimap_Container->OnClicked_Return();
			}
		}

		SetDelay(10);
		return;
	}

	g_qwGotoNpcTick = 0;

	if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
	{
		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pNPCInfo[nIndex].CurPos);
		if (nDist >= 300 || !ClickInteraction(dwAddress, TRUE))
			MovePos(dwAddress, fNpcPos);
	}

	SetDelay(10);
}



BOOL IsNetworkConnecting(DWORD* dwAddress)
{
	UProjectLH_LHWidget_Waiting* uiMoviePlayer = (UProjectLH_LHWidget_Waiting*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Waiting));
	if (!uiMoviePlayer || !uiMoviePlayer->IsVisible())
		return FALSE;

	return TRUE;
}


BOOL IsChaoGatherObject(FVector fPos)
{
	for (int i = 0; i < g_nChaoGatherCount; i++)
	{
		if ((int)GETDIST2D(g_pChaoGatherInfo[i], fPos) <= 100)
			return TRUE;
	}

	return FALSE;
}


void PutChaoGatherObject()
{
	int nGatherIndex = -1, nDistMin = -1;
	for (int i = 0; i < g_nGatherCount; i++)
	{
		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pGatherInfo[i].CurPos);
		if (nGatherIndex == -1 || nDist < nDistMin)
		{
			nGatherIndex = i;
			nDistMin = nDist;
		}
	}

	if (nGatherIndex == -1 ||
		(g_pGatherInfo[nGatherIndex].nType != GatherType_Stone && g_pGatherInfo[nGatherIndex].nType != GatherType_Wood && g_pGatherInfo[nGatherIndex].nType != GatherType_Grass))
		return;

	for (int i = 0; i < g_nChaoGatherCount; i++)
	{
		if ((int)GETDIST2D(g_pChaoGatherInfo[i], g_pGatherInfo[nGatherIndex].CurPos) <= 100)
			return;
	}

	if (g_nChaoGatherCount < MAX_CHAO)
		g_pChaoGatherInfo[g_nChaoGatherCount++] = g_pGatherInfo[nGatherIndex].CurPos;
	else
	{
		g_nChaoGatherCount = MAX_CHAO;
		memcpy(&g_pChaoGatherInfo[0], &g_pChaoGatherInfo[1], sizeof(DWORD64) * (MAX_CHAO - 1));
		g_pChaoGatherInfo[g_nChaoGatherCount - 1] = g_pGatherInfo[nGatherIndex].CurPos;
	}
}


BOOL IsCharFallDown()
{
	if (g_pCharInfo.nMapType == MapType_Dungeon && !IsInDungeon() && g_pCharInfo.CurTransform.Translation.Z < -11500.0f)
		return TRUE;

	return FALSE;
}


int OnGameForceReturn(DWORD* dwAddress)
{
	AJLog(L"force return1");
	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return 1;
	}

	if (g_pCharInfo.dwFlyingID == 0)
		return 1;

	if (g_bPartyDungeon)
	{
		AJLog(L"force return_g_bParyDungeon1");
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
		{
			if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
			{
				AJLog(L"force return_g_bParyDungeon2");
				pPartyWindow->OnClickedDungeonReady();
				return 0;
			}
		}
	}


	if (g_pCharInfo.nMapType != MapType_Village)
	{
		AJLog(L"force return_nMapType1");
		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
		{
			UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
			if (C_InGame_Minimap_Container)
			{
				if (IsInDungeon() || g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
					C_InGame_Minimap_Container->OnClicked_Exit();
				else
					C_InGame_Minimap_Container->OnClicked_Return();

				AJLog(L"force return_nMapType2");
				return 0;
			}
		}
	}
	else
	{
		UProjectLH_LHWidget_OptionWindow* OptionWindow = reinterpret_cast<UProjectLH_LHWidget_OptionWindow*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_OptionWindow::StaticClass()));
		if (g_bCharFallDown != 0)													// 횟수 초과한 경우
		{
			AJLog(L"force return_g_bCharFallDown1");
			if (OptionWindow)														// 설정창 끄자
			{
				OptionWindow->C_Topmenu->OnTapExitBtn();
				SetDelay(10);
				AJLog(L"force return_g_bCharFallDown2");
				return 0;
			}
		}
		else
		{
			if (OptionWindow)														// 탈출하기
			{
				ShowStatus(0, 60314);
				OptionWindow->C_Account->OnClickEscape();

				SetDelay(10);
				return 2;
			}
			else																		// 설정창 현시
			{
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Option);
			}

			SetDelay(10);
			AJLog(L"force return_g_bCharFallDown3");
			return 0;
		}

		int nVillage = 0;
		if (!wcscmp(g_pCharInfo.szRegion, g_szVillageName[nVillage]))
			nVillage = 1;

		return TeleportMap(dwAddress, g_szWorldName[nVillage], g_szVillageName[nVillage]);
	}

	AJLog(L"force return_g_bCharFallDown5");
	return 0;
}


void OnGameOdinPass(DWORD* dwAddress)
{
	// 이벤트 창 켜져있지 않으면
	UProjectLH_LHWidget_BM_PackagePopup* PackagePopup = (UProjectLH_LHWidget_BM_PackagePopup*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_BM_PackagePopup));

	if (g_qwEventSceneTick == 0)
		g_qwEventSceneTick = g_dwTickCount;

	if (g_dwTickCount >= g_qwEventSceneTick + 5 * 60 * 1000)
	{
		if (PackagePopup && PackagePopup->IsVisible())
			PackagePopup->OnTapCashShop();

		g_qwEventSceneTick = 0;
		SetStatus(g_nPreStatus, 10);
		return;
	}

	if (!PackagePopup || !PackagePopup->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__SpecialPackage);
		SetDelay(10);
		return;
	}

	UUMG_WidgetSwitcher* Switcher = PackagePopup->C_Switcher_Page;
	if (Switcher)
	{
		TArray<class UUMG_PanelSlot*> Slots = Switcher->Slots;
		TArray<class UUMG_PanelSlot*> TapArray = PackagePopup->C_Event_ScrollBox->Slots;

		int nSelectTap = *(int*)((DWORD64)PackagePopup + OFFSET_PACKAGE_SELECTEDTAP);
		if (*(DWORD64*)(Slots[nSelectTap]->Content) == PATCHADDR(dwAddress[ADDR_DAILYPACKAGE_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_BM_DailyPackage* Container = (UProjectLH_LHWidget_BM_DailyPackage*)Slots[nSelectTap]->Content;
			if (Container->C_ScrollBox->Slots.Num() > 0)
			{
				UUMG_ScrollBoxSlot* ScrollSlotSub = (UUMG_ScrollBoxSlot*)Container->C_ScrollBox->Slots[0];
				if (ScrollSlotSub)
				{
					UUMG_WrapBox* WrapBox = (UUMG_WrapBox*)ScrollSlotSub->Content;
					if (WrapBox)
					{
						for (int i = 0; i < WrapBox->Slots.Num(); i++)
						{
							UUMG_WrapBoxSlot* WrapSlot = (UUMG_WrapBoxSlot*)WrapBox->Slots[i];
							if (!WrapSlot)
								continue;

							UProjectLH_LHWidget_Attendance_RewardSlot* RewardSlot = (UProjectLH_LHWidget_Attendance_RewardSlot*)WrapSlot->Content;
							if (!RewardSlot)
								continue;

							if (!RewardSlot->C_Noti->IsVisible())
								continue;

							RewardSlot->OnClickedRewardBtn();
							SetDelay(10);
							return;
						}
					}
				}
			}
		}
		else if (*(DWORD64*)(Slots[nSelectTap]->Content) == PATCHADDR(dwAddress[ADDR_DOUBLEODINPASS_TEMP], dwAddress[0]))
		{
			UProjectLH_LHWidget_BM_OdinDoublePass_Container* Container = (UProjectLH_LHWidget_BM_OdinDoublePass_Container*)Slots[nSelectTap]->Content;
			if (Container && *(int*)((DWORD64)Container + Offset_OdinPass_RewardCount) > 0 &&
				(*(BYTE*)((DWORD64)Container->C_Btn_AllReceive + Offset_LHButton_GetEnableState) & 2) == 0)
			{
				Container->OnTapAllReceive();
				SetDelay(10);
				return;
			}
		}

		if (g_nEventIndex == nSelectTap)
		{
			for (g_nEventIndex = nSelectTap + 1; g_nEventIndex < TapArray.Num(); g_nEventIndex++)
			{
				UUMG_ScrollBoxSlot* ScrollSlot = (UUMG_ScrollBoxSlot*)TapArray[g_nEventIndex];
				if (!ScrollSlot)
					continue;

				UProjectLH_LHWidget_Event_Tap* EventTap = (UProjectLH_LHWidget_Event_Tap*)ScrollSlot->Content;
				if (!EventTap || !EventTap->C_Attendance_NewIcon)
					continue;

//				if (EventTap->C_Attendance_NewIcon->IsVisible())			// 빨간 점이 있으면
//					break;
			}
		}

		if (g_nEventIndex < TapArray.Num() && g_nEventIndex != nSelectTap)
		{
			UUMG_ScrollBoxSlot* ScrollSlot = (UUMG_ScrollBoxSlot*)TapArray[g_nEventIndex];
			if (ScrollSlot)
			{
				UProjectLH_LHWidget_Event_Tap* EventTap = (UProjectLH_LHWidget_Event_Tap*)ScrollSlot->Content;
				if (EventTap)
				{
					EventTap->OnClickedInfo();
					SetDelay(10);
					return;
				}
			}
		}
	}

	ShowStatus(0, 60247);		// L"이벤트 보상 을(를) 확인하였습니다");

	g_bEventReward[1] = TRUE;
	g_PackageShopVisited = TRUE;
	g_qwEventSceneTick = 0;

	if (PackagePopup && PackagePopup->IsVisible())
		PackagePopup->OnTapCashShop();

	SetStatus(g_nPreStatus, 10);
}



BOOL IsHigherItem(DWORD* dwAddress, UProjectLH_LHItem* lhItem)
{
	if (!lhItem)
		return FALSE;

	UProjectLH_LHGameInstance* objGameInstance = GetLMGameInstance(dwAddress);
	if (!objGameInstance)
		return FALSE;

	UProjectLH_LHCharacterMgr* objCharacterMgr = objGameInstance->CharacterMgr;
	if (!objCharacterMgr)
		return FALSE;

	UProjectLH_LHInventoryMgr* objInventoryMgr = objGameInstance->CharacterMgr->InventoryMgr;
	if (!objInventoryMgr)
		return FALSE;

	_callFunc2 getItemCategory = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETITEMCATEOGORY], dwAddress[0]);
	if (getItemCategory(lhItem->ItemInfoRecord->ItemCategory, lhItem->ItemInfoRecord->ItemType) == 3)
		return FALSE;

	_callFunc2 getEquipItem = (_callFunc2)PATCHADDR(dwAddress[ADDR_GETEQUIPITEM], dwAddress[0]);
	UProjectLH_LHItem* equipItem = (UProjectLH_LHItem*)getEquipItem((DWORD64)objInventoryMgr, lhItem->ItemInfoRecord->ItemType);

	_callFunc5 isEquipItemCompare = (_callFunc5)PATCHADDR(dwAddress[ADDR_ISEQUIPITEMCOMPARE], dwAddress[0]);
	return (int)isEquipItemCompare((DWORD64)objInventoryMgr, (DWORD64)equipItem, (DWORD64)lhItem, 0, 1) > 0;
}


BOOL IsExistHuntPlace()
{
	// 이동중인 경우 제외하자
	if (g_pCharInfo.nMoveState != FProjectLH_ProjectLH_EAutoMove::EAutoMove__None || g_HuntSetting.nMoveMode == 0)
		return TRUE;

	// 마을이면 진출 다시 하자
	if (g_pCharInfo.nMapType == MapType_Village)
		return FALSE;

	int nTargetRange = 0;
	if (g_HuntSetting.nTargetRange == 0)
		nTargetRange = 20;
	else if (g_HuntSetting.nTargetRange == 1)
		nTargetRange = 50;
	else if (g_HuntSetting.nTargetRange == 2)
		nTargetRange = 80;

	// 사냥 범위 무제한이면 그냥 돌리자
	if (nTargetRange == 0)
		return TRUE;

	// 필드 사냥인 경우
	if (g_HuntSetting.nMoveMode == 1)
	{
		FVector fTargetPos;
		fTargetPos.X = g_HuntSetting.fHuntPosX;		fTargetPos.Y = g_HuntSetting.fHuntPosY;		fTargetPos.Z = g_HuntSetting.fHuntPosZ;

		// 설정된 범위이상 벗어났으면
		if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) > nTargetRange * 100)
			return FALSE;
	}
	// 던전인 경우 (중심점 설정된 경우)
	else if (g_HuntSetting.nMoveMode == 2 && g_HuntSetting.bDungeonPos)
	{
		FVector fTargetPos;
		fTargetPos.X = g_HuntSetting.fDungeonPosX;	fTargetPos.Y = g_HuntSetting.fDungeonPosY;	fTargetPos.Z = g_HuntSetting.fDungeonPosZ;

		if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) > nTargetRange * 100)
			return FALSE;
	}

	return TRUE;
}



void OnGameMatchingRealMWar(DWORD* dwAddress)
{
	if (!g_OtherSetting.bValhallaFight || g_bValhala != 0 || GetMatchingRealmWar(dwAddress) != 0)
	{
		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		SetStatus(g_nPreStatus);
		return;
	}

	SetDelay(10);
	if (IsInDungeon())
	{
		UProjectLH_LHWidget_RealmWar* uiRealmwar = (UProjectLH_LHWidget_RealmWar*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_RealmWar));
		if (uiRealmwar && uiRealmwar->IsVisible())
		{
			uiRealmwar->OnClicked_Action();
			return;
		}

		UProjectLH_LHWidget_PVPContents* uiPVPContents = (UProjectLH_LHWidget_PVPContents*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_PVP));
		if (uiPVPContents && uiPVPContents->IsVisible())
		{
			if (uiPVPContents->C_PVPContents_Realmwar)
				uiPVPContents->C_PVPContents_Realmwar->OnClicked_Enter();

			return;
		}

		if (!OnCloseOpenWindow(dwAddress))
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__PVP);
	}
	else
		ApplyRealmWar(dwAddress);
}


typedef HWND(WINAPI* pfNewGetForegroundWindow)(VOID);
typedef BOOL(WINAPI* pfNewSetForegroundWindow)(_In_ HWND hWnd);
typedef DWORD(WINAPI* pfNewGetWindowThreadProcessId)(_In_ HWND hWnd, _Out_opt_ LPDWORD lpdwProcessId);
typedef BOOL(WINAPI* pfNewAttachThreadInput)(_In_ DWORD idAttach, _In_ DWORD idAttachTo, _In_ BOOL fAttach);
typedef BOOL(WINAPI* pfNewIsIconic)(_In_ HWND hWnd);
typedef BOOL(WINAPI* pfNewShowWindow)(_In_ HWND hWnd, _In_ int nCmdShow);

pfNewGetForegroundWindow		NewGetForegroundWindow = NULL;
pfNewSetForegroundWindow		NewSetForegroundWindow = NULL;
pfNewGetWindowThreadProcessId	NewGetWindowThreadProcessId = NULL;
pfNewAttachThreadInput			NewAttachThreadInput = NULL;
pfNewIsIconic					NewIsIconic = NULL;
pfNewShowWindow					NewShowWindow = NULL;

BOOL SetTopWindow(HWND hWnd)
{
	if (NewGetForegroundWindow == NULL)
		NewGetForegroundWindow = (pfNewGetForegroundWindow)GetProcAddress(GetModuleHandle(L"User32.dll"), "GetForegroundWindow");

	if (NewSetForegroundWindow == NULL)
		NewSetForegroundWindow = (pfNewSetForegroundWindow)GetProcAddress(GetModuleHandle(L"User32.dll"), "SetForegroundWindow");

	if (NewGetWindowThreadProcessId == NULL)
		NewGetWindowThreadProcessId = (pfNewGetWindowThreadProcessId)GetProcAddress(GetModuleHandle(L"User32.dll"), "GetWindowThreadProcessId");

	if (NewAttachThreadInput == NULL)
		NewAttachThreadInput = (pfNewAttachThreadInput)GetProcAddress(GetModuleHandle(L"User32.dll"), "AttachThreadInput");

	if (NewIsIconic == NULL)
		NewIsIconic = (pfNewIsIconic)GetProcAddress(GetModuleHandle(L"User32.dll"), "IsIconic");

	if (NewShowWindow == NULL)
		NewShowWindow = (pfNewShowWindow)GetProcAddress(GetModuleHandle(L"User32.dll"), "ShowWindow");

	if (NewGetForegroundWindow == NULL || NewSetForegroundWindow == NULL || NewGetWindowThreadProcessId == NULL ||
		NewAttachThreadInput == NULL || NewIsIconic == NULL || NewShowWindow == NULL)
		return FALSE;

	HWND foreGround = NewGetForegroundWindow();
	if (foreGround != hWnd)
	{
		if (!NewSetForegroundWindow(hWnd))
		{
			DWORD idForeground = NewGetWindowThreadProcessId(foreGround, NULL);
			DWORD idTarget = NewGetWindowThreadProcessId(hWnd, NULL);

			if (NewAttachThreadInput(idTarget, idForeground, TRUE))
			{
				NewSetForegroundWindow(hWnd);
				NewAttachThreadInput(idTarget, idForeground, FALSE);
			}
		}

		if (NewIsIconic(hWnd))
			NewShowWindow(hWnd, SW_RESTORE);

		return TRUE;
	}

	return FALSE;
}


int GetDungeonMemberCount()
{
	if (g_OtherSetting.bMemberCount)
		return min(4, g_OtherSetting.nMemberCount);

	return 4;
}


BOOL CheckBigSnakeDungeon(DWORD* dwAddress)
{
	UpdateGameInfo(dwAddress);

	if (g_dwTickCount < g_qwPartyDelayTick + 1 * 60 * 1000)
		return FALSE;

	if (IsInDungeon() || g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__AloneQuestDungeon)
		return FALSE;

	// 현재 스케줄이 파티 던전이면 무시하자
	if (g_HuntSetting.nMoveMode == 2)
	{
		for (int i = 0; i < MAX_PARTYDUNGEON; i++)
		{
			if (!wcscmp(g_pDungeonRes[g_HuntSetting.nDungeonIndex % MAX_DUNGEON].szRegion, g_szPartyDungeonName[i]))
				return FALSE;
		}
	}

	// 발할라 매칭중이면 (파티상태면 무시하자)
	if (GetMatchingRealmWar(dwAddress) > 0 || g_HuntSetting.bPartyEnable)
		return FALSE;

	// 2시부터 10시는 입장 못한다
// 	if (GetCurKoreanTime() > 150 && GetCurKoreanTime() < 1010)
// 	{
// 		// 던전 팟인 경우 탈퇴하자
// 		if (g_bPartyDungeon && g_bPartyExist)
// 		{
// 			UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
// 			if(pPartyWindow)
// 				pPartyWindow->OnClickedPartyExit();
// 		}
// 
// 		g_qwPartyWaitTick = 0;
// 		return FALSE;
// 	}

	// 입장권이 있을때만 처리하자
	if (g_bSnakeDungeon && GetBigSnakeCount(dwAddress) > 0 && g_pCharInfo.nLevel >= g_OtherSetting.nDungeonLevel)
	{
		// 파티던전인 경우 (3분이상 지났으면)
		if (g_bPartyDungeon)
		{
			UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
			if (!g_bSnakeDungeon)
				return FALSE;

			if (g_qwPartyWaitTick == 0)
				g_qwPartyWaitTick = g_dwTickCount;

			if (g_dwTickCount >= g_qwPartyWaitTick + 3 * 60 * 1000)
				return TRUE;

			if (g_bPartyExist && pPartyWindow)
			{
				if (IsPartyMaster() && g_nPartyCount + 1 >= GetDungeonMemberCount())															// 파장인 경우 파티원들 준비됬는지 체크하자
				{
					if (g_OtherSetting.bPartyDungeon)
					{
						BOOL bBusParty = FALSE;
						// 버스 팟 먼저 체크하자
						if (g_OtherSetting.bBusLevel)
						{
							if (g_pCharInfo.nLevel >= g_OtherSetting.nBusLevel)
								bBusParty = TRUE;
							else
							{
								for (int i = 0; i < g_nPartyCount; i++)
								{
									if (g_pPartyInfo[i].nLevel >= g_OtherSetting.nBusLevel)
									{
										bBusParty = TRUE;
										break;
									}
								}
							}
						}

						// 버스 팟이 아니면 평균 레벨 체크하자
						if (!bBusParty && g_OtherSetting.bAverageLevel && g_nPartyCount != 0)
						{
							int nLevelSum = g_pCharInfo.nLevel;
							for (int i = 0; i < g_nPartyCount; i++)
								nLevelSum += g_pPartyInfo[i].nLevel;

							if (nLevelSum / (g_nPartyCount + 1) <= g_OtherSetting.nAverageLevel)
							{
								ShowStatus(2, 60374, NULL, g_OtherSetting.nAverageLevel);
								g_qwPartyDelayTick = g_dwTickCount;
								pPartyWindow->OnClickedPartyExit();
								return FALSE;
							}
						}
					}

					BOOL bEnter = TRUE;
					for (int i = 0; i < g_nPartyCount; i++)
					{
						if (!g_pPartyInfo[i].bReady)
						{
							bEnter = FALSE;
							break;
						}
					}

					if (bEnter)
					{
						ShowStatus(0, 60352);													// 파티던전에 입장합니다
						pPartyWindow->OnClickedDungeonStart();
					}
				}
			}
		}
		else
			return TRUE;
	}

	return FALSE;
}



void OnGameMatchBigSnake(DWORD* dwAddress)
{
	if (GetMatchingRealmWar(dwAddress) > 0 || GetBigSnakeCount(dwAddress) == 0 || /*(GetCurKoreanTime() > 150 && GetCurKoreanTime() < 1010) ||*/
		g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__AloneQuestDungeon)
	{
		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		g_qwPartyWaitTick = 0;
		SetStatus(g_nPreStatus, 10);
		return;
	}

	// 파티 상태인 경우
	if (g_bPartyExist)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (!pPartyWindow)
			return;

		// 파티 던전이 아니면 탈퇴하자
		if (!g_bPartyDungeon)
		{
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}

		if (g_qwPartyWaitTick == 0)
			g_qwPartyWaitTick = g_dwTickCount;

		// 3분이상 팟 구성하고있으면
		if (g_dwTickCount >= g_qwPartyWaitTick + 3 * 60 * 1000)
		{
			g_qwPartyWaitTick = 0;
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}

		// 파티 구성이 되었으니까 원래 상태로 돌아가자
		SetStatus(g_nPreStatus, 10);
		return;
	}

	// 정예던전인 경우
	UProjectLH_LHWidget_EliteDungeonRegister* pEliteDungeon = reinterpret_cast<UProjectLH_LHWidget_EliteDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_EliteDungeonRegister::StaticClass()));
	if (pEliteDungeon)
	{
		pEliteDungeon->C_Topmenu->OnTapBackBtn();
		SetDelay(10);
		return;
	}

	// 파티던전 선택하자
	UProjectLH_LHWidget_InstDungeonRegister* pInstDungeon = reinterpret_cast<UProjectLH_LHWidget_InstDungeonRegister*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonRegister::StaticClass()));
	if (pInstDungeon)
	{
		// 던전 난이도 설정하자
		int nCurDifficulty = *(BYTE*)((DWORD64)pInstDungeon + OFFSET_PARTYDUNGEON_DIFFICULTY);

		int nDifficulty = -1;
		if (g_OtherSetting.bPartyDungeon && g_OtherSetting.bDungeonDiff)
			nDifficulty = g_OtherSetting.nDungeonDiff;

		if (nDifficulty != -1 && nCurDifficulty != nDifficulty)
		{
			if (nDifficulty == 0)
				pInstDungeon->OnClicked_DungeonLevel_Easy();
			else if (nDifficulty == 1)
				pInstDungeon->OnClicked_DungeonLevel_Hard();
			else if (nDifficulty == 2)
				pInstDungeon->OnClicked_DungeonLevel_VeryHard();
			else
				pInstDungeon->OnClicked_DungeonLevel_Hell();

			SetDelay(10);
			return;
		}

		if (g_bRefreshPartyDungeon)											// 갱신하는 경우
		{
			g_bRefreshPartyDungeon = FALSE;
			pInstDungeon->OnClickedRefreshList();
			SetDelay(10);
			return;
		}

		UProjectLH_LHScrollBox* C_Scroll = pInstDungeon->C_Scroll;
		if ((!g_OtherSetting.bPartyDungeon || !g_OtherSetting.bMemberCount || g_OtherSetting.nMemberCount > 1) && C_Scroll)
		{
			DWORD64 qwMyScrollBoxItem = *(DWORD64*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM);
			if (qwMyScrollBoxItem)
			{
				if (*(int*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCHECK))
				{
					int nIndex = -1;

					int nListCount = *(int*)((BYTE*)C_Scroll + OFFSET_MYSCROLLBOXITEM + OFFSET_MYSCROLLBOXITEMCOUNT);
					if (nListCount > 0)
					{
						int	nTmpCount = 0;
						int	pTmpIndex[50];

						for (int i = 0; i < nListCount; i++)
						{
							UProjectLH_LHWidget_InstDungeonRegister_Container* pContainer = (UProjectLH_LHWidget_InstDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
							if (!pContainer || !pContainer->IsVisible())
								continue;

							int nPartyDiff = *(int*)((BYTE*)pContainer + OFFSET_DUNGEONPARTY_DIFFICULTY);
							if (nDifficulty != -1 && nPartyDiff != nCurDifficulty)
								continue;

							int nCurCount = *(int*)((BYTE*)pContainer + OFFSET_DUNGEONPARTY_MEMBERCNT);
							if (nCurCount <= 0 || nCurCount >= 4)
								continue;

							if (nTmpCount >= 50)
								break;

							pTmpIndex[nTmpCount++] = i;
						}

						if (nTmpCount > 0)
							nIndex = pTmpIndex[rand() % nTmpCount];
					}

					if (nIndex != -1)
					{
						UProjectLH_LHWidget_InstDungeonRegister_Container* pPartyContainer = (UProjectLH_LHWidget_InstDungeonRegister_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * nIndex + 8);
						if (!pPartyContainer)
							return;

						g_bRefreshPartyDungeon = FALSE;
						pPartyContainer->OnClicked_Invite();
						SetDelay(10);
						return;
					}
				}
			}
		}

		pInstDungeon->OnClickedRegister();					// 없으면 파티 생성

		SetDelay(10);
		return;
	}

	// 던전 입장 신청을 진행하자
	UProjectLH_LHWidget_InstDungeonList* pInstDungeonList = reinterpret_cast<UProjectLH_LHWidget_InstDungeonList*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_InstDungeonList::StaticClass()));
	if (pInstDungeonList)
	{
		// 파티던전 탭 선택하자
		UProjectLH_LHTabList* C_MainTabList = pInstDungeonList->C_MainTabList;
		if (SelectTab(C_MainTabList, 0))
		{
			UProjectLH_LHScrollBox* C_Scroll = pInstDungeonList->C_Scroll;
			if (C_Scroll)
			{
				DWORD64 qwMyScrollBoxItem = *(DWORD64*)&C_Scroll->UnknownData00[0x18];
				if (qwMyScrollBoxItem)
				{
					int nDungeonIndex = GetPartyDungeonType();
					int nStartIndex = 0;
					for (int i = 0; i < MAX_DUNGEON; i++)
					{
						if (!wcscmp(g_pDungeonRes[i].szRegion, L"맹독의 뱀 둥지"))
						{
							nStartIndex = i;
							break;
						}
					}

					int nCount = *(int*)(&C_Scroll->UnknownData00[0x20]);
					for (int i = 0; i < nCount; i++)
					{
						UProjectLH_LHWidget_InstDungeonList_Container* pItemContainer = (UProjectLH_LHWidget_InstDungeonList_Container*)*(DWORD64*)(qwMyScrollBoxItem + 0x18 * i + 8);
						if (!pItemContainer)
							continue;

						WCHAR szDungeon[MAX_NAME] = { 0, };
						GetTextFromTextBlock((UUMG_TextBlock*)pItemContainer->C_Text_DungeonName, szDungeon);

						if (!wcscmp(szDungeon, g_pDungeonRes[nStartIndex + nDungeonIndex].szDungeon))
						{
							pItemContainer->OnClickedDungeon();
							break;
						}
					}
				}
			}
		}

		SetDelay(10);
		return;
	}

	if (!OnCloseOpenWindow(dwAddress))
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Dungeon);

	SetDelay(10);
}


BOOL IsWorldBossAppear(DWORD* dwAddress, int nType)			// 0 - 갸름, 1 - 로키
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (uiInGame)
	{
		UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
		if (C_InGame_Minimap_Container)
		{
			for (int i = 0; i < C_InGame_Minimap_Container->EventMarkers.Num(); i++)
			{
				if (!C_InGame_Minimap_Container->EventMarkers[i])
					continue;

				if (!C_InGame_Minimap_Container->EventMarkers[i]->IsVisible())
					continue;

				if (nType == 0 && C_InGame_Minimap_Container->EventMarkers[i]->IsA(UProjectLH_LHWidget_InGame_EventMarker_WorldBoss::StaticClass()))
					return TRUE;

				if (nType == 1 && C_InGame_Minimap_Container->EventMarkers[i]->IsA(UProjectLH_LHWidget_InGame_EventMarker_VoidSummoner::StaticClass()))
					return TRUE;
			}
		}
	}

	return FALSE;
}


int GetCurKoreanTime(int* wDay)
{
	time_t rawtime;
	struct tm* ptm;

	time(&rawtime);
	ptm = gmtime(&rawtime);

	int nHour = (ptm->tm_hour + 9) % 24;
	int nMinute = ptm->tm_min;
	if (wDay != NULL)
	{
		if (ptm->tm_hour + 9 < 24)
			*wDay = ptm->tm_wday;
		else
			*wDay = (ptm->tm_wday + 1) % 7;
	}

	return nHour * 100 + nMinute;
}


int GetHpPotionCount()
{
	int nCount = 0;
	for (int i = 0; i < g_nInvenCount; i++)
	{
		if (wcsstr(g_pInvenInfo[i].szName, L"형 HP 회복 물약"))
			nCount += g_pInvenInfo[i].nCount;
	}

	return nCount;
}


BOOL OnCloseWorldBossResult(DWORD* dwAddress)
{
	UProjectLH_LHWidget_WorldBoss_Result* uiResult = (UProjectLH_LHWidget_WorldBoss_Result*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_WorldBoss_Result));
	if (uiResult && uiResult->IsVisible())
	{
		if (g_qwWorldBossResultTick == 0)
			g_qwWorldBossResultTick = g_dwTickCount;

		if (g_dwTickCount > g_qwWorldBossResultTick + 5 * 1000)
			uiResult->OnTapClose();

		g_bWorldBossFinish = 1;
		return TRUE;
	}

	g_qwWorldBossResultTick = 0;
	return FALSE;
}


void OnGameWorldBoss(DWORD* dwAddress)
{
	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(100);
		return;
	}

	// 파티던전 들어가있는 경우 준비 상태 취소하자
	g_qwPartyWaitTick = 0;
	if (g_bPartyDungeon)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (!IsPartyMaster() && pPartyWindow && pPartyWindow->C_Switcher_DungeonReady &&
			pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex != 0)			// 파티원인 경우 준비완료 취소하자
		{
			pPartyWindow->OnClickedDungeonReady();
			SetDelay(10);
			return;
		}
	}

	// 갸름 표식이 없는 경우
	BOOL m_bBossSignal = TRUE;
	if (!wcscmp(g_pCharInfo.szWorld, g_szWorldName[1]) && !IsWorldBossAppear(dwAddress, 0))
		m_bBossSignal = FALSE;

	// 월드 보스 끝난 경우
	if (!m_bBossSignal && g_bWorldBossFinish != 0)
	{
		ShowStatus(0, 60336);

		g_bWorldBoss = 1;
		g_qwWorldBossTick = 0;
		g_bWorldBossFinish = 0;
		g_dwMoveCharTick = g_dwTickCount;
		SetStatus(STATUS_DOAUTO, 10);

		return;
	}

	// 물약 85프로 설정하자
	if (ChangeGameSetting(dwAddress, -1, -1, 85))
	{
		SetDelay(10);
		return;
	}

	if (!wcscmp(g_pCharInfo.szRegion, L"가름의 울부짖는 황무지"))
	{
		FVector fBossPos = { -125676.96f, 127128.05f, -22663.29f };
		FVector fWaitPos[7] = {
			{-124392.78f, 135385.64f, -22493.92f},
			{-120312.14f, 130191.28f, -22696.28f},
			{-119857.19f, 124685.14f, -22637.28f},
			{-125753.79f, 122177.66f, -22504.39f},
			{-134295.00f, 123972.93f, -22614.96f},
			{-135540.38f, 129696.64f, -22938.48f},
			{-130639.40f, 136716.17f, -22538.04f}
		};

		int nHpPercent = g_pCharInfo.nCurHp * 100 / (max(1, g_pCharInfo.nMaxHp));
		int nIndex = GetMonsterIndex(L"가름");
		if (nIndex == -1)
		{
			// 이동중인 상태면 끝날때까지 대기하자
			if (g_pCharInfo.nMoveState != FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
			{
				g_qwWorldBossTick = 0;

				SetDelay(10);
				return;
			}

			// 물약 있으면 체력 85%이상일때까지 기다리자
			if (GetHpPotionCount() > 0 && nHpPercent < 85)
			{
				SetDelay(10);
				return;
			}

			// 가운데 위치에서 떨어졌으면 이동하자
			if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fBossPos) >= 200)
			{
				MovePos(dwAddress, fBossPos);

				SetDelay(10);
				return;
			}

			if (g_qwWorldBossTick == 0)
				g_qwWorldBossTick = g_dwTickCount;
			else if (m_bBossSignal)
			{
				int nKoreaTime = GetCurKoreanTime();
				if (nKoreaTime % 100 != 12 && nKoreaTime % 100 != 20)
					g_qwWorldBossTick = g_dwTickCount;
			}

			// 5초이상 가름이 없으면 끝난것으로 판단하자
			if (g_dwTickCount >= g_qwWorldBossTick + 5 * 1000)
			{
				ShowStatus(0, 60336);

				g_bWorldBoss = 1;
				g_qwWorldBossTick = 0;
				g_dwMoveCharTick = g_dwTickCount;
				SetStatus(STATUS_DOAUTO, 10);
				return;
			}

			SetDelay(10);
			return;
		}
		else
			g_qwWorldBossTick = 0;

		// 체력이 70% 이하이면 구석에 가서 가만 있자
		if (nHpPercent <= 70)
		{
			// 공격 상태면 해제하자
			if (g_pCharInfo.nAutoState != AUTO_NONE)
				AutoAttack(dwAddress);

			// 이동할 위치 설정이 안된 경우
			if (g_nWorldWaitIndex == -1)
			{
				int nDistMax = 999900, nDist = 0;
				nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pMonsterInfo[nIndex].CurTransform.Translation);

				// 보스랑 30메터 거리에 있으면
				if (nDist < 3000)
				{
					for (int i = 0; i < 7; i++)
					{
						nDist = (int)GETDIST2D(g_pMonsterInfo[nIndex].CurTransform.Translation, fWaitPos[i]);
						if (nDist < nDistMax)
						{
							nDistMax = nDist;
							g_nWorldWaitIndex = i;
						}
					}
				}
			}

			// 2메터 이상 떨어져있는 경우
			if (g_nWorldWaitIndex != -1 && (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fWaitPos[g_nWorldWaitIndex]) >= 200)
			{
				MovePos(dwAddress, fWaitPos[g_nWorldWaitIndex]);

				SetDelay(10);
				return;
			}

			g_nWorldWaitIndex = -1;
		}

		// 체력이 85% 이상이면 공격에 참가하자
		else if (nHpPercent >= 85)
		{
			if ((DWORD64)g_pCharInfo.pManualTarget != g_pMonsterInfo[nIndex].qwMonsterAddr)
				SetManualTarget(dwAddress, (AProjectLH_LHCharacter*)g_pMonsterInfo[nIndex].qwMonsterAddr);
			else
				ManualAttack(dwAddress);

			if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
				OnSkillInteraction(dwAddress);
		}
	}
	else
	{
		if (IsInDungeon())
			ReturnVillage(dwAddress);
		else
			TeleportMap(dwAddress, g_szWorldName[1], L"가름의 울부짖는 황무지");
	}

	SetDelay(10);
}


BOOL CheckWorldBossTime()
{
	int nKoreaTime = GetCurKoreanTime();

	// 12시, 20시에 진행되니까 그때 확인하자
	if ((nKoreaTime >= 1158 && nKoreaTime < 1300) || (nKoreaTime >= 1958 && nKoreaTime < 2100))
	{
		if (g_bWorldBoss == 0 && g_OtherSetting.bWorldBoss)
			return FALSE;
	}
	else
	{
		g_bWorldBoss = 0;
		g_bWorldBossFinish = 0;
	}

	return FALSE;
}


void DumpWidget(DWORD* dwAddress, UClass* pTarget)
{
	UUMG_WidgetBlueprintLibrary* widgetLib = GetWigetLibrary();
	UEngine_World* world = GetGlobalWorld(dwAddress);
	if (!widgetLib || !world)
		return;

	TArray<UUMG_UserWidget*> uiAry;
	widgetLib->STATIC_GetAllWidgetsOfClass(world, UUMG_UserWidget::StaticClass(), false, &uiAry);
	int nCnt = uiAry.Num();
	for (int j = 0; j < 2; j++)
	{
		for (int i = 0; i < nCnt; i++)
		{
			if (!uiAry[i])
				continue;

			if (pTarget && uiAry[i]->IsA(pTarget) == FALSE)
				continue;

			if (uiAry[i]->IsVisible() && j)
				DumpAJLog(L"Visible (%d/%d), %p[%S], Class:%S  Outer:%S", i, nCnt, uiAry[i], uiAry[i]->GetFullName().c_str()
					, uiAry[i]->Class->GetFullName().c_str(), uiAry[i]->Class->SuperField->GetFullName().c_str());
			else if (uiAry[i]->IsVisible() == 0 && j == 0)
				DumpAJLog(L"UnVisible (%d/%d), %p[%S], Class:%S  Outer:%S", i, nCnt, uiAry[i], uiAry[i]->GetFullName().c_str()
					, uiAry[i]->Class->GetFullName().c_str(), uiAry[i]->Class->SuperField->GetFullName().c_str());
		}
	}
}


void ResetCharPos(DWORD* dwAddress, DWORD64 qwArg0, FVector* fPos)
{
	float fValue = *(float*)(qwArg0 + OFFSET_RESETCHARPOS_VALUE1);
	if (fValue == 0.0f)
	{
		DWORD64 qwValue = *(DWORD64*)(qwArg0 + OFFSET_RESETCHARPOS_VALUE2);
		if (qwValue)
			fValue = (*(float*)(qwValue + OFFSET_RESETCHARPOS_VALUE3)) * (*(float*)(qwValue + OFFSET_RESETCHARPOS_VALUE4));
	}

	_callFunc5 resetCharPos = (_callFunc5)PATCHADDR(dwAddress[ADDR_RESETCHARPOS], dwAddress[0]);

	DWORD qwParam[3] = { 0, };
	*(float*)(&qwParam[0]) = fPos->X;
	*(float*)(&qwParam[1]) = fPos->Y;
	*(float*)(&qwParam[2]) = fPos->Z + fValue;
	resetCharPos(qwArg0, (DWORD64)qwParam, 0, 0, 0);
}

DWORD64	SendResetMovePacketFunc(DWORD64  qwRcx, DWORD64	qwRdx)
{
	return 0;
}


void MovePacketThread(int nMoveIndex)
{
	if (g_bMovePacketThread)
		return;

	g_bMovePacketThread = TRUE;

	Sleep(1000);

	DWORD64 qwGameAddress = (DWORD64)g_hModuleMain + (ADDR_MEMORY_ADDR - ADDR_BASEADDR) + g_bAddrLower * 512;
	BYTE pbAddrInfo[512] = { 0, };
	memcpy(pbAddrInfo, (BYTE*)qwGameAddress, 512);
	DWORD* dwAddress = (DWORD*)(pbAddrInfo);

	_callFunc1 getPlayable = (_callFunc1)PATCHADDR(dwAddress[ADDR_GETPLAYABLE], dwAddress[0]);
	_callFunc4 sendMove = (_callFunc4)PATCHADDR(dwAddress[ADDR_SENDMOVEPACKET], dwAddress[0]);
	_callFunc1 makeMovePakcet = (_callFunc1)PATCHADDR(dwAddress[ADDR_MAKEMOVEPACKET], dwAddress[0]);

	DWORD64 qwPlayerController = (DWORD64)GetPlayerController(dwAddress);
	AProjectLH_LHPlayer_Playable* qwPlayable = (AProjectLH_LHPlayer_Playable*)getPlayable(qwPlayerController);
	if (qwPlayable && g_pMovePacket[nMoveIndex].nCount)
	{
		UEngine_CharacterMovementComponent* CharacterMovement = qwPlayable->CharacterMovement;
		if (CharacterMovement)
		{
			memcpy(g_bMoveComponentTemplate, (BYTE*)*(DWORD64*)(CharacterMovement), sizeof(g_bMoveComponentTemplate));
			*(DWORD64*)((DWORD64)g_bMoveComponentTemplate + OFFSET_SENDRESETMOVEPACKETFUNC) = (DWORD64)SendResetMovePacketFunc;
			*(DWORD64*)CharacterMovement = (DWORD64)g_bMoveComponentTemplate;
		}

		BYTE pMoveBuffer[0x60];

		int nMoveStep = 0;
		while (nMoveStep < g_pMovePacket[nMoveIndex].nCount)
		{
			memcpy(pMoveBuffer, &g_pMovePacket[nMoveIndex].pMoveInfo[nMoveStep].pMovePacket, 0x60);

			makeMovePakcet((DWORD64)pMoveBuffer);
			sendMove((DWORD64)CharacterMovement, (DWORD64)pMoveBuffer, 0, 0);

			Sleep(g_pMovePacket[nMoveIndex].pMoveInfo[nMoveStep].dwDelayTick);

			nMoveStep++;
		}

		ResetCharPos(dwAddress, (DWORD64)qwPlayable, &g_pMovePacket[nMoveIndex].pMoveInfo[g_pMovePacket[nMoveIndex].nCount - 1].Pos);

		if (CharacterMovement)
		{
			*(DWORD64*)CharacterMovement = (DWORD64)PATCHADDR(dwAddress[ADDR_MOVECOMPONENTTEMPLATE], dwAddress[0]);
		}
	}

	Sleep(1000);
	g_bMovePacketThread = FALSE;
}


BOOL CheckTreasureState()
{
	//if (!g_OtherSetting.bTreasureBox)
	return FALSE;

	// 25레벨이상이면 미드가르드 지역 진행하자
	if (g_pCharInfo.nLevel >= 25 && g_nTreasureIndex < 10 && GetMainQuestNo() >= 301)
		return TRUE;

	// 30레벨이상이면 요툰하임 지역 진행하자
	if (g_pCharInfo.nLevel >= 30 && g_nTreasureIndex < 20 && GetMainQuestNo() >= 1301)
		return TRUE;

	// 35레벨이상이면 니다벨리르 지역 진행하자
	if (g_pCharInfo.nLevel >= 35 && g_nTreasureIndex < 30 && GetMainQuestNo() >= 2301)
		return TRUE;

	// 40레벨이상이면 알브하임 지역 진행하자
	if (g_pCharInfo.nLevel >= 40 && g_nTreasureIndex < 40 && GetMainQuestNo() >= 3301)
		return TRUE;

	// 40레벨이상이면 무스펠하임 지역 진행하자
// 	if (g_pCharInfo.nLevel >= 40 && g_nTreasureIndex < 50 && GetMainQuestNo() >= 4401)
// 		return TRUE;

	return FALSE;
}


BOOL CheckWeaponTreasureState()
{
	if (!g_OtherSetting.bWeaponTreasure)
		return FALSE;

	// 25레벨이상이면 미드가르드 지역 진행하자
	if (g_pCharInfo.nLevel >= 25 && g_nWeaponTreasureIndex < 5 && GetMainQuestNo() >= 301)
		return TRUE;

	// 30레벨이상이면 요툰하임 지역 진행하자
	if (g_pCharInfo.nLevel >= 30 && g_nWeaponTreasureIndex < 10 && GetMainQuestNo() >= 1301)
		return TRUE;

	// 35레벨이상이면 니다벨리르 지역 진행하자
	if (g_pCharInfo.nLevel >= 35 && g_nWeaponTreasureIndex < 15 && GetMainQuestNo() >= 2301)
		return TRUE;

	// 40레벨이상이면 알브하임 지역 진행하자
	if (g_pCharInfo.nLevel >= 40 && g_nWeaponTreasureIndex < 20 && GetMainQuestNo() >= 3301)
		return TRUE;

	return FALSE;
}


void OnGameTreasure(DWORD* dwAddress)
{
	if (IsCharNeedReturn())											// 캐릭 귀환해야 하는 경우
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	if (GetMainQuestNo() >= 205 && g_OtherSetting.bAchieveReward && IsExistAchievement(dwAddress) && !IsChaoStatus(STATUS_ACHIEVEMENT))
	{
		ShowStatus(0, 60164);										// (업적 보상 을(를) 확인합니다)
		SetStatus(STATUS_ACHIEVEMENT);
		return;
	}

	UProjectLH_LHWidget_Achievement_Main* AchievementMain = reinterpret_cast<UProjectLH_LHWidget_Achievement_Main*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Achievement_Main::StaticClass()));

	// 우선 보물 상자 상태 알아보자
	if (g_nTreasureIndex < 0)
	{
		if (!AchievementMain)
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Achievement);
		else
		{
			g_nTreasureIndex = GetTreasureCount(dwAddress);
			if (g_nTreasureIndex % 10 >= 1)
				g_nTreasureIndex--;

			if (g_nTreasureIndex < MAX_TREASURE)
				ShowStatus(2, 60347, NULL, g_nTreasureIndex + 1);			// (%d번) 보물 상자 확인중
		}

		SetDelay(10);
		return;
	}
	else if (AchievementMain)
	{
		UProjectLH_LHWidget_Topmenu* TopMenu = AchievementMain->C_Widget_Topmenu;
		if (TopMenu)
			TopMenu->OnTapExitBtn();

		SetDelay(10);
		return;
	}

	// 채집 상태면 무시하자
	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction ||
		g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction_End)
	{
		SetDelay(5);
		return;
	}

	// 보물 상자 다 진행한 경우
	BOOL bFinish = FALSE;
	if (g_nTreasureIndex >= MAX_TREASURE)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[0]) && GetMainQuestNo() < 301)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[1]) && GetMainQuestNo() < 1301)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[2]) && GetMainQuestNo() < 2301)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[3]) && GetMainQuestNo() < 3301)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[4]) && GetMainQuestNo() < 4401)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[5]) && GetMainQuestNo() < 5401)
		bFinish = TRUE;
	else if (!wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_szWorldName[6]) && GetMainQuestNo() < 6401)
		bFinish = TRUE;

	if (bFinish)
	{
		if (ReturnVillage(dwAddress))
		{
			ShowStatus(0, 60346);				// 보물 상자 채집을 진행하였습니다
			SetStatus(STATUS_DOAUTO);
		}

		return;
	}

	// 오토 상태 해제하자
	if (g_pCharInfo.nAutoState != AUTO_NONE)
	{
		AutoAttack(dwAddress);
		SetDelay(5);
		return;
	}

	// 파티 던전인 경우 탈퇴하자
	if (g_bPartyDungeon)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (pPartyWindow)
		{
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}
	}

	// 텔레포트 진행할 경우
	if (OnQuestTeleport(dwAddress))
	{
		g_bTreasureTeleport = FALSE;
		SetDelay(10);
		return;
	}

	// 월드가 다른 경우 무조건 텔레포트 타자
	if (wcscmp(g_pTreasureList[g_nTreasureIndex].szWorldName, g_pCharInfo.szWorld))
	{
		TeleportMap(dwAddress, g_pTreasureList[g_nTreasureIndex].szWorldName, g_pTreasureList[g_nTreasureIndex].szFieldName);
		return;
	}

	FVector fTargetPos = g_pTreasureList[g_nTreasureIndex].fTargetPos;

	// 설정된 보물상자 도착한 경우
	if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
	{
		// 보물 상자가 있으면 채집하자
		if (ClickInteraction(dwAddress))
			g_qwTreasureTick = g_dwTickCount;
		else if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			// 보물 상자가 없으면 시간 체크하자 (10초이상 없으면 넘기기)
			if (g_qwTreasureTick == 0)
				g_qwTreasureTick = g_dwTickCount;
			else if (g_dwTickCount >= g_qwTreasureTick + 10 * 1000)
			{
				g_nTreasureIndex++;
				g_qwTreasureTick = 0;
				g_bTreasureTeleport = TRUE;

				ShowStatus(2, 60347, NULL, g_nTreasureIndex + 1);			// (%d번) 보물 상자 확인중
			}
		}

		SetDelay(10);
		return;
	}

	// 패킷 이동해야 하는 경우
	if (g_pTreasureList[g_nTreasureIndex].bPacketMove)
	{
		fTargetPos = g_pMovePacket[g_pTreasureList[g_nTreasureIndex].nPacketIndex].fStartPos;

		// 순간 이동 첫번째 위치에 도착한 경우
		if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None && (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
		{
			CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MovePacketThread, (LPVOID)g_pTreasureList[g_nTreasureIndex].nPacketIndex, 0, 0);
			return;
		}
	}

	// 설정된 지역으로 이동해서 걸어가자
	if (!IsMovingTargetPos(dwAddress, fTargetPos))
	{
		if (wcscmp(g_pCharInfo.szRegion, g_pTreasureList[g_nTreasureIndex].szFieldName) || g_bTreasureTeleport)
			TeleportMap(dwAddress, g_pTreasureList[g_nTreasureIndex].szWorldName, g_pTreasureList[g_nTreasureIndex].szFieldName);
		else
		{
			MovePos(dwAddress, fTargetPos);
			SetDelay(10);
		}
	}
}


void OnGameWeaponTreasure(DWORD* dwAddress)
{
	if (IsCharNeedReturn())											// 캐릭 귀환해야 하는 경우
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	if (GetMainQuestNo() >= 205 && g_OtherSetting.bAchieveReward && IsExistAchievement(dwAddress) && !IsChaoStatus(STATUS_ACHIEVEMENT))
	{
		ShowStatus(0, 60164);										// (업적 보상 을(를) 확인합니다)
		SetStatus(STATUS_ACHIEVEMENT);
		return;
	}

	UProjectLH_LHWidget_Achievement_Main* AchievementMain = reinterpret_cast<UProjectLH_LHWidget_Achievement_Main*>(GetVisibleWidget(dwAddress, UProjectLH_LHWidget_Achievement_Main::StaticClass()));

	// 우선 보물 상자 상태 알아보자
	if (g_nWeaponTreasureIndex < 0)
	{
		if (!AchievementMain)
			OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Achievement);
		else
		{
			g_nWeaponTreasureIndex = GetWeaponTreasureCount(dwAddress);
			if (g_nWeaponTreasureIndex < MAX_WEAPONTREASURE)
				ShowStatus(2, 60347, NULL, g_nWeaponTreasureIndex + 1);			// (%d번) 보물 상자 확인중
		}

		SetDelay(10);
		return;
	}
	else if (AchievementMain)
	{
		UProjectLH_LHWidget_Topmenu* TopMenu = AchievementMain->C_Widget_Topmenu;
		if (TopMenu)
			TopMenu->OnTapExitBtn();

		SetDelay(10);
		return;
	}

	// 채집 상태면 무시하자
	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction ||
		g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction_End)
	{
		SetDelay(5);
		return;
	}

	// 보물 상자 다 진행한 경우
	BOOL bFinish = FALSE;
	if (g_nWeaponTreasureIndex >= MAX_WEAPONTREASURE)
		bFinish = TRUE;
	else if (!wcscmp(g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_szWorldName[0]) && GetMainQuestNo() < 301)
		bFinish = TRUE;
	else if (!wcscmp(g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_szWorldName[1]) && GetMainQuestNo() < 1301)
		bFinish = TRUE;
	else if (!wcscmp(g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_szWorldName[2]) && GetMainQuestNo() < 2301)
		bFinish = TRUE;
	else if (!wcscmp(g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_szWorldName[3]) && GetMainQuestNo() < 3301)
		bFinish = TRUE;

	if (bFinish)
	{
		if (ReturnVillage(dwAddress))
		{
			ShowStatus(0, 60346);				// 보물 상자 채집을 진행하였습니다
			SetStatus(STATUS_DOAUTO);
		}

		return;
	}

	// 오토 상태 해제하자
	if (g_pCharInfo.nAutoState != AUTO_NONE)
	{
		AutoAttack(dwAddress);
		SetDelay(5);
		return;
	}

	// 파티 던전인 경우 탈퇴하자
	if (g_bPartyDungeon)
	{
		UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
		if (pPartyWindow)
		{
			pPartyWindow->OnClickedPartyExit();
			SetDelay(10);
			return;
		}
	}

	// 텔레포트 진행할 경우
	if (OnQuestTeleport(dwAddress))
	{
		g_bWeaponTreasureTeleport = FALSE;
		SetDelay(10);
		return;
	}

	// 월드가 다른 경우 무조건 텔레포트 타자
	if (wcscmp(g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_pCharInfo.szWorld))
	{
		TeleportMap(dwAddress, g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_pWeaponTreasureList[g_nWeaponTreasureIndex].szFieldName);
		return;
	}

	FVector fTargetPos = g_pWeaponTreasureList[g_nWeaponTreasureIndex].fTargetPos;

	// 설정된 보물상자 도착한 경우
	if ((int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
	{
		// 보물 상자가 있으면 채집하자
		if (ClickInteraction(dwAddress))
			g_qwWeaponTreasureTick = g_dwTickCount;
		else if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			// 보물 상자가 없으면 시간 체크하자 (10초이상 없으면 넘기기)
			if (g_qwWeaponTreasureTick == 0)
				g_qwWeaponTreasureTick = g_dwTickCount;
			else if (g_dwTickCount >= g_qwWeaponTreasureTick + 10 * 1000)
			{
				g_nWeaponTreasureIndex++;
				g_qwWeaponTreasureTick = 0;
				g_bWeaponTreasureTeleport = TRUE;

				ShowStatus(2, 60347, NULL, g_nWeaponTreasureIndex + 1);			// (%d번) 보물 상자 확인중
			}
		}

		SetDelay(10);
		return;
	}

	// 패킷 이동해야 하는 경우
	if (g_pWeaponTreasureList[g_nWeaponTreasureIndex].bPacketMove)
	{
		fTargetPos = g_pMovePacket[g_pWeaponTreasureList[g_nWeaponTreasureIndex].nPacketIndex].fStartPos;

		// 순간 이동 첫번째 위치에 도착한 경우
		if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None && (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 500)
		{
			CreateThread(0, 0, (LPTHREAD_START_ROUTINE)MovePacketThread, (LPVOID)g_pWeaponTreasureList[g_nWeaponTreasureIndex].nPacketIndex, 0, 0);
			return;
		}
	}

	// 설정된 지역으로 이동해서 걸어가자
	if (!IsMovingTargetPos(dwAddress, fTargetPos))
	{
		if (wcscmp(g_pCharInfo.szRegion, g_pWeaponTreasureList[g_nWeaponTreasureIndex].szFieldName) || g_bWeaponTreasureTeleport)
			TeleportMap(dwAddress, g_pWeaponTreasureList[g_nWeaponTreasureIndex].szWorldName, g_pWeaponTreasureList[g_nWeaponTreasureIndex].szFieldName);
		else
		{
			MovePos(dwAddress, fTargetPos);
			SetDelay(10);
		}
	}
}


void OnGameEventBuff(DWORD* dwAddress)
{
	if (!CanAceptEventBuff())
	{
		SetStatus(STATUS_DOAUTO);
		return;
	}

	if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Interaction)
	{
		SetDelay(5);
		return;
	}

	int nIndex = -1;
	for (int i = 0; i < g_nGatherCount; i++)
	{
		if (g_pGatherInfo[i].nType == GatherType_Event)
		{
			nIndex = i;
			break;
		}
	}

	if (nIndex != -1)
	{
		int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pGatherInfo[nIndex].CurPos);

		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
		{
			char nInteractionType = *(char*)((DWORD64)uiInGame->C_QuickSlotWindow->C_Widget_Interaction + OFFSET_INTERACTIONTYPE);
			if (nInteractionType == 1)
			{
				uiInGame->C_QuickSlotWindow->C_Widget_Interaction->OnTapInteraction();
				SetDelay(10);
				return;
			}
		}

		MovePos(dwAddress, g_pGatherInfo[nIndex].CurPos);
		SetDelay(10);
	}
}



DWORD	g_dwBossSkill = 0;
void OnGameRecordBoss()
{
	AProjectLH_LHMonster* pTargetMonster = (AProjectLH_LHMonster*)g_pCharInfo.pBossSelectedTargetPtr;
	if (pTargetMonster)
	{
		UProjectLH_LHSkillComponent* SkillComponent = pTargetMonster->SkillComponent;
		if (SkillComponent)
		{
			UProjectLH_LHSkill_Active* CurrentActiveSkill = SkillComponent->CurrentActiveSkill;
			if (CurrentActiveSkill)
			{
				if (g_dwBossSkill != CurrentActiveSkill->SkillInfoRecord->Index)
				{
					g_dwBossSkill = CurrentActiveSkill->SkillInfoRecord->Index;
					AJLog(L"Skill: %08X", CurrentActiveSkill->SkillInfoRecord->Index);
				}
			}
		}
	}
	else
		g_dwBossSkill = 0;

	//OnQuestInstance();
}


int GetNpcIndex(const WCHAR* szName)
{
	for (int i = 0; i < g_nNpcCount; i++)
	{
		if (!wcscmp(g_pNPCInfo[i].szName, szName))
			return i;
	}

	return -1;
}


int GetQuestPotionCount()
{
	return GetItemCount(L"대형 HP 회복 물약 (귀속)");
}


BOOL OnSkillInteraction(DWORD* dwAddress)
{
	UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
	if (!uiInGame)
		return FALSE;

	UProjectLH_LHWidget_Skill_Interaction* C_SkillInteraction = uiInGame->C_Skill_Interaction;
	if (!C_SkillInteraction || !C_SkillInteraction->IsVisible())
		return FALSE;

	C_SkillInteraction->OnTapPressed();
	return TRUE;
}



void OnGameAttackChao(DWORD* dwAddress)
{
	SetDelay(10);

	int nWorldIndex = 0;
	if (!wcscmp(g_pCharInfo.szWorld, g_szWorldName[0]))
		nWorldIndex = 1;

	if (TeleportMap(dwAddress, g_szWorldName[nWorldIndex], g_szVillageName[nWorldIndex]))
		SetStatus(STATUS_DOAUTO, 10);
}



void OnGameItemEnchant(DWORD* dwAddress)
{
	if (OnQuestFinish(dwAddress))
	{
		SetDelay(10);
		return;
	}

	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	// 인벤 안켜진 상태면 인벤 키자
	UProjectLH_LHWidget_Inventory* uiInven = (UProjectLH_LHWidget_Inventory*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Inventory));
	if (!uiInven || !uiInven->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Inven);
		SetDelay(10);
		return;
	}

	int nEnchantIndex = GetEnchantDetailItem();
	int nMaterialIndex = -1;
	if (nEnchantIndex != -1)
	{
		// 무기인 경우
		if (g_pInvenInfo[nEnchantIndex].DetailInfo->ItemCategory == 1)
		{
			nMaterialIndex = GetInvenIndex(L"무기 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"무기 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[0])
				nMaterialIndex = GetInvenIndex(L"무기 강화석");
		}

		// 방어구인 경우
		if (g_pInvenInfo[nEnchantIndex].DetailInfo->ItemCategory == 2)
		{
			nMaterialIndex = GetInvenIndex(L"방어구 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"방어구 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[1])
				nMaterialIndex = GetInvenIndex(L"방어구 강화석");
		}

		// 장신구인 경우
		if (g_pInvenInfo[nEnchantIndex].DetailInfo->ItemCategory == 3)
		{
			nMaterialIndex = GetInvenIndex(L"장신구 강화석 (캐릭터 귀속)");
			if (nMaterialIndex == -1)
				nMaterialIndex = GetInvenIndex(L"장신구 강화석 (귀속)");
			if (nMaterialIndex == -1 && g_OtherSetting.bEnchantStone[2])
				nMaterialIndex = GetInvenIndex(L"장신구 강화석");
		}
	}

	UProjectLH_LHWidget_EquipEnchant* uiEnchant = (UProjectLH_LHWidget_EquipEnchant*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_EquipEnchant));

	if (nEnchantIndex != -1 && nMaterialIndex != -1)
	{
		if (!uiEnchant || !uiEnchant->IsVisible())
		{
			SelectInvenItem(dwAddress, nMaterialIndex);
			SetDelay(10);
			return;
		}

		// 		if (*(char*)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDTAB) != (char)FProjectLH_ProjectLH_EEnchantSubTabType::EEnchantSubTabType__All)
		// 		{
		// 			uiEnchant->OnSelectSubTab(FProjectLH_ProjectLH_EEnchantSubTabType::EEnchantSubTabType__All, FALSE, TRUE);
		// 			SetDelay(10);
		// 			return;
		// 		}

		UProjectLH_LHItem* selectedScrollItem = *(UProjectLH_LHItem**)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDSCROLLITEM);
		if (selectedScrollItem != (UProjectLH_LHItem*)g_pInvenInfo[nMaterialIndex].qwItemAddr)
		{
			SelectInvenItem(dwAddress, nMaterialIndex);
			SetDelay(10);
			return;
		}

		UProjectLH_LHItem* selectedItem = *(UProjectLH_LHItem**)((DWORD64)uiEnchant + OFFSET_ENCHANTSELECTEDITEM);
		if (selectedItem != (UProjectLH_LHItem*)g_pInvenInfo[nEnchantIndex].qwItemAddr)
		{
			uiEnchant->OnTapInventoryItem((UProjectLH_LHItem*)g_pInvenInfo[nEnchantIndex].qwItemAddr);
			SetDelay(10);
			return;
		}

		ShowStatus(1, 60250, g_pInvenInfo[nEnchantIndex].szName);			// L"장비 \"%s\" 을(를) 강화합니다", 
		uiEnchant->OnTapEnchant();
		SetDelay(30);
		return;
	}

	if (uiEnchant && uiEnchant->IsVisible())
	{
		uiEnchant->C_Widget_Topmenu->OnTapExitBtn();
		SetDelay(10);
		return;
	}

	ShowStatus(0, 60382);					// 장비 강화가 완료되었습니다
	uiInven->C_BP_Widget_Inven->OnTapExitBtn();
	SetStatus(g_nPreStatus, 10);
}


void RecvAddrTimer(HWND hWnd, UINT uMsg, UINT_PTR idEvent, DWORD dwTime)
{
	KillTimer(hWnd, idEvent);
	// RecvAddrInfo(&g_bRecvAddrThread);
}


void OnGameBuyPotion(DWORD* dwAddress)
{
	if (OnQuestTeleport(dwAddress))
	{
		SetDelay(10);
		return;
	}

	UProjectLH_LHWidget_NPCShop* uiNPCShop = (UProjectLH_LHWidget_NPCShop*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_NPCShop));
	if (!uiNPCShop || !uiNPCShop->IsVisible())					// 상점이 안열린 상태
	{
		g_bGotoNPCFail = 0;

		if (OnCloseOpenWindow(dwAddress))
		{
			SetDelay(10);
			return;
		}

		if (wcscmp(g_pCharInfo.szRegion, L"거미 군락"))
		{
			if (g_pCharInfo.nGoods[0] >= 1500)
			{
				TeleportMap(dwAddress, g_szWorldName[1], L"거미 군락");
				SetDelay(10);
				return;
			}
		}

		int nIndex = GetNpcIndex(L"발포드르");
		FVector fNpcPos = { -114541.04f, 141135.56f, -25429.60f };
		if (nIndex == -1)
		{
			if (!IsMovingTargetPos(dwAddress, fNpcPos))
			{
				MovePos(dwAddress, fNpcPos);
				g_qwGotoNpcTick = g_dwTickCount;
			}
			else if (g_qwGotoNpcTick != 0 && g_dwTickCount >= g_qwGotoNpcTick + 5 * 60 * 1000)
			{
				g_qwGotoNpcTick = 0;
				UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
				if (uiInGame)
				{
					UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
					if (C_InGame_Minimap_Container)
						C_InGame_Minimap_Container->OnClicked_Return();
				}
			}

			SetDelay(10);
			return;
		}

		g_qwGotoNpcTick = 0;

		if (g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			int nDist = (int)GETDIST2D(g_pCharInfo.CurTransform.Translation, g_pNPCInfo[nIndex].CurPos);
			if (nDist >= 300 || !ClickInteraction(dwAddress, TRUE))
				MovePos(dwAddress, fNpcPos);
		}

		SetDelay(10);
		return;
	}

	if (g_bGotoNPC != 0)				// 바로 창문 여는 경우 정보 갱신이 안될수도 있다.
	{
		g_bGotoNPC = 0;
		SetDelay(10);
		return;
	}

	if (g_bGotoNPCFail != 0)			// NPC 이동 오류인 경우
	{
		PressKeyAlternate(VK_ESCAPE);
		SetDelay(10);
		return;
	}

	g_qwGotoNpcTick = 0;

	// 판매할 아이템들 처리하자
	UpdateSellListInfo(dwAddress, uiNPCShop);
	for (int i = 0; i < g_nSellListCount; i++)
	{
		if (g_pSellListInfo[i].bSelected)
			continue;

		if (IsSellItem(g_pSellListInfo[i].dwItemInfo))
		{
			ShowStatus(1, 60196, g_pSellListInfo[i].dwItemInfo.szName);				// L"아이템 \"%s\" 을(를) 선택합니다", 
			uiNPCShop->OnTapReturnThisContainer(g_pSellListInfo[i].ItemContainer);
			SetDelay(10);
			return;
		}
	}

	TArray<class UObject*>* sellList = (TArray<class UObject*>*)((DWORD64)uiNPCShop + OFFSET_SELLITEMLIST);
	if (sellList->Num() > 0)									// 판매할 아이템들 선택되었으면
	{
		ShowStatus(0, 60197);			// L"선택된 아이템들을 판매합니다");
		uiNPCShop->OnTapItemSale();
		SetDelay(10);
		return;
	}

	// 구매할 아이템들 처리하자
	UProjectLH_LHWidget_Purchase* uiPurchage = (UProjectLH_LHWidget_Purchase*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_Purchase));
	_callFunc1 refreshPurchage = (_callFunc1)PATCHADDR(dwAddress[ADDR_REFRESHPURCHAGE], dwAddress[0]);

	UpdateBuyListInfo(dwAddress, uiNPCShop);
	for (int i = 0; i < g_nBuyListCount; i++)
	{															// 구매 제한 걸린 상태 무시
		if (g_pBuyListInfo[i].nLimitMaxCount != 0 && g_pBuyListInfo[i].nLimitBuyCount >= g_pBuyListInfo[i].nLimitMaxCount)
		{
			if (wcsstr(g_pBuyListInfo[i].szName->c_str(), L"은총의 순간 이동 주문서"))
				g_bShopItemOring[0] = TRUE;
			else if (wcsstr(g_pBuyListInfo[i].szName->c_str(), L"순간 이동 주문서"))
				g_bShopItemOring[1] = TRUE;

			continue;
		}

		if (g_pCharInfo.nGoods[g_pBuyListInfo[i].nPriceType % 6] < g_pBuyListInfo[i].nPrice)		// 가격이 부족한 경우 (Type 따지자)
			continue;

		int nCount = GetBuyItemCount(FALSE, g_pBuyListInfo[i].szName->c_str());					// 구매할 개수를 구하자
		if (nCount <= 0)
			continue;

		nCount /= g_pBuyListInfo[i].nCount;
		if (nCount == 0)
			nCount = 1;

		uiNPCShop->OnSelectShopItem((UProjectLH_LHWidget_Product_Container*)g_pBuyListInfo[i].ProductContainer);
		if (!uiPurchage || !uiPurchage->IsVisible())
		{
			SetDelay(10);
			return;
		}

		if (nCount > *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT))
			nCount = *(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGEMAXCOUNT);

		*(int*)((DWORD64)uiPurchage + OFFSET_PURCHAGECOUNT) = nCount;
		refreshPurchage((DWORD64)uiPurchage);

		WCHAR szTmp[MAX_NAME] = { 0, };
		wcscpy(szTmp, g_pBuyListInfo[i].szName->c_str());
		ShowStatus(3, 60198, szTmp, nCount * g_pBuyListInfo[i].nCount);			// L"아이템 \"%s\"을(를) %d개 구매합니다", 

		uiPurchage->OnTapBuy();
		SetDelay(10);
		return;
	}

	// 창문을 종료하고 기존 상태로 돌아가자
	ShowStatus(0, 60199);			// L"상점 처리가 끝났습니다");
	uiNPCShop->C_Widget_Topmenu->OnTapExitBtn();

	g_dwPreQuestID = 0;
	g_bMoveHuntPos = FALSE;
	g_bMoveHuntSet = FALSE;
	g_dwNoMonsterTick = g_dwTickCount;
	SetStatus(g_nPreStatus, 10);
}


int LoadSubQuestInfo()
{
	WCHAR szStr[MAX_PATH] = { 0, };
	swprintf(szStr, L"%s - %s", g_pCharInfo.szServer, g_pCharInfo.szName);

	DWORD dwCharCrc = WCharToDword(szStr);

	WCHAR szPath[MAX_PATH] = { 0, };
	swprintf(szPath, L"%s\\Setting\\%d\\SubQuest.dat", g_szAppPath, g_nIndex);

	WCHAR szKey[MAX_NAME] = { 0, };
	swprintf(szKey, L"%08X", dwCharCrc);

	return GetPrivateProfileInt(L"SubQuest", szKey, 0, szPath);
}


void SaveSubQuestInfo(int nMainQuest)
{
	WCHAR szStr[MAX_PATH] = { 0, };
	swprintf(szStr, L"%s - %s", g_pCharInfo.szServer, g_pCharInfo.szName);

	DWORD dwCharCrc = WCharToDword(szStr);

	WCHAR szPath[MAX_PATH] = { 0, };
	swprintf(szPath, L"%s\\Setting\\%d\\SubQuest.dat", g_szAppPath, g_nIndex);

	WCHAR szKey[MAX_NAME] = { 0, };
	swprintf(szKey, L"%08X", dwCharCrc);

	WCHAR szVal[MAX_NAME] = { 0, };
	swprintf(szVal, L"%d", nMainQuest);

	WritePrivateProfileString(L"SubQuest", szKey, szVal, szPath);
}


void OnGameSubQuest(DWORD* dwAddress)
{
	if (IsCharNeedReturn())
	{
		g_bExpandShop = TRUE;
		g_bWaitHpVillage = TRUE;
		SetStatus(STATUS_RETURNVILLAGE);
		return;
	}

	if (OnAutoEquipItem(dwAddress))								// 자동 장비 장착
	{
		SetDelay(10);
		return;
	}

	if (OnQuestTeleport(dwAddress) ||						// 퀘스트 텔레포트
		OnQuestTalkBalloon(dwAddress) ||						// 퀘스트 대화
		OnJonJikAvatar(dwAddress) ||						// 전직 아바타
		OnAutoSkillSlot(dwAddress) ||						// 스킬 슬롯
		OnAutoBuffSlot(dwAddress) ||						// 버프 슬롯
		OnQuestFinish(dwAddress))								// 퀘스트 완료
	{
		SetDelay(10);
		return;
	}

	if (GetMainQuestNo() >= 1301)								// 월드 보스
	{
		if (g_pCharInfo.nLevel >= 30 && CheckWorldBossTime())
		{
			g_bWorldBoss = 0;
			g_qwWorldBossTick = 0;

			ShowStatus(0, 60335);
			SetStatus(STATUS_WORLDBOSS, 10);
			return;
		}

		if (CheckBigSnakeDungeon(dwAddress))
		{
			ShowStatus(0, 60318);
			SetStatus(STATUS_MATCHBIGSNAKE, 10);
			return;
		}
	}

	// 	if (GetMainQuestNo() >= 815 && g_OtherSetting.bValhallaFight && GetMatchingRealmWar(dwAddress) == 0)
	// 	{
	// 		ShowStatus(0, 60290);										// (발할라 대전을 신청합니다)
	// 		SetStatus(STATUS_MATCHREALMWAR, 10);
	// 		return;
	// 	}

	DWORD dwAutoQuestID = GetPlayerAutoQuestId(dwAddress);
	if (dwAutoQuestID && g_dwPreQuestID != dwAutoQuestID)			// 현재 진행중인 퀘스트 정보
	{
		g_dwPreQuestID = dwAutoQuestID;
		if (g_dwPreQuestID == g_pMainQuestInfo.dwQuestID)
		{
			ShowStatus(1, 60157, g_pMainQuestInfo.szName);			// (메인 퀘스트 \"%s\" 을(를) 진행합니다)

			g_nQuestPreCount = g_pMainQuestInfo.nCurCount;
			g_qwQuestCountTick = g_dwTickCount;
			g_qwQuestTotalTick = g_dwTickCount;
		}
		else
		{
			int nSubQuest = -1;
			for (int i = 0; i < g_nSubQuestCount; i++)
			{
				if (g_pSubQuestInfo[i].dwQuestID == g_dwPreQuestID)
				{
					nSubQuest = i;
					break;
				}
			}

			if (nSubQuest != -1)
			{														// (서브 퀘스트 \"%s\" 을(를) 진행합니다)
				ShowStatus(1, 60158, g_pSubQuestInfo[nSubQuest].szName);

				g_nQuestPreCount = g_pSubQuestInfo[nSubQuest].nCurCount;
				g_qwQuestCountTick = g_dwTickCount;
				g_qwQuestTotalTick = g_dwTickCount;
			}
			else
			{
				int nVillageQuest = -1;
				for (int i = 0; i < g_nVillageQuestCount; i++)
				{
					if (g_pVillageQuestInfo[i].dwQuestID == g_dwPreQuestID)
					{
						nVillageQuest = i;
						break;
					}

					if (nVillageQuest != -1)
					{												// (의뢰 퀘스트 \"%s\" 을(를) 진행합니다)
						ShowStatus(1, 60255, g_pVillageQuestInfo[nVillageQuest].szName);

						g_nQuestPreCount = g_pVillageQuestInfo[nVillageQuest].nCurCount;
						g_qwQuestCountTick = g_dwTickCount;
						g_qwQuestTotalTick = g_dwTickCount;
					}
				}
			}
		}
	}
	else if (dwAutoQuestID == 0)
		g_qwQuestTotalTick = g_dwTickCount;

	if (g_pCharInfo.nAutoState != AUTO_NONE && g_OtherSetting.bSkillInteraction)
		OnSkillInteraction(dwAddress);

	int nCurWorld = 0;
	for (int i = 0; i < MAX_WORLD; i++)
	{
		if (!wcscmp(g_pCharInfo.szWorld, g_szWorldName[i]))
			nCurWorld = i;
	}

	// 설정이 안되어있으면 그냥 무시하자
	UProjectLH_LHWidget_QuestListWindow* uiQuestWindow = (UProjectLH_LHWidget_QuestListWindow*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_QuestListWindow));
	if (!g_OtherSetting.bEnableSubQuest)
	{
		if (uiQuestWindow && uiQuestWindow->IsVisible())
			uiQuestWindow->C_Widget_Topmenu->OnTapExitBtn();

		ShowStatus(0, 60393);

		g_dwPreQuestID = 0;
		g_bMoveHuntPos = FALSE;
		g_bMoveHuntSet = FALSE;
		g_dwNoMonsterTick = g_dwTickCount;
		SetStatus(STATUS_DOAUTO, 10);
		return;
	}

	// 던전이면 나오자
	if (IsInDungeon())
	{
		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
		{
			UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
			if (C_InGame_Minimap_Container)
			{
				C_InGame_Minimap_Container->OnClicked_Exit();
				SetDelay(10);
				return;
			}
		}

		PressKeyAlternate(L'H');
		SetDelay(10);
		return;
	}

	// 이미 받아놓은 퀘스트가 있으면 그거 먼저 진행하자
	int nIndex = GetSubQuestIndex();
	if (nIndex != -1)
	{
		if (g_dwSubQuestID != g_pSubQuestInfo[nIndex].dwQuestID)
		{
			if (uiQuestWindow && uiQuestWindow->IsVisible())
			{
				uiQuestWindow->C_Widget_Topmenu->OnTapExitBtn();
				SetDelay(10);

				return;
			}

			g_dwSubQuestID = g_pSubQuestInfo[nIndex].dwQuestID;
			g_bSubQuestReturn = 1;
		}

		// 서브 퀘스트 월드가 다른 경우
		int nQuestWorld = 0;
		if (g_pSubQuestInfo[nIndex].dwQuestID <= 0x9D03)
			nQuestWorld = 0;
		else if (g_pSubQuestInfo[nIndex].dwQuestID <= 0xA187)
			nQuestWorld = 1;
		else if (g_pSubQuestInfo[nIndex].dwQuestID <= 0xA637)
			nQuestWorld = 2;
		else if (g_pSubQuestInfo[nIndex].dwQuestID <= 0xAAAB)
			nQuestWorld = 3;
		else
			nQuestWorld = 4;

		if (nCurWorld != nQuestWorld)
		{
			g_dwMoveCharTick = g_dwTickCount;
			TeleportMap(dwAddress, g_szWorldName[nQuestWorld], g_szVillageName[nQuestWorld]);
			return;
		}

		// 두번째 문제 절벽에서 못내려가는 경우 마을 귀환하자
		if (g_pSubQuestInfo[nIndex].dwQuestID == 0xA5AC &&
			!wcscmp(g_pCharInfo.szRegion, L"드베르그 부락") && g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			FVector fChaoPos = { 62382.23f, -142685.38f, 8022.51f };
			if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, fChaoPos) <= 200)
			{
				ReturnVillage(dwAddress);
				return;
			}
		}

		// 정답 제출 절벽에서 못내려가니까 마을 귀환
		if (g_pSubQuestInfo[nIndex].dwQuestID == 0xA5AE &&
			!wcscmp(g_pCharInfo.szRegion, L"살얼음 언덕") && g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			FVector fChaoPos = { 285078.38f, -46136.66f, 9222.79f };
			if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, fChaoPos) <= 200)
			{
				ReturnVillage(dwAddress);
				return;
			}
		}

		// 준비는 끝났다 절벽에서 못내려가니까 마을 귀환
		if (g_pSubQuestInfo[nIndex].dwQuestID == 0xA5B5 &&
			!wcscmp(g_pCharInfo.szRegion, L"드베르그 부락") && g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
		{
			FVector fChaoPos = { 111950.52f, -168443.23f, 15593.26f };
			if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, fChaoPos) <= 200)
			{
				ReturnVillage(dwAddress);
				return;
			}
		}

		// 보스 잡는 서브퀘스트인 경우
		if (g_pSubQuestInfo[nIndex].nQuestState == QUEST_DOING &&
			g_pSubQuestInfo[nIndex].dwQuestID >= 0x9CFF && g_pSubQuestInfo[nIndex].dwQuestID <= 0x9D03)
		{
			g_dwNoMonsterTick = g_dwTickCount;
			g_qwQuestTotalTick = g_dwTickCount;

			int nBossIndex = -1;
			for (int i = 0; i < MAX_BOSSMONSTER; i++)
			{
				if (g_pBossMonsterInfo[i].dwQuestID == g_pSubQuestInfo[nIndex].dwQuestID)
				{
					nBossIndex = i;
					break;
				}
			}

			if (nBossIndex != -1)
			{
				// 다른 지역에 있으면 텔레포트 가자
				if (wcscmp(g_pCharInfo.szWorld, g_pBossMonsterInfo[nBossIndex].szWorldName) ||
					wcscmp(g_pCharInfo.szRegion, g_pBossMonsterInfo[nBossIndex].szRegionName))
				{
					TeleportMap(dwAddress, g_pBossMonsterInfo[nBossIndex].szWorldName, g_pBossMonsterInfo[nBossIndex].szRegionName);
					return;
				}

				// 보스 몹이 있으면 Auto 눌러서 공격하자
				int nMonsterIndex = GetMonsterIndex(g_pBossMonsterInfo[nBossIndex].szMonsterName);
				if (nMonsterIndex != -1)
				{
					if (dwAutoQuestID != g_pSubQuestInfo[nIndex].dwQuestID)
						SelectQuest(dwAddress, g_pSubQuestInfo[nIndex].QuestContainer, g_pSubQuestInfo[nIndex].nQuestState, TRUE);
				}
				else
				{
					if (g_pCharInfo.nAutoState != AUTO_NONE)
					{
						AutoAttack(dwAddress);
						SetDelay(10);
						return;
					}

					if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, g_pBossMonsterInfo[nBossIndex].fMonsterPos) > 200 &&
						!IsMovingTargetPos(dwAddress, g_pBossMonsterInfo[nBossIndex].fMonsterPos))
						MovePos(dwAddress, g_pBossMonsterInfo[nBossIndex].fMonsterPos);
				}

				SetDelay(10);
				return;
			}
		}

		// 수동으로 해야 하는 서브 퀘스트인 경우
		if (g_pSubQuestInfo[nIndex].nQuestState == QUEST_DOING && OnSpecialSubQuest(dwAddress, g_pSubQuestInfo[nIndex].dwQuestID))
		{
			if (g_pCharInfo.nAutoState != AUTO_NONE)
				AutoAttack(dwAddress);

			g_dwMoveCharTick = g_dwTickCount;
			return;
		}

		g_nStepStatus = 0;
		if (dwAutoQuestID != g_pSubQuestInfo[nIndex].dwQuestID || g_pCharInfo.nAutoState != AUTO_QUESTING)
		{
			g_dwMoveCharTick = g_dwTickCount;
			SelectQuest(dwAddress, g_pSubQuestInfo[nIndex].QuestContainer, g_pSubQuestInfo[nIndex].nQuestState, TRUE);
		}
		else if (g_dwMoveCharTick && g_dwTickCount >= g_dwMoveCharTick + 10 * 1000)
		{
			AJLog(L"3. g_dwMoveCHartick = %d, g_dwTickCount = %d", g_dwMoveCharTick, g_dwTickCount);
			g_dwMoveCharTick = g_dwTickCount;
			ShowStatus(0, 60172);										// (캐릭 이동중 비정상적인 움직임이 발견되였습니다)

			int nInteractionType = GetShowInteractionType(dwAddress);
			if (nInteractionType == 1)
				PutChaoGatherObject();
			else if (nInteractionType == 2)
				ClickInteraction(dwAddress, TRUE);

			if (g_pCharInfo.nPlayerState == FProjectLH_ProjectLH_ECharacterState::ECharacterState__Climb)
				PressKeyAlternate(L'F');

			if (!g_OtherSetting.bMoveChaoEnable)
				g_nMoveChaoCount = 0;
			else if (g_nMoveChaoCount < MAX_CHAO)
				g_qwMoveChaoTick[g_nMoveChaoCount++] = g_dwTickCount;
			else
			{
				g_nMoveChaoCount = MAX_CHAO;
				for (int i = 0; i < g_nMoveChaoCount - 1; i++)
					g_qwMoveChaoTick[i] = g_qwMoveChaoTick[i + 1];

				g_qwMoveChaoTick[g_nMoveChaoCount - 1] = g_dwTickCount;
			}

			if (g_OtherSetting.bMoveChaoEnable)
			{														// 캐릭 이동 오류 자주 나오는 경우
				if (g_OtherSetting.nMoveChaoCount <= 1 || (g_nMoveChaoCount >= g_OtherSetting.nMoveChaoCount &&
					g_qwMoveChaoTick[g_nMoveChaoCount - 1] - g_qwMoveChaoTick[g_nMoveChaoCount - g_OtherSetting.nMoveChaoCount] <= g_OtherSetting.nMoveChaoTime * 60 * 1000))
				{
					ShowStatus(4, 60313, NULL, g_OtherSetting.nMoveChaoTime, g_OtherSetting.nMoveChaoCount);
					SetStatus(STATUS_FORCERETURN, 10);
					SetDelay(10);
					return;
				}
			}

			AutoAttack(dwAddress);
		}
		else if (!ClickInteraction(dwAddress))
		{
			FVector fTargetPos = GetMoveTargetPosition(dwAddress);

			if (fTargetPos.X != 0.0f || fTargetPos.Y != 0.0f || fTargetPos.Z != 0.0f || g_nQuestPreCount != g_pSubQuestInfo[nIndex].nCurCount)
			{
				if (g_nQuestPreCount != g_pSubQuestInfo[nIndex].nCurCount)
				{
					g_nQuestPreCount = g_pSubQuestInfo[nIndex].nCurCount;
					g_qwQuestTotalTick = g_dwTickCount;
				}

				g_qwQuestCountTick = g_dwTickCount;
			}
			else if (g_dwTickCount >= g_qwQuestCountTick + 2 * 60 * 1000)
			{
				g_qwQuestCountTick = g_dwTickCount;
				SelectQuest(dwAddress, g_pSubQuestInfo[nIndex].QuestContainer, g_pSubQuestInfo[nIndex].nQuestState, TRUE);
			}

			if (g_OtherSetting.bQuestChaoEnable && g_dwTickCount >= g_qwQuestTotalTick + g_OtherSetting.nQuestChaoTime * 60 * 1000)
			{
				ShowStatus(2, 60312, NULL, g_OtherSetting.nQuestChaoTime);
				OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__ReturnLobby);
			}
		}

		SetDelay(10);
		return;
	}

	g_nStepStatus = 0;
	g_qwQuestTotalTick = g_dwTickCount;
	g_dwMoveCharTick = g_dwTickCount;

	// 퀘 수락 받으러 가는 경우면
	if (g_pCharInfo.nAutoState == AUTO_QUESTING && (
		g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__SearchNpc_Location ||
		g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__QuestMove_Location))
		return;

	// 현재 지역이 맵이거나 인스턴스 던전이면 나가자
	if (IsInDungeon() || g_pCharInfo.nMapState == FCommonSource_CommonSource_EMapType::EMapType__Instance)
	{
		if (g_bPartyDungeon)
		{
			UProjectLH_LHWidget_PartyWindow* pPartyWindow = GetPartyWindow(dwAddress);
			if (pPartyWindow && !IsPartyMaster() && pPartyWindow->C_Switcher_DungeonReady)
			{
				if (pPartyWindow->C_Switcher_DungeonReady->ActiveWidgetIndex == 1)
				{
					pPartyWindow->OnClickedDungeonReady();
					SetDelay(10);
					return;
				}
			}
		}

		UProjectLH_LHWidget_InGame* uiInGame = (UProjectLH_LHWidget_InGame*)GetWidget(dwAddress, (DWORD)(FProjectLH_ProjectLH_EUIName::EUIName__LHWidget_InGame));
		if (uiInGame)
		{
			UProjectLH_LHWidget_Minimap* C_InGame_Minimap_Container = uiInGame->C_InGame_Minimap_Container;
			if (C_InGame_Minimap_Container)
				C_InGame_Minimap_Container->OnClicked_Exit();
		}

		SetDelay(10);
		return;
	}

	// 퀘스트 창문 키고 목록 갱신하자
	if (!uiQuestWindow || !uiQuestWindow->IsVisible())
	{
		OpenMenuWindow(dwAddress, FProjectLH_ProjectLH_EGameMenuType::EGameMenuType__Quest);
		SetDelay(10);
		return;
	}

	// 지역을 선택하자
	if (!uiQuestWindow->CurrentMapRecord)
		return;

	if (g_nSubQuestChapter == 0)
		g_nSubQuestChapter = 1;

	int nMaxSubQuestChapter = 1;
	if (GetMainQuestNo() >= 6401)
		nMaxSubQuestChapter = 7;
	else if (GetMainQuestNo() >= 5401)
		nMaxSubQuestChapter = 6;
	else if (GetMainQuestNo() >= 4401)
		nMaxSubQuestChapter = 5;
	else if (GetMainQuestNo() >= 3301)
		nMaxSubQuestChapter = 4;
	else if (GetMainQuestNo() >= 2301)
		nMaxSubQuestChapter = 3;
	else if (GetMainQuestNo() >= 1301)
		nMaxSubQuestChapter = 2;

	if (uiQuestWindow->CurrentMapRecord->ChapterNumber < g_nSubQuestChapter)			// 1 - 미드가르드, 2 - 요툰하임
	{
		uiQuestWindow->OnTapNextMap();
		SetDelay(10);
		return;
	}
	else if (uiQuestWindow->CurrentMapRecord->ChapterNumber > g_nSubQuestChapter)
	{
		uiQuestWindow->OnTapPrevMap();
		SetDelay(10);
		return;
	}

	// 서브 퀘스트 선택하자
	if (!SelectTab(uiQuestWindow->C_MainTabList, 1))
	{
		SetDelay(10);
		return;
	}

	UpdateQuestWindowInfo(dwAddress);

	// 진행할 서브 퀘스트 구하자
	nIndex = GetSubQuestWindowIndex();
	if (nIndex == -1)
	{
		// 마지막까지 다 진행한 경우
		if (g_nSubQuestChapter >= nMaxSubQuestChapter)
		{
			uiQuestWindow->C_Widget_Topmenu->OnTapExitBtn();

			g_nSubQuestNo = GetMainQuestNo();
			SaveSubQuestInfo(g_nSubQuestNo);

			ShowStatus(0, 60393);

			g_dwPreQuestID = 0;
			g_bMoveHuntPos = FALSE;
			g_bMoveHuntSet = FALSE;
			g_dwNoMonsterTick = g_dwTickCount;
			SetStatus(STATUS_DOAUTO, 10);
			return;
		}
		// 다음 장 서브 퀘스트 진행하자
		else
		{
			g_nSubQuestChapter++;
			SetDelay(10);
		}

		return;
	}

	// 폭포 구릉지에서 못나가는 경우 마을 귀환하자
	if (!wcscmp(g_pCharInfo.szRegion, L"폭포 구릉지") && g_pCharInfo.nMoveState == FProjectLH_ProjectLH_EAutoMove::EAutoMove__None)
	{
		FVector fChaoPos = { -18106.10f, -74860.06f, -9227.49f };
		if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, fChaoPos) <= 200 && g_pQuestWindowInfo[nIndex].dwQuestID >= 0x9C9B)
		{
			ReturnVillage(dwAddress);
			return;
		}
	}

	// 서브 퀘스트 선택을 진행하자
	if (*(DWORD64*)((DWORD64)uiQuestWindow + OFFSET_SELECTEDQUESTLISTITEM) != (DWORD64)g_pQuestWindowInfo[nIndex].QuestContainer)
	{
		g_pQuestWindowInfo[nIndex].QuestContainer->OnTapSelect();
		SetDelay(10);
		return;
	}

	// 미드가르드 꼭대기에 있을때 빠른 이동 하자 (암상인의 부탁)
	if (g_pQuestWindowInfo[nIndex].dwQuestID == 0x9CEB)
	{
		FVector fTargetPos = { -20421.34f, -21700.22f, 2219.06f };
		if ((int)GETDIST3D(g_pCharInfo.CurTransform.Translation, fTargetPos) < 200)
		{
			uiQuestWindow->OnTapFastMoveQuest();
			SetDelay(10);
			return;
		}
	}

	// 진행할 월드가 다른 경우 순간이동
	if (nCurWorld + 1 != g_nSubQuestChapter)
	{
		uiQuestWindow->OnTapFastMoveQuest();
	}
	// 기타는 그냥 움직이자
	else
	{
		g_bSubQuestFly = 0;
		uiQuestWindow->OnTapGoQuest();
	}

	SetDelay(10);
}


void UpdateHackInfo(DWORD* dwAddress)
{
	if (!g_bAutoRun)
		return;

	// 이동 속도
	AProjectLH_LHPlayerController* qwPlayerController = (AProjectLH_LHPlayerController*)GetPlayerController(dwAddress);
	if (qwPlayerController && qwPlayerController->Pawn)
	{
		AProjectLH_LHPlayer_Playable* playerPlayable = (AProjectLH_LHPlayer_Playable*)qwPlayerController->Pawn;
		if (playerPlayable && playerPlayable->AutoMoveComponent && playerPlayable->AutoMoveComponent->CharacterMovementComponent)
		{
			if (g_OtherSetting.bMoveHack)
			{
				float fPercent = g_OtherSetting.nMoveHack / 10.0f;
				if (fPercent < 1.0f)
					fPercent = 1.0f;
				if (fPercent >= 1.5f)
					fPercent = 1.4f;

				playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxWalkSpeed =
					playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxSwimSpeed * fPercent;
			}
			else if (playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxWalkSpeed !=
				playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxSwimSpeed)
				playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxWalkSpeed =
				playerPlayable->AutoMoveComponent->CharacterMovementComponent->MaxSwimSpeed;
		}
	}

	UProjectLH_LHGameInstance* pInstance = GetLMGameInstance(dwAddress);
	if (pInstance)
	{
		UProjectLH_LHCharacterMgr* pCharacterMgr = pInstance->CharacterMgr;
		if (pCharacterMgr)
		{
			AProjectLH_LHPlayer_Playable* pObj = pCharacterMgr->CurCharacter.Get();
			if (pObj)
			{
				UProjectLH_LHCharacterParam* pParam = pObj->CharacterParam;
				if (pParam)
				{
					// 공격 속도
					if (g_OtherSetting.bAttackHack)
					{
						float fValue = (float)g_OtherSetting.nAttackHack;
						if (fValue > 200.0f)
							fValue = 200.0f;

						if (fValue < pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__AttackSpeedAddPercent])
							fValue = (float)pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__AttackSpeedAddPercent];

						if (pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__AttackSpeedAddPercent] != fValue)
							pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__AttackSpeedAddPercent] = fValue;
					}

					// 시전 속도
					if (g_OtherSetting.bSkillHack)
					{
						float fValue = (float)g_OtherSetting.nSkillHack;
						if (fValue > 60.0f)
							fValue = 60.0f;

						if (fValue < pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__SkillTimeReductionPercent])
							fValue = (float)pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__SkillTimeReductionPercent];

						if (pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__SkillTimeReductionPercent] != fValue)
							pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__SkillTimeReductionPercent] = fValue;
					}

					// 쿨타임 감소
					if (g_OtherSetting.bCoolHack)
					{
						float fValue = (float)g_OtherSetting.nCoolHack;
						if (fValue > 60.0f)
							fValue = 60.0f;

						if (fValue < pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__CoolTimeReductionPercent])
							fValue = (float)pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__CoolTimeReductionPercent];

						if (pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__CoolTimeReductionPercent] != fValue)
							pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__CoolTimeReductionPercent] = fValue;
					}

					// 명중
					if (g_OtherSetting.bHitHack)
					{
						float fValue = (float)g_OtherSetting.nHitHack;
						if (fValue > 200.0f)
							fValue = 200.0f;

						if (fValue < pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__HitAccuracy])
							fValue = (float)pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__HitAccuracy];

						if (pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__HitAccuracy] != fValue)
							pParam->TotalCharParam[(BYTE)FCommonSource_CommonSource_ECharParam::ECharParam__HitAccuracy] = fValue;
					}
				}
			}
		}
	}
}