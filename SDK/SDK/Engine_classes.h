#pragma once

// Name: , Version: 1.0.0

#ifdef _MSC_VER
	#pragma pack(push, 0x1)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.DeveloperSettings
// 0x0010 (0x0038 - 0x0028)
class UEngine_DeveloperSettings : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeveloperSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DeveloperSettings");
		return ptr;
	}

};


// Class Engine.Actor
// 0x01F0 (0x0218 - 0x0028)
class AEngine_Actor : public UObject
{
public:
	struct FEngine_ActorTickFunction                   PrimaryActorTick;                                         // 0x0028(0x0030) (Edit, DisableEditOnInstance)
	unsigned char                                      bHidden : 1;                                              // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bNetTemporary : 1;                                        // 0x0058(0x0001)
	unsigned char                                      bNetStartup : 1;                                          // 0x0058(0x0001)
	unsigned char                                      bOnlyRelevantToOwner : 1;                                 // 0x0058(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bAlwaysRelevant : 1;                                      // 0x0058(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bReplicateMovement : 1;                                   // 0x0058(0x0001) (Edit, Net, DisableEditOnInstance)
	unsigned char                                      bTearOff : 1;                                             // 0x0058(0x0001) (Net)
	unsigned char                                      bExchangedRoles : 1;                                      // 0x0058(0x0001) (Transient)
	unsigned char                                      bNetLoadOnClient : 1;                                     // 0x0059(0x0001) (Edit)
	unsigned char                                      bNetUseOwnerRelevancy : 1;                                // 0x0059(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bRelevantForNetworkReplays : 1;                           // 0x0059(0x0001)
	unsigned char                                      bRelevantForLevelBounds : 1;                              // 0x0059(0x0001) (Edit)
	unsigned char                                      bReplayRewindable : 1;                                    // 0x0059(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAllowTickBeforeBeginPlay : 1;                            // 0x0059(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bAutoDestroyWhenFinished : 1;                             // 0x0059(0x0001) (BlueprintVisible)
	unsigned char                                      bBlockInput : 1;                                          // 0x0059(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bCanBeDamaged : 1;                                        // 0x005A(0x0001) (Edit, BlueprintVisible, Net, SaveGame)
	unsigned char                                      bCollideWhenPlacing : 1;                                  // 0x005A(0x0001)
	unsigned char                                      bFindCameraComponentWhenViewTarget : 1;                   // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGenerateOverlapEventsDuringLevelStreaming : 1;           // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoresOriginShifting : 1;                               // 0x005A(0x0001) (Edit)
	unsigned char                                      bEnableAutoLODGeneration : 1;                             // 0x005A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsEditorOnlyActor : 1;                                   // 0x005A(0x0001) (Edit)
	unsigned char                                      bActorSeamlessTraveled : 1;                               // 0x005A(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x005B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      bCanBeInCluster : 1;                                      // 0x005B(0x0001) (Edit)
	unsigned char                                      bAllowReceiveTickEventOnDedicatedServer : 1;              // 0x005B(0x0001)
	unsigned char                                      UnknownData00 : 5;                                        // 0x005B(0x0001)
	unsigned char                                      UnknownData01 : 2;                                        // 0x005C(0x0001)
	unsigned char                                      bActorEnableCollision : 1;                                // 0x005C(0x0001)
	unsigned char                                      bActorIsBeingDestroyed : 1;                               // 0x005C(0x0001) (Transient, DuplicateTransient)
	FEngine_Engine_EActorUpdateOverlapsMethod          UpdateOverlapsMethodDuringLevelStreaming;                 // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EActorUpdateOverlapsMethod          DefaultUpdateOverlapsMethodDuringLevelStreaming;          // 0x005E(0x0001) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENetRole>               RemoteRole;                                               // 0x005F(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	struct FEngine_RepMovement                         ReplicatedMovement;                                       // 0x0060(0x0034) (Edit, Net, DisableEditOnInstance)
	float                                              InitialLifeSpan;                                          // 0x0094(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CustomTimeDilation;                                       // 0x0098(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FEngine_RepAttachment                       AttachmentReplication;                                    // 0x00A0(0x0040) (Net, Transient)
	class AEngine_Actor*                               Owner;                                                    // 0x00E0(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENetRole>               Role;                                                     // 0x00F0(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENetDormancy>           NetDormancy;                                              // 0x00F1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	FEngine_Engine_ESpawnActorCollisionHandlingMethod  SpawnCollisionHandlingMethod;                             // 0x00F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAutoReceiveInput>      AutoReceiveInput;                                         // 0x00F3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InputPriority;                                            // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_InputComponent*                      InputComponent;                                           // 0x00F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData)
	float                                              NetCullDistanceSquared;                                   // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	int                                                NetTag;                                                   // 0x0104(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NetUpdateFrequency;                                       // 0x0108(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              MinNetUpdateFrequency;                                    // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetPriority;                                              // 0x0110(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class AEngine_Pawn*                                Instigator;                                               // 0x0118(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	TArray<class AEngine_Actor*>                       Children;                                                 // 0x0120(0x0010) (ZeroConstructor, Transient)
	class UEngine_SceneComponent*                      RootComponent;                                            // 0x0130(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class AEngine_MatineeActor*>                ControllingMatineeActors;                                 // 0x0138(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0148(0x0008) MISSED OFFSET
	TArray<struct FName>                               Layers;                                                   // 0x0150(0x0010) (ZeroConstructor)
	TWeakObjectPtr<class UEngine_ChildActorComponent>  ParentComponent;                                          // 0x0160(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<struct FName>                               Tags;                                                     // 0x0168(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      OnTakeAnyDamage;                                          // 0x0178(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnTakePointDamage;                                        // 0x0179(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnTakeRadialDamage;                                       // 0x017A(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnActorBeginOverlap;                                      // 0x017B(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnActorEndOverlap;                                        // 0x017C(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnBeginCursorOver;                                        // 0x017D(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnEndCursorOver;                                          // 0x017E(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnClicked;                                                // 0x017F(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnReleased;                                               // 0x0180(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchBegin;                                        // 0x0181(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchEnd;                                          // 0x0182(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchEnter;                                        // 0x0183(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchLeave;                                        // 0x0184(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnActorHit;                                               // 0x0185(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnDestroyed;                                              // 0x0186(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnEndPlay;                                                // 0x0187(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData05[0x60];                                      // 0x0188(0x0060) MISSED OFFSET
	TArray<class UEngine_ActorComponent*>              InstanceComponents;                                       // 0x01E8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UEngine_ActorComponent*>              BlueprintCreatedComponents;                               // 0x01F8(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0208(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	bool WasRecentlyRendered(float Tolerance);
	void UserConstructionScript();
	void TearOff();
	void SnapRootComponentTo(class AEngine_Actor* InParentActor, const struct FName& InSocketName);
	void SetTickGroup(TEnumAsByte<FEngine_Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetReplicates(bool bInReplicates);
	void SetReplicateMovement(bool bInReplicateMovement);
	void SetOwner(class AEngine_Actor* NewOwner);
	void SetNetDormancy(TEnumAsByte<FEngine_Engine_ENetDormancy> NewDormancy);
	void SetLifeSpan(float InLifespan);
	void SetActorTickInterval(float TickInterval);
	void SetActorTickEnabled(bool bEnabled);
	void SetActorScale3D(const struct FVector& NewScale3D);
	void SetActorRelativeScale3D(const struct FVector& NewRelativeScale);
	void SetActorHiddenInGame(bool bNewHidden);
	void SetActorEnableCollision(bool bNewActorEnableCollision);
	void RemoveTickPrerequisiteComponent(class UEngine_ActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AEngine_Actor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveRadialDamage(float DamageReceived, class UEngine_DamageType* DamageType, const struct FVector& Origin, const struct FEngine_HitResult& HitInfo, class AEngine_Controller* InstigatedBy, class AEngine_Actor* DamageCauser);
	void ReceivePointDamage(float Damage, class UEngine_DamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UEngine_PrimitiveComponent* HitComponent, const struct FName& BoneName, const struct FVector& ShotFromDirection, class AEngine_Controller* InstigatedBy, class AEngine_Actor* DamageCauser, const struct FEngine_HitResult& HitInfo);
	void ReceiveHit(class UEngine_PrimitiveComponent* MyComp, class AEngine_Actor* Other, class UEngine_PrimitiveComponent* OtherComp, bool bSelfMoved, const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FVector& NormalImpulse, const struct FEngine_HitResult& Hit);
	void ReceiveEndPlay(TEnumAsByte<FEngine_Engine_EEndPlayReason> EndPlayReason);
	void ReceiveDestroyed();
	void ReceiveBeginPlay();
	void ReceiveAnyDamage(float Damage, class UEngine_DamageType* DamageType, class AEngine_Controller* InstigatedBy, class AEngine_Actor* DamageCauser);
	void ReceiveActorOnReleased(const struct FInputCore_Key& ButtonReleased);
	void ReceiveActorOnInputTouchLeave(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnter(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchEnd(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnInputTouchBegin(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex);
	void ReceiveActorOnClicked(const struct FInputCore_Key& ButtonPressed);
	void ReceiveActorEndOverlap(class AEngine_Actor* OtherActor);
	void ReceiveActorEndCursorOver();
	void ReceiveActorBeginOverlap(class AEngine_Actor* OtherActor);
	void ReceiveActorBeginCursorOver();
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);
	void OnRep_ReplicateMovement();
	void OnRep_ReplicatedMovement();
	void OnRep_Owner();
	void OnRep_Instigator();
	void OnRep_AttachmentReplication();
	void MakeNoise(float Loudness, class AEngine_Pawn* NoiseInstigator, const struct FVector& NoiseLocation, float MaxRange, const struct FName& Tag);
	class UEngine_MaterialInstanceDynamic* MakeMIDForMaterial(class UEngine_MaterialInterface* Parent);
	bool K2_TeleportTo(const struct FVector& DestLocation, const struct FRotator& DestRotation);
	bool K2_SetActorTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	bool K2_SetActorRotation(const struct FRotator& NewRotation, bool bTeleportPhysics);
	void K2_SetActorRelativeTransform(const struct FTransform& NewRelativeTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetActorRelativeRotation(const struct FRotator& NewRelativeRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetActorRelativeLocation(const struct FVector& NewRelativeLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	bool K2_SetActorLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	bool K2_SetActorLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_OnReset();
	void K2_OnEndViewTarget(class AEngine_PlayerController* PC);
	void K2_OnBecomeViewTarget(class AEngine_PlayerController* PC);
	class UEngine_SceneComponent* K2_GetRootComponent();
	TArray<class UEngine_ActorComponent*> K2_GetComponentsByClass(class UClass* ComponentClass);
	struct FRotator K2_GetActorRotation();
	struct FVector K2_GetActorLocation();
	void K2_DetachFromActor(FEngine_Engine_EDetachmentRule LocationRule, FEngine_Engine_EDetachmentRule RotationRule, FEngine_Engine_EDetachmentRule ScaleRule);
	void K2_DestroyComponent(class UEngine_ActorComponent* Component);
	void K2_DestroyActor();
	void K2_AttachToComponent(class UEngine_SceneComponent* Parent, const struct FName& SocketName, FEngine_Engine_EAttachmentRule LocationRule, FEngine_Engine_EAttachmentRule RotationRule, FEngine_Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachToActor(class AEngine_Actor* ParentActor, const struct FName& SocketName, FEngine_Engine_EAttachmentRule LocationRule, FEngine_Engine_EAttachmentRule RotationRule, FEngine_Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentToActor(class AEngine_Actor* InParentActor, const struct FName& InSocketName, TEnumAsByte<FEngine_Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AttachRootComponentTo(class UEngine_SceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<FEngine_Engine_EAttachLocation> AttachLocationType, bool bWeldSimulatedBodies);
	void K2_AddActorWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddActorWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddActorWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddActorLocalTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddActorLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddActorLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	bool IsOverlappingActor(class AEngine_Actor* Other);
	bool IsChildActor();
	bool IsActorTickEnabled();
	bool IsActorBeingDestroyed();
	bool HasAuthority();
	float GetVerticalDistanceTo(class AEngine_Actor* OtherActor);
	struct FVector GetVelocity();
	struct FTransform GetTransform();
	bool GetTickableWhenPaused();
	float GetSquaredDistanceTo(class AEngine_Actor* OtherActor);
	TEnumAsByte<FEngine_Engine_ENetRole> GetRemoteRole();
	class UEngine_ChildActorComponent* GetParentComponent();
	class AEngine_Actor* GetParentActor();
	class AEngine_Actor* GetOwner();
	void GetOverlappingComponents(TArray<class UEngine_PrimitiveComponent*>* OverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AEngine_Actor*>* OverlappingActors);
	TEnumAsByte<FEngine_Engine_ENetRole> GetLocalRole();
	float GetLifeSpan();
	class AEngine_Controller* GetInstigatorController();
	class AEngine_Pawn* GetInstigator();
	struct FVector GetInputVectorAxisValue(const struct FInputCore_Key& InputAxisKey);
	float GetInputAxisValue(const struct FName& InputAxisName);
	float GetInputAxisKeyValue(const struct FInputCore_Key& InputAxisKey);
	float GetHorizontalDotProductTo(class AEngine_Actor* OtherActor);
	float GetHorizontalDistanceTo(class AEngine_Actor* OtherActor);
	float GetGameTimeSinceCreation();
	float GetDotProductTo(class AEngine_Actor* OtherActor);
	float GetDistanceTo(class AEngine_Actor* OtherActor);
	TArray<class UEngine_ActorComponent*> GetComponentsByTag(class UClass* ComponentClass, const struct FName& Tag);
	TArray<class UEngine_ActorComponent*> GetComponentsByInterface(class UClass* Interface);
	class UEngine_ActorComponent* GetComponentByClass(class UClass* ComponentClass);
	struct FName GetAttachParentSocketName();
	class AEngine_Actor* GetAttachParentActor();
	void GetAttachedActors(bool bResetArray, TArray<class AEngine_Actor*>* OutActors);
	void GetAllChildActors(bool bIncludeDescendants, TArray<class AEngine_Actor*>* ChildActors);
	struct FVector GetActorUpVector();
	float GetActorTimeDilation();
	float GetActorTickInterval();
	struct FVector GetActorScale3D();
	struct FVector GetActorRightVector();
	struct FVector GetActorRelativeScale3D();
	struct FVector GetActorForwardVector();
	void GetActorEyesViewPoint(struct FVector* OutLocation, struct FRotator* OutRotation);
	bool GetActorEnableCollision();
	void GetActorBounds(bool bOnlyCollidingComponents, struct FVector* Origin, struct FVector* BoxExtent);
	void ForceNetUpdate();
	void FlushNetDormancy();
	void EnableInput(class AEngine_PlayerController* PlayerController);
	void DisableInput(class AEngine_PlayerController* PlayerController);
	void DetachRootComponentFromParent(bool bMaintainWorldPosition);
	void AddTickPrerequisiteComponent(class UEngine_ActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AEngine_Actor* PrerequisiteActor);
	class UEngine_ActorComponent* AddComponent(const struct FName& TemplateName, bool bManualAttachment, const struct FTransform& RelativeTransform, class UObject* ComponentTemplateContext);
	bool ActorHasTag(const struct FName& Tag);
};


// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintFunctionLibrary : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintFunctionLibrary");
		return ptr;
	}

};


// Class Engine.ActorComponent
// 0x0088 (0x00B0 - 0x0028)
class UEngine_ActorComponent : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FEngine_ActorComponentTickFunction          PrimaryComponentTick;                                     // 0x0030(0x0030) (Edit, DisableEditOnInstance)
	TArray<struct FName>                               ComponentTags;                                            // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0080(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData02 : 3;                                        // 0x0084(0x0001)
	unsigned char                                      bReplicates : 1;                                          // 0x0084(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance)
	unsigned char                                      bNetAddressable : 1;                                      // 0x0084(0x0001)
	unsigned char                                      UnknownData03 : 3;                                        // 0x0084(0x0001)
	unsigned char                                      UnknownData04 : 7;                                        // 0x0085(0x0001)
	unsigned char                                      bAutoActivate : 1;                                        // 0x0085(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsActive : 1;                                            // 0x0086(0x0001) (Net, Transient)
	unsigned char                                      bEditableWhenInherited : 1;                               // 0x0086(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData05 : 1;                                        // 0x0086(0x0001)
	unsigned char                                      bCanEverAffectNavigation : 1;                             // 0x0086(0x0001) (Edit, Config)
	unsigned char                                      UnknownData06 : 1;                                        // 0x0086(0x0001)
	unsigned char                                      bIsEditorOnly : 1;                                        // 0x0086(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData07[0x1];                                       // 0x0087(0x0001) MISSED OFFSET
	FEngine_Engine_EComponentCreationMethod            CreationMethod;                                           // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      OnComponentActivated;                                     // 0x0089(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnComponentDeactivated;                                   // 0x008A(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x5];                                       // 0x008B(0x0005) MISSED OFFSET
	TArray<struct FEngine_SimpleMemberReference>       UCSModifiedProperties;                                    // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData09[0x10];                                      // 0x00A0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}


	void ToggleActive();
	void SetTickGroup(TEnumAsByte<FEngine_Engine_ETickingGroup> NewTickGroup);
	void SetTickableWhenPaused(bool bTickableWhenPaused);
	void SetIsReplicated(bool ShouldReplicate);
	void SetComponentTickInterval(float TickInterval);
	void SetComponentTickEnabled(bool bEnabled);
	void SetAutoActivate(bool bNewAutoActivate);
	void SetActive(bool bNewActive, bool bReset);
	void RemoveTickPrerequisiteComponent(class UEngine_ActorComponent* PrerequisiteComponent);
	void RemoveTickPrerequisiteActor(class AEngine_Actor* PrerequisiteActor);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(TEnumAsByte<FEngine_Engine_EEndPlayReason> EndPlayReason);
	void ReceiveBeginPlay();
	void OnRep_IsActive();
	void K2_DestroyComponent(class UObject* Object);
	bool IsComponentTickEnabled();
	bool IsBeingDestroyed();
	bool IsActive();
	class AEngine_Actor* GetOwner();
	float GetComponentTickInterval();
	void Deactivate();
	bool ComponentHasTag(const struct FName& Tag);
	void AddTickPrerequisiteComponent(class UEngine_ActorComponent* PrerequisiteComponent);
	void AddTickPrerequisiteActor(class AEngine_Actor* PrerequisiteActor);
	void Activate(bool bReset);
};


// Class Engine.SceneComponent
// 0x0140 (0x01F0 - 0x00B0)
class UEngine_SceneComponent : public UEngine_ActorComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	TWeakObjectPtr<class AEngine_PhysicsVolume>        PhysicsVolume;                                            // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_SceneComponent*                      AttachParent;                                             // 0x00C0(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FName                                       AttachSocketName;                                         // 0x00C8(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_SceneComponent*>              AttachChildren;                                           // 0x00D0(0x0010) (ExportObject, Net, ZeroConstructor, Transient)
	TArray<class UEngine_SceneComponent*>              ClientAttachedChildren;                                   // 0x00E0(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x00F0(0x002C) MISSED OFFSET
	struct FVector                                     RelativeLocation;                                         // 0x011C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0134(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ComponentVelocity;                                        // 0x0140(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bComponentToWorldUpdated : 1;                             // 0x014C(0x0001) (Transient)
	unsigned char                                      UnknownData02 : 1;                                        // 0x014C(0x0001)
	unsigned char                                      bAbsoluteLocation : 1;                                    // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteRotation : 1;                                    // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bAbsoluteScale : 1;                                       // 0x014C(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bVisible : 1;                                             // 0x014C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bHiddenInGame : 1;                                        // 0x014C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShouldBeAttached : 1;                                    // 0x014C(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapLocationWhenAttached : 1;                      // 0x014D(0x0001) (Net, Transient)
	unsigned char                                      bShouldSnapRotationWhenAttached : 1;                      // 0x014D(0x0001) (Net, Transient)
	unsigned char                                      bShouldUpdatePhysicsVolume : 1;                           // 0x014D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBoundsChangeTriggersStreamingDataRebuild : 1;            // 0x014D(0x0001)
	unsigned char                                      bUseAttachParentBound : 1;                                // 0x014D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x1];                                       // 0x014E(0x0001) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EComponentMobility>     Mobility;                                                 // 0x014F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDetailMode>            DetailMode;                                               // 0x0150(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PhysicsVolumeChangedDelegate;                             // 0x0151(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData04[0x9E];                                      // 0x0152(0x009E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneComponent");
		return ptr;
	}


	void ToggleVisibility(bool bPropagateToChildren);
	bool SnapTo(class UEngine_SceneComponent* InParent, const struct FName& InSocketName);
	void SetWorldScale3D(const struct FVector& NewScale);
	void SetVisibility(bool bNewVisibility, bool bPropagateToChildren);
	void SetShouldUpdatePhysicsVolume(bool bInShouldUpdatePhysicsVolume);
	void SetRelativeScale3D(const struct FVector& NewScale3D);
	void SetMobility(TEnumAsByte<FEngine_Engine_EComponentMobility> NewMobility);
	void SetHiddenInGame(bool NewHidden, bool bPropagateToChildren);
	void SetAbsolute(bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	void ResetRelativeTransform();
	void OnRep_Visibility(bool OldValue);
	void OnRep_Transform();
	void OnRep_AttachSocketName();
	void OnRep_AttachParent();
	void OnRep_AttachChildren();
	void K2_SetWorldTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetWorldRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetWorldLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetWorldLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetRelativeTransform(const struct FTransform& NewTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetRelativeRotation(const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_SetRelativeLocation(const struct FVector& NewLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	struct FTransform K2_GetComponentToWorld();
	struct FVector K2_GetComponentScale();
	struct FRotator K2_GetComponentRotation();
	struct FVector K2_GetComponentLocation();
	void K2_DetachFromComponent(FEngine_Engine_EDetachmentRule LocationRule, FEngine_Engine_EDetachmentRule RotationRule, FEngine_Engine_EDetachmentRule ScaleRule, bool bCallModify);
	bool K2_AttachToComponent(class UEngine_SceneComponent* Parent, const struct FName& SocketName, FEngine_Engine_EAttachmentRule LocationRule, FEngine_Engine_EAttachmentRule RotationRule, FEngine_Engine_EAttachmentRule ScaleRule, bool bWeldSimulatedBodies);
	bool K2_AttachTo(class UEngine_SceneComponent* InParent, const struct FName& InSocketName, TEnumAsByte<FEngine_Engine_EAttachLocation> AttachType, bool bWeldSimulatedBodies);
	void K2_AddWorldTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddWorldRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddWorldOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddRelativeRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddRelativeLocation(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddLocalTransform(const struct FTransform& DeltaTransform, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddLocalRotation(const struct FRotator& DeltaRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	void K2_AddLocalOffset(const struct FVector& DeltaLocation, bool bSweep, bool bTeleport, struct FEngine_HitResult* SweepHitResult);
	bool IsVisible();
	bool IsSimulatingPhysics(const struct FName& BoneName);
	bool IsAnySimulatingPhysics();
	struct FVector GetUpVector();
	struct FTransform GetSocketTransform(const struct FName& InSocketName, TEnumAsByte<FEngine_Engine_ERelativeTransformSpace> TransformSpace);
	struct FRotator GetSocketRotation(const struct FName& InSocketName);
	struct FQuat GetSocketQuaternion(const struct FName& InSocketName);
	struct FVector GetSocketLocation(const struct FName& InSocketName);
	bool GetShouldUpdatePhysicsVolume();
	struct FVector GetRightVector();
	struct FTransform GetRelativeTransform();
	class AEngine_PhysicsVolume* GetPhysicsVolume();
	void GetParentComponents(TArray<class UEngine_SceneComponent*>* Parents);
	int GetNumChildrenComponents();
	struct FVector GetForwardVector();
	struct FVector GetComponentVelocity();
	void GetChildrenComponents(bool bIncludeAllDescendants, TArray<class UEngine_SceneComponent*>* Children);
	class UEngine_SceneComponent* GetChildComponent(int ChildIndex);
	struct FName GetAttachSocketName();
	class UEngine_SceneComponent* GetAttachParent();
	TArray<struct FName> GetAllSocketNames();
	bool DoesSocketExist(const struct FName& InSocketName);
	void DetachFromParent(bool bMaintainWorldPosition, bool bCallModify);
};


// Class Engine.PrimitiveComponent
// 0x01F0 (0x03E0 - 0x01F0)
class UEngine_PrimitiveComponent : public UEngine_SceneComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET
	float                                              MinDrawDistance;                                          // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LDMaxDrawDistance;                                        // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CachedMaxDrawDistance;                                    // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESceneDepthPriorityGroup> DepthPriorityGroup;                                       // 0x0204(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESceneDepthPriorityGroup> ViewOwnerDepthPriorityGroup;                              // 0x0205(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EIndirectLightingCacheQuality> IndirectLightingCacheQuality;                             // 0x0206(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ELightmapType                       LightmapType;                                             // 0x0207(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseMaxLODAsImposter : 1;                                 // 0x0208(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBatchImpostersAsInstances : 1;                           // 0x0208(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNeverDistanceCull : 1;                                   // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01 : 4;                                        // 0x0208(0x0001)
	unsigned char                                      bAlwaysCreatePhysicsState : 1;                            // 0x0208(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bGenerateOverlapEvents : 1;                               // 0x0209(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bMultiBodyOverlap : 1;                                    // 0x0209(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTraceComplexOnMove : 1;                                  // 0x0209(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReturnMaterialOnMove : 1;                                // 0x0209(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x0209(0x0001)
	unsigned char                                      bAllowCullDistanceVolume : 1;                             // 0x0209(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasMotionBlurVelocityMeshes : 1;                         // 0x0209(0x0001)
	unsigned char                                      bVisibleInReflectionCaptures : 1;                         // 0x0209(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bVisibleInRayTracing : 1;                                 // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInMainPass : 1;                                    // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRenderInDepthPass : 1;                                   // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceivesDecals : 1;                                      // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOwnerNoSee : 1;                                          // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOnlyOwnerSee : 1;                                        // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTreatAsBackgroundForOcclusion : 1;                       // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseAsOccluder : 1;                                       // 0x020A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelectable : 1;                                          // 0x020B(0x0001)
	unsigned char                                      bForceMipStreaming : 1;                                   // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bHasPerInstanceHitProxies : 1;                            // 0x020B(0x0001)
	unsigned char                                      CastShadow : 1;                                           // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDistanceFieldLighting : 1;                         // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDynamicShadow : 1;                                   // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastStaticShadow : 1;                                    // 0x020B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricTranslucentShadow : 1;                     // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSelfShadowOnly : 1;                                      // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastFarShadow : 1;                                       // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastInsetShadow : 1;                                     // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCinematicShadow : 1;                                 // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastHiddenShadow : 1;                                    // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowAsTwoSided : 1;                                // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bLightAsIfStatic : 1;                                     // 0x020C(0x0001) (Deprecated)
	unsigned char                                      bLightAttachmentsAsGroup : 1;                             // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bExcludeFromLightAttachmentGroup : 1;                     // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bReceiveMobileCSMShadows : 1;                             // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSingleSampleShadowFromStationaryLights : 1;              // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreRadialImpulse : 1;                                 // 0x020D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreRadialForce : 1;                                   // 0x020D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bApplyImpulseOnDamage : 1;                                // 0x020D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bReplicatePhysicsToAutonomousProxy : 1;                   // 0x020D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      AlwaysLoadOnClient : 1;                                   // 0x020E(0x0001)
	unsigned char                                      AlwaysLoadOnServer : 1;                                   // 0x020E(0x0001)
	unsigned char                                      bUseEditorCompositing : 1;                                // 0x020E(0x0001)
	unsigned char                                      bRenderCustomDepth : 1;                                   // 0x020E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<FEngine_Engine_EHasCustomNavigableGeometry> bHasCustomNavigableGeometry;                              // 0x020F(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0210(0x0001) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ECanBeCharacterBase>    CanCharacterStepUpOn;                                     // 0x0211(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_LightingChannels                    LightingChannels;                                         // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	FEngine_Engine_ERendererStencilMask                CustomDepthStencilWriteMask;                              // 0x0213(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CustomDepthStencilValue;                                  // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_CustomPrimitiveData                 CustomPrimitiveData;                                      // 0x0218(0x0010) (Edit)
	int                                                TranslucencySortPriority;                                 // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                VisibilityId;                                             // 0x022C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_RuntimeVirtualTexture*>       RuntimeVirtualTextures;                                   // 0x0230(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	int8_t                                             VirtualTextureLodBias;                                    // 0x0240(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureCullMips;                                   // 0x0241(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int8_t                                             VirtualTextureMinCoverage;                                // 0x0242(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ERuntimeVirtualTextureMainPassType  VirtualTextureRenderPassType;                             // 0x0243(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	float                                              LpvBiasMultiplier;                                        // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x024C(0x0008) MISSED OFFSET
	float                                              BoundsScale;                                              // 0x0254(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0258(0x0010) MISSED OFFSET
	TArray<class AEngine_Actor*>                       MoveIgnoreActors;                                         // 0x0268(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_PrimitiveComponent*>          MoveIgnoreComponents;                                     // 0x0278(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData06[0x10];                                      // 0x0288(0x0010) MISSED OFFSET
	struct FEngine_BodyInstance                        BodyInstance;                                             // 0x0298(0x0110) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      OnComponentHit;                                           // 0x03A8(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnComponentBeginOverlap;                                  // 0x03A9(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnComponentEndOverlap;                                    // 0x03AA(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnComponentWake;                                          // 0x03AB(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnComponentSleep;                                         // 0x03AC(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x1];                                       // 0x03AD(0x0001) MISSED OFFSET
	unsigned char                                      OnBeginCursorOver;                                        // 0x03AE(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnEndCursorOver;                                          // 0x03AF(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnClicked;                                                // 0x03B0(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnReleased;                                               // 0x03B1(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchBegin;                                        // 0x03B2(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchEnd;                                          // 0x03B3(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchEnter;                                        // 0x03B4(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      OnInputTouchLeave;                                        // 0x03B5(0x0001) (InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x1A];                                      // 0x03B6(0x001A) MISSED OFFSET
	class UEngine_PrimitiveComponent*                  LODParentPrimitive;                                       // 0x03D0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData09[0x8];                                       // 0x03D8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}


	void WakeRigidBody(const struct FName& BoneName);
	void WakeAllRigidBodies();
	void SetWalkableSlopeOverride(const struct FEngine_WalkableSlopeOverride& NewOverride);
	void SetUseCCD(bool InUseCCD, const struct FName& BoneName);
	void SetTranslucentSortPriority(int NewTranslucentSortPriority);
	void SetSingleSampleShadowFromStationaryLights(bool bNewSingleSampleShadowFromStationaryLights);
	void SetSimulatePhysics(bool bSimulate);
	void SetRenderInMainPass(bool bValue);
	void SetRenderCustomDepth(bool bValue);
	void SetReceivesDecals(bool bNewReceivesDecals);
	void SetPhysMaterialOverride(class UEngine_PhysicalMaterial* NewPhysMaterial);
	void SetPhysicsMaxAngularVelocityInRadians(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocityInDegrees(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsMaxAngularVelocity(float NewMaxAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetPhysicsAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent, const struct FName& BoneName);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetMaterialByName(const struct FName& MaterialSlotName, class UEngine_MaterialInterface* Material);
	void SetMaterial(int ElementIndex, class UEngine_MaterialInterface* Material);
	void SetMassScale(const struct FName& BoneName, float InMassScale);
	void SetMassOverrideInKg(const struct FName& BoneName, float MassInKg, bool bOverrideMass);
	void SetLinearDamping(float InDamping);
	void SetLightAttachmentsAsGroup(bool bInLightAttachmentsAsGroup);
	void SetGenerateOverlapEvents(bool bInGenerateOverlapEvents);
	void SetExcludeFromLightAttachmentGroup(bool bInExcludeFromLightAttachmentGroup);
	void SetEnableGravity(bool bGravityEnabled);
	void SetCustomPrimitiveDataVector4(int DataIndex, const struct FVector4& Value);
	void SetCustomPrimitiveDataVector3(int DataIndex, const struct FVector& Value);
	void SetCustomPrimitiveDataVector2(int DataIndex, const struct FVector2D& Value);
	void SetCustomPrimitiveDataFloat(int DataIndex, float Value);
	void SetCustomDepthStencilWriteMask(FEngine_Engine_ERendererStencilMask WriteMaskBit);
	void SetCustomDepthStencilValue(int Value);
	void SetCullDistance(float NewCullDistance);
	void SetConstraintMode(TEnumAsByte<FEngine_Engine_EDOFMode> ConstraintMode);
	void SetCollisionResponseToChannel(TEnumAsByte<FEngine_Engine_ECollisionChannel> Channel, TEnumAsByte<FEngine_Engine_ECollisionResponse> NewResponse);
	void SetCollisionResponseToAllChannels(TEnumAsByte<FEngine_Engine_ECollisionResponse> NewResponse);
	void SetCollisionProfileName(const struct FName& InCollisionProfileName);
	void SetCollisionObjectType(TEnumAsByte<FEngine_Engine_ECollisionChannel> Channel);
	void SetCollisionEnabled(TEnumAsByte<FEngine_Engine_ECollisionEnabled> NewType);
	void SetCenterOfMass(const struct FVector& CenterOfMassOffset, const struct FName& BoneName);
	void SetCastShadow(bool NewCastShadow);
	void SetCastInsetShadow(bool bInCastInsetShadow);
	void SetBoundsScale(float NewBoundsScale);
	void SetAngularDamping(float InDamping);
	void SetAllUseCCD(bool InUseCCD);
	void SetAllPhysicsLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInRadians(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllPhysicsAngularVelocityInDegrees(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetAllMassScale(float InMassScale);
	struct FVector ScaleByMomentOfInertia(const struct FVector& InputVector, const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	bool K2_SphereTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, float SphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FEngine_HitResult* OutHit);
	bool K2_SphereOverlapComponent(const struct FVector& InSphereCentre, float InSphereRadius, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FEngine_HitResult* OutHit);
	bool K2_LineTraceComponent(const struct FVector& TraceStart, const struct FVector& TraceEnd, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FEngine_HitResult* OutHit);
	bool K2_IsQueryCollisionEnabled();
	bool K2_IsPhysicsCollisionEnabled();
	bool K2_IsCollisionEnabled();
	bool K2_BoxOverlapComponent(const struct FVector& InBoxCentre, const struct FBox& InBox, bool bTraceComplex, bool bShowTrace, bool bPersistentShowTrace, struct FVector* HitLocation, struct FVector* HitNormal, struct FName* BoneName, struct FEngine_HitResult* OutHit);
	bool IsOverlappingComponent(class UEngine_PrimitiveComponent* OtherComp);
	bool IsOverlappingActor(class AEngine_Actor* Other);
	bool IsGravityEnabled();
	bool IsAnyRigidBodyAwake();
	void IgnoreComponentWhenMoving(class UEngine_PrimitiveComponent* Component, bool bShouldIgnore);
	void IgnoreActorWhenMoving(class AEngine_Actor* Actor, bool bShouldIgnore);
	struct FEngine_WalkableSlopeOverride GetWalkableSlopeOverride();
	struct FVector GetPhysicsLinearVelocityAtPoint(const struct FVector& Point, const struct FName& BoneName);
	struct FVector GetPhysicsLinearVelocity(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocityInRadians(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocityInDegrees(const struct FName& BoneName);
	struct FVector GetPhysicsAngularVelocity(const struct FName& BoneName);
	void GetOverlappingComponents(TArray<class UEngine_PrimitiveComponent*>* OutOverlappingComponents);
	void GetOverlappingActors(class UClass* ClassFilter, TArray<class AEngine_Actor*>* OverlappingActors);
	int GetNumMaterials();
	class UEngine_MaterialInterface* GetMaterialFromCollisionFaceIndex(int FaceIndex, int* SectionIndex);
	class UEngine_MaterialInterface* GetMaterial(int ElementIndex);
	float GetMassScale(const struct FName& BoneName);
	float GetMass();
	float GetLinearDamping();
	struct FVector GetInertiaTensor(const struct FName& BoneName);
	bool GetGenerateOverlapEvents();
	TEnumAsByte<FEngine_Engine_ECollisionResponse> GetCollisionResponseToChannel(TEnumAsByte<FEngine_Engine_ECollisionChannel> Channel);
	struct FName GetCollisionProfileName();
	TEnumAsByte<FEngine_Engine_ECollisionChannel> GetCollisionObjectType();
	TEnumAsByte<FEngine_Engine_ECollisionEnabled> GetCollisionEnabled();
	float GetClosestPointOnCollision(const struct FVector& Point, const struct FName& BoneName, struct FVector* OutPointOnBody);
	struct FVector GetCenterOfMass(const struct FName& BoneName);
	float GetAngularDamping();
	class UEngine_MaterialInstanceDynamic* CreateDynamicMaterialInstance(int ElementIndex, class UEngine_MaterialInterface* SourceMaterial, const struct FName& OptionalName);
	class UEngine_MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamicFromMaterial(int ElementIndex, class UEngine_MaterialInterface* Parent);
	class UEngine_MaterialInstanceDynamic* CreateAndSetMaterialInstanceDynamic(int ElementIndex);
	TArray<class UEngine_PrimitiveComponent*> CopyArrayOfMoveIgnoreComponents();
	TArray<class AEngine_Actor*> CopyArrayOfMoveIgnoreActors();
	void ClearMoveIgnoreComponents();
	void ClearMoveIgnoreActors();
	bool CanCharacterStepUp(class AEngine_Pawn* Pawn);
	void AddTorqueInRadians(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorqueInDegrees(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName, bool bAccelChange);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<FEngine_Engine_ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<FEngine_Engine_ERadialImpulseFalloff> Falloff, bool bAccelChange);
	void AddImpulseAtLocation(const struct FVector& Impulse, const struct FVector& Location, const struct FName& BoneName);
	void AddImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddForceAtLocationLocal(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void AddForceAtLocation(const struct FVector& force, const struct FVector& Location, const struct FName& BoneName);
	void AddForce(const struct FVector& force, const struct FName& BoneName, bool bAccelChange);
	void AddAngularImpulseInRadians(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulseInDegrees(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
	void AddAngularImpulse(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.MeshComponent
// 0x0020 (0x0400 - 0x03E0)
class UEngine_MeshComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x03E0(0x0018) MISSED OFFSET
	unsigned char                                      bEnableMaterialParameterCaching : 1;                      // 0x03F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x7];                                       // 0x03F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}


	void SetVectorParameterValueOnMaterials(const struct FName& ParameterName, const struct FVector& ParameterValue);
	void SetScalarParameterValueOnMaterials(const struct FName& ParameterName, float ParameterValue);
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);
	bool IsMaterialSlotNameValid(const struct FName& MaterialSlotName);
	TArray<struct FName> GetMaterialSlotNames();
	TArray<class UEngine_MaterialInterface*> GetMaterials();
	int GetMaterialIndex(const struct FName& MaterialSlotName);
};


// Class Engine.SkinnedMeshComponent
// 0x0210 (0x0610 - 0x0400)
class UEngine_SkinnedMeshComponent : public UEngine_MeshComponent
{
public:
	class UEngine_SkeletalMesh*                        SkeletalMesh;                                             // 0x0400(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UEngine_SkinnedMeshComponent> MasterPoseComponent;                                      // 0x0408(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0410(0x00F8) MISSED OFFSET
	class UEngine_PhysicsAsset*                        PhysicsAssetOverride;                                     // 0x0508(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                ForcedLodModel;                                           // 0x0510(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                MinLodModel;                                              // 0x0514(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0518(0x0008) MISSED OFFSET
	float                                              StreamingDistanceMultiplier;                              // 0x0520(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0524(0x000C) MISSED OFFSET
	TArray<struct FEngine_SkelMeshComponentLODInfo>    LODInfo;                                                  // 0x0530(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0x24];                                      // 0x0540(0x0024) MISSED OFFSET
	FEngine_Engine_EVisibilityBasedAnimTickOption      VisibilityBasedAnimTickOption;                            // 0x0564(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0565(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData05 : 2;                                        // 0x0566(0x0001)
	unsigned char                                      bOverrideMinLod : 1;                                      // 0x0566(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseBoundsFromMasterPoseComponent : 1;                    // 0x0566(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceWireframe : 1;                                      // 0x0566(0x0001)
	unsigned char                                      bDisplayBones : 1;                                        // 0x0566(0x0001) (Deprecated)
	unsigned char                                      bDisableMorphTarget : 1;                                  // 0x0566(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideSkin : 1;                                            // 0x0566(0x0001)
	unsigned char                                      bPerBoneMotionBlur : 1;                                   // 0x0567(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentUseFixedSkelBounds : 1;                         // 0x0567(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bConsiderAllBodiesForBounds : 1;                          // 0x0567(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSyncAttachParentLOD : 1;                                 // 0x0567(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanHighlightSelectedSections : 1;                        // 0x0567(0x0001) (Transient)
	unsigned char                                      bRecentlyRendered : 1;                                    // 0x0567(0x0001) (Transient)
	unsigned char                                      bCastCapsuleDirectShadow : 1;                             // 0x0567(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastCapsuleIndirectShadow : 1;                           // 0x0567(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCPUSkinning : 1;                                         // 0x0568(0x0001) (Transient)
	unsigned char                                      bEnableUpdateRateOptimizations : 1;                       // 0x0568(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisplayDebugUpdateRateOptimizations : 1;                 // 0x0568(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRenderStatic : 1;                                        // 0x0568(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIgnoreMasterPoseComponentLOD : 1;                        // 0x0568(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06 : 2;                                        // 0x0568(0x0001)
	unsigned char                                      bCachedLocalBoundsUpToDate : 1;                           // 0x0568(0x0001) (Transient)
	unsigned char                                      UnknownData07 : 1;                                        // 0x0569(0x0001)
	unsigned char                                      bForceMeshObjectUpdate : 1;                               // 0x0569(0x0001) (Transient)
	unsigned char                                      UnknownData08[0x2];                                       // 0x056A(0x0002) MISSED OFFSET
	float                                              CapsuleIndirectShadowMinVisibility;                       // 0x056C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x20];                                      // 0x0570(0x0020) MISSED OFFSET
	struct FBoxSphereBounds                            CachedWorldSpaceBounds;                                   // 0x0590(0x001C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x05AC(0x0004) MISSED OFFSET
	struct FMatrix                                     CachedWorldToLocalTransform;                              // 0x05B0(0x0040) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData11[0x20];                                      // 0x05F0(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkinnedMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkinnedMeshComponent");
		return ptr;
	}


	void UnloadSkinWeightProfile(const struct FName& InProfileName);
	void UnHideBoneByName(const struct FName& BoneName);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void ShowMaterialSection(int MaterialID, int SectionIndex, bool bShow, int LODIndex);
	void ShowAllMaterialSections(int LODIndex);
	void SetVertexColorOverride_LinearColor(int LODIndex, TArray<struct FLinearColor> VertexColors);
	bool SetSkinWeightProfile(const struct FName& InProfileName);
	void SetSkinWeightOverride(int LODIndex, TArray<struct FEngine_SkelMeshSkinWeightInfo> SkinWeights);
	void SetSkeletalMesh(class UEngine_SkeletalMesh* NewMesh, bool bReinitPose);
	void SetRenderStatic(bool bNewValue);
	void SetPhysicsAsset(class UEngine_PhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetMinLOD(int InNewMinLOD);
	void SetMasterPoseComponent(class UEngine_SkinnedMeshComponent* NewMasterBoneComponent, bool bForceUpdate);
	void SetForcedLOD(int InNewForcedLOD);
	void SetCastCapsuleIndirectShadow(bool bNewValue);
	void SetCastCapsuleDirectShadow(bool bNewValue);
	void SetCapsuleIndirectShadowMinVisibility(float NewValue);
	bool IsUsingSkinWeightProfile();
	bool IsMaterialSectionShown(int MaterialID, int LODIndex);
	bool IsBoneHiddenByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<FEngine_Engine_EPhysBodyOp> PhysBodyOption);
	bool GetTwistAndSwingAngleOfDeltaRotationFromRefPose(const struct FName& BoneName, float* OutTwistAngle, float* OutSwingAngle);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	struct FVector GetRefPosePosition(int BoneIndex);
	struct FName GetParentBone(const struct FName& BoneName);
	int GetNumLODs();
	int GetNumBones();
	int GetForcedLOD();
	struct FTransform GetDeltaTransformFromRefPose(const struct FName& BoneName, const struct FName& BaseName);
	struct FName GetCurrentSkinWeightProfileName();
	struct FName GetBoneName(int BoneIndex);
	int GetBoneIndex(const struct FName& BoneName);
	struct FName FindClosestBone_K2(const struct FVector& TestLocation, float IgnoreScale, bool bRequirePhysicsAsset, struct FVector* BoneLocation);
	void ClearVertexColorOverride(int LODIndex);
	void ClearSkinWeightProfile();
	void ClearSkinWeightOverride(int LODIndex);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
};


// Class Engine.SkeletalMeshComponent
// 0x0490 (0x0AA0 - 0x0610)
class UEngine_SkeletalMeshComponent : public UEngine_SkinnedMeshComponent
{
public:
	class UEngine_AnimBlueprintGeneratedClass*         AnimBlueprintGeneratedClass;                              // 0x0610(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x0618(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_AnimInstance*                        AnimScriptInstance;                                       // 0x0620(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_AnimInstance*                        PostProcessAnimInstance;                                  // 0x0628(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FEngine_SingleAnimationPlayData             AnimationData;                                            // 0x0630(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0648(0x0010) MISSED OFFSET
	struct FVector                                     RootBoneTranslation;                                      // 0x0658(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x0664(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0670(0x0020) MISSED OFFSET
	TArray<class UEngine_AnimInstance*>                LinkedInstances;                                          // 0x0690(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedBoneSpaceTransforms;                                // 0x06A0(0x0010) (ZeroConstructor, Transient)
	TArray<struct FTransform>                          CachedComponentSpaceTransforms;                           // 0x06B0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData02[0x20];                                      // 0x06C0(0x0020) MISSED OFFSET
	float                                              GlobalAnimRateScale;                                      // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EKinematicBonesUpdateToPhysics> KinematicBonesUpdateType;                                 // 0x06E4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EPhysicsTransformUpdateMode> PhysicsTransformUpdateMode;                               // 0x06E5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x1];                                       // 0x06E6(0x0001) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAnimationMode>         AnimationMode;                                            // 0x06E7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x06E8(0x0001) MISSED OFFSET
	unsigned char                                      bDisablePostProcessBlueprint : 1;                         // 0x06E9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05 : 1;                                        // 0x06E9(0x0001)
	unsigned char                                      bUpdateOverlapsOnAnimationFinalize : 1;                   // 0x06E9(0x0001) (Edit)
	unsigned char                                      UnknownData06 : 1;                                        // 0x06E9(0x0001)
	unsigned char                                      bHasValidBodies : 1;                                      // 0x06E9(0x0001) (Transient)
	unsigned char                                      UnknownData07 : 1;                                        // 0x06E9(0x0001)
	unsigned char                                      bBlendPhysics : 1;                                        // 0x06E9(0x0001) (Transient)
	unsigned char                                      bEnablePhysicsOnDedicatedServer : 1;                      // 0x06E9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateJointsFromAnimation : 1;                           // 0x06EA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableClothSimulation : 1;                              // 0x06EA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAllowAnimCurveEvaluation : 1;                            // 0x06EA(0x0001) (Edit)
	unsigned char                                      bDisableAnimCurves : 1;                                   // 0x06EA(0x0001) (Deprecated)
	unsigned char                                      UnknownData08 : 3;                                        // 0x06EA(0x0001)
	unsigned char                                      bCollideWithEnvironment : 1;                              // 0x06EA(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCollideWithAttachedChildren : 1;                         // 0x06EB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLocalSpaceSimulation : 1;                                // 0x06EB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bResetAfterTeleport : 1;                                  // 0x06EB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData09 : 1;                                        // 0x06EB(0x0001)
	unsigned char                                      bDeferKinematicBoneUpdate : 1;                            // 0x06EB(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNoSkeletonUpdate : 1;                                    // 0x06EB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPauseAnims : 1;                                          // 0x06EB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseRefPoseOnInitAnim : 1;                                // 0x06EB(0x0001) (Edit)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x06EC(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceRefpose : 1;                                        // 0x06EC(0x0001)
	unsigned char                                      bOnlyAllowAutonomousTickPose : 1;                         // 0x06EC(0x0001) (Transient)
	unsigned char                                      bIsAutonomousTickPose : 1;                                // 0x06EC(0x0001) (Transient)
	unsigned char                                      bOldForceRefPose : 1;                                     // 0x06EC(0x0001)
	unsigned char                                      bShowPrePhysBones : 1;                                    // 0x06EC(0x0001)
	unsigned char                                      bRequiredBonesUpToDate : 1;                               // 0x06EC(0x0001) (Transient)
	unsigned char                                      bAnimTreeInitialised : 1;                                 // 0x06EC(0x0001) (Transient)
	unsigned char                                      bIncludeComponentLocationIntoBounds : 1;                  // 0x06ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableLineCheckWithBounds : 1;                           // 0x06ED(0x0001)
	unsigned char                                      bUseBendingElements : 1;                                  // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseTetrahedralConstraints : 1;                           // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseThinShellVolumeConstraints : 1;                       // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseSelfCollisions : 1;                                   // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseContinuousCollisionDetection : 1;                     // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPropagateCurvesToSlaves : 1;                             // 0x06ED(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipKinematicUpdateWhenInterpolating : 1;                // 0x06EE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipBoundsUpdateWhenInterpolating : 1;                   // 0x06EE(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10 : 1;                                        // 0x06EE(0x0001)
	unsigned char                                      bNeedsQueuedAnimEventsDispatched : 1;                     // 0x06EE(0x0001) (Transient)
	unsigned char                                      UnknownData11[0x1];                                       // 0x06EF(0x0001) MISSED OFFSET
	uint16_t                                           CachedAnimCurveUidVersion;                                // 0x06F0(0x0002) (ZeroConstructor, Transient, IsPlainOldData)
	FEngine_Engine_EClothMassMode                      MassMode;                                                 // 0x06F2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x1];                                       // 0x06F3(0x0001) MISSED OFFSET
	float                                              UniformMass;                                              // 0x06F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TotalMass;                                                // 0x06F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Density;                                                  // 0x06FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinPerParticleMass;                                       // 0x0700(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ClothBlendWeight;                                         // 0x0704(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              EdgeStiffness;                                            // 0x0708(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BendingStiffness;                                         // 0x070C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AreaStiffness;                                            // 0x0710(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeStiffness;                                          // 0x0714(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StrainLimitingStiffness;                                  // 0x0718(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ShapeTargetStiffness;                                     // 0x071C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               DisallowedAnimCurves;                                     // 0x0720(0x0010) (ZeroConstructor, Transient)
	class UEngine_BodySetup*                           BodySetup;                                                // 0x0730(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0738(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0740(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UClass*                                      ClothingSimulationFactory;                                // 0x0750(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0xD0];                                      // 0x0758(0x00D0) MISSED OFFSET
	float                                              TeleportDistanceThreshold;                                // 0x0828(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TeleportRotationThreshold;                                // 0x082C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0830(0x0008) MISSED OFFSET
	uint32_t                                           LastPoseTickFrame;                                        // 0x0838(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x54];                                      // 0x083C(0x0054) MISSED OFFSET
	class UClothingSystemRuntimeInterface_ClothingSimulationInteractor* ClothingInteractor;                                       // 0x0890(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData17[0xC8];                                      // 0x0898(0x00C8) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAnimInitialized;                                        // 0x0960(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData18[0x130];                                     // 0x0970(0x0130) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}


	void UnlinkAnimClassLayers(class UClass* InClass);
	void UnbindClothFromMasterPoseComponent(bool bRestoreSimulationSpace);
	void ToggleDisablePostProcessBlueprint();
	void TermBodiesBelow(const struct FName& ParentBoneName);
	void SuspendClothingSimulation();
	void Stop();
	void SnapshotPose(struct FEngine_PoseSnapshot* Snapshot);
	void SetUpdateAnimationInEditor(bool NewUpdateState);
	void SetTeleportRotationThreshold(float Threshold);
	void SetTeleportDistanceThreshold(float Threshold);
	void SetPosition(float InPos, bool bFireNotifies);
	void SetPlayRate(float Rate);
	void SetPhysicsBlendWeight(float PhysicsBlendWeight);
	void SetNotifyRigidBodyCollisionBelow(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName, bool bIncludeSelf);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value, bool bRemoveZeroWeight);
	void SetEnablePhysicsBlending(bool bNewBlendPhysics);
	void SetEnableGravityOnAllBodiesBelow(bool bEnableGravity, const struct FName& BoneName, bool bIncludeSelf);
	void SetEnableBodyGravity(bool bEnableGravity, const struct FName& BoneName);
	void SetDisablePostProcessBlueprint(bool bInDisablePostProcess);
	void SetDisableAnimCurves(bool bInDisableAnimCurves);
	void SetConstraintProfileForAll(const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetConstraintProfile(const struct FName& JointName, const struct FName& ProfileName, bool bDefaultIfNotFound);
	void SetClothMaxDistanceScale(float Scale);
	void SetBodyNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision, const struct FName& BoneName);
	void SetAnimClass(class UClass* NewClass);
	void SetAnimationMode(TEnumAsByte<FEngine_Engine_EAnimationMode> InAnimationMode);
	void SetAnimation(class UEngine_AnimationAsset* NewAnimToPlay);
	void SetAngularLimits(const struct FName& InBoneName, float Swing1LimitAngle, float TwistLimitAngle, float Swing2LimitAngle);
	void SetAllowedAnimCurvesEvaluation(TArray<struct FName> List, bool bAllow);
	void SetAllowAnimCurveEvaluation(bool bInAllow);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, bool bSkipCustomPhysicsType);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, bool bSkipCustomPhysicsType);
	void SetAllBodiesSimulatePhysics(bool bNewSimulate);
	void SetAllBodiesPhysicsBlendWeight(float PhysicsBlendWeight, bool bSkipCustomPhysicsType);
	void SetAllBodiesBelowSimulatePhysics(const struct FName& InBoneName, bool bNewSimulate, bool bIncludeSelf);
	void SetAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float PhysicsBlendWeight, bool bSkipCustomPhysicsType, bool bIncludeSelf);
	void ResumeClothingSimulation();
	void ResetClothTeleportMode();
	void ResetAnimInstanceDynamics(FEngine_Engine_ETeleportType InTeleportType);
	void ResetAllowedAnimCurveEvaluation();
	void ResetAllBodiesSimulatePhysics();
	void PlayAnimation(class UEngine_AnimationAsset* NewAnimToPlay, bool bLooping);
	void Play(bool bLooping);
	void OverrideAnimationData(class UEngine_AnimationAsset* InAnimToPlay, bool bIsLooping, bool bIsPlaying, float Position, float PlayRate);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool K2_GetClosestPointOnPhysicsAsset(const struct FVector& WorldPosition, struct FVector* ClosestWorldPosition, struct FVector* Normal, struct FName* BoneName, float* Distance);
	bool IsPlaying();
	bool IsClothingSimulationSuspended();
	bool IsBodyGravityEnabled(const struct FName& BoneName);
	bool HasValidAnimationInstance();
	float GetTeleportRotationThreshold();
	float GetTeleportDistanceThreshold();
	struct FVector GetSkeletalCenterOfMass();
	class UEngine_AnimInstance* GetPostProcessInstance();
	float GetPosition();
	float GetPlayRate();
	float GetMorphTarget(const struct FName& MorphTargetName);
	class UEngine_AnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UEngine_AnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UEngine_AnimInstance*>* OutLinkedInstances);
	class UEngine_AnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	bool GetDisablePostProcessBlueprint();
	bool GetDisableAnimCurves();
	void GetCurrentJointAngles(const struct FName& InBoneName, float* Swing1Angle, float* TwistAngle, float* Swing2Angle);
	float GetClothMaxDistanceScale();
	class UClothingSystemRuntimeInterface_ClothingSimulationInteractor* GetClothingSimulationInteractor();
	float GetBoneMass(const struct FName& BoneName, bool bScaleMass);
	class UEngine_AnimInstance* GetAnimInstance();
	class UClass* GetAnimClass();
	TEnumAsByte<FEngine_Engine_EAnimationMode> GetAnimationMode();
	bool GetAllowedAnimCurveEvaluate();
	void ForceClothNextUpdateTeleportAndReset();
	void ForceClothNextUpdateTeleport();
	struct FName FindConstraintBoneName(int ConstraintIndex);
	void ClearMorphTargets();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName);
	void BindClothToMasterPoseComponent();
	void AllowAnimCurveEvaluation(const struct FName& NameOfCurve, bool bAllow);
	void AddImpulseToAllBodiesBelow(const struct FVector& Impulse, const struct FName& BoneName, bool bVelChange, bool bIncludeSelf);
	void AddForceToAllBodiesBelow(const struct FVector& force, const struct FName& BoneName, bool bAccelChange, bool bIncludeSelf);
	void AccumulateAllBodiesBelowPhysicsBlendWeight(const struct FName& InBoneName, float AddPhysicsBlendWeight, bool bSkipCustomPhysicsType);
};


// Class Engine.AnimInstance
// 0x0248 (0x0270 - 0x0028)
class UEngine_AnimInstance : public UObject
{
public:
	class UEngine_Skeleton*                            CurrentSkeleton;                                          // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERootMotionMode>        RootMotionMode;                                           // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bUseMultiThreadedAnimationUpdate : 1;                     // 0x0031(0x0001)
	unsigned char                                      bUsingCopyPoseFromMesh : 1;                               // 0x0031(0x0001)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0031(0x0001)
	unsigned char                                      bQueueMontageEvents : 1;                                  // 0x0031(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x6];                                       // 0x0032(0x0006) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnMontageBlendingOut;                                     // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageStarted;                                         // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnMontageEnded;                                           // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnAllMontageInstancesEnded;                               // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x88];                                      // 0x0078(0x0088) MISSED OFFSET
	struct FEngine_AnimNotifyQueue                     NotifyQueue;                                              // 0x0100(0x0070) (Transient)
	TArray<struct FEngine_AnimNotifyEvent>             ActiveAnimNotifyState;                                    // 0x0170(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData03[0xF0];                                      // 0x0180(0x00F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimInstance");
		return ptr;
	}


	void UnlockAIResources(bool bUnlockMovement, bool UnlockAILogic);
	void UnlinkAnimClassLayers(class UClass* InClass);
	class AEngine_Pawn* TryGetPawnOwner();
	void StopSlotAnimation(float InBlendOutTime, const struct FName& SlotNodeName);
	void SnapshotPose(struct FEngine_PoseSnapshot* Snapshot);
	void SetRootMotionMode(TEnumAsByte<FEngine_Engine_ERootMotionMode> Value);
	void SetMorphTarget(const struct FName& MorphTargetName, float Value);
	void SavePoseSnapshot(const struct FName& SnapshotName);
	void ResetDynamics(FEngine_Engine_ETeleportType InTeleportType);
	class UEngine_AnimMontage* PlaySlotAnimationAsDynamicMontage(class UEngine_AnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt);
	float PlaySlotAnimation(class UEngine_AnimSequenceBase* Asset, const struct FName& SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int LoopCount);
	void Montage_Stop(float InBlendOutTime, class UEngine_AnimMontage* Montage);
	void Montage_SetPosition(class UEngine_AnimMontage* Montage, float NewPosition);
	void Montage_SetPlayRate(class UEngine_AnimMontage* Montage, float NewPlayRate);
	void Montage_SetNextSection(const struct FName& SectionNameToChange, const struct FName& NextSection, class UEngine_AnimMontage* Montage);
	void Montage_Resume(class UEngine_AnimMontage* Montage);
	float Montage_Play(class UEngine_AnimMontage* MontageToPlay, float InPlayRate, FEngine_Engine_EMontagePlayReturnType ReturnValueType, float InTimeToStartMontageAt, bool bStopAllMontages);
	void Montage_Pause(class UEngine_AnimMontage* Montage);
	void Montage_JumpToSectionsEnd(const struct FName& SectionName, class UEngine_AnimMontage* Montage);
	void Montage_JumpToSection(const struct FName& SectionName, class UEngine_AnimMontage* Montage);
	bool Montage_IsPlaying(class UEngine_AnimMontage* Montage);
	bool Montage_IsActive(class UEngine_AnimMontage* Montage);
	float Montage_GetPosition(class UEngine_AnimMontage* Montage);
	float Montage_GetPlayRate(class UEngine_AnimMontage* Montage);
	bool Montage_GetIsStopped(class UEngine_AnimMontage* Montage);
	struct FName Montage_GetCurrentSection(class UEngine_AnimMontage* Montage);
	float Montage_GetBlendTime(class UEngine_AnimMontage* Montage);
	void LockAIResources(bool bLockMovement, bool LockAILogic);
	void LinkAnimGraphByTag(const struct FName& InTag, class UClass* InClass);
	void LinkAnimClassLayers(class UClass* InClass);
	bool IsSyncGroupBetweenMarkers(const struct FName& InSyncGroupName, const struct FName& PreviousMarker, const struct FName& NextMarker, bool bRespectMarkerOrder);
	bool IsPlayingSlotAnimation(class UEngine_AnimSequenceBase* Asset, const struct FName& SlotNodeName);
	bool IsAnyMontagePlaying();
	bool HasMarkerBeenHitThisFrame(const struct FName& SyncGroup, const struct FName& MarkerName);
	bool GetTimeToClosestMarker(const struct FName& SyncGroup, const struct FName& MarkerName, float* OutMarkerTime);
	struct FEngine_MarkerSyncAnimPosition GetSyncGroupPosition(const struct FName& InSyncGroupName);
	float GetRelevantAnimTimeRemainingFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeRemaining(int MachineIndex, int StateIndex);
	float GetRelevantAnimTimeFraction(int MachineIndex, int StateIndex);
	float GetRelevantAnimTime(int MachineIndex, int StateIndex);
	float GetRelevantAnimLength(int MachineIndex, int StateIndex);
	class UEngine_SkeletalMeshComponent* GetOwningComponent();
	class AEngine_Actor* GetOwningActor();
	class UEngine_AnimInstance* GetLinkedAnimLayerInstanceByGroup(const struct FName& InGroup);
	class UEngine_AnimInstance* GetLinkedAnimLayerInstanceByClass(class UClass* InClass);
	void GetLinkedAnimGraphInstancesByTag(const struct FName& InTag, TArray<class UEngine_AnimInstance*>* OutLinkedInstances);
	class UEngine_AnimInstance* GetLinkedAnimGraphInstanceByTag(const struct FName& InTag);
	float GetInstanceTransitionTimeElapsedFraction(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionTimeElapsed(int MachineIndex, int TransitionIndex);
	float GetInstanceTransitionCrossfadeDuration(int MachineIndex, int TransitionIndex);
	float GetInstanceStateWeight(int MachineIndex, int StateIndex);
	float GetInstanceMachineWeight(int MachineIndex);
	float GetInstanceCurrentStateElapsedTime(int MachineIndex);
	float GetInstanceAssetPlayerTimeFromEndFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFromEnd(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTimeFraction(int AssetPlayerIndex);
	float GetInstanceAssetPlayerTime(int AssetPlayerIndex);
	float GetInstanceAssetPlayerLength(int AssetPlayerIndex);
	float GetCurveValue(const struct FName& CurveName);
	struct FName GetCurrentStateName(int MachineIndex);
	class UEngine_AnimMontage* GetCurrentActiveMontage();
	void GetAllCurveNames(TArray<struct FName>* OutNames);
	void GetActiveCurveNames(FEngine_Engine_EAnimCurveType CurveType, TArray<struct FName>* OutNames);
	void ClearMorphTargets();
	float CalculateDirection(const struct FVector& Velocity, const struct FRotator& BaseRotation);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void BlueprintPostEvaluateAnimation();
	void BlueprintInitializeAnimation();
	void BlueprintBeginPlay();
};


// Class Engine.FXSystemComponent
// 0x0000 (0x03E0 - 0x03E0)
class UEngine_FXSystemComponent : public UEngine_PrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FXSystemComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.FXSystemComponent");
		return ptr;
	}


	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetUseAutoManageAttachment(bool bAutoManage);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetEmitterEnable(const struct FName& EmitterName, bool bNewEnableState);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetAutoAttachmentParameters(class UEngine_SceneComponent* Parent, const struct FName& SocketName, FEngine_Engine_EAttachmentRule LocationRule, FEngine_Engine_EAttachmentRule RotationRule, FEngine_Engine_EAttachmentRule ScaleRule);
	void SetActorParameter(const struct FName& ParameterName, class AEngine_Actor* Param);
	void ReleaseToPool();
	class UEngine_FXSystemAsset* GetFXSystemAsset();
};


// Class Engine.FXSystemAsset
// 0x0008 (0x0030 - 0x0028)
class UEngine_FXSystemAsset : public UObject
{
public:
	uint32_t                                           MaxPoolSize;                                              // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FXSystemAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.FXSystemAsset");
		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0010 (0x0038 - 0x0028)
class UEngine_AnimNotify : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}


	bool Received_Notify(class UEngine_SkeletalMeshComponent* MeshComp, class UEngine_AnimSequenceBase* Animation);
	struct FString GetNotifyName();
};


// Class Engine.AnimNotifyState
// 0x0008 (0x0030 - 0x0028)
class UEngine_AnimNotifyState : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotifyState");
		return ptr;
	}


	bool Received_NotifyTick(class UEngine_SkeletalMeshComponent* MeshComp, class UEngine_AnimSequenceBase* Animation, float FrameDeltaTime);
	bool Received_NotifyEnd(class UEngine_SkeletalMeshComponent* MeshComp, class UEngine_AnimSequenceBase* Animation);
	bool Received_NotifyBegin(class UEngine_SkeletalMeshComponent* MeshComp, class UEngine_AnimSequenceBase* Animation, float TotalDuration);
	struct FString GetNotifyName();
};


// Class Engine.MaterialExpression
// 0x0018 (0x0040 - 0x0028)
class UEngine_MaterialExpression : public UObject
{
public:
	class UEngine_Material*                            Material;                                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialFunction*                    Function;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsParameterExpression : 1;                               // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpression");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureBase
// 0x0010 (0x0050 - 0x0040)
class UEngine_MaterialExpressionTextureBase : public UEngine_MaterialExpression
{
public:
	class UEngine_Texture*                             Texture;                                                  // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialSamplerType>   SamplerType;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      IsDefaultMeshpaintTexture : 1;                            // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x004A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureBase");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x0080 (0x00D0 - 0x0050)
class UEngine_MaterialExpressionTextureSample : public UEngine_MaterialExpressionTextureBase
{
public:
	struct FEngine_ExpressionInput                     Coordinates;                                              // 0x0050(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x005C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     TextureObject;                                            // 0x0064(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0070(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     MipValue;                                                 // 0x0078(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0084(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     CoordinatesDX;                                            // 0x008C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0098(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     CoordinatesDY;                                            // 0x00A0(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00AC(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     AutomaticViewMipBiasValue;                                // 0x00B4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ETextureMipValueMode>   MipValueMode;                                             // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESamplerSourceMode>     SamplerSource;                                            // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      AutomaticViewMipBias : 1;                                 // 0x00CA(0x0001) (Edit)
	unsigned char                                      ConstCoordinate;                                          // 0x00CB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ConstMipValue;                                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x00F0 - 0x00D0)
class UEngine_MaterialExpressionTextureSampleParameter : public UEngine_MaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x00D8(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x00F0 - 0x00F0)
class UEngine_MaterialExpressionTextureSampleParameter2D : public UEngine_MaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}

};


// Class Engine.Pawn
// 0x0060 (0x0278 - 0x0218)
class AEngine_Pawn : public AEngine_Actor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	unsigned char                                      bUseControllerRotationPitch : 1;                          // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationYaw : 1;                            // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerRotationRoll : 1;                           // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanAffectNavigationGeneration : 1;                       // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	float                                              BaseEyeHeight;                                            // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAutoReceiveInput>      AutoPossessPlayer;                                        // 0x0228(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAutoPossessAI                      AutoPossessAI;                                            // 0x0229(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      RemoteViewPitch;                                          // 0x022A(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x022B(0x0005) MISSED OFFSET
	class UClass*                                      AIControllerClass;                                        // 0x0230(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class AEngine_PlayerState*                         PlayerState;                                              // 0x0238(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	class AEngine_Controller*                          LastHitBy;                                                // 0x0248(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_Controller*                          Controller;                                               // 0x0250(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0258(0x0004) MISSED OFFSET
	struct FVector                                     ControlInputVector;                                       // 0x025C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     LastControlInputVector;                                   // 0x0268(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0274(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	void SpawnDefaultController();
	void SetCanAffectNavigationGeneration(bool bNewValue, bool bForceUpdate);
	void ReceiveUnpossessed(class AEngine_Controller* OldController);
	void ReceivePossessed(class AEngine_Controller* NewController);
	void PawnMakeNoise(float Loudness, const struct FVector& NoiseLocation, bool bUseNoiseMakerLocation, class AEngine_Actor* NoiseMaker);
	void OnRep_PlayerState();
	void OnRep_Controller();
	void LaunchPawn(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	struct FVector K2_GetMovementInputVector();
	bool IsPlayerControlled();
	bool IsPawnControlled();
	bool IsMoveInputIgnored();
	bool IsLocallyControlled();
	bool IsControlled();
	bool IsBotControlled();
	struct FVector GetPendingMovementInputVector();
	struct FVector GetNavAgentLocation();
	class UEngine_PawnMovementComponent* GetMovementComponent();
	class AEngine_Actor* STATIC_GetMovementBaseActor(class AEngine_Pawn* Pawn);
	struct FVector GetLastMovementInputVector();
	struct FRotator GetControlRotation();
	class AEngine_Controller* GetController();
	struct FRotator GetBaseAimRotation();
	void DetachFromControllerPendingDestroy();
	struct FVector ConsumeMovementInputVector();
	void AddMovementInput(const struct FVector& WorldDirection, float ScaleValue, bool bForce);
	void AddControllerYawInput(float Val);
	void AddControllerRollInput(float Val);
	void AddControllerPitchInput(float Val);
};


// Class Engine.Character
// 0x03B8 (0x0630 - 0x0278)
class AEngine_Character : public AEngine_Pawn
{
public:
	class UEngine_SkeletalMeshComponent*               Mesh;                                                     // 0x0278(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_CharacterMovementComponent*          CharacterMovement;                                        // 0x0280(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_CapsuleComponent*                    CapsuleComponent;                                         // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	struct FEngine_BasedMovementInfo                   BasedMovement;                                            // 0x0290(0x0030)
	struct FEngine_BasedMovementInfo                   ReplicatedBasedMovement;                                  // 0x02C0(0x0030) (Net)
	float                                              AnimRootMotionTranslationScale;                           // 0x02F0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	struct FVector                                     BaseTranslationOffset;                                    // 0x02F4(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FQuat                                       BaseRotationOffset;                                       // 0x0300(0x0010) (IsPlainOldData)
	float                                              ReplicatedServerLastTransformUpdateTimeStamp;             // 0x0310(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	float                                              ReplayLastTransformUpdateTimeStamp;                       // 0x0314(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ReplicatedMovementMode;                                   // 0x0318(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	bool                                               bInBaseReplication;                                       // 0x0319(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x031A(0x0002) MISSED OFFSET
	float                                              CrouchedEyeHeight;                                        // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsCrouched : 1;                                          // 0x0320(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bProxyIsJumpForceApplied : 1;                             // 0x0320(0x0001) (Net, Transient)
	unsigned char                                      bPressedJump : 1;                                         // 0x0320(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bClientUpdating : 1;                                      // 0x0320(0x0001) (Transient)
	unsigned char                                      bClientWasFalling : 1;                                    // 0x0320(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotion : 1;                          // 0x0320(0x0001) (Transient)
	unsigned char                                      bClientResimulateRootMotionSources : 1;                   // 0x0320(0x0001) (Transient)
	unsigned char                                      bSimGravityDisabled : 1;                                  // 0x0320(0x0001)
	unsigned char                                      bClientCheckEncroachmentOnNetUpdate : 1;                  // 0x0321(0x0001) (Transient)
	unsigned char                                      bServerMoveIgnoreRootMotion : 1;                          // 0x0321(0x0001) (Transient)
	unsigned char                                      bWasJumping : 1;                                          // 0x0321(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0322(0x0002) MISSED OFFSET
	float                                              JumpKeyHoldTime;                                          // 0x0324(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpForceTimeRemaining;                                   // 0x0328(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              ProxyJumpForceStartedTime;                                // 0x032C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData)
	float                                              JumpMaxHoldTime;                                          // 0x0330(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpMaxCount;                                             // 0x0334(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	int                                                JumpCurrentCount;                                         // 0x0338(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnReachedJumpApex;                                        // 0x0340(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0350(0x0010) MISSED OFFSET
	struct FScriptMulticastDelegate                    MovementModeChangedDelegate;                              // 0x0360(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnCharacterMovementUpdated;                               // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FEngine_RootMotionSourceGroup               SavedRootMotion;                                          // 0x0380(0x00F8) (Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0478(0x0008) MISSED OFFSET
	struct FEngine_RootMotionMovementParams            ClientRootMotionParams;                                   // 0x0480(0x0040) (Transient)
	TArray<struct FEngine_SimulatedRootMotionReplicatedMove> RootMotionRepMoves;                                       // 0x04C0(0x0010) (ZeroConstructor, Transient)
	struct FEngine_RepRootMotionMontage                RepRootMotion;                                            // 0x04D0(0x0158) (Net)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0628(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Character");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Character");
		return ptr;
	}


	void UnCrouch(bool bClientSimulation);
	void StopJumping();
	void StopAnimMontage(class UEngine_AnimMontage* AnimMontage);
	void ServerMoveOld(float OldTimeStamp, const struct FEngine_Vector_NetQuantize10& OldAccel, unsigned char OldMoveFlags);
	void ServerMoveNoBase(float Timestamp, const struct FEngine_Vector_NetQuantize10& InAccel, const struct FEngine_Vector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode);
	void ServerMoveDualNoBase(float TimeStamp0, const struct FEngine_Vector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FEngine_Vector_NetQuantize10& InAccel, const struct FEngine_Vector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, unsigned char ClientMovementMode);
	void ServerMoveDualHybridRootMotion(float TimeStamp0, const struct FEngine_Vector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FEngine_Vector_NetQuantize10& InAccel, const struct FEngine_Vector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UEngine_PrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMoveDual(float TimeStamp0, const struct FEngine_Vector_NetQuantize10& InAccel0, unsigned char PendingFlags, uint32_t View0, float Timestamp, const struct FEngine_Vector_NetQuantize10& InAccel, const struct FEngine_Vector_NetQuantize100& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, uint32_t View, class UEngine_PrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void ServerMove(float Timestamp, const struct FEngine_Vector_NetQuantize10& InAccel, const struct FEngine_Vector_NetQuantize100& ClientLoc, unsigned char CompressedMoveFlags, unsigned char ClientRoll, uint32_t View, class UEngine_PrimitiveComponent* ClientMovementBase, const struct FName& ClientBaseBoneName, unsigned char ClientMovementMode);
	void RootMotionDebugClientPrintOnScreen(const struct FString& inString);
	float PlayAnimMontage(class UEngine_AnimMontage* AnimMontage, float InPlayRate, const struct FName& StartSectionName);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnRep_RootMotion();
	void OnRep_ReplicatedBasedMovement();
	void OnRep_ReplayLastTransformUpdateTimeStamp();
	void OnRep_IsCrouched();
	void OnLaunched(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void OnLanded(const struct FEngine_HitResult& Hit);
	void OnJumped();
	void LaunchCharacter(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_UpdateCustomMovement(float DeltaTime);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(TEnumAsByte<FEngine_Engine_EMovementMode> PrevMovementMode, TEnumAsByte<FEngine_Engine_EMovementMode> NewMovementMode, unsigned char PrevCustomMode, unsigned char NewCustomMode);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void Jump();
	bool IsPlayingRootMotion();
	bool IsPlayingNetworkedRootMotionMontage();
	bool IsJumpProvidingForce();
	bool HasAnyRootMotion();
	class UEngine_AnimMontage* GetCurrentMontage();
	struct FVector GetBaseTranslationOffset();
	struct FRotator GetBaseRotationOffsetRotator();
	float GetAnimRootMotionTranslationScale();
	void Crouch(bool bClientSimulation);
	void ClientVeryShortAdjustPosition(float Timestamp, const struct FVector& NewLoc, class UEngine_PrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientCheatWalk();
	void ClientCheatGhost();
	void ClientCheatFly();
	void ClientAdjustRootMotionSourcePosition(float Timestamp, const struct FEngine_RootMotionSourceGroup& ServerRootMotion, bool bHasAnimRootMotion, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FEngine_Vector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UEngine_PrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustRootMotionPosition(float Timestamp, float ServerMontageTrackPosition, const struct FVector& ServerLoc, const struct FEngine_Vector_NetQuantizeNormal& ServerRotation, float ServerVelZ, class UEngine_PrimitiveComponent* ServerBase, const struct FName& ServerBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAdjustPosition(float Timestamp, const struct FVector& NewLoc, const struct FVector& NewVel, class UEngine_PrimitiveComponent* NewBase, const struct FName& NewBaseBoneName, bool bHasBase, bool bBaseRelativePosition, unsigned char ServerMovementMode);
	void ClientAckGoodMove(float Timestamp);
	bool CanJumpInternal();
	bool CanJump();
	bool CanCrouch();
	void CacheInitialMeshOffset(const struct FVector& MeshRelativeLocation, const struct FRotator& MeshRelativeRotation);
};


// Class Engine.DataAsset
// 0x0008 (0x0030 - 0x0028)
class UEngine_DataAsset : public UObject
{
public:
	class UClass*                                      NativeClass;                                              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DataAsset");
		return ptr;
	}

};


// Class Engine.SplineComponent
// 0x00F0 (0x04D0 - 0x03E0)
class UEngine_SplineComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x60];                                      // 0x03E0(0x0060) MISSED OFFSET
	struct FInterpCurveVector                          SplineInfo;                                               // 0x0440(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveQuat                            SplineRotInfo;                                            // 0x0458(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveVector                          SplineScaleInfo;                                          // 0x0470(0x0018) (ZeroConstructor, Deprecated)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x0488(0x0018) (ZeroConstructor, Deprecated)
	bool                                               bAllowSplineEditingPerInstance;                           // 0x04A0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04A1(0x0003) MISSED OFFSET
	int                                                ReparamStepsPerSegment;                                   // 0x04A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bStationaryEndpoints;                                     // 0x04AC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bSplineHasBeenEdited;                                     // 0x04AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bModifiedByConstructionScript;                            // 0x04AE(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bInputSplinePointsToConstructionScript;                   // 0x04AF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bDrawDebug;                                               // 0x04B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bClosedLoop;                                              // 0x04B1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bLoopPositionOverride;                                    // 0x04B2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x04B3(0x0001) MISSED OFFSET
	float                                              LoopPosition;                                             // 0x04B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultUpVector;                                          // 0x04B8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x04C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}


	void UpdateSpline();
	void SetWorldLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation);
	void SetUpVectorAtSplinePoint(int PointIndex, const struct FVector& InUpVector, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetUnselectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetTangentsAtSplinePoint(int PointIndex, const struct FVector& InArriveTangent, const struct FVector& InLeaveTangent, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetTangentAtSplinePoint(int PointIndex, const struct FVector& InTangent, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineWorldPoints(TArray<struct FVector> Points);
	void SetSplinePointType(int PointIndex, TEnumAsByte<FEngine_Engine_ESplinePointType> Type, bool bUpdateSpline);
	void SetSplinePoints(TArray<struct FVector> Points, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetSplineLocalPoints(TArray<struct FVector> Points);
	void SetSelectedSplineSegmentColor(const struct FLinearColor& SegmentColor);
	void SetLocationAtSplinePoint(int PointIndex, const struct FVector& InLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void SetDrawDebug(bool bShow);
	void SetDefaultUpVector(const struct FVector& UpVector, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	void SetClosedLoopAtPosition(bool bInClosedLoop, float Key, bool bUpdateSpline);
	void SetClosedLoop(bool bInClosedLoop, bool bUpdateSpline);
	void RemoveSplinePoint(int Index, bool bUpdateSpline);
	bool IsClosedLoop();
	struct FVector GetWorldTangentAtDistanceAlongSpline(float Distance);
	struct FRotator GetWorldRotationAtTime(float Time, bool bUseConstantVelocity);
	struct FRotator GetWorldRotationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldLocationAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldLocationAtSplinePoint(int PointIndex);
	struct FVector GetWorldLocationAtDistanceAlongSpline(float Distance);
	struct FVector GetWorldDirectionAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetWorldDirectionAtDistanceAlongSpline(float Distance);
	struct FVector GetVectorPropertyAtSplinePoint(int Index, const struct FName& PropertyName);
	struct FVector GetVectorPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);
	struct FVector GetUpVectorAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetUpVectorAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetUpVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform GetTransformAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity, bool bUseScale);
	struct FTransform GetTransformAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FTransform GetTransformAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector GetTangentAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetTangentAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetTangentAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	TEnumAsByte<FEngine_Engine_ESplinePointType> GetSplinePointType(int PointIndex);
	float GetSplineLength();
	struct FVector GetScaleAtTime(float Time, bool bUseConstantVelocity);
	struct FVector GetScaleAtSplinePoint(int PointIndex);
	struct FVector GetScaleAtSplineInputKey(float InKey);
	struct FVector GetScaleAtDistanceAlongSpline(float Distance);
	struct FRotator GetRotationAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FRotator GetRotationAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FRotator GetRotationAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	float GetRollAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetRollAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetRightVectorAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetRightVectorAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	int GetNumberOfSplineSegments();
	int GetNumberOfSplinePoints();
	struct FVector GetLocationAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetLocationAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	void GetLocationAndTangentAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, struct FVector* Location, struct FVector* Tangent);
	void GetLocalLocationAndTangentAtSplinePoint(int PointIndex, struct FVector* LocalLocation, struct FVector* LocalTangent);
	struct FVector GetLeaveTangentAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float GetInputKeyAtDistanceAlongSpline(float Distance);
	float GetFloatPropertyAtSplinePoint(int Index, const struct FName& PropertyName);
	float GetFloatPropertyAtSplineInputKey(float InKey, const struct FName& PropertyName);
	float GetDistanceAlongSplineAtSplinePoint(int PointIndex);
	struct FVector GetDirectionAtTime(float Time, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseConstantVelocity);
	struct FVector GetDirectionAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtSplineInputKey(float InKey, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDirectionAtDistanceAlongSpline(float Distance, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetDefaultUpVector(TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector GetArriveTangentAtSplinePoint(int PointIndex, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindUpVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FTransform FindTransformClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUseScale);
	struct FVector FindTangentClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindScaleClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FRotator FindRotationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindRollClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindRightVectorClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	struct FVector FindLocationClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	float FindInputKeyClosestToWorldLocation(const struct FVector& WorldLocation);
	struct FVector FindDirectionClosestToWorldLocation(const struct FVector& WorldLocation, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace);
	void ClearSplinePoints(bool bUpdateSpline);
	void AddSplineWorldPoint(const struct FVector& Position);
	void AddSplinePointAtIndex(const struct FVector& Position, int Index, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplinePoint(const struct FVector& Position, TEnumAsByte<FEngine_Engine_ESplineCoordinateSpace> CoordinateSpace, bool bUpdateSpline);
	void AddSplineLocalPoint(const struct FVector& Position);
	void AddPoints(TArray<struct FEngine_SplinePoint> Points, bool bUpdateSpline);
	void AddPoint(const struct FEngine_SplinePoint& Point, bool bUpdateSpline);
};


// Class Engine.AudioComponent
// 0x0530 (0x0720 - 0x01F0)
class UEngine_AudioComponent : public UEngine_SceneComponent
{
public:
	class UEngine_SoundBase*                           Sound;                                                    // 0x01F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_AudioComponentParam>         InstanceParameters;                                       // 0x01F8(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UEngine_SoundClass*                          SoundClassOverride;                                       // 0x0208(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x0210(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x0210(0x0001)
	unsigned char                                      bShouldRemainActiveIfDropped : 1;                         // 0x0210(0x0001)
	unsigned char                                      bAllowSpatialization : 1;                                 // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideSubtitlePriority : 1;                            // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsUISound : 1;                                           // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableLowPassFilter : 1;                                 // 0x0210(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverridePriority : 1;                                    // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x0211(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00 : 6;                                        // 0x0211(0x0001)
	unsigned char                                      UnknownData01 : 4;                                        // 0x0212(0x0001)
	unsigned char                                      bAutoManageAttachment : 1;                                // 0x0212(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0213(0x0005) MISSED OFFSET
	struct FName                                       AudioComponentUserID;                                     // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMin;                                       // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchModulationMax;                                       // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMin;                                      // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeModulationMax;                                      // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Priority;                                                 // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SubtitlePriority;                                         // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	class UEngine_SoundEffectSourcePresetChain*        SourceEffectChain;                                        // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LowPassFilterFrequency;                                   // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	class UEngine_SoundAttenuation*                    AttenuationSettings;                                      // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_SoundAttenuationSettings            AttenuationOverrides;                                     // 0x0268(0x02F0) (Edit, BlueprintVisible)
	class UEngine_SoundConcurrency*                    ConcurrencySettings;                                      // 0x0558(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData05[0x50];                                      // 0x0560(0x0050) UNKNOWN PROPERTY: SetProperty Engine.AudioComponent.ConcurrencySet
	unsigned char                                      UnknownData06[0xC];                                       // 0x05B0(0x000C) MISSED OFFSET
	FEngine_Engine_EAttachmentRule                     AutoAttachLocationRule;                                   // 0x05BC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAttachmentRule                     AutoAttachRotationRule;                                   // 0x05BD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAttachmentRule                     AutoAttachScaleRule;                                      // 0x05BE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x1];                                       // 0x05BF(0x0001) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioFinished;                                          // 0x05C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData08[0x18];                                      // 0x05D0(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioPlaybackPercent;                                   // 0x05E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData09[0x18];                                      // 0x05F8(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioSingleEnvelopeValue;                               // 0x0610(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData10[0x18];                                      // 0x0620(0x0018) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnAudioMultiEnvelopeValue;                                // 0x0638(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0x18];                                      // 0x0648(0x0018) MISSED OFFSET
	struct FEngine_SoundModulation                     Modulation;                                               // 0x0660(0x0010) (Edit, BlueprintVisible)
	struct FScriptDelegate                             OnQueueSubtitles;                                         // 0x0670(0x0014) (ZeroConstructor, InstancedReference)
	TWeakObjectPtr<class UEngine_SceneComponent>       AutoAttachParent;                                         // 0x0680(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x0688(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0x90];                                      // 0x0690(0x0090) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}


	void StopDelayed(float DelayTime);
	void Stop();
	void SetWaveParameter(const struct FName& InName, class UEngine_SoundWave* InWave);
	void SetVolumeMultiplier(float NewVolumeMultiplier);
	void SetUISound(bool bInUISound);
	void SetSubmixSend(class UEngine_SoundSubmix* Submix, float SendLevel);
	void SetSourceBusSendPreEffect(class UEngine_SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSourceBusSendPostEffect(class UEngine_SoundSourceBus* SoundSourceBus, float SourceBusSendLevel);
	void SetSound(class UEngine_SoundBase* NewSound);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetPaused(bool bPause);
	void SetLowPassFilterFrequency(float InLowPassFilterFrequency);
	void SetLowPassFilterEnabled(bool InLowPassFilterEnabled);
	void SetIntParameter(const struct FName& InName, int inInt);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void SetBoolParameter(const struct FName& InName, bool InBool);
	void Play(float StartTime);
	bool IsPlaying();
	bool HasCookedFFTData();
	bool HasCookedAmplitudeEnvelopeData();
	FEngine_Engine_EAudioComponentPlayState GetPlayState();
	bool GetCookedFFTDataForAllPlayingSounds(TArray<struct FEngine_SoundWaveSpectralDataPerSound>* OutSoundWaveSpectralData);
	bool GetCookedFFTData(TArray<float> FrequenciesToGet, TArray<struct FEngine_SoundWaveSpectralData>* OutSoundWaveSpectralData);
	bool GetCookedEnvelopeDataForAllPlayingSounds(TArray<struct FEngine_SoundWaveEnvelopeDataPerSound>* OutEnvelopeData);
	bool GetCookedEnvelopeData(float* OutEnvelopeData);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel, FEngine_Engine_EAudioFaderCurve FadeCurve);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime, FEngine_Engine_EAudioFaderCurve FadeCurve);
	bool BP_GetAttenuationSettingsToApply(struct FEngine_SoundAttenuationSettings* OutAttenuationSettings);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, FEngine_Engine_EAudioFaderCurve FadeCurve);
	void AdjustAttenuation(const struct FEngine_SoundAttenuationSettings& InAttenuationSettings);
};


// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
class UEngine_AssetImportData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetImportData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetImportData");
		return ptr;
	}

};


// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UEngine_AssetUserData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetUserData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetUserData");
		return ptr;
	}

};


// Class Engine.ApplicationLifecycleComponent
// 0x0090 (0x0140 - 0x00B0)
class UEngine_ApplicationLifecycleComponent : public UEngine_ActorComponent
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x00D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x00E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x00F0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                 // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;              // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnTemperatureChangeDelegate;                              // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLowPowerModeDelegate;                                   // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ApplicationLifecycleComponent");
		return ptr;
	}

};


// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
class UEngine_SaveGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SaveGame");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SaveGame");
		return ptr;
	}

};


// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_OnlineBlueprintCallProxyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineBlueprintCallProxyBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.OnlineBlueprintCallProxyBase");
		return ptr;
	}


	void Activate();
};


// Class Engine.Player
// 0x0020 (0x0048 - 0x0028)
class UEngine_Player : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class AEngine_PlayerController*                    PlayerController;                                         // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                CurrentNetSpeed;                                          // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ConfiguredInternetSpeed;                                  // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ConfiguredLanSpeed;                                       // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x1978 (0x19C0 - 0x0048)
class UEngine_NetConnection : public UEngine_Player
{
public:
	TArray<class UEngine_ChildConnection*>             Children;                                                 // 0x0048(0x0010) (ZeroConstructor, Transient)
	class UEngine_NetDriver*                           Driver;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      PackageMapClass;                                          // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackageMap*                                 PackageMap;                                               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_Channel*>                     OpenChannels;                                             // 0x0070(0x0010) (ZeroConstructor)
	TArray<class AEngine_Actor*>                       SentTemporaries;                                          // 0x0080(0x0010) (ZeroConstructor)
	class AEngine_Actor*                               ViewTarget;                                               // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_Actor*                               OwningActor;                                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                MaxPacket;                                                // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      InternalAck : 1;                                          // 0x00A4(0x0001)
	unsigned char                                      UnknownData00[0xBB];                                      // 0x00A5(0x00BB) MISSED OFFSET
	struct FEngine_UniqueNetIdRepl                     PlayerId;                                                 // 0x0160(0x0028)
	unsigned char                                      UnknownData01[0x48];                                      // 0x0188(0x0048) MISSED OFFSET
	double                                             LastReceiveTime;                                          // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x12D0];                                    // 0x01D8(0x12D0) MISSED OFFSET
	TArray<class UEngine_Channel*>                     ChannelsToTick;                                           // 0x14A8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x508];                                     // 0x14B8(0x0508) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x06E0 (0x0708 - 0x0028)
class UEngine_NetDriver : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x0030(0x0010) (ZeroConstructor, Config)
	struct FString                                     ReplicationDriverClassName;                               // 0x0040(0x0010) (ZeroConstructor, Config)
	int                                                MaxDownloadSize;                                          // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bClampListenServerTickRate : 1;                           // 0x0054(0x0001) (Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                NetServerMaxTickRate;                                     // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxNetTickRate;                                           // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxInternetClientRate;                                    // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxClientRate;                                            // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerTravelPause;                                        // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              SpawnPrioritySeconds;                                     // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              RelevantTimeout;                                          // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              KeepAliveTime;                                            // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialConnectTimeout;                                    // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ConnectionTimeout;                                        // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeoutMultiplierForUnoptimizedBuilds;                    // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNoTimeouts;                                              // 0x0084(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bNeverApplyNetworkEmulationSettings;                      // 0x0085(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0086(0x0002) MISSED OFFSET
	class UEngine_NetConnection*                       ServerConnection;                                         // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_NetConnection*>               ClientConnections;                                        // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x60];                                      // 0x00A0(0x0060) MISSED OFFSET
	int                                                RecentlyDisconnectedTrackingTime;                         // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0104(0x003C) MISSED OFFSET
	class UEngine_World*                               World;                                                    // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData)
	class UPackage*                                    WorldPackage;                                             // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x20];                                      // 0x0150(0x0020) MISSED OFFSET
	class UClass*                                      NetConnectionClass;                                       // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      ReplicationDriverClass;                                   // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData)
	class UProperty*                                   RoleProperty;                                             // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData)
	class UProperty*                                   RemoteRoleProperty;                                       // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       NetDriverName;                                            // 0x0190(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FEngine_ChannelDefinition>           ChannelDefinitions;                                       // 0x0198(0x0010) (ZeroConstructor, Config)
	TMap<struct FName, struct FEngine_ChannelDefinition> ChannelDefinitionMap;                                     // 0x01A8(0x0050) (ZeroConstructor)
	TArray<class UEngine_Channel*>                     ActorChannelPool;                                         // 0x01F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0208(0x0008) MISSED OFFSET
	float                                              Time;                                                     // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x4CC];                                     // 0x0214(0x04CC) MISSED OFFSET
	class UEngine_ReplicationDriver*                   ReplicationDriver;                                        // 0x06E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x20];                                      // 0x06E8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.BlueprintAsyncActionBase
// 0x0008 (0x0030 - 0x0028)
class UEngine_BlueprintAsyncActionBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintAsyncActionBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintAsyncActionBase");
		return ptr;
	}


	void Activate();
};


// Class Engine.OnlineEngineInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_OnlineEngineInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineEngineInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.OnlineEngineInterface");
		return ptr;
	}

};


// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
class UEngine_OnlineSession : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSession");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.OnlineSession");
		return ptr;
	}

};


// Class Engine.MovementComponent
// 0x0040 (0x00F0 - 0x00B0)
class UEngine_MovementComponent : public UEngine_ActorComponent
{
public:
	class UEngine_SceneComponent*                      UpdatedComponent;                                         // 0x00B0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	class UEngine_PrimitiveComponent*                  UpdatedPrimitive;                                         // 0x00B8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C0(0x0004) MISSED OFFSET
	struct FVector                                     Velocity;                                                 // 0x00C4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintNormal;                                    // 0x00D0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PlaneConstraintOrigin;                                    // 0x00DC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateOnlyIfRendered : 1;                                // 0x00E8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoUpdateTickRegistration : 1;                          // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTickBeforeOwner : 1;                                     // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterUpdatedComponent : 1;                        // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bConstrainToPlane : 1;                                    // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSnapToPlaneAtStart : 1;                                  // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAutoRegisterPhysicsVolumeUpdates : 1;                    // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bComponentShouldUpdatePhysicsVolume : 1;                  // 0x00E8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00E9(0x0002) MISSED OFFSET
	FEngine_Engine_EPlaneConstraintAxisSetting         PlaneConstraintAxisSetting;                               // 0x00EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MovementComponent");
		return ptr;
	}


	void StopMovementImmediately();
	void SnapUpdatedComponentToPlane();
	void SetUpdatedComponent(class UEngine_SceneComponent* NewUpdatedComponent);
	void SetPlaneConstraintOrigin(const struct FVector& PlaneOrigin);
	void SetPlaneConstraintNormal(const struct FVector& PlaneNormal);
	void SetPlaneConstraintFromVectors(const struct FVector& Forward, const struct FVector& Up);
	void SetPlaneConstraintEnabled(bool bEnabled);
	void SetPlaneConstraintAxisSetting(FEngine_Engine_EPlaneConstraintAxisSetting NewAxisSetting);
	void PhysicsVolumeChanged(class AEngine_PhysicsVolume* NewVolume);
	bool K2_MoveUpdatedComponent(const struct FVector& Delta, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FEngine_HitResult* OutHit);
	float K2_GetModifiedMaxSpeed();
	float K2_GetMaxSpeedModifier();
	bool IsExceedingMaxSpeed(float MaxSpeed);
	struct FVector GetPlaneConstraintOrigin();
	struct FVector GetPlaneConstraintNormal();
	FEngine_Engine_EPlaneConstraintAxisSetting GetPlaneConstraintAxisSetting();
	class AEngine_PhysicsVolume* GetPhysicsVolume();
	float GetMaxSpeed();
	float GetGravityZ();
	struct FVector ConstrainNormalToPlane(const struct FVector& Normal);
	struct FVector ConstrainLocationToPlane(const struct FVector& Location);
	struct FVector ConstrainDirectionToPlane(const struct FVector& Direction);
};


// Class Engine.NavMovementComponent
// 0x0040 (0x0130 - 0x00F0)
class UEngine_NavMovementComponent : public UEngine_MovementComponent
{
public:
	struct FEngine_NavAgentProperties                  NavAgentProps;                                            // 0x00F0(0x0030) (Edit, BlueprintVisible)
	float                                              FixedPathBrakingDistance;                                 // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdateNavAgentWithOwnersCollision : 1;                   // 0x0124(0x0001) (Edit)
	unsigned char                                      bUseAccelerationForPaths : 1;                             // 0x0124(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      bUseFixedBrakingDistanceForPaths : 1;                     // 0x0124(0x0001) (Edit)
	struct FEngine_MovementProperties                  MovementState;                                            // 0x0125(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	class UObject*                                     PathFollowingComp;                                        // 0x0128(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavMovementComponent");
		return ptr;
	}


	void StopMovementKeepPathing();
	void StopActiveMovement();
	bool IsSwimming();
	bool IsMovingOnGround();
	bool IsFlying();
	bool IsFalling();
	bool IsCrouching();
};


// Class Engine.PawnMovementComponent
// 0x0008 (0x0138 - 0x0130)
class UEngine_PawnMovementComponent : public UEngine_NavMovementComponent
{
public:
	class AEngine_Pawn*                                PawnOwner;                                                // 0x0130(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PawnMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PawnMovementComponent");
		return ptr;
	}


	struct FVector K2_GetInputVector();
	bool IsMoveInputIgnored();
	struct FVector GetPendingInputVector();
	class AEngine_Pawn* GetPawnOwner();
	struct FVector GetLastInputVector();
	struct FVector ConsumeInputVector();
	void AddInputVector(const struct FVector& WorldVector, bool bForce);
};


// Class Engine.CharacterMovementComponent
// 0x0598 (0x06D0 - 0x0138)
class UEngine_CharacterMovementComponent : public UEngine_PawnMovementComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) MISSED OFFSET
	class AEngine_Character*                           CharacterOwner;                                           // 0x0148(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              GravityScale;                                             // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxStepHeight;                                            // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpZVelocity;                                            // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOffJumpZFactor;                                       // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorAngle;                                       // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WalkableFloorZ;                                           // 0x0164(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMovementMode>          MovementMode;                                             // 0x0168(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      CustomMovementMode;                                       // 0x0169(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ENetworkSmoothingMode               NetworkSmoothingMode;                                     // 0x016A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x016B(0x0001) MISSED OFFSET
	float                                              GroundFriction;                                           // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1C];                                      // 0x0170(0x001C) MISSED OFFSET
	float                                              MaxWalkSpeed;                                             // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxWalkSpeedCrouched;                                     // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSwimSpeed;                                             // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxFlySpeed;                                              // 0x0198(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxCustomMovementSpeed;                                   // 0x019C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxAcceleration;                                          // 0x01A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinAnalogWalkSpeed;                                       // 0x01A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFrictionFactor;                                    // 0x01A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingFriction;                                          // 0x01AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingSubStepTime;                                       // 0x01B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationWalking;                               // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFalling;                               // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationSwimming;                              // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BrakingDecelerationFlying;                                // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControl;                                               // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostMultiplier;                                // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AirControlBoostVelocityThreshold;                         // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FallingLateralFriction;                                   // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CrouchedHalfHeight;                                       // 0x01D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchRadiusThreshold;                                     // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PerchAdditionalHeight;                                    // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationRate;                                             // 0x01E4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseSeparateBrakingFriction : 1;                          // 0x01F0(0x0001) (Edit, BlueprintVisible, DisableEditOnInstance)
	unsigned char                                      bApplyGravityWhileJumping : 1;                            // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseControllerDesiredRotation : 1;                        // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOrientRotationToMovement : 1;                            // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepWhileNavWalking : 1;                                // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03 : 1;                                        // 0x01F0(0x0001)
	unsigned char                                      bMovementInProgress : 1;                                  // 0x01F0(0x0001)
	unsigned char                                      bEnableScopedMovementUpdates : 1;                         // 0x01F0(0x0001) (Edit)
	unsigned char                                      bEnableServerDualMoveScopedMovementUpdates : 1;           // 0x01F1(0x0001) (Edit)
	unsigned char                                      bForceMaxAccel : 1;                                       // 0x01F1(0x0001)
	unsigned char                                      bRunPhysicsWithNoController : 1;                          // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceNextFloorCheck : 1;                                 // 0x01F1(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bShrinkProxyCapsule : 1;                                  // 0x01F1(0x0001)
	unsigned char                                      bCanWalkOffLedges : 1;                                    // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCanWalkOffLedgesWhenCrouching : 1;                       // 0x01F1(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData04 : 1;                                        // 0x01F1(0x0001)
	unsigned char                                      UnknownData05 : 1;                                        // 0x01F2(0x0001)
	unsigned char                                      bNetworkSkipProxyPredictionOnNetUpdate : 1;               // 0x01F2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bNetworkAlwaysReplicateTransformUpdateTimestamp : 1;      // 0x01F2(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bDeferUpdateMoveComponent : 1;                            // 0x01F2(0x0001)
	unsigned char                                      bEnablePhysicsInteraction : 1;                            // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTouchForceScaledToMass : 1;                              // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceScaledToMass : 1;                               // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPushForceUsingZOffset : 1;                               // 0x01F2(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bScalePushForceToVelocity : 1;                            // 0x01F3(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData06[0x4];                                       // 0x01F4(0x0004) MISSED OFFSET
	class UEngine_SceneComponent*                      DeferredUpdatedMoveComponent;                             // 0x01F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutofWaterZ;                                              // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Mass;                                                     // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StandingDownwardForceScale;                               // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InitialPushForceFactor;                                   // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForceFactor;                                          // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PushForcePointZOffsetFactor;                              // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TouchForceFactor;                                         // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinTouchForce;                                            // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxTouchForce;                                            // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              RepulsionForce;                                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Acceleration;                                             // 0x022C(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0238(0x0008) MISSED OFFSET
	struct FQuat                                       LastUpdateRotation;                                       // 0x0240(0x0010) (IsPlainOldData)
	struct FVector                                     LastUpdateLocation;                                       // 0x0250(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastUpdateVelocity;                                       // 0x025C(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              ServerLastTransformUpdateTimeStamp;                       // 0x0268(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientGoodMoveAckTime;                          // 0x026C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerLastClientAdjustmentTime;                           // 0x0270(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FVector                                     PendingImpulseToApply;                                    // 0x0274(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingForceToApply;                                      // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              AnalogInputModifier;                                      // 0x028C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0xC];                                       // 0x0290(0x000C) MISSED OFFSET
	float                                              MaxSimulationTimeStep;                                    // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxJumpApexAttemptsPerSimulation;                         // 0x02A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometry;                             // 0x02A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithGeometryAsProxy;                      // 0x02AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawn;                                 // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxDepenetrationWithPawnAsProxy;                          // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NetworkSimulatedSmoothLocationTime;                       // 0x02B8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkSimulatedSmoothRotationTime;                       // 0x02BC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothLocationTime;           // 0x02C0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ListenServerNetworkSimulatedSmoothRotationTime;           // 0x02C4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkRadius;                                     // 0x02C8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetProxyShrinkHalfHeight;                                 // 0x02CC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMaxSmoothUpdateDistance;                           // 0x02D0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkNoSmoothUpdateDistance;                            // 0x02D4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAckGoodMoves;                  // 0x02D8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustments;                   // 0x02DC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection;    // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              NetworkLargeClientCorrectionDistance;                     // 0x02E4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              LedgeCheckThreshold;                                      // 0x02E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              JumpOutOfWaterPitch;                                      // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_FindFloorResult                     CurrentFloor;                                             // 0x02F0(0x0094) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	TEnumAsByte<FEngine_Engine_EMovementMode>          DefaultLandMovementMode;                                  // 0x0384(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMovementMode>          DefaultWaterMovementMode;                                 // 0x0385(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMovementMode>          GroundMovementMode;                                       // 0x0386(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bMaintainHorizontalGroundVelocity : 1;                    // 0x0387(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityX : 1;                                 // 0x0387(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityY : 1;                                 // 0x0387(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseVelocityZ : 1;                                 // 0x0387(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bImpartBaseAngularVelocity : 1;                           // 0x0387(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bJustTeleported : 1;                                      // 0x0387(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst)
	unsigned char                                      bNetworkUpdateReceived : 1;                               // 0x0387(0x0001) (Transient)
	unsigned char                                      bNetworkMovementModeChanged : 1;                          // 0x0387(0x0001) (Transient)
	unsigned char                                      bIgnoreClientMovementErrorChecksAndCorrection : 1;        // 0x0388(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bServerAcceptClientAuthoritativePosition : 1;             // 0x0388(0x0001) (Edit, BlueprintVisible, Transient)
	unsigned char                                      bNotifyApex : 1;                                          // 0x0388(0x0001) (Edit, BlueprintVisible, EditConst)
	unsigned char                                      bCheatFlying : 1;                                         // 0x0388(0x0001)
	unsigned char                                      bWantsToCrouch : 1;                                       // 0x0388(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bCrouchMaintainsBaseLocation : 1;                         // 0x0388(0x0001) (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst)
	unsigned char                                      bIgnoreBaseRotation : 1;                                  // 0x0388(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bFastAttachedMove : 1;                                    // 0x0388(0x0001)
	unsigned char                                      bAlwaysCheckFloor : 1;                                    // 0x0389(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFlatBaseForFloorChecks : 1;                           // 0x0389(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPerformingJumpOff : 1;                                   // 0x0389(0x0001)
	unsigned char                                      bWantsToLeaveNavWalking : 1;                              // 0x0389(0x0001)
	unsigned char                                      bUseRVOAvoidance : 1;                                     // 0x0389(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRequestedMoveUseAcceleration : 1;                        // 0x0389(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData09 : 1;                                        // 0x0389(0x0001)
	unsigned char                                      bWasSimulatingRootMotion : 1;                             // 0x0389(0x0001) (Transient)
	unsigned char                                      bAllowPhysicsRotationDuringAnimRootMotion : 1;            // 0x038A(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasRequestedVelocity : 1;                                // 0x038A(0x0001) (Transient)
	unsigned char                                      bRequestedMoveWithMaxSpeed : 1;                           // 0x038A(0x0001) (Transient)
	unsigned char                                      bWasAvoidanceUpdated : 1;                                 // 0x038A(0x0001) (Transient)
	unsigned char                                      UnknownData10 : 2;                                        // 0x038A(0x0001)
	unsigned char                                      bProjectNavMeshWalking : 1;                               // 0x038A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bProjectNavMeshOnBothWorldChannels : 1;                   // 0x038A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData11[0x11];                                      // 0x038B(0x0011) MISSED OFFSET
	float                                              AvoidanceConsiderationRadius;                             // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RequestedVelocity;                                        // 0x03A0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                AvoidanceUID;                                             // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FEngine_NavAvoidanceMask                    AvoidanceGroup;                                           // 0x03B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_NavAvoidanceMask                    GroupsToAvoid;                                            // 0x03B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_NavAvoidanceMask                    GroupsToIgnore;                                           // 0x03B8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AvoidanceWeight;                                          // 0x03BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PendingLaunchVelocity;                                    // 0x03C0(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData12[0xA4];                                      // 0x03CC(0x00A4) MISSED OFFSET
	float                                              NavMeshProjectionInterval;                                // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionTimer;                                   // 0x0474(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              NavMeshProjectionInterpSpeed;                             // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleUp;                           // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavMeshProjectionHeightScaleDown;                         // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              NavWalkingFloorDistTolerance;                             // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_CharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction;                                  // 0x0488(0x0030)
	unsigned char                                      UnknownData13[0x18];                                      // 0x04B8(0x0018) MISSED OFFSET
	float                                              MinTimeBetweenTimeStampResets;                            // 0x04D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x04D4(0x0004) MISSED OFFSET
	struct FEngine_RootMotionSourceGroup               CurrentRootMotion;                                        // 0x04D8(0x00F8) (Transient)
	unsigned char                                      UnknownData15[0x90];                                      // 0x05D0(0x0090) MISSED OFFSET
	struct FEngine_RootMotionMovementParams            RootMotionParams;                                         // 0x0660(0x0040) (Transient)
	struct FVector                                     AnimRootMotionVelocity;                                   // 0x06A0(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData16[0x24];                                      // 0x06AC(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CharacterMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CharacterMovementComponent");
		return ptr;
	}


	void SetWalkableFloorZ(float InWalkableFloorZ);
	void SetWalkableFloorAngle(float InWalkableFloorAngle);
	void SetMovementMode(TEnumAsByte<FEngine_Engine_EMovementMode> NewMovementMode, unsigned char NewCustomMode);
	void SetGroupsToIgnoreMask(const struct FEngine_NavAvoidanceMask& GroupMask);
	void SetGroupsToIgnore(int GroupFlags);
	void SetGroupsToAvoidMask(const struct FEngine_NavAvoidanceMask& GroupMask);
	void SetGroupsToAvoid(int GroupFlags);
	void SetAvoidanceGroupMask(const struct FEngine_NavAvoidanceMask& GroupMask);
	void SetAvoidanceGroup(int GroupFlags);
	void SetAvoidanceEnabled(bool bEnable);
	float K2_GetWalkableFloorZ();
	float K2_GetWalkableFloorAngle();
	float K2_GetModifiedMaxAcceleration();
	void K2_FindFloor(const struct FVector& CapsuleLocation, struct FEngine_FindFloorResult* FloorResult);
	void K2_ComputeFloorDist(const struct FVector& CapsuleLocation, float LineDistance, float SweepDistance, float SweepRadius, struct FEngine_FindFloorResult* FloorResult);
	bool IsWalking();
	bool IsWalkable(const struct FEngine_HitResult& Hit);
	float GetValidPerchRadius();
	float GetPerchRadiusThreshold();
	class UEngine_PrimitiveComponent* GetMovementBase();
	float GetMinAnalogSpeed();
	float GetMaxJumpHeightWithJumpTime();
	float GetMaxJumpHeight();
	float GetMaxBrakingDeceleration();
	float GetMaxAcceleration();
	struct FVector GetLastUpdateVelocity();
	struct FRotator GetLastUpdateRotation();
	struct FVector GetLastUpdateLocation();
	struct FVector GetImpartedMovementBaseVelocity();
	struct FVector GetCurrentAcceleration();
	class AEngine_Character* GetCharacterOwner();
	float GetAnalogInputModifier();
	void DisableMovement();
	void ClearAccumulatedForces();
	void CapsuleTouched(class UEngine_PrimitiveComponent* OverlappedComp, class AEngine_Actor* Other, class UEngine_PrimitiveComponent* OtherComp, int OtherBodyIndex, bool bFromSweep, const struct FEngine_HitResult& SweepResult);
	void CalcVelocity(float DeltaTime, float Friction, bool bFluid, float BrakingDeceleration);
	void AddImpulse(const struct FVector& Impulse, bool bVelocityChange);
	void AddForce(const struct FVector& force);
};


// Class Engine.Subsystem
// 0x0008 (0x0030 - 0x0028)
class UEngine_Subsystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Subsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Subsystem");
		return ptr;
	}

};


// Class Engine.DynamicSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngine_DynamicSubsystem : public UEngine_Subsystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSubsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DynamicSubsystem");
		return ptr;
	}

};


// Class Engine.EngineSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngine_EngineSubsystem : public UEngine_DynamicSubsystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineSubsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineSubsystem");
		return ptr;
	}

};


// Class Engine.Brush
// 0x0038 (0x0250 - 0x0218)
class AEngine_Brush : public AEngine_Actor
{
public:
	TEnumAsByte<FEngine_Engine_EBrushType>             BrushType;                                                // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x021C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                PolyFlags;                                                // 0x0220(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bColored : 1;                                             // 0x0224(0x0001)
	unsigned char                                      bSolidWhenSelected : 1;                                   // 0x0224(0x0001)
	unsigned char                                      bPlaceableFromClassBrowser : 1;                           // 0x0224(0x0001)
	unsigned char                                      bNotForClientOrServer : 1;                                // 0x0224(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0225(0x0003) MISSED OFFSET
	class UEngine_Model*                               Brush;                                                    // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_BrushComponent*                      BrushComponent;                                           // 0x0230(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bInManipulation : 1;                                      // 0x0238(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0239(0x0007) MISSED OFFSET
	TArray<struct FEngine_GeomSelection>               SavedSelections;                                          // 0x0240(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.Volume
// 0x0000 (0x0250 - 0x0250)
class AEngine_Volume : public AEngine_Brush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}

};


// Class Engine.ParticleSystemComponent
// 0x0260 (0x0640 - 0x03E0)
class UEngine_ParticleSystemComponent : public UEngine_FXSystemComponent
{
public:
	TArray<class UEngine_MaterialInterface*>           EmitterMaterials;                                         // 0x03E0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_SkeletalMeshComponent*>       SkelMeshComponents;                                       // 0x03F0(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0400(0x0001) MISSED OFFSET
	unsigned char                                      bResetOnDetach : 1;                                       // 0x0401(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUpdateOnDedicatedServer : 1;                             // 0x0401(0x0001)
	unsigned char                                      UnknownData01 : 2;                                        // 0x0401(0x0001)
	unsigned char                                      bAllowRecycling : 1;                                      // 0x0401(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bAutoManageAttachment : 1;                                // 0x0401(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02 : 2;                                        // 0x0401(0x0001)
	unsigned char                                      bWarmingUp : 1;                                           // 0x0402(0x0001)
	unsigned char                                      bOverrideLODMethod : 1;                                   // 0x0402(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x0402(0x0001)
	unsigned char                                      UnknownData03[0xA];                                       // 0x0403(0x000A) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EParticleSystemLODMethod> LODMethod;                                                // 0x040D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EParticleSignificanceLevel          RequiredSignificance;                                     // 0x040E(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x040F(0x0001) MISSED OFFSET
	TArray<struct FEngine_ParticleSysParam>            InstanceParameters;                                       // 0x0410(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x0420(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x0430(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0440(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FVector                                     OldPosition;                                              // 0x0460(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     PartSysVelocity;                                          // 0x046C(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0478(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x047C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0480(0x0004) MISSED OFFSET
	float                                              SecondsBeforeInactive;                                    // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0488(0x0004) MISSED OFFSET
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x048C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x20];                                      // 0x0490(0x0020) MISSED OFFSET
	TArray<class UEngine_ParticleSystemReplay*>        ReplayClips;                                              // 0x04B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData08[0x8];                                       // 0x04C0(0x0008) MISSED OFFSET
	float                                              CustomTimeDilation;                                       // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData09[0x54];                                      // 0x04CC(0x0054) MISSED OFFSET
	TWeakObjectPtr<class UEngine_SceneComponent>       AutoAttachParent;                                         // 0x0520(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	struct FName                                       AutoAttachSocketName;                                     // 0x0528(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAttachmentRule                     AutoAttachLocationRule;                                   // 0x0530(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAttachmentRule                     AutoAttachRotationRule;                                   // 0x0531(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAttachmentRule                     AutoAttachScaleRule;                                      // 0x0532(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x2D];                                      // 0x0533(0x002D) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSystemFinished;                                         // 0x0560(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData11[0xD0];                                      // 0x0570(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}


	void SetTrailSourceData(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<FEngine_Engine_ETrailWidthMode> InWidthMode, float InWidth);
	void SetTemplate(class UEngine_ParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UEngine_MaterialInterface* Param);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetAutoAttachParams(class UEngine_SceneComponent* Parent, const struct FName& SocketName, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType);
	int GetNumActiveParticles();
	class UEngine_MaterialInterface* GetNamedMaterial(const struct FName& InName);
	bool GetBeamTargetTangent(int EmitterIndex, int TargetIndex, struct FVector* OutTangentPoint);
	bool GetBeamTargetStrength(int EmitterIndex, int TargetIndex, float* OutTargetStrength);
	bool GetBeamTargetPoint(int EmitterIndex, int TargetIndex, struct FVector* OutTargetPoint);
	bool GetBeamSourceTangent(int EmitterIndex, int SourceIndex, struct FVector* OutTangentPoint);
	bool GetBeamSourceStrength(int EmitterIndex, int SourceIndex, float* OutSourceStrength);
	bool GetBeamSourcePoint(int EmitterIndex, int SourceIndex, struct FVector* OutSourcePoint);
	bool GetBeamEndPoint(int EmitterIndex, struct FVector* OutEndPoint);
	void GenerateParticleEvent(const struct FName& InEventName, float InEmitterTime, const struct FVector& InLocation, const struct FVector& InDirection, const struct FVector& InVelocity);
	void EndTrails();
	class UEngine_MaterialInstanceDynamic* CreateNamedDynamicMaterialInstance(const struct FName& InName, class UEngine_MaterialInterface* SourceMaterial);
	void BeginTrails(const struct FName& InFirstSocketName, const struct FName& InSecondSocketName, TEnumAsByte<FEngine_Engine_ETrailWidthMode> InWidthMode, float InWidth);
};


// Class Engine.Controller
// 0x0078 (0x0290 - 0x0218)
class AEngine_Controller : public AEngine_Actor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	class AEngine_PlayerState*                         PlayerState;                                              // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0228(0x0008) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInstigatedAnyDamage;                                    // 0x0230(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FName                                       StateName;                                                // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_Pawn*                                Pawn;                                                     // 0x0248(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0250(0x0008) MISSED OFFSET
	class AEngine_Character*                           Character;                                                // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_SceneComponent*                      TransformComponent;                                       // 0x0260(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0268(0x0018) MISSED OFFSET
	struct FRotator                                    ControlRotation;                                          // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAttachToPawn : 1;                                        // 0x028C(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData04[0x3];                                       // 0x028D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	void UnPossess();
	void StopMovement();
	void SetInitialLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetIgnoreMoveInput(bool bNewMoveInput);
	void SetIgnoreLookInput(bool bNewLookInput);
	void SetControlRotation(const struct FRotator& NewRotation);
	void ResetIgnoreMoveInput();
	void ResetIgnoreLookInput();
	void ResetIgnoreInputFlags();
	void ReceiveUnPossess(class AEngine_Pawn* UnpossessedPawn);
	void ReceivePossess(class AEngine_Pawn* PossessedPawn);
	void ReceiveInstigatedAnyDamage(float Damage, class UEngine_DamageType* DamageType, class AEngine_Actor* DamagedActor, class AEngine_Actor* DamageCauser);
	void Possess(class AEngine_Pawn* InPawn);
	void OnRep_PlayerState();
	void OnRep_Pawn();
	bool LineOfSightTo(class AEngine_Actor* Other, const struct FVector& ViewPoint, bool bAlternateChecks);
	class AEngine_Pawn* K2_GetPawn();
	bool IsPlayerController();
	bool IsMoveInputIgnored();
	bool IsLookInputIgnored();
	bool IsLocalPlayerController();
	bool IsLocalController();
	class AEngine_Actor* GetViewTarget();
	struct FRotator GetDesiredRotation();
	struct FRotator GetControlRotation();
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class AEngine_PlayerController* CastToPlayerController();
};


// Class Engine.AnimNotify_PlaySound
// 0x0020 (0x0058 - 0x0038)
class UEngine_AnimNotify_PlaySound : public UEngine_AnimNotify
{
public:
	class UEngine_SoundBase*                           Sound;                                                    // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bFollow : 1;                                              // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlaySound");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_PlaySound");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0058 (0x0090 - 0x0038)
class UEngine_AnimNotify_PlayParticleEffect : public UEngine_AnimNotify
{
public:
	class UEngine_ParticleSystem*                      PSTemplate;                                               // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Scale;                                                    // 0x0058(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1C];                                      // 0x0064(0x001C) MISSED OFFSET
	unsigned char                                      Attached : 1;                                             // 0x0080(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	struct FName                                       SocketName;                                               // 0x0084(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_DecalActor : public AEngine_Actor
{
public:
	class UEngine_DecalComponent*                      Decal;                                                    // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}


	void SetDecalMaterial(class UEngine_MaterialInterface* NewDecalMaterial);
	class UEngine_MaterialInterface* GetDecalMaterial();
	class UEngine_MaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.CameraActor
// 0x0568 (0x0780 - 0x0218)
class AEngine_CameraActor : public AEngine_Actor
{
public:
	TEnumAsByte<FEngine_Engine_EAutoReceiveInput>      AutoActivateForPlayer;                                    // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET
	class UEngine_CameraComponent*                     CameraComponent;                                          // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_SceneComponent*                      SceneComponent;                                           // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0230(0x0008) MISSED OFFSET
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x0238(0x0001) (Deprecated)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0239(0x0003) MISSED OFFSET
	float                                              AspectRatio;                                              // 0x023C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              FOVAngle;                                                 // 0x0240(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              PostProcessBlendWeight;                                   // 0x0244(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	struct FEngine_PostProcessSettings                 PostProcessSettings;                                      // 0x0250(0x0530) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}


	int GetAutoActivatePlayerIndex();
};


// Class Engine.CameraComponent
// 0x05B0 (0x07A0 - 0x01F0)
class UEngine_CameraComponent : public UEngine_SceneComponent
{
public:
	float                                              FieldOfView;                                              // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoWidth;                                               // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoNearClipPlane;                                       // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OrthoFarClipPlane;                                        // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AspectRatio;                                              // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bConstrainAspectRatio : 1;                                // 0x0204(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseFieldOfViewForLOD : 1;                                // 0x0204(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bLockToHmd : 1;                                           // 0x0204(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x0204(0x0001) (Edit, BlueprintVisible)
	TEnumAsByte<FEngine_Engine_ECameraProjectionMode>  ProjectionMode;                                           // 0x0205(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3A];                                      // 0x0206(0x003A) MISSED OFFSET
	float                                              PostProcessBlendWeight;                                   // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2C];                                      // 0x0244(0x002C) MISSED OFFSET
	struct FEngine_PostProcessSettings                 PostProcessSettings;                                      // 0x0270(0x0530) (Edit, BlueprintVisible)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraComponent");
		return ptr;
	}


	void SetUseFieldOfViewForLOD(bool bInUseFieldOfViewForLOD);
	void SetProjectionMode(TEnumAsByte<FEngine_Engine_ECameraProjectionMode> InProjectionMode);
	void SetPostProcessBlendWeight(float InPostProcessBlendWeight);
	void SetOrthoWidth(float InOrthoWidth);
	void SetOrthoNearClipPlane(float InOrthoNearClipPlane);
	void SetOrthoFarClipPlane(float InOrthoFarClipPlane);
	void SetFieldOfView(float InFieldOfView);
	void SetConstraintAspectRatio(bool bInConstrainAspectRatio);
	void SetAspectRatio(float InAspectRatio);
	void RemoveBlendable(const TScriptInterface<class UEngine_BlendableInterface>& InBlendableObject);
	void OnCameraMeshHiddenChanged();
	void GetCameraView(float DeltaTime, struct FEngine_MinimalViewInfo* DesiredView);
	void AddOrUpdateBlendable(const TScriptInterface<class UEngine_BlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PlayerController
// 0x02D8 (0x0568 - 0x0290)
class AEngine_PlayerController : public AEngine_Controller
{
public:
	class UEngine_Player*                              Player;                                                   // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_Pawn*                                AcknowledgedPawn;                                         // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_InterpTrackInstDirector*             ControllingDirTrackInst;                                  // 0x02A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_HUD*                                 MyHUD;                                                    // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_PlayerCameraManager*                 PlayerCameraManager;                                      // 0x02B0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      PlayerCameraManagerClass;                                 // 0x02B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bAutoManageActiveCameraTarget;                            // 0x02C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C1(0x0003) MISSED OFFSET
	struct FRotator                                    TargetViewRotation;                                       // 0x02C4(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x02D0(0x000C) MISSED OFFSET
	float                                              SmoothTargetViewRotationSpeed;                            // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02E0(0x0008) MISSED OFFSET
	TArray<class AEngine_Actor*>                       HiddenActors;                                             // 0x02E8(0x0010) (ZeroConstructor)
	TArray<TWeakObjectPtr<class UEngine_PrimitiveComponent>> HiddenPrimitiveComponents;                                // 0x02F8(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0308(0x0004) MISSED OFFSET
	float                                              LastSpectatorStateSynchTime;                              // 0x030C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FVector                                     LastSpectatorSyncLocation;                                // 0x0310(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	struct FRotator                                    LastSpectatorSyncRotation;                                // 0x031C(0x000C) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                ClientCap;                                                // 0x0328(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class UEngine_CheatManager*                        CheatManager;                                             // 0x0330(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      CheatClass;                                               // 0x0338(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UEngine_PlayerInput*                         PlayerInput;                                              // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FEngine_ActiveForceFeedbackEffect>   ActiveForceFeedbackEffects;                               // 0x0348(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData05[0x70];                                      // 0x0358(0x0070) MISSED OFFSET
	unsigned char                                      UnknownData06 : 4;                                        // 0x03C8(0x0001)
	unsigned char                                      bPlayerIsWaiting : 1;                                     // 0x03C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      UnknownData07[0x3];                                       // 0x03C9(0x0003) MISSED OFFSET
	unsigned char                                      NetPlayerIndex;                                           // 0x03CC(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3B];                                      // 0x03CD(0x003B) MISSED OFFSET
	class UEngine_NetConnection*                       PendingSwapConnection;                                    // 0x0408(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	class UEngine_NetConnection*                       NetConnection;                                            // 0x0410(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData09[0xC];                                       // 0x0418(0x000C) MISSED OFFSET
	float                                              InputYawScale;                                            // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputPitchScale;                                          // 0x0428(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	float                                              InputRollScale;                                           // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShowMouseCursor : 1;                                     // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableClickEvents : 1;                                   // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchEvents : 1;                                   // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableMouseOverEvents : 1;                               // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableTouchOverEvents : 1;                               // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceFeedbackEnabled : 1;                                // 0x0430(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0431(0x0003) MISSED OFFSET
	float                                              ForceFeedbackScale;                                       // 0x0434(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<struct FInputCore_Key>                      ClickEventKeys;                                           // 0x0438(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TEnumAsByte<FCoreUObject_EMouseCursor>             DefaultMouseCursor;                                       // 0x0448(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FCoreUObject_EMouseCursor>             CurrentMouseCursor;                                       // 0x0449(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionChannel>      DefaultClickTraceChannel;                                 // 0x044A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionChannel>      CurrentClickTraceChannel;                                 // 0x044B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              HitResultTraceDistance;                                   // 0x044C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	uint16_t                                           SeamlessTravelCount;                                      // 0x0450(0x0002) (ZeroConstructor, IsPlainOldData)
	uint16_t                                           LastCompletedSeamlessTravelCount;                         // 0x0452(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x74];                                      // 0x0454(0x0074) MISSED OFFSET
	class UEngine_InputComponent*                      InactiveStateInputComponent;                              // 0x04C8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData12 : 2;                                        // 0x04D0(0x0001)
	unsigned char                                      bShouldPerformFullTickWhenPaused : 1;                     // 0x04D0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData13[0x17];                                      // 0x04D1(0x0017) MISSED OFFSET
	class UEngine_TouchInterface*                      CurrentTouchInterface;                                    // 0x04E8(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x50];                                      // 0x04F0(0x0050) MISSED OFFSET
	class AEngine_SpectatorPawn*                       SpectatorPawn;                                            // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData15[0x4];                                       // 0x0548(0x0004) MISSED OFFSET
	bool                                               bIsLocalPlayerController;                                 // 0x054C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x054D(0x0003) MISSED OFFSET
	struct FVector                                     SpawnLocation;                                            // 0x0550(0x000C) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData17[0xC];                                       // 0x055C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	bool WasInputKeyJustReleased(const struct FInputCore_Key& Key);
	bool WasInputKeyJustPressed(const struct FInputCore_Key& Key);
	void ToggleSpeaking(bool bInSpeaking);
	void TestServerLevelVisibilityChange(const struct FName& PackageName, const struct FName& Filename);
	void SwitchLevel(const struct FString& URL);
	void StopHapticEffect(FInputCore_InputCore_EControllerHand Hand);
	void StartFire(unsigned char FireModeNum);
	void SetVirtualJoystickVisibility(bool bVisible);
	void SetViewTargetWithBlend(class AEngine_Actor* NewViewTarget, float BlendTime, TEnumAsByte<FEngine_Engine_EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetName(const struct FString& S);
	void SetMouseLocation(int X, int Y);
	void SetMouseCursorWidget(TEnumAsByte<FCoreUObject_EMouseCursor> Cursor, class UUMG_UserWidget* CursorWidget);
	void SetHapticsByValue(float Frequency, float Amplitude, FInputCore_InputCore_EControllerHand Hand);
	void SetDisableHaptics(bool bNewDisabled);
	void SetControllerLightColor(const struct FColor& Color);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	void SetAudioListenerOverride(class UEngine_SceneComponent* AttachToComponent, const struct FVector& Location, const struct FRotator& Rotation);
	void SetAudioListenerAttenuationOverride(class UEngine_SceneComponent* AttachToComponent, const struct FVector& AttenuationLocationOVerride);
	void ServerViewSelf(const struct FEngine_ViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerVerifyViewTarget();
	void ServerUpdateMultipleLevelsVisibility(TArray<struct FEngine_UpdateLevelVisibilityLevelInfo> LevelVisibilities);
	void ServerUpdateLevelVisibility(const struct FEngine_UpdateLevelVisibilityLevelInfo& LevelVisibility);
	void ServerUpdateCamera(const struct FEngine_Vector_NetQuantize& CamLoc, int CamPitchAndYaw);
	void ServerUnmutePlayer(const struct FEngine_UniqueNetIdRepl& PlayerId);
	void ServerToggleAILogging();
	void ServerShortTimeout();
	void ServerSetSpectatorWaiting(bool bWaiting);
	void ServerSetSpectatorLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	void ServerRestartPlayer();
	void ServerPause();
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void ServerMutePlayer(const struct FEngine_UniqueNetIdRepl& PlayerId);
	void ServerExecRPC(const struct FString& Msg);
	void ServerExec(const struct FString& Msg);
	void ServerCheckClientPossessionReliable();
	void ServerCheckClientPossession();
	void ServerChangeName(const struct FString& S);
	void ServerCamera(const struct FName& NewMode);
	void ServerAcknowledgePossession(class AEngine_Pawn* P);
	void SendToConsole(const struct FString& Command);
	void RestartLevel();
	void ResetControllerLightColor();
	bool ProjectWorldLocationToScreen(const struct FVector& WorldLocation, bool bPlayerViewportRelative, struct FVector2D* ScreenLocation);
	void PlayHapticEffect(class UEngine_HapticFeedbackEffect_Base* HapticEffect, FInputCore_InputCore_EControllerHand Hand, float Scale, bool bLoop);
	void PlayDynamicForceFeedback(float Intensity, float Duration, bool bAffectsLeftLarge, bool bAffectsLeftSmall, bool bAffectsRightLarge, bool bAffectsRightSmall, TEnumAsByte<FEngine_Engine_EDynamicForceFeedbackAction> Action, const struct FEngine_LatentActionInfo& LatentInfo);
	void Pause();
	void OnServerStartedVisualLogger(bool bIsLogging);
	void LocalTravel(const struct FString& URL);
	void K2_ClientPlayForceFeedback(class UEngine_ForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag, bool bLooping, bool bIgnoreTimeDilation, bool bPlayWhilePaused);
	bool IsInputKeyDown(const struct FInputCore_Key& Key);
	void GetViewportSize(int* SizeX, int* SizeY);
	class AEngine_SpectatorPawn* GetSpectatorPawn();
	bool GetMousePosition(float* LocationX, float* LocationY);
	struct FVector GetInputVectorKeyState(const struct FInputCore_Key& Key);
	void GetInputTouchState(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	void GetInputMouseDelta(float* DeltaX, float* DeltaY);
	void GetInputMotionState(struct FVector* Tilt, struct FVector* RotationRate, struct FVector* Gravity, struct FVector* Acceleration);
	float GetInputKeyTimeDown(const struct FInputCore_Key& Key);
	void GetInputAnalogStickState(TEnumAsByte<FEngine_Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetInputAnalogKeyState(const struct FInputCore_Key& Key);
	class AEngine_HUD* GetHUD();
	bool GetHitResultUnderFingerForObjects(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	bool GetHitResultUnderFingerByChannel(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	bool GetHitResultUnderFinger(TEnumAsByte<FInputCore_InputCore_ETouchIndex> FingerIndex, TEnumAsByte<FEngine_Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	bool GetHitResultUnderCursorForObjects(TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	bool GetHitResultUnderCursorByChannel(TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	bool GetHitResultUnderCursor(TEnumAsByte<FEngine_Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, struct FEngine_HitResult* HitResult);
	struct FVector GetFocalLocation();
	void FOV(float NewFOV);
	void EnableCheats();
	bool DeprojectScreenPositionToWorld(float ScreenX, float ScreenY, struct FVector* WorldLocation, struct FVector* WorldDirection);
	bool DeprojectMousePositionToWorld(struct FVector* WorldLocation, struct FVector* WorldDirection);
	void ConsoleKey(const struct FInputCore_Key& Key);
	void ClientWasKicked(const struct FText& KickReason);
	void ClientVoiceHandshakeComplete();
	void ClientUpdateMultipleLevelsStreamingStatus(TArray<struct FEngine_UpdateLevelStreamingLevelStatus> LevelStatuses);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad, int LODIndex);
	void ClientUnmutePlayer(const struct FEngine_UniqueNetIdRepl& PlayerId);
	void ClientTravelInternal(const struct FString& URL, TEnumAsByte<FEngine_Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTravel(const struct FString& URL, TEnumAsByte<FEngine_Engine_ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	void ClientTeamMessage(class AEngine_PlayerState* SenderPlayerState, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientStopForceFeedback(class UEngine_ForceFeedbackEffect* ForceFeedbackEffect, const struct FName& Tag);
	void ClientStopCameraShake(class UClass* Shake, bool bImmediately);
	void ClientStopCameraAnim(class UEngine_CameraAnim* AnimToStop);
	void ClientStartOnlineSession();
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void ClientSetViewTarget(class AEngine_Actor* A, const struct FEngine_ViewTargetTransitionParams& TransitionParams);
	void ClientSetSpectatorWaiting(bool bWaiting);
	void ClientSetHUD(class UClass* NewHUDClass);
	void ClientSetForceMipLevelsToBeResident(class UEngine_MaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ClientSetBlockOnAsyncLoading();
	void ClientReturnToMainMenuWithTextReason(const struct FText& ReturnReason);
	void ClientReturnToMainMenu(const struct FString& ReturnReason);
	void ClientRetryClientRestart(class AEngine_Pawn* NewPawn);
	void ClientRestart(class AEngine_Pawn* NewPawn);
	void ClientReset();
	void ClientRepObjRef(class UObject* Object);
	void ClientReceiveLocalizedMessage(class UClass* Message, int Switch, class AEngine_PlayerState* RelatedPlayerState_2, class AEngine_PlayerState* RelatedPlayerState_3, class UObject* OptionalObject);
	void ClientPrestreamTextures(class AEngine_Actor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ClientPlaySoundAtLocation(class UEngine_SoundBase* Sound, const struct FVector& Location, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlaySound(class UEngine_SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier);
	void ClientPlayForceFeedback_Internal(class UEngine_ForceFeedbackEffect* ForceFeedbackEffect, const struct FEngine_ForceFeedbackParameters& Params);
	void ClientPlayCameraShake(class UClass* Shake, float Scale, TEnumAsByte<FEngine_Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClientPlayCameraAnim(class UEngine_CameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<FEngine_Engine_ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void ClientMutePlayer(const struct FEngine_UniqueNetIdRepl& PlayerId);
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientIgnoreMoveInput(bool bIgnore);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientGotoState(const struct FName& NewState);
	void ClientGameEnded(class AEngine_Actor* EndGameFocus, bool bIsWinner);
	void ClientForceGarbageCollection();
	void ClientFlushLevelStreaming();
	void ClientEndOnlineSession();
	void ClientEnableNetworkVoice(bool bEnable);
	void ClientCommitMapChange();
	void ClientClearCameraLensEffects();
	void ClientCapBandwidth(int Cap);
	void ClientCancelPendingMapChange();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClearAudioListenerOverride();
	void ClearAudioListenerAttenuationOverride();
	bool CanRestartPlayer();
	void Camera(const struct FName& NewMode);
	void AddYawInput(float Val);
	void AddRollInput(float Val);
	void AddPitchInput(float Val);
	void ActivateTouchInterface(class UEngine_TouchInterface* NewTouchInterface);
};


// Class Engine.CheatManager
// 0x0050 (0x0078 - 0x0028)
class UEngine_CheatManager : public UObject
{
public:
	class AEngine_DebugCameraController*               DebugCameraControllerRef;                                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      DebugCameraControllerClass;                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0038(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void Walk();
	void ViewSelf();
	void ViewPlayer(const struct FString& S);
	void ViewClass(class UClass* DesiredClass);
	void ViewActor(const struct FName& ActorName);
	void UpdateSafeArea();
	void ToggleServerStatReplicatorUpdateStatNet();
	void ToggleServerStatReplicatorClientOverwrite();
	void ToggleDebugCamera();
	void ToggleAILogging();
	void TestCollisionDistance();
	void Teleport();
	void Summon(const struct FString& ClassName);
	void StreamLevelOut(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void SpawnServerStatReplicator();
	void Slomo(float NewTimeDilation);
	void SetWorldOrigin();
	void SetMouseSensitivityToDefault();
	void ServerToggleAILogging();
	void ReceiveInitCheatManager();
	void ReceiveEndPlay();
	void PlayersOnly();
	void OnlyLoadLevel(const struct FName& PackageName);
	void LogLoc();
	void InvertMouse();
	void God();
	void Ghost();
	void FreezeFrame(float Delay);
	void Fly();
	void FlushLog();
	void EnableDebugCamera();
	void DumpVoiceMutingState();
	void DumpPartyState();
	void DumpOnlineSessionState();
	void DumpChatState();
	void DisableDebugCamera();
	void DestroyTarget();
	void DestroyServerStatReplicator();
	void DestroyPawns(class UClass* aClass);
	void DestroyAllPawnsExceptTarget();
	void DestroyAll(class UClass* aClass);
	void DebugCapsuleSweepSize(float HalfHeight, float Radius);
	void DebugCapsuleSweepPawn();
	void DebugCapsuleSweepComplex(bool bTraceComplex);
	void DebugCapsuleSweepClear();
	void DebugCapsuleSweepChannel(TEnumAsByte<FEngine_Engine_ECollisionChannel> Channel);
	void DebugCapsuleSweepCapture();
	void DebugCapsuleSweep();
	void DamageTarget(float DamageAmount);
	void CheatScript(const struct FString& ScriptName);
	void ChangeSize(float F);
	void BugItStringCreator(const struct FVector& ViewLocation, const struct FRotator& ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItGo(float X, float Y, float Z, float Pitch, float Yaw, float Roll);
	void BugIt(const struct FString& ScreenShotDescription);
};


// Class Engine.SkeletalMeshActor
// 0x0088 (0x02A0 - 0x0218)
class AEngine_SkeletalMeshActor : public AEngine_Actor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	unsigned char                                      bShouldDoAnimNotifies : 1;                                // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bWakeOnLevelStart : 1;                                    // 0x0220(0x0001) (Deprecated)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	class UEngine_SkeletalMeshComponent*               SkeletalMeshComponent;                                    // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_SkeletalMesh*                        ReplicatedMesh;                                           // 0x0230(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_PhysicsAsset*                        ReplicatedPhysAsset;                                      // 0x0238(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_MaterialInterface*                   ReplicatedMaterial0;                                      // 0x0240(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInterface*                   ReplicatedMaterial1;                                      // 0x0248(0x0008) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0250(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}


	void OnRep_ReplicatedPhysAsset();
	void OnRep_ReplicatedMesh();
	void OnRep_ReplicatedMaterial1();
	void OnRep_ReplicatedMaterial0();
};


// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
class UEngine_DPICustomScalingRule : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DPICustomScalingRule");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DPICustomScalingRule");
		return ptr;
	}

};


// Class Engine.GameInstance
// 0x0140 (0x0168 - 0x0028)
class UEngine_GameInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UEngine_LocalPlayer*>                 LocalPlayers;                                             // 0x0038(0x0010) (ZeroConstructor)
	class UEngine_OnlineSession*                       OnlineSession;                                            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x108];                                     // 0x0060(0x0108) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameInstance");
		return ptr;
	}


	void ReceiveShutdown();
	void ReceiveInit();
	void HandleTravelError(TEnumAsByte<FEngine_Engine_ETravelFailure> FailureType);
	void HandleNetworkError(TEnumAsByte<FEngine_Engine_ENetworkFailure> FailureType, bool bIsServer);
	void DebugRemovePlayer(int ControllerId);
	void DebugCreatePlayer(int ControllerId);
};


// Class Engine.Info
// 0x0000 (0x0218 - 0x0218)
class AEngine_Info : public AEngine_Actor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}

};


// Class Engine.GameModeBase
// 0x00A0 (0x02B8 - 0x0218)
class AEngine_GameModeBase : public AEngine_Info
{
public:
	struct FString                                     OptionsString;                                            // 0x0218(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      GameSessionClass;                                         // 0x0228(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameStateClass;                                           // 0x0230(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerControllerClass;                                    // 0x0238(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PlayerStateClass;                                         // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      HUDClass;                                                 // 0x0248(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultPawnClass;                                         // 0x0250(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      ReplaySpectatorPlayerControllerClass;                     // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      ServerStatReplicatorClass;                                // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class AEngine_GameSession*                         GameSession;                                              // 0x0270(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_GameStateBase*                       GameState;                                                // 0x0278(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_ServerStatReplicator*                ServerStatReplicator;                                     // 0x0280(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FText                                       DefaultPlayerName;                                        // 0x0288(0x0018) (Edit)
	unsigned char                                      bUseSeamlessTravel : 1;                                   // 0x02A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bStartPlayersAsSpectators : 1;                            // 0x02A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bPauseable : 1;                                           // 0x02A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x17];                                      // 0x02A1(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameModeBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameModeBase");
		return ptr;
	}


	void StartPlay();
	class AEngine_Pawn* SpawnDefaultPawnFor(class AEngine_Controller* NewPlayer, class AEngine_Actor* StartSpot);
	class AEngine_Pawn* SpawnDefaultPawnAtTransform(class AEngine_Controller* NewPlayer, const struct FTransform& SpawnTransform);
	bool ShouldReset(class AEngine_Actor* ActorToReset);
	void ReturnToMainMenuHost();
	void RestartPlayerAtTransform(class AEngine_Controller* NewPlayer, const struct FTransform& SpawnTransform);
	void RestartPlayerAtPlayerStart(class AEngine_Controller* NewPlayer, class AEngine_Actor* StartSpot);
	void RestartPlayer(class AEngine_Controller* NewPlayer);
	void ResetLevel();
	bool PlayerCanRestart(class AEngine_PlayerController* Player);
	bool MustSpectate(class AEngine_PlayerController* NewPlayerController);
	void K2_PostLogin(class AEngine_PlayerController* NewPlayer);
	void K2_OnSwapPlayerControllers(class AEngine_PlayerController* OldPC, class AEngine_PlayerController* NewPC);
	void K2_OnRestartPlayer(class AEngine_Controller* NewPlayer);
	void K2_OnLogout(class AEngine_Controller* ExitingController);
	void K2_OnChangeName(class AEngine_Controller* Other, const struct FString& NewName, bool bNameChange);
	class AEngine_Actor* K2_FindPlayerStart(class AEngine_Controller* Player, const struct FString& IncomingName);
	void InitStartSpot(class AEngine_Actor* StartSpot, class AEngine_Controller* NewPlayer);
	void InitializeHUDForPlayer(class AEngine_PlayerController* NewPlayer);
	bool HasMatchStarted();
	void HandleStartingNewPlayer(class AEngine_PlayerController* NewPlayer);
	int GetNumSpectators();
	int GetNumPlayers();
	class UClass* GetDefaultPawnClassForController(class AEngine_Controller* InController);
	class AEngine_Actor* FindPlayerStart(class AEngine_Controller* Player, const struct FString& IncomingName);
	class AEngine_Actor* ChoosePlayerStart(class AEngine_Controller* Player);
	void ChangeName(class AEngine_Controller* Controller, const struct FString& NewName, bool bNameChange);
	bool CanSpectate(class AEngine_PlayerController* Viewer, class AEngine_PlayerState* ViewTarget);
};


// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
class UEngine_GameplayStatics : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayStatics");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameplayStatics");
		return ptr;
	}


	void STATIC_UnloadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, const struct FEngine_LatentActionInfo& LatentInfo, bool bShouldBlockOnUnload);
	bool STATIC_SuggestProjectileVelocity_CustomArc(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& EndPos, float OverrideGravityZ, float ArcParam, struct FVector* OutLaunchVelocity);
	class UEngine_AudioComponent* STATIC_SpawnSoundAttached(class UEngine_SoundBase* Sound, class UEngine_SceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings, class UEngine_SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UEngine_AudioComponent* STATIC_SpawnSoundAtLocation(class UObject* WorldContextObject, class UEngine_SoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings, class UEngine_SoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	class UEngine_AudioComponent* STATIC_SpawnSound2D(class UObject* WorldContextObject, class UEngine_SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class UObject* STATIC_SpawnObject(class UClass* ObjectClass, class UObject* Outer);
	class UEngine_ForceFeedbackComponent* STATIC_SpawnForceFeedbackAttached(class UEngine_ForceFeedbackEffect* ForceFeedbackEffect, class UEngine_SceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, bool bLooping, float IntensityMultiplier, float StartTime, class UEngine_ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UEngine_ForceFeedbackComponent* STATIC_SpawnForceFeedbackAtLocation(class UObject* WorldContextObject, class UEngine_ForceFeedbackEffect* ForceFeedbackEffect, const struct FVector& Location, const struct FRotator& Rotation, bool bLooping, float IntensityMultiplier, float StartTime, class UEngine_ForceFeedbackAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UEngine_ParticleSystemComponent* STATIC_SpawnEmitterAttached(class UEngine_ParticleSystem* EmitterTemplate, class UEngine_SceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType, bool bAutoDestroy, FEngine_Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	class UEngine_ParticleSystemComponent* STATIC_SpawnEmitterAtLocation(class UObject* WorldContextObject, class UEngine_ParticleSystem* EmitterTemplate, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, FEngine_Engine_EPSCPoolMethod PoolingMethod, bool bAutoActivateSystem);
	class UEngine_AudioComponent* STATIC_SpawnDialogueAttached(class UEngine_DialogueWave* Dialogue, const struct FEngine_DialogueContext& Context, class UEngine_SceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UEngine_AudioComponent* STATIC_SpawnDialogueAtLocation(class UObject* WorldContextObject, class UEngine_DialogueWave* Dialogue, const struct FEngine_DialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings, bool bAutoDestroy);
	class UEngine_AudioComponent* STATIC_SpawnDialogue2D(class UObject* WorldContextObject, class UEngine_DialogueWave* Dialogue, const struct FEngine_DialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy);
	class UEngine_DecalComponent* STATIC_SpawnDecalAttached(class UEngine_MaterialInterface* DecalMaterial, const struct FVector& DecalSize, class UEngine_SceneComponent* AttachToComponent, const struct FName& AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, TEnumAsByte<FEngine_Engine_EAttachLocation> LocationType, float LifeSpan);
	class UEngine_DecalComponent* STATIC_SpawnDecalAtLocation(class UObject* WorldContextObject, class UEngine_MaterialInterface* DecalMaterial, const struct FVector& DecalSize, const struct FVector& Location, const struct FRotator& Rotation, float LifeSpan);
	void STATIC_SetWorldOriginLocation(class UObject* WorldContextObject, const struct FIntVector& NewLocation);
	void STATIC_SetViewportMouseCaptureMode(class UObject* WorldContextObject, FEngine_Engine_EMouseCaptureMode MouseCaptureMode);
	void STATIC_SetSubtitlesEnabled(bool bEnabled);
	void STATIC_SetSoundMixClassOverride(class UObject* WorldContextObject, class UEngine_SoundMix* InSoundMixModifier, class UEngine_SoundClass* InSoundClass, float Volume, float Pitch, float FadeInTime, bool bApplyToChildren);
	void STATIC_SetPlayerControllerID(class AEngine_PlayerController* Player, int ControllerId);
	void STATIC_SetMaxAudioChannelsScaled(class UObject* WorldContextObject, float MaxChannelCountScale);
	void STATIC_SetGlobalTimeDilation(class UObject* WorldContextObject, float timeDilation);
	void STATIC_SetGlobalPitchModulation(class UObject* WorldContextObject, float PitchModulation, float TimeSec);
	void STATIC_SetGlobalListenerFocusParameters(class UObject* WorldContextObject, float FocusAzimuthScale, float NonFocusAzimuthScale, float FocusDistanceScale, float NonFocusDistanceScale, float FocusVolumeScale, float NonFocusVolumeScale, float FocusPriorityScale, float NonFocusPriorityScale);
	bool STATIC_SetGamePaused(class UObject* WorldContextObject, bool bPaused);
	void STATIC_SetForceDisableSplitscreen(class UObject* WorldContextObject, bool bDisable);
	void STATIC_SetEnableWorldRendering(class UObject* WorldContextObject, bool bEnable);
	void STATIC_SetBaseSoundMix(class UObject* WorldContextObject, class UEngine_SoundMix* InSoundMix);
	bool STATIC_SaveGameToSlot(class UEngine_SaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	void STATIC_RemovePlayer(class AEngine_PlayerController* Player, bool bDestroyPawn);
	struct FVector STATIC_RebaseZeroOriginOntoLocal(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	struct FVector STATIC_RebaseLocalOriginOntoZero(class UObject* WorldContextObject, const struct FVector& WorldLocation);
	void STATIC_PushSoundMixModifier(class UObject* WorldContextObject, class UEngine_SoundMix* InSoundMixModifier);
	bool STATIC_ProjectWorldToScreen(class AEngine_PlayerController* Player, const struct FVector& WorldPosition, bool bPlayerViewportRelative, struct FVector2D* ScreenPosition);
	void STATIC_PrimeSound(class UEngine_SoundBase* InSound);
	void STATIC_PopSoundMixModifier(class UObject* WorldContextObject, class UEngine_SoundMix* InSoundMixModifier);
	void STATIC_PlayWorldCameraShake(class UObject* WorldContextObject, class UClass* Shake, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bOrientShakeTowardsEpicenter);
	void STATIC_PlaySoundAtLocation(class UObject* WorldContextObject, class UEngine_SoundBase* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings, class UEngine_SoundConcurrency* ConcurrencySettings, class AEngine_Actor* OwningActor);
	void STATIC_PlaySound2D(class UObject* WorldContextObject, class UEngine_SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundConcurrency* ConcurrencySettings, class AEngine_Actor* OwningActor);
	void STATIC_PlayDialogueAtLocation(class UObject* WorldContextObject, class UEngine_DialogueWave* Dialogue, const struct FEngine_DialogueContext& Context, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundAttenuation* AttenuationSettings);
	void STATIC_PlayDialogue2D(class UObject* WorldContextObject, class UEngine_DialogueWave* Dialogue, const struct FEngine_DialogueContext& Context, float VolumeMultiplier, float PitchMultiplier, float StartTime);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& Key);
	void STATIC_OpenLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bAbsolute, const struct FString& Options);
	struct FEngine_HitResult STATIC_MakeHitResult(bool bBlockingHit, bool bInitialOverlap, float Time, float Distance, const struct FVector& Location, const struct FVector& ImpactPoint, const struct FVector& Normal, const struct FVector& ImpactNormal, class UEngine_PhysicalMaterial* PhysMat, class AEngine_Actor* HitActor, class UEngine_PrimitiveComponent* HitComponent, const struct FName& HitBoneName, int HitItem, int FaceIndex, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void STATIC_LoadStreamLevel(class UObject* WorldContextObject, const struct FName& LevelName, bool bMakeVisibleAfterLoad, bool bShouldBlockOnLoad, const struct FEngine_LatentActionInfo& LatentInfo);
	class UEngine_SaveGame* STATIC_LoadGameFromSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_LH_DisableUpdateStreamingState(class UObject* WorldContextObject, bool disableUpdateStreamingState);
	bool STATIC_IsSplitscreenForceDisabled(class UObject* WorldContextObject);
	bool STATIC_IsGamePaused(class UObject* WorldContextObject);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	bool STATIC_HasLaunchOption(const struct FString& OptionToCheck);
	int STATIC_GrassOverlappingSphereCount(class UObject* WorldContextObject, class UEngine_StaticMesh* StaticMesh, const struct FVector& CenterPosition, float Radius);
	struct FIntVector STATIC_GetWorldOriginLocation(class UObject* WorldContextObject);
	float STATIC_GetWorldDeltaSeconds(class UObject* WorldContextObject);
	void STATIC_GetViewProjectionMatrix(const struct FEngine_MinimalViewInfo& DesiredView, struct FMatrix* ViewMatrix, struct FMatrix* ProjectionMatrix, struct FMatrix* ViewProjectionMatrix);
	FEngine_Engine_EMouseCaptureMode STATIC_GetViewportMouseCaptureMode(class UObject* WorldContextObject);
	float STATIC_GetUnpausedTimeSeconds(class UObject* WorldContextObject);
	float STATIC_GetTimeSeconds(class UObject* WorldContextObject);
	TEnumAsByte<FEngine_Engine_EPhysicalSurface> STATIC_GetSurfaceType(const struct FEngine_HitResult& Hit);
	class UEngine_LevelStreaming* STATIC_GetStreamingLevel(class UObject* WorldContextObject, const struct FName& PackageName);
	float STATIC_GetRealTimeSeconds(class UObject* WorldContextObject);
	class AEngine_Pawn* STATIC_GetPlayerPawn(class UObject* WorldContextObject, int PlayerIndex);
	int STATIC_GetPlayerControllerID(class AEngine_PlayerController* Player);
	class AEngine_PlayerController* STATIC_GetPlayerControllerFromID(class UObject* WorldContextObject, int ControllerId);
	class AEngine_PlayerController* STATIC_GetPlayerController(class UObject* WorldContextObject, int PlayerIndex);
	class AEngine_Character* STATIC_GetPlayerCharacter(class UObject* WorldContextObject, int PlayerIndex);
	class AEngine_PlayerCameraManager* STATIC_GetPlayerCameraManager(class UObject* WorldContextObject, int PlayerIndex);
	struct FString STATIC_GetPlatformName();
	class UClass* STATIC_GetObjectClass(class UObject* Object);
	int STATIC_GetMaxAudioChannelCount(class UObject* WorldContextObject);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& Key, int DefaultValue);
	float STATIC_GetGlobalTimeDilation(class UObject* WorldContextObject);
	class AEngine_GameStateBase* STATIC_GetGameState(class UObject* WorldContextObject);
	class AEngine_GameModeBase* STATIC_GetGameMode(class UObject* WorldContextObject);
	class UEngine_GameInstance* STATIC_GetGameInstance(class UObject* WorldContextObject);
	bool STATIC_GetEnableWorldRendering(class UObject* WorldContextObject);
	class UEngine_ReverbEffect* STATIC_GetCurrentReverbEffect(class UObject* WorldContextObject);
	struct FString STATIC_GetCurrentLevelName(class UObject* WorldContextObject, bool bRemovePrefixString);
	float STATIC_GetAudioTimeSeconds(class UObject* WorldContextObject);
	void STATIC_GetAllActorsWithTag(class UObject* WorldContextObject, const struct FName& Tag, TArray<class AEngine_Actor*>* OutActors);
	void STATIC_GetAllActorsWithInterface(class UObject* WorldContextObject, class UClass* Interface, TArray<class AEngine_Actor*>* OutActors);
	void STATIC_GetAllActorsOfClassWithTag(class UObject* WorldContextObject, class UClass* ActorClass, const struct FName& Tag, TArray<class AEngine_Actor*>* OutActors);
	void STATIC_GetAllActorsOfClass(class UObject* WorldContextObject, class UClass* ActorClass, TArray<class AEngine_Actor*>* OutActors);
	class AEngine_Actor* STATIC_GetActorOfClass(class UObject* WorldContextObject, class UClass* ActorClass);
	void STATIC_GetActorArrayBounds(TArray<class AEngine_Actor*> Actors, bool bOnlyCollidingComponents, struct FVector* Center, struct FVector* BoxExtent);
	struct FVector STATIC_GetActorArrayAverageLocation(TArray<class AEngine_Actor*> Actors);
	void STATIC_GetAccurateRealTime(class UObject* WorldContextObject, int* Seconds, float* PartialSeconds);
	void STATIC_FlushLevelStreaming(class UObject* WorldContextObject);
	class AEngine_Actor* STATIC_FinishSpawningActor(class AEngine_Actor* Actor, const struct FTransform& SpawnTransform);
	bool STATIC_FindCollisionUV(const struct FEngine_HitResult& Hit, int UVChannel, struct FVector2D* UV);
	void STATIC_EnableLiveStreaming(bool Enable);
	bool STATIC_DoesSaveGameExist(const struct FString& SlotName, int UserIndex);
	bool STATIC_DeprojectScreenToWorld(class AEngine_PlayerController* Player, const struct FVector2D& ScreenPosition, struct FVector* WorldPosition, struct FVector* WorldDirection);
	bool STATIC_DeleteGameInSlot(const struct FString& SlotName, int UserIndex);
	void STATIC_DeactivateReverbEffect(class UObject* WorldContextObject, const struct FName& TagName);
	class UEngine_AudioComponent* STATIC_CreateSound2D(class UObject* WorldContextObject, class UEngine_SoundBase* Sound, float VolumeMultiplier, float PitchMultiplier, float StartTime, class UEngine_SoundConcurrency* ConcurrencySettings, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	class UEngine_SaveGame* STATIC_CreateSaveGameObject(class UClass* SaveGameClass);
	class AEngine_PlayerController* STATIC_CreatePlayer(class UObject* WorldContextObject, int ControllerId, bool bSpawnPlayerController);
	void STATIC_ClearSoundMixModifiers(class UObject* WorldContextObject);
	void STATIC_ClearSoundMixClassOverride(class UObject* WorldContextObject, class UEngine_SoundMix* InSoundMixModifier, class UEngine_SoundClass* InSoundClass, float FadeOutTime);
	void STATIC_CancelAsyncLoading();
	void STATIC_BreakHitResult(const struct FEngine_HitResult& Hit, bool* bBlockingHit, bool* bInitialOverlap, float* Time, float* Distance, struct FVector* Location, struct FVector* ImpactPoint, struct FVector* Normal, struct FVector* ImpactNormal, class UEngine_PhysicalMaterial** PhysMat, class AEngine_Actor** HitActor, class UEngine_PrimitiveComponent** HitComponent, struct FName* HitBoneName, int* HitItem, int* FaceIndex, struct FVector* TraceStart, struct FVector* TraceEnd);
	bool STATIC_BlueprintSuggestProjectileVelocity(class UObject* WorldContextObject, const struct FVector& StartLocation, const struct FVector& EndLocation, float LaunchSpeed, float OverrideGravityZ, TEnumAsByte<FEngine_Engine_ESuggestProjVelocityTraceOption> TraceOption, float CollisionRadius, bool bFavorHighArc, bool bDrawDebug, struct FVector* TossVelocity);
	bool STATIC_Blueprint_PredictProjectilePath_ByTraceChannel(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TEnumAsByte<FEngine_Engine_ECollisionChannel> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FEngine_HitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);
	bool STATIC_Blueprint_PredictProjectilePath_ByObjectType(class UObject* WorldContextObject, const struct FVector& StartPos, const struct FVector& LaunchVelocity, bool bTracePath, float ProjectileRadius, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, float DrawDebugTime, float SimFrequency, float MaxSimTime, float OverrideGravityZ, struct FEngine_HitResult* OutHit, TArray<struct FVector>* OutPathPositions, struct FVector* OutLastTraceDestination);
	bool STATIC_Blueprint_PredictProjectilePath_Advanced(class UObject* WorldContextObject, const struct FEngine_PredictProjectilePathParams& PredictParams, struct FEngine_PredictProjectilePathResult* PredictResult);
	class AEngine_Actor* STATIC_BeginSpawningActorFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, bool bNoCollisionFail, class AEngine_Actor* Owner);
	class AEngine_Actor* STATIC_BeginSpawningActorFromBlueprint(class UObject* WorldContextObject, class UEngine_Blueprint* Blueprint, const struct FTransform& SpawnTransform, bool bNoCollisionFail);
	class AEngine_Actor* STATIC_BeginDeferredActorSpawnFromClass(class UObject* WorldContextObject, class UClass* ActorClass, const struct FTransform& SpawnTransform, FEngine_Engine_ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AEngine_Actor* Owner);
	bool STATIC_AreSubtitlesEnabled();
	bool STATIC_AreAnyListenersWithinRange(class UObject* WorldContextObject, const struct FVector& Location, float MaximumRange);
	bool STATIC_ApplyRadialDamageWithFalloff(class UObject* WorldContextObject, float BaseDamage, float MinimumDamage, const struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, class UClass* DamageTypeClass, TArray<class AEngine_Actor*> IgnoreActors, class AEngine_Actor* DamageCauser, class AEngine_Controller* InstigatedByController, TEnumAsByte<FEngine_Engine_ECollisionChannel> DamagePreventionChannel);
	bool STATIC_ApplyRadialDamage(class UObject* WorldContextObject, float BaseDamage, const struct FVector& Origin, float DamageRadius, class UClass* DamageTypeClass, TArray<class AEngine_Actor*> IgnoreActors, class AEngine_Actor* DamageCauser, class AEngine_Controller* InstigatedByController, bool bDoFullDamage, TEnumAsByte<FEngine_Engine_ECollisionChannel> DamagePreventionChannel);
	float STATIC_ApplyPointDamage(class AEngine_Actor* DamagedActor, float BaseDamage, const struct FVector& HitFromDirection, const struct FEngine_HitResult& HitInfo, class AEngine_Controller* EventInstigator, class AEngine_Actor* DamageCauser, class UClass* DamageTypeClass);
	float STATIC_ApplyDamage(class AEngine_Actor* DamagedActor, float BaseDamage, class AEngine_Controller* EventInstigator, class AEngine_Actor* DamageCauser, class UClass* DamageTypeClass);
	void STATIC_ActivateReverbEffect(class UObject* WorldContextObject, class UEngine_ReverbEffect* ReverbEffect, const struct FName& TagName, float Priority, float Volume, float FadeTime);
};


// Class Engine.Engine
// 0x0DC0 (0x0DE8 - 0x0028)
class UEngine_Engine : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UEngine_Font*                                TinyFont;                                                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             TinyFontName;                                             // 0x0038(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UEngine_Font*                                SmallFont;                                                // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SmallFontName;                                            // 0x0058(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UEngine_Font*                                MediumFont;                                               // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MediumFontName;                                           // 0x0078(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UEngine_Font*                                LargeFont;                                                // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LargeFontName;                                            // 0x0098(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UEngine_Font*                                SubtitleFont;                                             // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             SubtitleFontName;                                         // 0x00B8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	TArray<class UEngine_Font*>                        AdditionalFonts;                                          // 0x00D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E0(0x0008) MISSED OFFSET
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x00E8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UClass*                                      ConsoleClass;                                             // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              ConsoleClassName;                                         // 0x0100(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameViewportClientClass;                                  // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              GameViewportClientClassName;                              // 0x0120(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      LocalPlayerClass;                                         // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LocalPlayerClassName;                                     // 0x0140(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      WorldSettingsClass;                                       // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              WorldSettingsClassName;                                   // 0x0160(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              NavigationSystemClassName;                                // 0x0178(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemClass;                                    // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              NavigationSystemConfigClassName;                          // 0x0198(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      NavigationSystemConfigClass;                              // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AvoidanceManagerClassName;                                // 0x01B8(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      AvoidanceManagerClass;                                    // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              PhysicsCollisionHandlerClassName;                         // 0x01E0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameUserSettingsClassName;                                // 0x01F8(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UClass*                                      GameUserSettingsClass;                                    // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AIControllerClassName;                                    // 0x0218(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	class UEngine_GameUserSettings*                    GameUserSettings;                                         // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	class UClass*                                      LevelScriptActorClass;                                    // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              LevelScriptActorClassName;                                // 0x0240(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              DefaultBlueprintBaseClassName;                            // 0x0258(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FSoftClassPath                              GameSingletonClassName;                                   // 0x0270(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UObject*                                     GameSingleton;                                            // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftClassPath                              AssetManagerClassName;                                    // 0x0290(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear)
	class UEngine_AssetManager*                        AssetManager;                                             // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           DefaultTexture;                                           // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultTextureName;                                       // 0x02B8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture*                             DefaultDiffuseTexture;                                    // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultDiffuseTextureName;                                // 0x02D8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           DefaultBSPVertexTexture;                                  // 0x02F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBSPVertexTextureName;                              // 0x02F8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           HighFrequencyNoiseTexture;                                // 0x0310(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             HighFrequencyNoiseTextureName;                            // 0x0318(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           DefaultBokehTexture;                                      // 0x0330(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBokehTextureName;                                  // 0x0338(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           DefaultBloomKernelTexture;                                // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultBloomKernelTextureName;                            // 0x0358(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            WireframeMaterial;                                        // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     WireframeMaterialName;                                    // 0x0378(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            HairDefaultMaterial;                                      // 0x0388(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     HairDefaultMaterialName;                                  // 0x0390(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            HairDebugMaterial;                                        // 0x03A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     HairDebugMaterialName;                                    // 0x03A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            DebugMeshMaterial;                                        // 0x03B8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DebugMeshMaterialName;                                    // 0x03C0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            EmissiveMeshMaterial;                                     // 0x03D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             EmissiveMeshMaterialName;                                 // 0x03E0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            LevelColorationLitMaterial;                               // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x0400(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            LevelColorationUnlitMaterial;                             // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            LightingTexelDensityMaterial;                             // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     LightingTexelDensityName;                                 // 0x0430(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            ShadedLevelColorationLitMaterial;                         // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x0448(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            ShadedLevelColorationUnlitMaterial;                       // 0x0458(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x0460(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            RemoveSurfaceMaterial;                                    // 0x0470(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             RemoveSurfaceMaterialName;                                // 0x0478(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorMaterial;                                      // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorMaterialName;                                  // 0x0498(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorViewModeMaterial_ColorOnly;                    // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x04B0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorViewModeMaterial_AlphaAsColor;                 // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorViewModeMaterial_RedOnly;                      // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x04E0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorViewModeMaterial_GreenOnly;                    // 0x04F0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x04F8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            VertexColorViewModeMaterial_BlueOnly;                     // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x0510(0x0010) (ZeroConstructor, Config, GlobalConfig)
	struct FSoftObjectPath                             DebugEditorMaterialName;                                  // 0x0520(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            ConstraintLimitMaterial;                                  // 0x0538(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialX;                                 // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialXAxis;                             // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialY;                                 // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialYAxis;                             // 0x0558(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialZ;                                 // 0x0560(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialZAxis;                             // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ConstraintLimitMaterialPrismatic;                         // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Material*                            InvalidLightmapSettingsMaterial;                          // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             InvalidLightmapSettingsMaterialName;                      // 0x0580(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            PreviewShadowsIndicatorMaterial;                          // 0x0598(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreviewShadowsIndicatorMaterialName;                      // 0x05A0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig)
	class UEngine_Material*                            ArrowMaterial;                                            // 0x05B8(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInstanceDynamic*             ArrowMaterialYellow;                                      // 0x05C0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             ArrowMaterialName;                                        // 0x05C8(0x0018) (ZeroConstructor, Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x05E0(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x05F0(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        QuadComplexityColors;                                     // 0x0600(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LightComplexityColors;                                    // 0x0610(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StationaryLightOverlapColors;                             // 0x0620(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        LODColorationColors;                                      // 0x0630(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        HLODColorationColors;                                     // 0x0640(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FLinearColor>                        StreamingAccuracyColors;                                  // 0x0650(0x0010) (ZeroConstructor, Config, GlobalConfig)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x0660(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES2PixelShaderAdditiveComplexityCount;                 // 0x0664(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxES3PixelShaderAdditiveComplexityCount;                 // 0x0668(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MinLightMapDensity;                                       // 0x066C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              IdealLightMapDensity;                                     // 0x0670(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxLightMapDensity;                                       // 0x0674(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bRenderLightMapDensityGrayscale : 1;                      // 0x0678(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0679(0x0003) MISSED OFFSET
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x067C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              RenderLightMapDensityColorScale;                          // 0x0680(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x0684(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x0694(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x06A4(0x0004) MISSED OFFSET
	TArray<struct FEngine_StatColorMapping>            StatColorMappings;                                        // 0x06A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_PhysicalMaterial*                    DefaultPhysMaterial;                                      // 0x06B8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             DefaultPhysMaterialName;                                  // 0x06C0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FEngine_GameNameRedirect>            ActiveGameNameRedirects;                                  // 0x06D8(0x0010) (ZeroConstructor, Config)
	TArray<struct FEngine_ClassRedirect>               ActiveClassRedirects;                                     // 0x06E8(0x0010) (ZeroConstructor, Config)
	TArray<struct FEngine_PluginRedirect>              ActivePluginRedirects;                                    // 0x06F8(0x0010) (ZeroConstructor, Config)
	TArray<struct FEngine_StructRedirect>              ActiveStructRedirects;                                    // 0x0708(0x0010) (ZeroConstructor, Config)
	class UEngine_Texture2D*                           PreIntegratedSkinBRDFTexture;                             // 0x0718(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             PreIntegratedSkinBRDFTextureName;                         // 0x0720(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           BlueNoiseTexture;                                         // 0x0738(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             BlueNoiseTextureName;                                     // 0x0740(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           MiniFontTexture;                                          // 0x0758(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             MiniFontTextureName;                                      // 0x0760(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture*                             WeightMapPlaceholderTexture;                              // 0x0778(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             WeightMapPlaceholderTextureName;                          // 0x0780(0x0018) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Texture2D*                           LightMapDensityTexture;                                   // 0x0798(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FSoftObjectPath                             LightMapDensityTextureName;                               // 0x07A0(0x0018) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData04[0x8];                                       // 0x07B8(0x0008) MISSED OFFSET
	class UEngine_GameViewportClient*                  GameViewport;                                             // 0x07C0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             DeferredCommands;                                         // 0x07C8(0x0010) (ZeroConstructor)
	int                                                TickCycles;                                               // 0x07D8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                GameCycles;                                               // 0x07DC(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                ClientCycles;                                             // 0x07E0(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              NearClipPlane;                                            // 0x07E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bHardwareSurveyEnabled : 1;                               // 0x07E8(0x0001) (Deprecated)
	unsigned char                                      bSubtitlesEnabled : 1;                                    // 0x07E8(0x0001) (Edit, Config)
	unsigned char                                      bSubtitlesForcedOff : 1;                                  // 0x07E8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x3];                                       // 0x07E9(0x0003) MISSED OFFSET
	int                                                MaximumLoopIterationCount;                                // 0x07EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCanBlueprintsTickByDefault : 1;                          // 0x07F0(0x0001) (Edit, Config)
	unsigned char                                      bOptimizeAnimBlueprintMemberVariableAccess : 1;           // 0x07F0(0x0001) (Edit, Config)
	unsigned char                                      bAllowMultiThreadedAnimationUpdate : 1;                   // 0x07F0(0x0001) (Edit, Config)
	unsigned char                                      bEnableEditorPSysRealtimeLOD : 1;                         // 0x07F0(0x0001) (Config)
	unsigned char                                      UnknownData06 : 1;                                        // 0x07F0(0x0001)
	unsigned char                                      bSmoothFrameRate : 1;                                     // 0x07F0(0x0001) (Edit, Config)
	unsigned char                                      bUseFixedFrameRate : 1;                                   // 0x07F0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData07[0x3];                                       // 0x07F1(0x0003) MISSED OFFSET
	float                                              FixedFrameRate;                                           // 0x07F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FFloatRange                                 SmoothedFrameRateRange;                                   // 0x07F8(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData)
	class UEngine_EngineCustomTimeStep*                DefaultCustomTimeStep;                                    // 0x0808(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_EngineCustomTimeStep*                CurrentCustomTimeStep;                                    // 0x0810(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSoftClassPath                              CustomTimeStepClassName;                                  // 0x0818(0x0018) (Edit, ZeroConstructor, Config)
	class UEngine_TimecodeProvider*                    DefaultTimecodeProvider;                                  // 0x0830(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_TimecodeProvider*                    CustomTimecodeProvider;                                   // 0x0838(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FSoftClassPath                              DefaultTimecodeProviderClassName;                         // 0x0840(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftClassPath                              TimecodeProviderClassName;                                // 0x0858(0x0018) (Edit, ZeroConstructor, Config)
	struct FFrameRate                                  DefaultTimecodeFrameRate;                                 // 0x0870(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x0878(0x0001) (Config)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0879(0x0003) MISSED OFFSET
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x087C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bShouldGenerateLowQualityLightmaps : 1;                   // 0x0880(0x0001) (Config, GlobalConfig, Deprecated)
	unsigned char                                      UnknownData09[0x3];                                       // 0x0881(0x0003) MISSED OFFSET
	struct FColor                                      C_WorldBox;                                               // 0x0884(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushWire;                                              // 0x0888(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_AddWire;                                                // 0x088C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SubtractWire;                                           // 0x0890(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_SemiSolidWire;                                          // 0x0894(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_NonSolidWire;                                           // 0x0898(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_WireBackground;                                         // 0x089C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x08A0(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_VolumeCollision;                                        // 0x08A4(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BSPCollision;                                           // 0x08A8(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_OrthoBackground;                                        // 0x08AC(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_Volume;                                                 // 0x08B0(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      C_BrushShape;                                             // 0x08B4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceFactor;                                  // 0x08B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x08BC(0x0004) MISSED OFFSET
	struct FEngine_DirectoryPath                       GameScreenshotSaveDirectory;                              // 0x08C0(0x0010) (Edit, Config)
	FEngine_Engine_ETransitionType                     TransitionType;                                           // 0x08D0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData11[0x7];                                       // 0x08D1(0x0007) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x08D8(0x0010) (ZeroConstructor)
	struct FString                                     TransitionGameMode;                                       // 0x08E8(0x0010) (ZeroConstructor)
	float                                              MeshLODRange;                                             // 0x08F8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bAllowMatureLanguage : 1;                                 // 0x08FC(0x0001) (Config)
	unsigned char                                      UnknownData12[0x3];                                       // 0x08FD(0x0003) MISSED OFFSET
	float                                              CameraRotationThreshold;                                  // 0x0900(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              CameraTranslationThreshold;                               // 0x0904(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0908(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxOcclusionPixelsFraction;                               // 0x090C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPauseOnLossOfFocus : 1;                                  // 0x0910(0x0001) (Config)
	unsigned char                                      UnknownData13[0x3];                                       // 0x0911(0x0003) MISSED OFFSET
	int                                                MaxParticleResize;                                        // 0x0914(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxParticleResizeWarn;                                    // 0x0918(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData14[0x4];                                       // 0x091C(0x0004) MISSED OFFSET
	TArray<struct FEngine_DropNoteInfo>                PendingDroppedNotes;                                      // 0x0920(0x0010) (ZeroConstructor, Transient)
	float                                              NetClientTicksPerSecond;                                  // 0x0930(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              DisplayGamma;                                             // 0x0934(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MinDesiredFrameRate;                                      // 0x0938(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x093C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x094C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectionOutlineColor;                                    // 0x095C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SubduedSelectionOutlineColor;                             // 0x096C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	struct FLinearColor                                SelectedMaterialColorOverride;                            // 0x097C(0x0010) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsOverridingSelectedColor;                               // 0x098C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData15[0x3];                                       // 0x098D(0x0003) MISSED OFFSET
	unsigned char                                      bEnableOnScreenDebugMessages : 1;                         // 0x0990(0x0001) (Config, GlobalConfig)
	unsigned char                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x0990(0x0001) (Transient)
	unsigned char                                      bSuppressMapWarnings : 1;                                 // 0x0990(0x0001) (Config, GlobalConfig)
	unsigned char                                      bDisableAILogging : 1;                                    // 0x0990(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData16[0x3];                                       // 0x0991(0x0003) MISSED OFFSET
	uint32_t                                           bEnableVisualLogRecordingOnStart;                         // 0x0994(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData17[0x4];                                       // 0x0998(0x0004) MISSED OFFSET
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x099C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bLockReadOnlyLevels : 1;                                  // 0x09A0(0x0001) (Transient)
	unsigned char                                      UnknownData18[0x7];                                       // 0x09A1(0x0007) MISSED OFFSET
	struct FString                                     ParticleEventManagerClassPath;                            // 0x09A8(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData19[0x10];                                      // 0x09B8(0x0010) MISSED OFFSET
	float                                              SelectionHighlightIntensity;                              // 0x09C8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              BSPSelectionHighlightIntensity;                           // 0x09CC(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              SelectionHighlightIntensityBillboards;                    // 0x09D0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData20[0x22C];                                     // 0x09D4(0x022C) MISSED OFFSET
	TArray<struct FEngine_NetDriverDefinition>         NetDriverDefinitions;                                     // 0x0C00(0x0010) (ZeroConstructor, Transient, Config)
	TArray<struct FString>                             ServerActors;                                             // 0x0C10(0x0010) (ZeroConstructor, Config)
	TArray<struct FString>                             RuntimeServerActors;                                      // 0x0C20(0x0010) (ZeroConstructor)
	float                                              NetErrorLogInterval;                                      // 0x0C30(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bStartedLoadMapMovie : 1;                                 // 0x0C34(0x0001) (Transient)
	unsigned char                                      UnknownData21[0x1B];                                      // 0x0C35(0x001B) MISSED OFFSET
	int                                                NextWorldContextHandle;                                   // 0x0C50(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData22[0x194];                                     // 0x0C54(0x0194) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0010 (0x0038 - 0x0028)
class UEngine_ScriptViewportClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x02B0 (0x02E8 - 0x0038)
class UEngine_GameViewportClient : public UEngine_ScriptViewportClient
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UEngine_Console*                             ViewportConsole;                                          // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_DebugDisplayProperty>        DebugProperties;                                          // 0x0048(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0058(0x0020) MISSED OFFSET
	class UEngine_World*                               World;                                                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_GameInstance*                        GameInstance;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x260];                                     // 0x0088(0x0260) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameViewportClient");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}


	void SSSwapControllers();
	void ShowTitleSafeArea();
	void SetConsoleTarget(int PlayerIndex);
};


// Class Engine.StaticMeshActor
// 0x0010 (0x0228 - 0x0218)
class AEngine_StaticMeshActor : public AEngine_Actor
{
public:
	class UEngine_StaticMeshComponent*                 StaticMeshComponent;                                      // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bStaticMeshReplicateMovement;                             // 0x0220(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ENavDataGatheringMode               NavigationGeometryGatheringMode;                          // 0x0221(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0222(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}


	void SetMobility(TEnumAsByte<FEngine_Engine_EComponentMobility> InMobility);
};


// Class Engine.HUD
// 0x00F0 (0x0308 - 0x0218)
class AEngine_HUD : public AEngine_Actor
{
public:
	class AEngine_PlayerController*                    PlayerOwner;                                              // 0x0218(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLostFocusPaused : 1;                                     // 0x0220(0x0001) (BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bShowHUD : 1;                                             // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShowDebugInfo : 1;                                       // 0x0220(0x0001) (BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	int                                                CurrentTargetIndex;                                       // 0x0224(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bShowHitBoxDebugInfo : 1;                                 // 0x0228(0x0001) (BlueprintVisible)
	unsigned char                                      bShowOverlays : 1;                                        // 0x0228(0x0001) (BlueprintVisible)
	unsigned char                                      bEnableDebugTextShadow : 1;                               // 0x0228(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	TArray<class AEngine_Actor*>                       PostRenderedActors;                                       // 0x0230(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0240(0x0008) MISSED OFFSET
	TArray<struct FName>                               DebugDisplay;                                             // 0x0248(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FName>                               ToggledDebugCategories;                                   // 0x0258(0x0010) (ZeroConstructor, Config, GlobalConfig)
	class UEngine_Canvas*                              Canvas;                                                   // 0x0268(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Canvas*                              DebugCanvas;                                              // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_DebugTextInfo>               DebugTextList;                                            // 0x0278(0x0010) (ZeroConstructor)
	class UClass*                                      ShowDebugTargetDesiredClass;                              // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_Actor*                               ShowDebugTargetActor;                                     // 0x0290(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x70];                                      // 0x0298(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void ShowHUD();
	void ShowDebugToggleSubCategory(const struct FName& Category);
	void ShowDebugForReticleTargetToggle(class UClass* DesiredClass);
	void ShowDebug(const struct FName& DebugType);
	void RemoveDebugText(class AEngine_Actor* SrcActor, bool bLeaveDurationText);
	void RemoveAllDebugStrings();
	void ReceiveHitBoxRelease(const struct FName& BoxName);
	void ReceiveHitBoxEndCursorOver(const struct FName& BoxName);
	void ReceiveHitBoxClick(const struct FName& BoxName);
	void ReceiveHitBoxBeginCursorOver(const struct FName& BoxName);
	void ReceiveDrawHUD(int SizeX, int SizeY);
	struct FVector Project(const struct FVector& Location);
	void PreviousDebugTarget();
	void NextDebugTarget();
	void GetTextSize(const struct FString& Text, class UEngine_Font* Font, float Scale, float* OutWidth, float* OutHeight);
	class AEngine_PlayerController* GetOwningPlayerController();
	class AEngine_Pawn* GetOwningPawn();
	void GetActorsInSelectionRectangle(class UClass* ClassFilter, const struct FVector2D& FirstPoint, const struct FVector2D& SecondPoint, bool bIncludeNonCollidingComponents, bool bActorMustBeFullyEnclosed, TArray<class AEngine_Actor*>* OutActors);
	void DrawTextureSimple(class UEngine_Texture* Texture, float ScreenX, float ScreenY, float Scale, bool bScalePosition);
	void DrawTexture(class UEngine_Texture* Texture, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float TextureU, float TextureV, float TextureUWidth, float TextureVHeight, const struct FLinearColor& TintColor, TEnumAsByte<FEngine_Engine_EBlendMode> BlendMode, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawText(const struct FString& Text, const struct FLinearColor& TextColor, float ScreenX, float ScreenY, class UEngine_Font* Font, float Scale, bool bScalePosition);
	void DrawRect(const struct FLinearColor& RectColor, float ScreenX, float ScreenY, float ScreenW, float ScreenH);
	void DrawMaterialTriangle(class UEngine_MaterialInterface* Material, const struct FVector2D& V0_Pos, const struct FVector2D& V1_Pos, const struct FVector2D& V2_Pos, const struct FVector2D& V0_UV, const struct FVector2D& V1_UV, const struct FVector2D& V2_UV, const struct FLinearColor& V0_Color, const struct FLinearColor& V1_Color, const struct FLinearColor& V2_Color);
	void DrawMaterialSimple(class UEngine_MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float Scale, bool bScalePosition);
	void DrawMaterial(class UEngine_MaterialInterface* Material, float ScreenX, float ScreenY, float ScreenW, float ScreenH, float MaterialU, float MaterialV, float MaterialUWidth, float MaterialVHeight, float Scale, bool bScalePosition, float Rotation, const struct FVector2D& RotPivot);
	void DrawLine(float StartScreenX, float StartScreenY, float EndScreenX, float EndScreenY, const struct FLinearColor& LineColor, float LineThickness);
	void Deproject(float ScreenX, float ScreenY, struct FVector* WorldPosition, struct FVector* WorldDirection);
	void AddHitBox(const struct FVector2D& Position, const struct FVector2D& Size, const struct FName& InName, bool bConsumesInput, int Priority);
	void AddDebugText(const struct FString& DebugText, class AEngine_Actor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UEngine_Font* InFont, float FontScale, bool bDrawShadow);
};


// Class Engine.ChildActorComponent
// 0x0030 (0x0220 - 0x01F0)
class UEngine_ChildActorComponent : public UEngine_SceneComponent
{
public:
	class UClass*                                      ChildActorClass;                                          // 0x01F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class AEngine_Actor*                               ChildActor;                                               // 0x01F8(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	class AEngine_Actor*                               ChildActorTemplate;                                       // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0208(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildActorComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ChildActorComponent");
		return ptr;
	}


	void SetChildActorClass(class UClass* InClass);
};


// Class Engine.LevelScriptActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_LevelScriptActor : public AEngine_Actor
{
public:
	unsigned char                                      bInputEnabled : 1;                                        // 0x0218(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelScriptActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelScriptActor");
		return ptr;
	}


	void WorldOriginLocationChanged(const struct FIntVector& OldOriginLocation, const struct FIntVector& NewOriginLocation);
	void SetCinematicMode(bool bCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning);
	bool RemoteEvent(const struct FName& EventName);
	void LevelReset();
};


// Class Engine.NavAreaBase
// 0x0008 (0x0030 - 0x0028)
class UEngine_NavAreaBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavAreaBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavAreaBase");
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0058 (0x0080 - 0x0028)
class UEngine_PhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EFrictionCombineMode>   FrictionCombineMode;                                      // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideFrictionCombineMode;                             // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	float                                              Restitution;                                              // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EFrictionCombineMode>   RestitutionCombineMode;                                   // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideRestitutionCombineMode;                          // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	float                                              Density;                                                  // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RaiseMassToPower;                                         // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageThresholdScale;                         // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	class UEngine_PhysicalMaterialPropertyBase*        PhysicalMaterialProperty;                                 // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EPhysicalSurface>       SurfaceType;                                              // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              TireFrictionScale;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FEngine_TireFrictionScalePair>       TireFrictionScales;                                       // 0x0058(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0068(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}

};


// Class Engine.PlayerCameraManager
// 0x24B8 (0x26D0 - 0x0218)
class AEngine_PlayerCameraManager : public AEngine_Actor
{
public:
	class AEngine_PlayerController*                    PCOwner;                                                  // 0x0218(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_SceneComponent*                      TransformComponent;                                       // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0228(0x0008) MISSED OFFSET
	float                                              DefaultFOV;                                               // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0234(0x0004) MISSED OFFSET
	float                                              DefaultOrthoWidth;                                        // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	float                                              DefaultAspectRatio;                                       // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4C];                                      // 0x0244(0x004C) MISSED OFFSET
	struct FEngine_CameraCacheEntry                    CameraCache;                                              // 0x0290(0x05D0) (Transient)
	struct FEngine_CameraCacheEntry                    LastFrameCameraCache;                                     // 0x0860(0x05D0) (Transient)
	struct FEngine_TViewTarget                         ViewTarget;                                               // 0x0E30(0x05E0) (Transient)
	struct FEngine_TViewTarget                         PendingViewTarget;                                        // 0x1410(0x05E0) (Transient)
	unsigned char                                      UnknownData04[0x20];                                      // 0x19F0(0x0020) MISSED OFFSET
	struct FEngine_CameraCacheEntry                    CameraCachePrivate;                                       // 0x1A10(0x05D0) (Transient)
	struct FEngine_CameraCacheEntry                    LastFrameCameraCachePrivate;                              // 0x1FE0(0x05D0) (Transient)
	TArray<class UEngine_CameraModifier*>              ModifierList;                                             // 0x25B0(0x0010) (ZeroConstructor, Transient)
	TArray<class UClass*>                              DefaultModifiers;                                         // 0x25C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance)
	float                                              FreeCamDistance;                                          // 0x25D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     FreeCamOffset;                                            // 0x25D4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ViewTargetOffset;                                         // 0x25E0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x14];                                      // 0x25EC(0x0014) MISSED OFFSET
	TArray<class AEngine_EmitterCameraLensEffectBase*> CameraLensEffects;                                        // 0x2600(0x0010) (ZeroConstructor, Transient)
	class UEngine_CameraModifier_CameraShake*          CachedCameraShakeMod;                                     // 0x2610(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_CameraAnimInst*                      AnimInstPool[0x8];                                        // 0x2618(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FEngine_PostProcessSettings>         PostProcessBlendCache;                                    // 0x2658(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x10];                                      // 0x2668(0x0010) MISSED OFFSET
	TArray<class UEngine_CameraAnimInst*>              ActiveAnims;                                              // 0x2678(0x0010) (ZeroConstructor, Transient)
	TArray<class UEngine_CameraAnimInst*>              FreeAnims;                                                // 0x2688(0x0010) (ZeroConstructor, Transient)
	class AEngine_CameraActor*                         AnimCameraActor;                                          // 0x2698(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bIsOrthographic : 1;                                      // 0x26A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDefaultConstrainAspectRatio : 1;                         // 0x26A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData07 : 4;                                        // 0x26A0(0x0001)
	unsigned char                                      bClientSimulatingViewTarget : 1;                          // 0x26A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseClientSideCameraUpdates : 1;                          // 0x26A0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData08 : 2;                                        // 0x26A1(0x0001)
	unsigned char                                      bGameCameraCutThisFrame : 1;                              // 0x26A1(0x0001) (BlueprintVisible, BlueprintReadOnly, Transient)
	unsigned char                                      UnknownData09[0x2];                                       // 0x26A2(0x0002) MISSED OFFSET
	float                                              ViewPitchMin;                                             // 0x26A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewPitchMax;                                             // 0x26A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMin;                                               // 0x26AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewYawMax;                                               // 0x26B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMin;                                              // 0x26B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ViewRollMax;                                              // 0x26B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData10[0x4];                                       // 0x26BC(0x0004) MISSED OFFSET
	float                                              ServerUpdateCameraTimeout;                                // 0x26C0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData11[0xC];                                       // 0x26C4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerCameraManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerCameraManager");
		return ptr;
	}


	void StopCameraShake(class UEngine_CameraShake* ShakeInstance, bool bImmediately);
	void StopCameraFade();
	void StopCameraAnimInst(class UEngine_CameraAnimInst* AnimInst, bool bImmediate);
	void StopAllInstancesOfCameraShake(class UClass* Shake, bool bImmediately);
	void StopAllInstancesOfCameraAnim(class UEngine_CameraAnim* Anim, bool bImmediate);
	void StopAllCameraShakes(bool bImmediately);
	void StopAllCameraAnims(bool bImmediate);
	void StartCameraFade(float FromAlpha, float ToAlpha, float Duration, const struct FLinearColor& Color, bool bShouldFadeAudio, bool bHoldWhenFinished);
	void SetManualCameraFade(float InFadeAmount, const struct FLinearColor& Color, bool bInFadeAudio);
	void SetGameCameraCutThisFrame();
	bool RemoveCameraModifier(class UEngine_CameraModifier* ModifierToRemove);
	void RemoveCameraLensEffect(class AEngine_EmitterCameraLensEffectBase* Emitter);
	class UEngine_CameraShake* PlayCameraShake(class UClass* ShakeClass, float Scale, TEnumAsByte<FEngine_Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	class UEngine_CameraAnimInst* PlayCameraAnim(class UEngine_CameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, TEnumAsByte<FEngine_Engine_ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void PhotographyCameraModify(const struct FVector& NewCameraLocation, const struct FVector& PreviousCameraLocation, const struct FVector& OriginalCameraLocation, struct FVector* ResultCameraLocation);
	void OnPhotographySessionStart();
	void OnPhotographySessionEnd();
	void OnPhotographyMultiPartCaptureStart();
	void OnPhotographyMultiPartCaptureEnd();
	class AEngine_PlayerController* GetOwningPlayerController();
	float GetFOVAngle();
	struct FRotator GetCameraRotation();
	struct FVector GetCameraLocation();
	class UEngine_CameraModifier* FindCameraModifierByClass(class UClass* ModifierClass);
	void ClearCameraLensEffects();
	bool BlueprintUpdateCamera(class AEngine_Actor* CameraTarget, struct FVector* NewCameraLocation, struct FRotator* NewCameraRotation, float* NewCameraFOV);
	class UEngine_CameraModifier* AddNewCameraModifier(class UClass* ModifierClass);
	class AEngine_EmitterCameraLensEffectBase* AddCameraLensEffect(class UClass* LensEffectEmitterClass);
};


// Class Engine.TouchInterface
// 0x0030 (0x0058 - 0x0028)
class UEngine_TouchInterface : public UObject
{
public:
	TArray<struct FEngine_TouchInputControl>           Controls;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              ActiveOpacity;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InactiveOpacity;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilDeactive;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TimeUntilReset;                                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ActivationDelay;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreventRecenter;                                         // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              StartupDelay;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0054(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TouchInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TouchInterface");
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_TriggerVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}

};


// Class Engine.TriggerBase
// 0x0008 (0x0220 - 0x0218)
class AEngine_TriggerBase : public AEngine_Actor
{
public:
	class UEngine_ShapeComponent*                      CollisionComponent;                                       // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TriggerBase");
		return ptr;
	}

};


// Class Engine.TriggerBox
// 0x0000 (0x0220 - 0x0220)
class AEngine_TriggerBox : public AEngine_TriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerBox");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TriggerBox");
		return ptr;
	}

};


// Class Engine.WorldSettings
// 0x0180 (0x0398 - 0x0218)
class AEngine_WorldSettings : public AEngine_Info
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	int                                                VisibilityCellSize;                                       // 0x0220(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EVisibilityAggressiveness> VisibilityAggressiveness;                                 // 0x0224(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPrecomputeVisibility : 1;                                // 0x0225(0x0001) (Edit)
	unsigned char                                      bPlaceCellsOnlyAlongCameraTracks : 1;                     // 0x0225(0x0001) (Edit)
	unsigned char                                      bEnableWorldBoundsChecks : 1;                             // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableNavigationSystem : 1;                              // 0x0225(0x0001) (BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableAISystem : 1;                                      // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Config)
	unsigned char                                      bEnableWorldComposition : 1;                              // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseClientSideLevelStreamingVolumes : 1;                  // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableWorldOriginRebasing : 1;                           // 0x0225(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bWorldGravitySet : 1;                                     // 0x0226(0x0001) (Transient)
	unsigned char                                      bGlobalGravitySet : 1;                                    // 0x0226(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bMinimizeBSPSections : 1;                                 // 0x0226(0x0001) (Edit)
	unsigned char                                      bForceNoPrecomputedLighting : 1;                          // 0x0226(0x0001) (Edit)
	unsigned char                                      bHighPriorityLoading : 1;                                 // 0x0226(0x0001) (Net)
	unsigned char                                      bHighPriorityLoadingLocal : 1;                            // 0x0226(0x0001)
	unsigned char                                      bOverrideDefaultBroadphaseSettings : 1;                   // 0x0226(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0227(0x0001) MISSED OFFSET
	class UEngine_NavigationSystemConfig*              NavigationSystemConfig;                                   // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData)
	class UEngine_NavigationSystemConfig*              NavigationSystemConfigOverride;                           // 0x0230(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              WorldToMeters;                                            // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              KillZ;                                                    // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      KillZDamageType;                                          // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldGravityZ;                                            // 0x0248(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              GlobalGravityZ;                                           // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultPhysicsVolumeClass;                                // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData)
	class UClass*                                      PhysicsCollisionHandlerClass;                             // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DefaultGameMode;                                          // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      GameNetworkManagerClass;                                  // 0x0268(0x0008) (ZeroConstructor, IsPlainOldData)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0270(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     DefaultColorScale;                                        // 0x0274(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DefaultMaxDistanceFieldOcclusionDistance;                 // 0x0280(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalDistanceFieldViewDistance;                          // 0x0284(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DynamicIndirectShadowsSelfShadowingIntensity;             // 0x0288(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x028C(0x0004) MISSED OFFSET
	struct FEngine_ReverbSettings                      DefaultReverbSettings;                                    // 0x0290(0x0020) (Edit, Config)
	struct FEngine_InteriorSettings                    DefaultAmbientZoneSettings;                               // 0x02B0(0x0024) (Edit, Config)
	float                                              MonoCullingDistance;                                      // 0x02D4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_SoundMix*                            DefaultBaseSoundMix;                                      // 0x02D8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              timeDilation;                                             // 0x02E0(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              MatineeTimeDilation;                                      // 0x02E4(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              DemoPlayTimeDilation;                                     // 0x02E8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              MinGlobalTimeDilation;                                    // 0x02EC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxGlobalTimeDilation;                                    // 0x02F0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinUndilatedFrameTime;                                    // 0x02F4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxUndilatedFrameTime;                                    // 0x02F8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	struct FEngine_BroadphaseSettings                  BroadphaseSettings;                                       // 0x02FC(0x0040) (Edit, Config)
	unsigned char                                      UnknownData03[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class AEngine_PlayerState*                         Pauser;                                                   // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FEngine_NetViewer>                   ReplicationViewers;                                       // 0x0348(0x0010) (ZeroConstructor)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0358(0x0010) (ExportObject, ZeroConstructor)
	class AEngine_PlayerState*                         PauserPlayerState;                                        // 0x0368(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData)
	int                                                MaxNumberOfBookmarks;                                     // 0x0370(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0374(0x0004) MISSED OFFSET
	class UClass*                                      DefaultBookmarkClass;                                     // 0x0378(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	TArray<class UEngine_BookmarkBase*>                BookmarkArray;                                            // 0x0380(0x0010) (ZeroConstructor)
	class UClass*                                      LastBookmarkClass;                                        // 0x0390(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.WorldSettings");
		return ptr;
	}


	void OnRep_WorldGravityZ();
};


// Class Engine.GameMode
// 0x0048 (0x0300 - 0x02B8)
class AEngine_GameMode : public AEngine_GameModeBase
{
public:
	struct FName                                       MatchState;                                               // 0x02B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bDelayedStart : 1;                                        // 0x02C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02C1(0x0003) MISSED OFFSET
	int                                                NumSpectators;                                            // 0x02C4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumPlayers;                                               // 0x02C8(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumBots;                                                  // 0x02CC(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinRespawnDelay;                                          // 0x02D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                NumTravellingPlayers;                                     // 0x02D4(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UClass*                                      EngineMessageClass;                                       // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class AEngine_PlayerState*>                 InactivePlayerArray;                                      // 0x02E0(0x0010) (ZeroConstructor)
	float                                              InactivePlayerStateLifeSpan;                              // 0x02F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxInactivePlayers;                                       // 0x02F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHandleDedicatedServerReplays;                            // 0x02F8(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x02F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMode");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameMode");
		return ptr;
	}


	void StartMatch();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void Say(const struct FString& Msg);
	void RestartGame();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void K2_OnSetMatchState(const struct FName& NewState);
	bool IsMatchInProgress();
	bool HasMatchEnded();
	struct FName GetMatchState();
	void EndMatch();
	void AbortMatch();
};


// Class Engine.GameStateBase
// 0x0040 (0x0258 - 0x0218)
class AEngine_GameStateBase : public AEngine_Info
{
public:
	class UClass*                                      GameModeClass;                                            // 0x0218(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_GameModeBase*                        AuthorityGameMode;                                        // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      SpectatorClass;                                           // 0x0228(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData)
	TArray<class AEngine_PlayerState*>                 PlayerArray;                                              // 0x0230(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient)
	bool                                               bReplicatedHasBegunPlay;                                  // 0x0240(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0241(0x0003) MISSED OFFSET
	float                                              ReplicatedWorldTimeSeconds;                               // 0x0244(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsDelta;                              // 0x0248(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ServerWorldTimeSecondsUpdateFrequency;                    // 0x024C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0250(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameStateBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameStateBase");
		return ptr;
	}


	void OnRep_SpectatorClass();
	void OnRep_ReplicatedWorldTimeSeconds();
	void OnRep_ReplicatedHasBegunPlay();
	void OnRep_GameModeClass();
	bool HasMatchStarted();
	bool HasBegunPlay();
	float GetServerWorldTimeSeconds();
	float GetPlayerStartTime(class AEngine_Controller* Controller);
	float GetPlayerRespawnDelay(class AEngine_Controller* Controller);
};


// Class Engine.GameState
// 0x0020 (0x0278 - 0x0258)
class AEngine_GameState : public AEngine_GameStateBase
{
public:
	struct FName                                       MatchState;                                               // 0x0258(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FName                                       PreviousMatchState;                                       // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	int                                                ElapsedTime;                                              // 0x0268(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x026C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameState");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameState");
		return ptr;
	}


	void OnRep_MatchState();
	void OnRep_ElapsedTime();
};


// Class Engine.SkyLight
// 0x0010 (0x0228 - 0x0218)
class AEngine_SkyLight : public AEngine_Info
{
public:
	class UEngine_SkyLightComponent*                   LightComponent;                                           // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0220(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.StreamableRenderAsset
// 0x0018 (0x0040 - 0x0028)
class UEngine_StreamableRenderAsset : public UObject
{
public:
	double                                             ForceMipLevelsToBeResidentTimestamp;                      // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                NumCinematicMipLevels;                                    // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                StreamingIndex;                                           // 0x0034(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                CachedCombinedLODBias;                                    // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      CachedNumResidentLODs;                                    // 0x003C(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      bCachedReadyForStreaming : 1;                             // 0x003D(0x0001) (Transient)
	unsigned char                                      NeverStream : 1;                                          // 0x003D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x003D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bIsStreamable : 1;                                        // 0x003D(0x0001) (Transient)
	unsigned char                                      bHasStreamingUpdatePending : 1;                           // 0x003D(0x0001) (Transient)
	unsigned char                                      bForceMiplevelsToBeResident : 1;                          // 0x003D(0x0001) (Transient)
	unsigned char                                      bIgnoreStreamingMipBias : 1;                              // 0x003D(0x0001) (Transient)
	unsigned char                                      bUseCinematicMipLevels : 1;                               // 0x003D(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamableRenderAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StreamableRenderAsset");
		return ptr;
	}

};


// Class Engine.Texture
// 0x0090 (0x00D0 - 0x0040)
class UEngine_Texture : public UEngine_StreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	struct FGuid                                       LightingGuid;                                             // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)
	int                                                LODBias;                                                  // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureCompressionSettings> CompressionSettings;                                      // 0x005C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureFilter>         Filter;                                                   // 0x005D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ETextureMipLoadOptions              MipLoadOptions;                                           // 0x005E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureGroup>          LODGroup;                                                 // 0x005F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      SRGB : 1;                                                 // 0x0060(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoTiling : 1;                                            // 0x0060(0x0001)
	unsigned char                                      VirtualTextureStreaming : 1;                              // 0x0060(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CompressionYCoCg : 1;                                     // 0x0060(0x0001)
	unsigned char                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x0060(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0068(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0078(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.TextureCube
// 0x0058 (0x0128 - 0x00D0)
class UEngine_TextureCube : public UEngine_Texture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x00D0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureCube");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}

};


// Class Engine.StaticMeshComponent
// 0x0070 (0x0470 - 0x0400)
class UEngine_StaticMeshComponent : public UEngine_MeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x0400(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                PreviousLODLevel;                                         // 0x0404(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                MinLOD;                                                   // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SubDivisionStepSize;                                      // 0x040C(0x0004) (ZeroConstructor, IsPlainOldData)
	class UEngine_StaticMesh*                          StaticMesh;                                               // 0x0410(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	struct FColor                                      WireframeColorOverride;                                   // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEvaluateWorldPositionOffset : 1;                         // 0x041C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideWireframeColor : 1;                              // 0x041C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideMinLod : 1;                                      // 0x041C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideNavigationExport : 1;                            // 0x041C(0x0001) (Transient)
	unsigned char                                      bForceNavigationObstacle : 1;                             // 0x041C(0x0001) (Transient)
	unsigned char                                      bDisallowMeshPaintPerInstance : 1;                        // 0x041C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x041C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideLightMapRes : 1;                                 // 0x041C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDistanceFieldIndirectShadow : 1;                     // 0x041D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bOverrideDistanceFieldSelfShadowBias : 1;                 // 0x041D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseSubDivisions : 1;                                     // 0x041D(0x0001)
	unsigned char                                      bUseDefaultCollision : 1;                                 // 0x041D(0x0001) (Edit)
	unsigned char                                      bReverseCulling : 1;                                      // 0x041D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                                       // 0x041E(0x0002) MISSED OFFSET
	int                                                OverriddenLightMapRes;                                    // 0x0420(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldIndirectShadowMinVisibility;                 // 0x0424(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x0428(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StreamingDistanceMultiplier;                              // 0x042C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_StaticMeshComponentLODInfo>  LODData;                                                  // 0x0430(0x0010) (ZeroConstructor, Transient)
	TArray<struct FEngine_StreamingTextureBuildInfo>   StreamingTextureData;                                     // 0x0440(0x0010) (ZeroConstructor)
	struct FEngine_LightmassPrimitiveSettings          LightmassSettings;                                        // 0x0450(0x0018) (Edit)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0468(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}


	bool SetStaticMesh(class UEngine_StaticMesh* NewMesh);
	void SetReverseCulling(bool ReverseCulling);
	void SetForcedLodModel(int NewForcedLodModel);
	void SetDistanceFieldSelfShadowBias(float NewValue);
	void OnRep_StaticMesh(class UEngine_StaticMesh* OldStaticMesh);
	void GetLocalBounds(struct FVector* Min, struct FVector* Max);
};


// Class Engine.InstancedStaticMeshComponent
// 0x0090 (0x0500 - 0x0470)
class UEngine_InstancedStaticMeshComponent : public UEngine_StaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0470(0x0008) MISSED OFFSET
	int                                                InstancingRandomSeed;                                     // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                InstanceStartCullDistance;                                // 0x047C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                InstanceEndCullDistance;                                  // 0x0480(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	TArray<int>                                        InstanceReorderTable;                                     // 0x0488(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x48];                                      // 0x0498(0x0048) MISSED OFFSET
	int                                                NumPendingLightmaps;                                      // 0x04E0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	TArray<struct FEngine_InstancedStaticMeshMappingInfo> CachedMappings;                                           // 0x04E8(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x04F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}


	bool UpdateInstanceTransform(int InstanceIndex, const struct FTransform& NewInstanceTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	void SetCullDistances(int StartCullDistance, int EndCullDistance);
	bool RemoveInstance(int InstanceIndex);
	bool GetInstanceTransform(int InstanceIndex, bool bWorldSpace, struct FTransform* OutInstanceTransform);
	TArray<int> GetInstancesOverlappingSphere(const struct FVector& Center, float Radius, bool bSphereInWorldSpace);
	TArray<int> GetInstancesOverlappingBox(const struct FBox& Box, bool bBoxInWorldSpace);
	int GetInstanceCount();
	void ClearInstances();
	bool BatchUpdateInstancesTransforms(int StartInstanceIndex, TArray<struct FTransform> NewInstancesTransforms, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	bool BatchUpdateInstancesTransform(int StartInstanceIndex, int NumInstances, const struct FTransform& NewInstancesTransform, bool bWorldSpace, bool bMarkRenderStateDirty, bool bTeleport);
	int AddInstanceWorldSpace(const struct FTransform& WorldTransform);
	int AddInstance(const struct FTransform& InstanceTransform);
};


// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00F0 (0x05F0 - 0x0500)
class UEngine_HierarchicalInstancedStaticMeshComponent : public UEngine_InstancedStaticMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0500(0x0008) MISSED OFFSET
	TArray<int>                                        SortedInstances;                                          // 0x0508(0x0010) (ZeroConstructor)
	int                                                NumBuiltInstances;                                        // 0x0518(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x051C(0x0004) MISSED OFFSET
	struct FBox                                        BuiltInstanceBounds;                                      // 0x0520(0x001C) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        UnbuiltInstanceBounds;                                    // 0x053C(0x001C) (ZeroConstructor, IsPlainOldData)
	TArray<struct FBox>                                UnbuiltInstanceBoundsList;                                // 0x0558(0x0010) (ZeroConstructor)
	unsigned char                                      bEnableDensityScaling : 1;                                // 0x0568(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0569(0x0007) MISSED OFFSET
	int                                                OcclusionLayerNumNodes;                                   // 0x0570(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBoxSphereBounds                            CacheMeshExtendedBounds;                                  // 0x0574(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0590(0x0004) MISSED OFFSET
	bool                                               bDisableCollision;                                        // 0x0594(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0595(0x0003) MISSED OFFSET
	int                                                InstanceCountToRender;                                    // 0x0598(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x54];                                      // 0x059C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HierarchicalInstancedStaticMeshComponent");
		return ptr;
	}


	bool RemoveInstances(TArray<int> InstancesToRemove);
};


// Class Engine.MaterialInterface
// 0x0060 (0x0088 - 0x0028)
class UEngine_MaterialInterface : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UEngine_SubsurfaceProfile*                   SubsurfaceProfile;                                        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0040(0x0010) MISSED OFFSET
	struct FEngine_LightmassMaterialInterfaceSettings  LightmassSettings;                                        // 0x0050(0x0010) (Edit)
	TArray<struct FEngine_MaterialTextureInfo>         TextureStreamingData;                                     // 0x0060(0x0010) (ZeroConstructor)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}


	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups, bool bFastResponse);
	class UEngine_PhysicalMaterial* GetPhysicalMaterial();
	class UEngine_Material* GetBaseMaterial();
};


// Class Engine.MaterialInstance
// 0x0150 (0x01D8 - 0x0088)
class UEngine_MaterialInstance : public UEngine_MaterialInterface
{
public:
	class UEngine_PhysicalMaterial*                    PhysMaterial;                                             // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialInterface*                   Parent;                                                   // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasStaticPermutationResource : 1;                        // 0x0098(0x0001)
	unsigned char                                      bOverrideSubsurfaceProfile : 1;                           // 0x0098(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<struct FEngine_ScalarParameterValue>        ScalarParameterValues;                                    // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FEngine_VectorParameterValue>        VectorParameterValues;                                    // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FEngine_TextureParameterValue>       TextureParameterValues;                                   // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FEngine_RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x00D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FEngine_FontParameterValue>          FontParameterValues;                                      // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FEngine_MaterialInstanceBasePropertyOverrides BasePropertyOverrides;                                    // 0x00F0(0x0008) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00F8(0x0010) MISSED OFFSET
	TArray<class UObject*>                             PermutationTextureReferences;                             // 0x0108(0x0010) (ZeroConstructor, Transient)
	struct FEngine_StaticParameterSet                  StaticParameters;                                         // 0x0118(0x0040)
	unsigned char                                      UnknownData02[0x80];                                      // 0x0158(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}

};


// Class Engine.MaterialInstanceConstant
// 0x0000 (0x01D8 - 0x01D8)
class UEngine_MaterialInstanceConstant : public UEngine_MaterialInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}


	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UEngine_Texture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
};


// Class Engine.MaterialExpressionCustomOutput
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionCustomOutput : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomOutput");
		return ptr;
	}

};


// Class Engine.EngineCustomTimeStep
// 0x0000 (0x0028 - 0x0028)
class UEngine_EngineCustomTimeStep : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineCustomTimeStep");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineCustomTimeStep");
		return ptr;
	}

};


// Class Engine.BlueprintGeneratedClass
// 0x00F0 (0x0300 - 0x0210)
class UEngine_BlueprintGeneratedClass : public UClass
{
public:
	int                                                NumReplicatedProperties;                                  // 0x0210(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHasNativizedParent : 1;                                  // 0x0214(0x0001)
	unsigned char                                      bHasCookedComponentInstancingData : 1;                    // 0x0214(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	TArray<class UEngine_DynamicBlueprintBinding*>     DynamicBindingObjects;                                    // 0x0218(0x0010) (ZeroConstructor)
	TArray<class UEngine_ActorComponent*>              ComponentTemplates;                                       // 0x0228(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UEngine_TimelineTemplate*>            Timelines;                                                // 0x0238(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BPComponentClassOverride>    ComponentClassOverrides;                                  // 0x0248(0x0010) (ZeroConstructor)
	class UEngine_SimpleConstructionScript*            SimpleConstructionScript;                                 // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_InheritableComponentHandler*         InheritableComponentHandler;                              // 0x0260(0x0008) (ZeroConstructor, IsPlainOldData)
	class UStructProperty*                             UberGraphFramePointerProperty;                            // 0x0268(0x0008) (ZeroConstructor, IsPlainOldData)
	class UFunction*                                   UberGraphFunction;                                        // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData)
	TMap<struct FName, struct FEngine_BlueprintCookedComponentInstancingData> CookedComponentInstancingData;                            // 0x0278(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x38];                                      // 0x02C8(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintGeneratedClass");
		return ptr;
	}

};


// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
class UEngine_DynamicBlueprintBinding : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DynamicBlueprintBinding");
		return ptr;
	}

};


// Class Engine.SoundEffectPreset
// 0x0018 (0x0040 - 0x0028)
class UEngine_SoundEffectPreset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectPreset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundEffectPreset");
		return ptr;
	}

};


// Class Engine.SoundEffectSubmixPreset
// 0x0000 (0x0040 - 0x0040)
class UEngine_SoundEffectSubmixPreset : public UEngine_SoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSubmixPreset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundEffectSubmixPreset");
		return ptr;
	}

};


// Class Engine.SoundBase
// 0x0138 (0x0160 - 0x0028)
class UEngine_SoundBase : public UObject
{
public:
	class UEngine_SoundClass*                          SoundClassObject;                                         // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDebug : 1;                                               // 0x0030(0x0001) (Edit)
	unsigned char                                      bOverrideConcurrency : 1;                                 // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOutputToBusOnly : 1;                                     // 0x0030(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHasDelayNode : 1;                                        // 0x0030(0x0001)
	unsigned char                                      bHasConcatenatorNode : 1;                                 // 0x0030(0x0001)
	unsigned char                                      bBypassVolumeScaleForPriority : 1;                        // 0x0030(0x0001) (Edit, BlueprintVisible)
	FEngine_Engine_EVirtualizationMode                 VirtualizationMode;                                       // 0x0031(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x56];                                      // 0x0032(0x0056) MISSED OFFSET
	unsigned char                                      UnknownData01[0x50];                                      // 0x0032(0x0050) UNKNOWN PROPERTY: SetProperty Engine.SoundBase.ConcurrencySet
	struct FEngine_SoundConcurrencySettings            ConcurrencyOverrides;                                     // 0x00D8(0x0020) (Edit, BlueprintVisible)
	float                                              Duration;                                                 // 0x00F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              MaxDistance;                                              // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              TotalSamples;                                             // 0x0100(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              Priority;                                                 // 0x0104(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_SoundAttenuation*                    AttenuationSettings;                                      // 0x0108(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_SoundModulation                     Modulation;                                               // 0x0110(0x0010) (Edit)
	class UEngine_SoundSubmix*                         SoundSubmixObject;                                        // 0x0120(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_SoundSubmixSendInfo>         SoundSubmixSends;                                         // 0x0128(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	class UEngine_SoundEffectSourcePresetChain*        SourceEffectChain;                                        // 0x0138(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_SoundSourceBusSendInfo>      BusSends;                                                 // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FEngine_SoundSourceBusSendInfo>      PreEffectBusSends;                                        // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundBase");
		return ptr;
	}

};


// Class Engine.SoundWave
// 0x0218 (0x0378 - 0x0160)
class UEngine_SoundWave : public UEngine_SoundBase
{
public:
	int                                                CompressionQuality;                                       // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                StreamingPriority;                                        // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FAudioPlatformConfiguration_AudioPlatformConfiguration_ESoundwaveSampleRateSettings SampleRateQuality;                                        // 0x0168(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0169(0x0001) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ESoundGroup>            SoundGroup;                                               // 0x016A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x016B(0x0001) (Edit)
	unsigned char                                      bStreaming : 1;                                           // 0x016B(0x0001) (Edit)
	unsigned char                                      bSeekableStreaming : 1;                                   // 0x016B(0x0001) (Edit)
	FEngine_Engine_ESoundWaveLoadingBehavior           LoadingBehavior;                                          // 0x016C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01 : 4;                                        // 0x016D(0x0001)
	unsigned char                                      bMature : 1;                                              // 0x016D(0x0001) (Edit)
	unsigned char                                      bManualWordWrap : 1;                                      // 0x016D(0x0001) (Edit)
	unsigned char                                      bSingleLine : 1;                                          // 0x016D(0x0001) (Edit)
	unsigned char                                      bIsAmbisonics : 1;                                        // 0x016D(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x2];                                       // 0x016E(0x0002) MISSED OFFSET
	TArray<float>                                      FrequenciesToAnalyze;                                     // 0x0170(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_SoundWaveSpectralTimeData>   CookedSpectralTimeData;                                   // 0x0180(0x0010) (ZeroConstructor)
	TArray<struct FEngine_SoundWaveEnvelopeTimeData>   CookedEnvelopeTimeData;                                   // 0x0190(0x0010) (ZeroConstructor)
	int                                                InitialChunkSize;                                         // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x44];                                      // 0x01A4(0x0044) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x01E8(0x0010) (Edit, ZeroConstructor)
	float                                              SubtitlePriority;                                         // 0x01F8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Volume;                                                   // 0x01FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Pitch;                                                    // 0x0200(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumChannels;                                              // 0x0204(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SampleRate;                                               // 0x0208(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x020C(0x000C) MISSED OFFSET
	TArray<struct FEngine_SubtitleCue>                 Subtitles;                                                // 0x0218(0x0010) (Edit, ZeroConstructor)
	class UEngine_CurveTable*                          Curves;                                                   // 0x0228(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_CurveTable*                          InternalCurves;                                           // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x140];                                     // 0x0238(0x0140) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundWave");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundWave");
		return ptr;
	}

};


// Class Engine.SoundWaveProcedural
// 0x0058 (0x03D0 - 0x0378)
class UEngine_SoundWaveProcedural : public UEngine_SoundWave
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x0378(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundWaveProcedural");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundWaveProcedural");
		return ptr;
	}

};


// Class Engine.BlueprintCore
// 0x0028 (0x0050 - 0x0028)
class UEngine_BlueprintCore : public UObject
{
public:
	class UClass*                                      SkeletonGeneratedClass;                                   // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UClass*                                      GeneratedClass;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bLegacyNeedToPurgeSkelRefs;                               // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FGuid                                       BlueprintGuid;                                            // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintCore");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintCore");
		return ptr;
	}

};


// Class Engine.Blueprint
// 0x0050 (0x00A0 - 0x0050)
class UEngine_Blueprint : public UEngine_BlueprintCore
{
public:
	class UClass*                                      ParentClass;                                              // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EBlueprintType>         BlueprintType;                                            // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecompileOnLoad : 1;                                     // 0x0059(0x0001) (Config)
	unsigned char                                      bHasBeenRegenerated : 1;                                  // 0x0059(0x0001) (Transient)
	unsigned char                                      bIsRegeneratingOnLoad : 1;                                // 0x0059(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	int                                                BlueprintSystemVersion;                                   // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	class UEngine_SimpleConstructionScript*            SimpleConstructionScript;                                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_ActorComponent*>              ComponentTemplates;                                       // 0x0068(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UEngine_TimelineTemplate*>            Timelines;                                                // 0x0078(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BPComponentClassOverride>    ComponentClassOverrides;                                  // 0x0088(0x0010) (ZeroConstructor)
	class UEngine_InheritableComponentHandler*         InheritableComponentHandler;                              // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Blueprint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Blueprint");
		return ptr;
	}

};


// Class Engine.Channel
// 0x0048 (0x0070 - 0x0028)
class UEngine_Channel : public UObject
{
public:
	class UEngine_NetConnection*                       Connection;                                               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0030(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0228 (0x0298 - 0x0070)
class UEngine_ActorChannel : public UEngine_Channel
{
public:
	class AEngine_Actor*                               Actor;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xE8];                                      // 0x0078(0x00E8) MISSED OFFSET
	TArray<class UObject*>                             CreateSubObjects;                                         // 0x0160(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x128];                                     // 0x0170(0x0128) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.AnimationAsset
// 0x0058 (0x0080 - 0x0028)
class UEngine_AnimationAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UEngine_Skeleton*                            Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	TArray<class UEngine_AnimMetaData*>                MetaData;                                                 // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimationAsset");
		return ptr;
	}

};


// Class Engine.BlendSpaceBase
// 0x00C8 (0x0148 - 0x0080)
class UEngine_BlendSpaceBase : public UEngine_AnimationAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) MISSED OFFSET
	bool                                               bRotationBlendInMeshSpace;                                // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	float                                              AnimLength;                                               // 0x008C(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	struct FEngine_InterpolationParameter              InterpolationParam[0x3];                                  // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TargetWeightInterpolationSpeedPerSec;                     // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENotifyTriggerMode>     NotifyTriggerMode;                                        // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	TArray<struct FEngine_PerBoneInterpolation>        PerBoneBlend;                                             // 0x00B0(0x0010) (Edit, ZeroConstructor)
	int                                                SampleIndexWithMarkers;                                   // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FEngine_BlendSample>                 SampleData;                                               // 0x00C8(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_EditorElement>               GridSamples;                                              // 0x00D8(0x0010) (ZeroConstructor)
	struct FEngine_BlendParameter                      BlendParameters[0x3];                                     // 0x00E8(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpaceBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlendSpaceBase");
		return ptr;
	}

};


// Class Engine.BlendSpace
// 0x0008 (0x0150 - 0x0148)
class UEngine_BlendSpace : public UEngine_BlendSpaceBase
{
public:
	TEnumAsByte<FEngine_Engine_EBlendSpaceAxis>        AxisToScaleAnimation;                                     // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlendSpace");
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace
// 0x0000 (0x0150 - 0x0150)
class UEngine_AimOffsetBlendSpace : public UEngine_BlendSpace
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace");
		return ptr;
	}

};


// Class Engine.Model
// 0x02A8 (0x02D0 - 0x0028)
class UEngine_Model : public UObject
{
public:
	unsigned char                                      UnknownData00[0x2A8];                                     // 0x0028(0x02A8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.BlendSpace1D
// 0x0008 (0x0150 - 0x0148)
class UEngine_BlendSpace1D : public UEngine_BlendSpaceBase
{
public:
	bool                                               bScaleAnimation;                                          // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendSpace1D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlendSpace1D");
		return ptr;
	}

};


// Class Engine.AimOffsetBlendSpace1D
// 0x0000 (0x0150 - 0x0150)
class UEngine_AimOffsetBlendSpace1D : public UEngine_BlendSpace1D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AimOffsetBlendSpace1D");
		return ptr;
	}

};


// Class Engine.AISystemBase
// 0x0030 (0x0058 - 0x0028)
class UEngine_AISystemBase : public UObject
{
public:
	struct FSoftClassPath                              AISystemClassName;                                        // 0x0028(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear)
	struct FName                                       AISystemModuleName;                                       // 0x0040(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	bool                                               bInstantiateAISystemOnClient;                             // 0x0050(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AISystemBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AISystemBase");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x0220 - 0x0218)
class AEngine_AmbientSound : public AEngine_Actor
{
public:
	class UEngine_AudioComponent*                      AudioComponent;                                           // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}


	void Stop();
	void Play(float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
};


// Class Engine.AnimationSettings
// 0x0038 (0x0070 - 0x0038)
class UEngine_AnimationSettings : public UEngine_DeveloperSettings
{
public:
	int                                                CompressCommandletVersion;                                // 0x0038(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	TArray<struct FString>                             KeyEndEffectorsMatchNameArray;                            // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	class UClass*                                      DefaultCompressionAlgorithm;                              // 0x0050(0x0008) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat> RotationCompressionFormat;                                // 0x0058(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat> TranslationCompressionFormat;                             // 0x0059(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	float                                              MaxCurveError;                                            // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              AlternativeCompressionThreshold;                          // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               ForceRecompression;                                       // 0x0064(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bOnlyCheckForMissingSkeletalMeshes;                       // 0x0065(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bForceBelowThreshold;                                     // 0x0066(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bFirstRecompressUsingCurrentOrDefault;                    // 0x0067(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRaiseMaxErrorToExisting;                                 // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTryExhaustiveSearch;                                     // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableSegmenting;                                        // 0x006A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePerformanceLog;                                    // 0x006B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bStripAnimationDataOnDedicatedServer;                     // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bTickAnimationOnSkeletalMeshInit;                         // 0x006D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x006E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimationSettings");
		return ptr;
	}

};


// Class Engine.AnimBlueprintGeneratedClass
// 0x01C0 (0x04C0 - 0x0300)
class UEngine_AnimBlueprintGeneratedClass : public UEngine_BlueprintGeneratedClass
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0300(0x0008) MISSED OFFSET
	TArray<struct FEngine_BakedAnimationStateMachine>  BakedStateMachines;                                       // 0x0308(0x0010) (ZeroConstructor)
	class UEngine_Skeleton*                            TargetSkeleton;                                           // 0x0318(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_AnimNotifyEvent>             AnimNotifies;                                             // 0x0320(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FEngine_CachedPoseIndices> OrderedSavedPoseIndicesMap;                               // 0x0330(0x0050) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0380(0x0080) MISSED OFFSET
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0400(0x0010) (ZeroConstructor)
	TArray<struct FEngine_ExposedValueHandler>         EvaluateGraphExposedInputs;                               // 0x0410(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FEngine_GraphAssetPlayerInformation> GraphAssetPlayerInformation;                              // 0x0420(0x0050) (ZeroConstructor)
	TMap<struct FName, struct FEngine_AnimGraphBlendOptions> GraphBlendOptions;                                        // 0x0470(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimBlueprintGeneratedClass");
		return ptr;
	}

};


// Class Engine.AnimClassData
// 0x01C0 (0x01E8 - 0x0028)
class UEngine_AnimClassData : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FEngine_BakedAnimationStateMachine>  BakedStateMachines;                                       // 0x0030(0x0010) (ZeroConstructor)
	class UEngine_Skeleton*                            TargetSkeleton;                                           // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_AnimNotifyEvent>             AnimNotifies;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FEngine_CachedPoseIndices> OrderedSavedPoseIndicesMap;                               // 0x0058(0x0050) (ZeroConstructor)
	TArray<struct FEngine_AnimBlueprintFunction>       AnimBlueprintFunctions;                                   // 0x00A8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     AnimNodeProperties;                                       // 0x00B8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     LinkedAnimGraphNodeProperties;                            // 0x00C8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     LinkedAnimLayerNodeProperties;                            // 0x00D8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     PreUpdateNodeProperties;                                  // 0x00E8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     DynamicResetNodeProperties;                               // 0x00F8(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     StateMachineNodeProperties;                               // 0x0108(0x0010) (ZeroConstructor)
	TArray<class UStructProperty*>                     InitializationNodeProperties;                             // 0x0118(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FEngine_GraphAssetPlayerInformation> GraphNameAssetPlayers;                                    // 0x0128(0x0050) (ZeroConstructor)
	TArray<struct FName>                               SyncGroupNames;                                           // 0x0178(0x0010) (ZeroConstructor)
	TArray<struct FEngine_ExposedValueHandler>         EvaluateGraphExposedInputs;                               // 0x0188(0x0010) (ZeroConstructor)
	TMap<struct FName, struct FEngine_AnimGraphBlendOptions> GraphBlendOptions;                                        // 0x0198(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimClassData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimClassData");
		return ptr;
	}

};


// Class Engine.AnimSequenceBase
// 0x0028 (0x00A8 - 0x0080)
class UEngine_AnimSequenceBase : public UEngine_AnimationAsset
{
public:
	TArray<struct FEngine_AnimNotifyEvent>             Notifies;                                                 // 0x0080(0x0010) (ZeroConstructor)
	float                                              SequenceLength;                                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              RateScale;                                                // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_RawCurveTracks                      RawCurveData;                                             // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequenceBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimSequenceBase");
		return ptr;
	}


	float GetPlayLength();
};


// Class Engine.AnimCompositeBase
// 0x0000 (0x00A8 - 0x00A8)
class UEngine_AnimCompositeBase : public UEngine_AnimSequenceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompositeBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompositeBase");
		return ptr;
	}

};


// Class Engine.AnimComposite
// 0x0010 (0x00B8 - 0x00A8)
class UEngine_AnimComposite : public UEngine_AnimCompositeBase
{
public:
	struct FEngine_AnimTrack                           AnimationTrack;                                           // 0x00A8(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimComposite");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimComposite");
		return ptr;
	}

};


// Class Engine.AnimCompress
// 0x0028 (0x0050 - 0x0028)
class UEngine_AnimCompress : public UObject
{
public:
	struct FString                                     Description;                                              // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      bNeedsSkeleton : 1;                                       // 0x0038(0x0001)
	unsigned char                                      bEnableSegmenting : 1;                                    // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	uint32_t                                           IdealNumFramesPerSegment;                                 // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MaxNumFramesPerSegment;                                   // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat> TranslationCompressionFormat;                             // 0x0044(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat> RotationCompressionFormat;                                // 0x0045(0x0001) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat> ScaleCompressionFormat;                                   // 0x0046(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	float                                              MaxCurveError;                                            // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress");
		return ptr;
	}

};


// Class Engine.AnimCompress_Automatic
// 0x0008 (0x0058 - 0x0050)
class UEngine_AnimCompress_Automatic : public UEngine_AnimCompress
{
public:
	float                                              MaxEndEffectorError;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRunCurrentDefaultCompressor : 1;                         // 0x0054(0x0001) (Edit)
	unsigned char                                      bAutoReplaceIfExistingErrorTooGreat : 1;                  // 0x0054(0x0001) (Edit)
	unsigned char                                      bRaiseMaxErrorToExisting : 1;                             // 0x0054(0x0001) (Edit)
	unsigned char                                      bTryExhaustiveSearch : 1;                                 // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_Automatic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_Automatic");
		return ptr;
	}

};


// Class Engine.AnimCompress_LeastDestructive
// 0x0000 (0x0050 - 0x0050)
class UEngine_AnimCompress_LeastDestructive : public UEngine_AnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_LeastDestructive");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0020 (0x0070 - 0x0050)
class UEngine_AnimCompress_RemoveLinearKeys : public UEngine_AnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxEffectorDiff;                                          // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinEffectorDiff;                                          // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EffectorDiffSocket;                                       // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentKeyScale;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRetarget : 1;                                            // 0x006C(0x0001) (Edit)
	unsigned char                                      bActuallyFilterLinearKeys : 1;                            // 0x006C(0x0001) (Edit)
	unsigned char                                      bOptimizeForForwardPlayback : 1;                          // 0x006C(0x0001)
	unsigned char                                      bUseDecompression : 1;                                    // 0x006C(0x0001) (Edit)
	unsigned char                                      bUseMultithreading : 1;                                   // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveLinearKeys");
		return ptr;
	}

};


// Class Engine.AnimBlueprint
// 0x0028 (0x00C8 - 0x00A0)
class UEngine_AnimBlueprint : public UEngine_Blueprint
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A0(0x0008) MISSED OFFSET
	class UEngine_Skeleton*                            TargetSkeleton;                                           // 0x00A8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_AnimGroupInfo>               Groups;                                                   // 0x00B0(0x0010) (ZeroConstructor)
	bool                                               bUseMultiThreadedAnimationUpdate;                         // 0x00C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bWarnAboutBlueprintUsage;                                 // 0x00C1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x6];                                       // 0x00C2(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimBlueprint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimBlueprint");
		return ptr;
	}

};


// Class Engine.AnimCompress_PerTrackCompression
// 0x0080 (0x00F0 - 0x0070)
class UEngine_AnimCompress_PerTrackCompression : public UEngine_AnimCompress_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxPosDiffBitwise;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiffBitwise;                                      // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiffBitwise;                                      // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat>> AllowedRotationFormats;                                   // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat>> AllowedTranslationFormats;                                // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<TEnumAsByte<FEngine_Engine_EAnimationCompressionFormat>> AllowedScaleFormats;                                      // 0x00A0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bResampleAnimation : 1;                                   // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	float                                              ResampledFramerate;                                       // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MinKeysForResampling;                                     // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError : 1;                                    // 0x00BC(0x0001) (Edit)
	unsigned char                                      bUseOverrideForEndEffectors : 1;                          // 0x00BC(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                TrackHeightBias;                                          // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisor;                                         // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ParentingDivisorExponent;                                 // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseAdaptiveError2 : 1;                                   // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	float                                              RotationErrorSourceRatio;                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslationErrorSourceRatio;                              // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ScaleErrorSourceRatio;                                    // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PerturbationProbeSize;                                    // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0xC];                                       // 0x00E4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_PerTrackCompression");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0008 (0x0058 - 0x0050)
class UEngine_AnimCompress_RemoveEverySecondKey : public UEngine_AnimCompress
{
public:
	int                                                MinKeys;                                                  // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStartAtSecondKey : 1;                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveEverySecondKey");
		return ptr;
	}

};


// Class Engine.AnimClassInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimClassInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimClassInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimClassInterface");
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimCurveCompressionCodec : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec");
		return ptr;
	}

};


// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x0060 - 0x0050)
class UEngine_AnimCompress_RemoveTrivialKeys : public UEngine_AnimCompress
{
public:
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxScaleDiff;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_RemoveTrivialKeys");
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimCurveCompressionCodec_CompressedRichCurve : public UEngine_AnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_CompressedRichCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_CompressedRichCurve");
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimCurveCompressionCodec_UniformlySampled : public UEngine_AnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformlySampled");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformlySampled");
		return ptr;
	}

};


// Class Engine.AnimLayerInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimLayerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimLayerInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimLayerInterface");
		return ptr;
	}

};


// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}

};


// Class Engine.AnimMontage
// 0x0128 (0x01D0 - 0x00A8)
class UEngine_AnimMontage : public UEngine_AnimCompositeBase
{
public:
	struct FEngine_AlphaBlend                          BlendIn;                                                  // 0x00A8(0x0030) (Edit)
	float                                              BlendInTime;                                              // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FEngine_AlphaBlend                          BlendOut;                                                 // 0x00E0(0x0030) (Edit)
	float                                              BlendOutTime;                                             // 0x0110(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              BlendOutTriggerTime;                                      // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SyncGroup;                                                // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SyncSlotIndex;                                            // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct FEngine_MarkerSyncData                      MarkerData;                                               // 0x0128(0x0020)
	TArray<struct FEngine_CompositeSection>            CompositeSections;                                        // 0x0148(0x0010) (ZeroConstructor)
	TArray<struct FEngine_SlotAnimationTrack>          SlotAnimTracks;                                           // 0x0158(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BranchingPoint>              BranchingPoints;                                          // 0x0168(0x0010) (ZeroConstructor, Deprecated)
	bool                                               bEnableRootMotionTranslation;                             // 0x0178(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotionRotation;                                // 0x0179(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bEnableAutoBlendOut;                                      // 0x017A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERootMotionRootLock>    RootMotionRootLock;                                       // 0x017B(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	TArray<struct FEngine_BranchingPointMarker>        BranchingPointMarkers;                                    // 0x0180(0x0010) (ZeroConstructor)
	TArray<int>                                        BranchingPointStateNotifyIndices;                         // 0x0190(0x0010) (ZeroConstructor)
	struct FEngine_TimeStretchCurve                    TimeStretchCurve;                                         // 0x01A0(0x0028) (Edit)
	struct FName                                       TimeStretchCurveName;                                     // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMontage");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimMontage");
		return ptr;
	}


	float GetDefaultBlendOutTime();
};


// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UEngine_AnimNotify_PauseClothingSimulation : public UEngine_AnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PauseClothingSimulation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_PauseClothingSimulation");
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionSettings
// 0x0008 (0x0030 - 0x0028)
class UEngine_AnimCurveCompressionSettings : public UObject
{
public:
	class UEngine_AnimCurveCompressionCodec*           Codec;                                                    // 0x0028(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCurveCompressionSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCurveCompressionSettings");
		return ptr;
	}

};


// Class Engine.AnimCurveCompressionCodec_UniformIndexable
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimCurveCompressionCodec_UniformIndexable : public UEngine_AnimCurveCompressionCodec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformIndexable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCurveCompressionCodec_UniformIndexable");
		return ptr;
	}

};


// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UEngine_AnimNotify_ResetClothingSimulation : public UEngine_AnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ResetClothingSimulation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_ResetClothingSimulation");
		return ptr;
	}

};


// Class Engine.AnimNotify_ResetDynamics
// 0x0000 (0x0038 - 0x0038)
class UEngine_AnimNotify_ResetDynamics : public UEngine_AnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ResetDynamics");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_ResetDynamics");
		return ptr;
	}

};


// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0000 (0x0038 - 0x0038)
class UEngine_AnimNotify_ResumeClothingSimulation : public UEngine_AnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ResumeClothingSimulation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotify_ResumeClothingSimulation");
		return ptr;
	}

};


// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0030 (0x0060 - 0x0030)
class UEngine_AnimNotifyState_TimedParticleEffect : public UEngine_AnimNotifyState
{
public:
	class UEngine_ParticleSystem*                      PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SocketName;                                               // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LocationOffset;                                           // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RotationOffset;                                           // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bDestroyAtEnd;                                            // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotifyState_TimedParticleEffect");
		return ptr;
	}

};


// Class Engine.AnimNotifyState_Trail
// 0x0028 (0x0058 - 0x0030)
class UEngine_AnimNotifyState_Trail : public UEngine_AnimNotifyState
{
public:
	class UEngine_ParticleSystem*                      PSTemplate;                                               // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       FirstSocketName;                                          // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FName                                       SecondSocketName;                                         // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETrailWidthMode>        WidthScaleMode;                                           // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       WidthScaleCurve;                                          // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRecycleSpawnedSystems : 1;                               // 0x0054(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotifyState_Trail");
		return ptr;
	}


	class UEngine_ParticleSystem* OverridePSTemplate(class UEngine_SkeletalMeshComponent* MeshComp, class UEngine_AnimSequenceBase* Animation);
};


// Class Engine.AnimSequence
// 0x0150 (0x01F8 - 0x00A8)
class UEngine_AnimSequence : public UEngine_AnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FEngine_TrackToSkeletonMap>          TrackToSkeletonMapTable;                                  // 0x00B0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00C0(0x0010) MISSED OFFSET
	class UEngine_AnimCurveCompressionSettings*        CurveCompressionSettings;                                 // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xD0];                                      // 0x00D8(0x00D0) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAdditiveAnimationType> AdditiveAnimType;                                         // 0x01A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EAdditiveBasePoseType>  RefPoseType;                                              // 0x01A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6];                                       // 0x01AA(0x0006) MISSED OFFSET
	class UEngine_AnimSequence*                        RefPoseSeq;                                               // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                RefFrameIndex;                                            // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x01BC(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAnimInterpolationType              Interpolation;                                            // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x01C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERootMotionRootLock>    RootMotionRootLock;                                       // 0x01C6(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x01C7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x01C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRootMotionSettingsCopiedFromMontage;                     // 0x01C9(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x01CA(0x0006) MISSED OFFSET
	TArray<struct FEngine_AnimSyncMarker>              AuthoredSyncMarkers;                                      // 0x01D0(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x18];                                      // 0x01E0(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequence");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}

};


// Class Engine.AnimSet
// 0x00C8 (0x00F0 - 0x0028)
class UEngine_AnimSet : public UObject
{
public:
	unsigned char                                      bAnimRotationOnly : 1;                                    // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FEngine_AnimSetMeshLinkup>           LinkupCache;                                              // 0x0040(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x0050(0x0010) (ZeroConstructor, Transient)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x0060(0x0010) (ZeroConstructor, Transient)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0080(0x0010) (Edit, ZeroConstructor)
	struct FName                                       PreviewSkelMeshName;                                      // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00A0(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSet");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}

};


// Class Engine.AnimSingleNodeInstance
// 0x0010 (0x0280 - 0x0270)
class UEngine_AnimSingleNodeInstance : public UEngine_AnimInstance
{
public:
	struct FScriptDelegate                             PostEvaluateAnimEvent;                                    // 0x0270(0x0014) (ZeroConstructor, Transient, InstancedReference)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimSingleNodeInstance");
		return ptr;
	}


	void StopAnim();
	void SetReverse(bool bInReverse);
	void SetPreviewCurveOverride(const struct FName& PoseName, float Value, bool bRemoveIfZero);
	void SetPositionWithPreviousTime(float InPosition, float InPreviousTime, bool bFireNotifies);
	void SetPosition(float InPosition, bool bFireNotifies);
	void SetPlayRate(float InPlayRate);
	void SetPlaying(bool bIsPlaying);
	void SetLooping(bool bIsLooping);
	void SetBlendSpaceInput(const struct FVector& InBlendInput);
	void SetAnimationAsset(class UEngine_AnimationAsset* NewAsset, bool bIsLooping, float InPlayRate);
	void PlayAnim(bool bIsLooping, float InPlayRate, float InStartPosition);
	float GetLength();
	class UEngine_AnimationAsset* GetAnimationAsset();
};


// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngine_AnimStateMachineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimStateMachineTypes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimStateMachineTypes");
		return ptr;
	}

};


// Class Engine.AnimStreamable
// 0x0030 (0x00D8 - 0x00A8)
class UEngine_AnimStreamable : public UEngine_AnimSequenceBase
{
public:
	int                                                NumFrames;                                                // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EAnimInterpolationType              Interpolation;                                            // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	struct FName                                       RetargetSource;                                           // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) MISSED OFFSET
	class UEngine_AnimCurveCompressionSettings*        CurveCompressionSettings;                                 // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableRootMotion;                                        // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERootMotionRootLock>    RootMotionRootLock;                                       // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bForceRootLock;                                           // 0x00D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseNormalizedRootMotionScale;                            // 0x00D3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimStreamable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimStreamable");
		return ptr;
	}

};


// Class Engine.ArrowComponent
// 0x0010 (0x03F0 - 0x03E0)
class UEngine_ArrowComponent : public UEngine_PrimitiveComponent
{
public:
	float                                              ScreenSize;                                               // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x03E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bTreatAsASprite : 1;                                      // 0x03E4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0xB];                                       // 0x03E5(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ArrowComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}


	void SetArrowColor(const struct FLinearColor& NewColor);
};


// Class Engine.AssetExportTask
// 0x0050 (0x0078 - 0x0028)
class UEngine_AssetExportTask : public UObject
{
public:
	class UObject*                                     Object;                                                   // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_Exporter*                            Exporter;                                                 // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Filename;                                                 // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	bool                                               bSelected;                                                // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bReplaceIdentical;                                        // 0x0049(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bPrompt;                                                  // 0x004A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAutomated;                                               // 0x004B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseFileArchive;                                          // 0x004C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bWriteEmptyFiles;                                         // 0x004D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	TArray<class UObject*>                             IgnoreObjectList;                                         // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor)
	class UObject*                                     Options;                                                  // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             Errors;                                                   // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetExportTask");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetExportTask");
		return ptr;
	}

};


// Class Engine.AssetManagerSettings
// 0x00C8 (0x0100 - 0x0038)
class UEngine_AssetManagerSettings : public UEngine_DeveloperSettings
{
public:
	TArray<struct FEngine_PrimaryAssetTypeInfo>        PrimaryAssetTypesToScan;                                  // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_DirectoryPath>               DirectoriesToExclude;                                     // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_PrimaryAssetRulesOverride>   PrimaryAssetRules;                                        // 0x0058(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_PrimaryAssetRulesCustomOverride> CustomPrimaryAssetRules;                                  // 0x0068(0x0010) (Edit, ZeroConstructor, Config)
	bool                                               bOnlyCookProductionAssets;                                // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldManagerDetermineTypeAndName;                       // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldGuessTypeAndNameInEditor;                          // 0x007A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x007B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FEngine_AssetManagerRedirect>        PrimaryAssetIdRedirects;                                  // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_AssetManagerRedirect>        PrimaryAssetTypeRedirects;                                // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_AssetManagerRedirect>        AssetPathRedirects;                                       // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00B0(0x0050) UNKNOWN PROPERTY: SetProperty Engine.AssetManagerSettings.MetaDataTagsForAssetRegistry

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetManagerSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetManagerSettings");
		return ptr;
	}

};


// Class Engine.AssetMappingTable
// 0x0010 (0x0038 - 0x0028)
class UEngine_AssetMappingTable : public UObject
{
public:
	TArray<struct FEngine_AssetMapping>                MappedAssets;                                             // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetMappingTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetMappingTable");
		return ptr;
	}

};


// Class Engine.AsyncActionHandleSaveGame
// 0x0038 (0x0068 - 0x0030)
class UEngine_AsyncActionHandleSaveGame : public UEngine_BlueprintAsyncActionBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	class UEngine_SaveGame*                            SaveGameObject;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionHandleSaveGame");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionHandleSaveGame");
		return ptr;
	}


	class UEngine_AsyncActionHandleSaveGame* STATIC_AsyncSaveGameToSlot(class UObject* WorldContextObject, class UEngine_SaveGame* SaveGameObject, const struct FString& SlotName, int UserIndex);
	class UEngine_AsyncActionHandleSaveGame* STATIC_AsyncLoadGameFromSlot(class UObject* WorldContextObject, const struct FString& SlotName, int UserIndex);
};


// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0048 (0x0078 - 0x0030)
class UEngine_AsyncActionLoadPrimaryAssetBase : public UEngine_BlueprintAsyncActionBase
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x0030(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetBase");
		return ptr;
	}

};


// Class Engine.AssetManager
// 0x0410 (0x0438 - 0x0028)
class UEngine_AssetManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x298];                                     // 0x0028(0x0298) MISSED OFFSET
	TArray<class UObject*>                             ObjectReferenceList;                                      // 0x02C0(0x0010) (ZeroConstructor)
	bool                                               bIsGlobalAsyncScanEnvironment;                            // 0x02D0(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldGuessTypeAndName;                                  // 0x02D1(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldUseSynchronousLoad;                                // 0x02D2(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsLoadingFromPakFiles;                                   // 0x02D3(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldAcquireMissingChunksOnLoad;                        // 0x02D4(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bOnlyCookProductionAssets;                                // 0x02D5(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsBulkScanning;                                          // 0x02D6(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsPrimaryAssetDirectoryCurrent;                          // 0x02D7(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsManagementDatabaseCurrent;                             // 0x02D8(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bUpdateManagementDatabaseAfterScan;                       // 0x02D9(0x0001) (ZeroConstructor, IsPlainOldData)
	bool                                               bIncludeOnlyOnDiskAssets;                                 // 0x02DA(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x02DB(0x0001) MISSED OFFSET
	int                                                NumberOfSpawnedNotifications;                             // 0x02DC(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x158];                                     // 0x02E0(0x0158) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AssetManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AssetManager");
		return ptr;
	}

};


// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0010 (0x0088 - 0x0078)
class UEngine_AsyncActionLoadPrimaryAssetClass : public UEngine_AsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClass");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClass");
		return ptr;
	}


	class UEngine_AsyncActionLoadPrimaryAssetClass* STATIC_AsyncLoadPrimaryAssetClass(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
};


// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0010 (0x0088 - 0x0078)
class UEngine_AsyncActionLoadPrimaryAssetList : public UEngine_AsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetList");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetList");
		return ptr;
	}


	class UEngine_AsyncActionLoadPrimaryAssetList* STATIC_AsyncLoadPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
};


// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0010 (0x0088 - 0x0078)
class UEngine_AsyncActionLoadPrimaryAssetClassList : public UEngine_AsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClassList");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAssetClassList");
		return ptr;
	}


	class UEngine_AsyncActionLoadPrimaryAssetClassList* STATIC_AsyncLoadPrimaryAssetClassList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> LoadBundles);
};


// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0010 (0x0088 - 0x0078)
class UEngine_AsyncActionChangePrimaryAssetBundles : public UEngine_AsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionChangePrimaryAssetBundles");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionChangePrimaryAssetBundles");
		return ptr;
	}


	class UEngine_AsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForPrimaryAssetList(class UObject* WorldContextObject, TArray<struct FPrimaryAssetId> PrimaryAssetList, TArray<struct FName> AddBundles, TArray<struct FName> RemoveBundles);
	class UEngine_AsyncActionChangePrimaryAssetBundles* STATIC_AsyncChangeBundleStateForMatchingPrimaryAssets(class UObject* WorldContextObject, TArray<struct FName> NewBundles, TArray<struct FName> OldBundles);
};


// Class Engine.AtmosphericFog
// 0x0008 (0x0220 - 0x0218)
class AEngine_AtmosphericFog : public AEngine_Info
{
public:
	class UEngine_AtmosphericFogComponent*             AtmosphericFogComponent;                                  // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AtmosphericFog");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AtmosphericFog");
		return ptr;
	}

};


// Class Engine.AtmosphericFogComponent
// 0x0240 (0x0430 - 0x01F0)
class UEngine_AtmosphericFogComponent : public UEngine_SceneComponent
{
public:
	float                                              SunMultiplier;                                            // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FogMultiplier;                                            // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityMultiplier;                                        // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DensityOffset;                                            // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceScale;                                            // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              AltitudeScale;                                            // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DistanceOffset;                                           // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              GroundOffset;                                             // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SunDiscScale;                                             // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DefaultBrightness;                                        // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      DefaultLightColor;                                        // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableSunDisk : 1;                                      // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAtmosphereAffectsSunIlluminance : 1;                     // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bDisableGroundScattering : 1;                             // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	struct FEngine_AtmospherePrecomputeParameters      PrecomputeParams;                                         // 0x0224(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UEngine_Texture2D*                           TransmittanceTexture;                                     // 0x0250(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class UEngine_Texture2D*                           IrradianceTexture;                                        // 0x0258(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1D0];                                     // 0x0260(0x01D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AtmosphericFogComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AtmosphericFogComponent");
		return ptr;
	}


	void StartPrecompute();
	void SetSunMultiplier(float NewSunMultiplier);
	void SetStartDistance(float NewStartDistance);
	void SetPrecomputeParams(float DensityHeight, int MaxScatteringOrder, int InscatterAltitudeSampleNum);
	void SetFogMultiplier(float NewFogMultiplier);
	void SetDistanceScale(float NewDistanceScale);
	void SetDistanceOffset(float NewDistanceOffset);
	void SetDensityOffset(float NewDensityOffset);
	void SetDensityMultiplier(float NewDensityMultiplier);
	void SetDefaultLightColor(const struct FLinearColor& NewLightColor);
	void SetDefaultBrightness(float NewBrightness);
	void SetAltitudeScale(float NewAltitudeScale);
	void DisableSunDisk(bool NewSunDisk);
	void DisableGroundScattering(bool NewGroundScattering);
};


// Class Engine.AudioSettings
// 0x00D0 (0x0108 - 0x0038)
class UEngine_AudioSettings : public UEngine_DeveloperSettings
{
public:
	struct FSoftObjectPath                             DefaultSoundClassName;                                    // 0x0038(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultMediaSoundClassName;                               // 0x0050(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultSoundConcurrencyName;                              // 0x0068(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultBaseSoundMix;                                      // 0x0080(0x0018) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             VoiPSoundClass;                                           // 0x0098(0x0018) (Edit, ZeroConstructor, Config)
	FEngine_Engine_EVoiceSampleRate                    VoiPSampleRate;                                           // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B0(0x0003) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              VoipBufferingDelay;                                       // 0x00B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultReverbSendLevel;                                   // 0x00B8(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	unsigned char                                      bEnableLegacyReverb : 1;                                  // 0x00BC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	int                                                MaximumConcurrentStreams;                                 // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMinPitchScale;                                      // 0x00C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              GlobalMaxPitchScale;                                      // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	TArray<struct FEngine_AudioQualitySettings>        QualityLevels;                                            // 0x00D0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      bAllowPlayWhenSilent : 1;                                 // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bDisableMasterEQ : 1;                                     // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bAllowCenterChannel3DPanning : 1;                         // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00E1(0x0003) MISSED OFFSET
	uint32_t                                           NumStoppingSources;                                       // 0x00E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FEngine_Engine_EPanningMethod                      PanningMethod;                                            // 0x00E8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FEngine_Engine_EMonoChannelUpmixMethod             MonoChannelUpmixMethod;                                   // 0x00E9(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x6];                                       // 0x00EA(0x0006) MISSED OFFSET
	struct FString                                     DialogueFilenameFormat;                                   // 0x00F0(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AudioSettings");
		return ptr;
	}

};


// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0010 (0x0088 - 0x0078)
class UEngine_AsyncActionLoadPrimaryAsset : public UEngine_AsyncActionLoadPrimaryAssetBase
{
public:
	struct FScriptMulticastDelegate                    Completed;                                                // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AsyncActionLoadPrimaryAsset");
		return ptr;
	}


	class UEngine_AsyncActionLoadPrimaryAsset* STATIC_AsyncLoadPrimaryAsset(class UObject* WorldContextObject, const struct FPrimaryAssetId& PrimaryAsset, TArray<struct FName> LoadBundles);
};


// Class Engine.AutomationTestSettings
// 0x0300 (0x0328 - 0x0028)
class UEngine_AutomationTestSettings : public UObject
{
public:
	TArray<struct FString>                             EngineTestModules;                                        // 0x0028(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             EditorTestModules;                                        // 0x0038(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             AutomationTestmap;                                        // 0x0048(0x0018) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_EditorMapPerformanceTestDefinition> EditorPerformanceTestMaps;                                // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FSoftObjectPath>                     AssetsToOpen;                                             // 0x0070(0x0010) (Edit, ZeroConstructor, Config)
	struct FEngine_BuildPromotionTestSettings          BuildPromotionTest;                                       // 0x0080(0x01F0) (Edit, Config)
	struct FEngine_MaterialEditorPromotionSettings     MaterialEditorPromotionTest;                              // 0x0270(0x0030) (Edit, Config)
	struct FEngine_ParticleEditorPromotionSettings     ParticleEditorPromotionTest;                              // 0x02A0(0x0010) (Edit, Config)
	struct FEngine_BlueprintEditorPromotionSettings    BlueprintEditorPromotionTest;                             // 0x02B0(0x0030) (Edit, Config)
	TArray<struct FString>                             TestLevelFolders;                                         // 0x02E0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_ExternalToolDefinition>      ExternalTools;                                            // 0x02F0(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_EditorImportExportTestDefinition> ImportExportTestDefinitions;                              // 0x0300(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_LaunchOnTestSettings>        LaunchOnSettings;                                         // 0x0310(0x0010) (Edit, ZeroConstructor, Config)
	struct FIntPoint                                   DefaultScreenshotResolution;                              // 0x0320(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutomationTestSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AutomationTestSettings");
		return ptr;
	}

};


// Class Engine.AvoidanceManager
// 0x00B8 (0x00E0 - 0x0028)
class UEngine_AvoidanceManager : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	float                                              DefaultTimeToLive;                                        // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterAvoid;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LockTimeAfterClean;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DeltaTimeToPredict;                                       // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ArtificialRadiusExpansion;                                // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TestHeightDifference;                                     // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              HeightCheckMargin;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x94];                                      // 0x004C(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AvoidanceManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AvoidanceManager");
		return ptr;
	}


	bool RegisterMovementComponent(class UEngine_MovementComponent* MovementComp, float AvoidanceWeight);
	int GetObjectCount();
	int GetNewAvoidanceUID();
	struct FVector GetAvoidanceVelocityForComponent(class UEngine_MovementComponent* MovementComp);
};


// Class Engine.BandwidthTestActor
// 0x0020 (0x0238 - 0x0218)
class AEngine_BandwidthTestActor : public AEngine_Actor
{
public:
	struct FEngine_BandwidthTestGenerator              BandwidthGenerator;                                       // 0x0218(0x0020) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BandwidthTestActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BandwidthTestActor");
		return ptr;
	}

};


// Class Engine.BillboardComponent
// 0x0020 (0x0400 - 0x03E0)
class UEngine_BillboardComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      bIsScreenSizeScaled : 1;                                  // 0x03E0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	float                                              ScreenSize;                                               // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              U;                                                        // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UL;                                                       // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              V;                                                        // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VL;                                                       // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BillboardComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BillboardComponent");
		return ptr;
	}


	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSpriteAndUV(class UEngine_Texture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UEngine_Texture2D* NewSprite);
};


// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlendableInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendableInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlendableInterface");
		return ptr;
	}

};


// Class Engine.Skeleton
// 0x0340 (0x0368 - 0x0028)
class UEngine_Skeleton : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<struct FEngine_BoneNode>                    BoneTree;                                                 // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst)
	TArray<struct FTransform>                          RefLocalPoses;                                            // 0x0048(0x0010) (ZeroConstructor, Deprecated)
	unsigned char                                      UnknownData01[0x118];                                     // 0x0058(0x0118) MISSED OFFSET
	struct FGuid                                       VirtualBoneGuid;                                          // 0x0170(0x0010) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_VirtualBone>                 VirtualBones;                                             // 0x0180(0x0010) (ZeroConstructor)
	TArray<class UEngine_SkeletalMeshSocket*>          Sockets;                                                  // 0x0190(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData02[0x50];                                      // 0x01A0(0x0050) MISSED OFFSET
	struct FEngine_SmartNameContainer                  SmartNames;                                               // 0x01F0(0x0050)
	unsigned char                                      UnknownData03[0x30];                                      // 0x0240(0x0030) MISSED OFFSET
	TArray<class UEngine_BlendProfile*>                BlendProfiles;                                            // 0x0270(0x0010) (ExportObject, ZeroConstructor)
	TArray<struct FEngine_AnimSlotGroup>               SlotGroups;                                               // 0x0280(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData04[0xC8];                                      // 0x0290(0x00C8) MISSED OFFSET
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0358(0x0010) (Edit, ExportObject, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Skeleton");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Skeleton");
		return ptr;
	}

};


// Class Engine.BlendProfile
// 0x0020 (0x0048 - 0x0028)
class UEngine_BlendProfile : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UEngine_Skeleton*                            OwningSkeleton;                                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_BlendProfileBoneEntry>       ProfileEntries;                                           // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendProfile");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlendProfile");
		return ptr;
	}

};


// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0000 (0x0030 - 0x0030)
class UEngine_AnimNotifyState_DisableRootMotion : public UEngine_AnimNotifyState
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotifyState_DisableRootMotion");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimNotifyState_DisableRootMotion");
		return ptr;
	}

};


// Class Engine.BlueprintExtension
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintExtension : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintExtension");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintExtension");
		return ptr;
	}

};


// Class Engine.BlueprintMapLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintMapLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintMapLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintMapLibrary");
		return ptr;
	}


	void STATIC_SetMapPropertyByName(class UObject* Object, const struct FName& PropertyName, TMap<int, int> Value);
	void STATIC_Map_Values(TMap<int, int> TargetMap, TArray<int>* Values);
	bool STATIC_Map_Remove(TMap<int, int> TargetMap, int Key);
	int STATIC_Map_Length(TMap<int, int> TargetMap);
	void STATIC_Map_Keys(TMap<int, int> TargetMap, TArray<int>* Keys);
	bool STATIC_Map_Find(TMap<int, int> TargetMap, int Key, int* Value);
	bool STATIC_Map_Contains(TMap<int, int> TargetMap, int Key);
	void STATIC_Map_Clear(TMap<int, int> TargetMap);
	void STATIC_Map_Add(TMap<int, int> TargetMap, int Key, int Value);
};


// Class Engine.BlueprintPathsLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintPathsLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintPathsLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintPathsLibrary");
		return ptr;
	}


	struct FString STATIC_VideoCaptureDir();
	void STATIC_ValidatePath(const struct FString& InPath, bool* bDidSucceed, struct FText* OutReason);
	void STATIC_Split(const struct FString& InPath, struct FString* PathPart, struct FString* FilenamePart, struct FString* ExtensionPart);
	struct FString STATIC_SourceConfigDir();
	bool STATIC_ShouldSaveToUserDir();
	struct FString STATIC_ShaderWorkingDir();
	void STATIC_SetProjectFilePath(const struct FString& NewGameProjectFilePath);
	struct FString STATIC_SetExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString STATIC_ScreenShotDir();
	struct FString STATIC_SandboxesDir();
	struct FString STATIC_RootDir();
	void STATIC_RemoveDuplicateSlashes(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_ProjectUserDir();
	struct FString STATIC_ProjectSavedDir();
	struct FString STATIC_ProjectPluginsDir();
	struct FString STATIC_ProjectPersistentDownloadDir();
	struct FString STATIC_ProjectModsDir();
	struct FString STATIC_ProjectLogDir();
	struct FString STATIC_ProjectIntermediateDir();
	struct FString STATIC_ProjectDir();
	struct FString STATIC_ProjectContentDir();
	struct FString STATIC_ProjectConfigDir();
	struct FString STATIC_ProfilingDir();
	void STATIC_NormalizeFilename(const struct FString& InPath, struct FString* OutPath);
	void STATIC_NormalizeDirectoryName(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_MakeValidFileName(const struct FString& inString, const struct FString& InReplacementChar);
	void STATIC_MakeStandardFilename(const struct FString& InPath, struct FString* OutPath);
	void STATIC_MakePlatformFilename(const struct FString& InPath, struct FString* OutPath);
	bool STATIC_MakePathRelativeTo(const struct FString& InPath, const struct FString& InRelativeTo, struct FString* OutPath);
	struct FString STATIC_LaunchDir();
	bool STATIC_IsSamePath(const struct FString& PathA, const struct FString& PathB);
	bool STATIC_IsRestrictedPath(const struct FString& InPath);
	bool STATIC_IsRelative(const struct FString& InPath);
	bool STATIC_IsProjectFilePathSet();
	bool STATIC_IsDrive(const struct FString& InPath);
	bool STATIC_HasProjectPersistentDownloadDir();
	TArray<struct FString> STATIC_GetToolTipLocalizationPaths();
	TArray<struct FString> STATIC_GetRestrictedFolderNames();
	struct FString STATIC_GetRelativePathToRoot();
	TArray<struct FString> STATIC_GetPropertyNameLocalizationPaths();
	struct FString STATIC_GetProjectFilePath();
	struct FString STATIC_GetPath(const struct FString& InPath);
	struct FString STATIC_GetInvalidFileSystemChars();
	TArray<struct FString> STATIC_GetGameLocalizationPaths();
	struct FString STATIC_GetExtension(const struct FString& InPath, bool bIncludeDot);
	TArray<struct FString> STATIC_GetEngineLocalizationPaths();
	TArray<struct FString> STATIC_GetEditorLocalizationPaths();
	struct FString STATIC_GetCleanFilename(const struct FString& InPath);
	struct FString STATIC_GetBaseFilename(const struct FString& InPath, bool bRemovePath);
	struct FString STATIC_GeneratedConfigDir();
	struct FString STATIC_GameUserDeveloperDir();
	struct FString STATIC_GameSourceDir();
	struct FString STATIC_GameDevelopersDir();
	struct FString STATIC_GameAgnosticSavedDir();
	bool STATIC_FileExists(const struct FString& InPath);
	struct FString STATIC_FeaturePackDir();
	struct FString STATIC_EnterprisePluginsDir();
	struct FString STATIC_EnterpriseFeaturePackDir();
	struct FString STATIC_EnterpriseDir();
	struct FString STATIC_EngineVersionAgnosticUserDir();
	struct FString STATIC_EngineUserDir();
	struct FString STATIC_EngineSourceDir();
	struct FString STATIC_EngineSavedDir();
	struct FString STATIC_EnginePluginsDir();
	struct FString STATIC_EngineIntermediateDir();
	struct FString STATIC_EngineDir();
	struct FString STATIC_EngineContentDir();
	struct FString STATIC_EngineConfigDir();
	bool STATIC_DirectoryExists(const struct FString& InPath);
	struct FString STATIC_DiffDir();
	struct FString STATIC_CreateTempFilename(const struct FString& Path, const struct FString& Prefix, const struct FString& Extension);
	struct FString STATIC_ConvertToSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString STATIC_ConvertRelativePathToFull(const struct FString& InPath, const struct FString& InBasePath);
	struct FString STATIC_ConvertFromSandboxPath(const struct FString& InPath, const struct FString& InSandboxName);
	struct FString STATIC_Combine(TArray<struct FString> InPaths);
	bool STATIC_CollapseRelativeDirectories(const struct FString& InPath, struct FString* OutPath);
	struct FString STATIC_CloudDir();
	struct FString STATIC_ChangeExtension(const struct FString& InPath, const struct FString& InNewExtension);
	struct FString STATIC_BugItDir();
	struct FString STATIC_AutomationTransientDir();
	struct FString STATIC_AutomationLogDir();
	struct FString STATIC_AutomationDir();
};


// Class Engine.PlatformGameInstance
// 0x00D0 (0x0238 - 0x0168)
class UEngine_PlatformGameInstance : public UEngine_GameInstance
{
public:
	struct FScriptMulticastDelegate                    ApplicationWillDeactivateDelegate;                        // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasReactivatedDelegate;                        // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillEnterBackgroundDelegate;                   // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationHasEnteredForegroundDelegate;                  // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationWillTerminateDelegate;                         // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationShouldUnloadResourcesDelegate;                 // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedStartupArgumentsDelegate;              // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForRemoteNotificationsDelegate;      // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationRegisteredForUserNotificationsDelegate;        // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationFailedToRegisterForRemoteNotificationsDelegate;// 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedRemoteNotificationDelegate;            // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedLocalNotificationDelegate;             // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    ApplicationReceivedScreenOrientationChangedNotificationDelegate;// 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformGameInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlatformGameInstance");
		return ptr;
	}

};


// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintPlatformLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintPlatformLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintPlatformLibrary");
		return ptr;
	}


	int STATIC_ScheduleLocalNotificationFromNow(int inSecondsFromNow, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_ScheduleLocalNotificationBadgeFromNow(int inSecondsFromNow, const struct FString& ActivationEvent);
	int STATIC_ScheduleLocalNotificationBadgeAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FString& ActivationEvent);
	int STATIC_ScheduleLocalNotificationAtTime(const struct FDateTime& FireDateTime, bool LocalTime, const struct FText& Title, const struct FText& Body, const struct FText& Action, const struct FString& ActivationEvent);
	void STATIC_GetLaunchNotification(bool* NotificationLaunchedApp, struct FString* ActivationEvent, int* FireDate);
	TEnumAsByte<FEngine_Engine_EScreenOrientation> STATIC_GetDeviceOrientation();
	void STATIC_ClearAllLocalNotifications();
	void STATIC_CancelLocalNotificationById(int NotificationId);
	void STATIC_CancelLocalNotification(const struct FString& ActivationEvent);
};


// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_BlueprintSetLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlueprintSetLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlueprintSetLibrary");
		return ptr;
	}


	void STATIC_SetSetPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void STATIC_Set_Union();
	void STATIC_Set_ToArray(TArray<int>* Result);
	void STATIC_Set_RemoveItems(TArray<int> Items);
	bool STATIC_Set_Remove(int Item);
	int STATIC_Set_Length();
	void STATIC_Set_Intersection();
	void STATIC_Set_Difference();
	bool STATIC_Set_Contains(int ItemToFind);
	void STATIC_Set_Clear();
	void STATIC_Set_AddItems(TArray<int> NewItems);
	void STATIC_Set_Add(int NewItem);
};


// Class Engine.BodySetup
// 0x0218 (0x0240 - 0x0028)
class UEngine_BodySetup : public UObject
{
public:
	struct FEngine_KAggregateGeom                      AggGeom;                                                  // 0x0028(0x0058) (Edit)
	struct FName                                       BoneName;                                                 // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EPhysicsType>           PhysicsType;                                              // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysFullAnimWeight : 1;                                // 0x0089(0x0001) (Deprecated)
	unsigned char                                      bConsiderForBounds : 1;                                   // 0x0089(0x0001) (Edit)
	unsigned char                                      bMeshCollideAll : 1;                                      // 0x0089(0x0001) (Transient)
	unsigned char                                      bDoubleSidedGeometry : 1;                                 // 0x0089(0x0001) (Edit)
	unsigned char                                      bGenerateNonMirroredCollision : 1;                        // 0x0089(0x0001)
	unsigned char                                      bSharedCookedData : 1;                                    // 0x0089(0x0001)
	unsigned char                                      bGenerateMirroredCollision : 1;                           // 0x0089(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x008A(0x0001) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EBodyCollisionResponse> CollisionReponse;                                         // 0x008B(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionTraceFlag>    CollisionTraceFlag;                                       // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	class UEngine_PhysicalMaterial*                    PhysMaterial;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_WalkableSlopeOverride               WalkableSlopeOverride;                                    // 0x0098(0x0010) (Edit, IsPlainOldData)
	unsigned char                                      UnknownData02[0x68];                                      // 0x00A8(0x0068) MISSED OFFSET
	struct FEngine_BodyInstance                        DefaultInstance;                                          // 0x0110(0x0110) (Edit)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0220(0x0008) MISSED OFFSET
	struct FVector                                     BuildScale3D;                                             // 0x0228(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0xC];                                       // 0x0234(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BodySetup");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BodySetup");
		return ptr;
	}

};


// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
class UEngine_BoneMaskFilter : public UObject
{
public:
	TArray<struct FEngine_InputBlendPose>              BlendPoses;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoneMaskFilter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BoneMaskFilter");
		return ptr;
	}

};


// Class Engine.BookmarkBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_BookmarkBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookmarkBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BookmarkBase");
		return ptr;
	}

};


// Class Engine.BookMark
// 0x0028 (0x0050 - 0x0028)
class UEngine_BookMark : public UEngine_BookmarkBase
{
public:
	struct FVector                                     Location;                                                 // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    Rotation;                                                 // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FString>                             HiddenLevels;                                             // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}

};


// Class Engine.AudioVolume
// 0x0050 (0x02A0 - 0x0250)
class AEngine_AudioVolume : public AEngine_Volume
{
public:
	float                                              Priority;                                                 // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0254(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	struct FEngine_ReverbSettings                      Settings;                                                 // 0x0258(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FEngine_InteriorSettings                    AmbientZoneSettings;                                      // 0x0278(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x4];                                       // 0x029C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AudioVolume");
		return ptr;
	}


	void SetReverbSettings(const struct FEngine_ReverbSettings& NewReverbSettings);
	void SetPriority(float NewPriority);
	void SetInteriorSettings(const struct FEngine_InteriorSettings& NewInteriorSettings);
	void SetEnabled(bool bNewEnabled);
	void OnRep_bEnabled();
};


// Class Engine.ShapeComponent
// 0x0010 (0x03F0 - 0x03E0)
class UEngine_ShapeComponent : public UEngine_PrimitiveComponent
{
public:
	class UClass*                                      AreaClass;                                                // 0x03E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FColor                                      ShapeColor;                                               // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDrawOnlyIfSelected : 1;                                  // 0x03EC(0x0001)
	unsigned char                                      bShouldCollideWhenPlacing : 1;                            // 0x03EC(0x0001)
	unsigned char                                      bDynamicObstacle : 1;                                     // 0x03EC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x03ED(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShapeComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ShapeComponent");
		return ptr;
	}

};


// Class Engine.BoxComponent
// 0x0010 (0x0400 - 0x03F0)
class UEngine_BoxComponent : public UEngine_ShapeComponent
{
public:
	struct FVector                                     BoxExtent;                                                // 0x03F0(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LineThickness;                                            // 0x03FC(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BoxComponent");
		return ptr;
	}


	void SetBoxExtent(const struct FVector& InBoxExtent, bool bUpdateOverlaps);
	struct FVector GetUnscaledBoxExtent();
	struct FVector GetScaledBoxExtent();
};


// Class Engine.ReflectionCapture
// 0x0008 (0x0220 - 0x0218)
class AEngine_ReflectionCapture : public AEngine_Actor
{
public:
	class UEngine_ReflectionCaptureComponent*          CaptureComponent;                                         // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReflectionCapture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReflectionCapture");
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x0010 (0x0038 - 0x0028)
class UEngine_BookMark2D : public UEngine_BookmarkBase
{
public:
	float                                              Zoom2D;                                                   // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FIntPoint                                   Location;                                                 // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}

};


// Class Engine.ReflectionCaptureComponent
// 0x0080 (0x0270 - 0x01F0)
class UEngine_ReflectionCaptureComponent : public UEngine_SceneComponent
{
public:
	class UEngine_BillboardComponent*                  CaptureOffsetComponent;                                   // 0x01F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	FEngine_Engine_EReflectionSourceType               ReflectionSourceType;                                     // 0x01F8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	class UEngine_TextureCube*                         Cubemap;                                                  // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     CaptureOffset;                                            // 0x0210(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       MapBuildDataId;                                           // 0x021C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x44];                                      // 0x022C(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.BoxReflectionCaptureComponent
// 0x0010 (0x0280 - 0x0270)
class UEngine_BoxReflectionCaptureComponent : public UEngine_ReflectionCaptureComponent
{
public:
	class UEngine_BoxComponent*                        PreviewInfluenceBox;                                      // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_BoxComponent*                        PreviewCaptureBox;                                        // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BoxReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_BlockingVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}

};


// Class Engine.BoxReflectionCapture
// 0x0000 (0x0220 - 0x0220)
class AEngine_BoxReflectionCapture : public AEngine_ReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BoxReflectionCapture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BoxReflectionCapture");
		return ptr;
	}

};


// Class Engine.BrushBuilder
// 0x0058 (0x0080 - 0x0028)
class UEngine_BrushBuilder : public UObject
{
public:
	struct FString                                     BitmapFilename;                                           // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     ToolTip;                                                  // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      NotifyBadParams : 1;                                      // 0x0048(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	TArray<struct FVector>                             Vertices;                                                 // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BuilderPoly>                 Polys;                                                    // 0x0060(0x0010) (ZeroConstructor)
	struct FName                                       Layer;                                                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MergeCoplanars : 1;                                       // 0x0078(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushBuilder");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BrushBuilder");
		return ptr;
	}

};


// Class Engine.BrushComponent
// 0x0010 (0x03F0 - 0x03E0)
class UEngine_BrushComponent : public UEngine_PrimitiveComponent
{
public:
	class UEngine_BodySetup*                           BrushBodySetup;                                           // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x0250 - 0x0250)
class AEngine_BrushShape : public AEngine_Brush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushShape");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}

};


// Class Engine.ButtonStyleAsset
// 0x0278 (0x02A0 - 0x0028)
class UEngine_ButtonStyleAsset : public UObject
{
public:
	struct FSlateCore_ButtonStyle                      ButtonStyle;                                              // 0x0028(0x0278) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ButtonStyleAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ButtonStyleAsset");
		return ptr;
	}

};


// Class Engine.Breakpoint
// 0x0018 (0x0040 - 0x0028)
class UEngine_Breakpoint : public UObject
{
public:
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	class UEngine_EdGraphNode*                         Node;                                                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bStepOnce : 1;                                            // 0x0038(0x0001)
	unsigned char                                      bStepOnce_WasPreviouslyDisabled : 1;                      // 0x0038(0x0001)
	unsigned char                                      bStepOnce_RemoveAfterHit : 1;                             // 0x0038(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Breakpoint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Breakpoint");
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x00E8 (0x0110 - 0x0028)
class UEngine_CameraAnimInst : public UObject
{
public:
	class UEngine_CameraAnim*                          CamAnim;                                                  // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_InterpGroupInst*                     InterpGroupInst;                                          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0038(0x0018) MISSED OFFSET
	float                                              PlayRate;                                                 // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x14];                                      // 0x0054(0x0014) MISSED OFFSET
	class UEngine_InterpTrackMove*                     MoveTrack;                                                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_InterpTrackInstMove*                 MoveInst;                                                 // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECameraAnimPlaySpace>   PlaySpace;                                                // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x97];                                      // 0x0079(0x0097) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}


	void Stop(bool bImmediate);
	void SetScale(float NewDuration);
	void SetDuration(float NewDuration);
};


// Class Engine.CameraBlockingVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_CameraBlockingVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraBlockingVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraBlockingVolume");
		return ptr;
	}

};


// Class Engine.CameraModifier
// 0x0020 (0x0048 - 0x0028)
class UEngine_CameraModifier : public UObject
{
public:
	unsigned char                                      bDebug : 1;                                               // 0x0028(0x0001) (Edit)
	unsigned char                                      bExclusive : 1;                                           // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	unsigned char                                      Priority;                                                 // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class AEngine_PlayerCameraManager*                 CameraOwner;                                              // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	float                                              AlphaInTime;                                              // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              AlphaOutTime;                                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              ALPHA;                                                    // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}


	bool IsDisabled();
	class AEngine_Actor* GetViewTarget();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	void BlueprintModifyPostProcess(float DeltaTime, float* PostProcessBlendWeight, struct FEngine_PostProcessSettings* PostProcessSettings);
	void BlueprintModifyCamera(float DeltaTime, const struct FVector& ViewLocation, const struct FRotator& ViewRotation, float FOV, struct FVector* NewViewLocation, struct FRotator* NewViewRotation, float* NewFOV);
};


// Class Engine.CameraModifier_CameraShake
// 0x0068 (0x00B0 - 0x0048)
class UEngine_CameraModifier_CameraShake : public UEngine_CameraModifier
{
public:
	TArray<class UEngine_CameraShake*>                 ActiveShakes;                                             // 0x0048(0x0010) (ZeroConstructor)
	TMap<class UClass*, struct FEngine_PooledCameraShakes> ExpiredPooledShakesMap;                                   // 0x0058(0x0050) (ZeroConstructor)
	float                                              SplitScreenShakeScale;                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}

};


// Class Engine.CameraShake
// 0x0138 (0x0160 - 0x0028)
class UEngine_CameraShake : public UObject
{
public:
	unsigned char                                      bSingleInstance : 1;                                      // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              OscillationDuration;                                      // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendInTime;                                   // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OscillationBlendOutTime;                                  // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ROscillator                         RotOscillation;                                           // 0x0038(0x0024) (Edit, BlueprintVisible)
	struct FEngine_VOscillator                         LocOscillation;                                           // 0x005C(0x0024) (Edit, BlueprintVisible)
	struct FEngine_FOscillator                         FOVOscillation;                                           // 0x0080(0x000C) (Edit, BlueprintVisible)
	float                                              AnimPlayRate;                                             // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimScale;                                                // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendInTime;                                          // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AnimBlendOutTime;                                         // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomAnimSegmentDuration;                                // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_CameraAnim*                          Anim;                                                     // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRandomAnimSegment : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x17];                                      // 0x00A9(0x0017) MISSED OFFSET
	class AEngine_PlayerCameraManager*                 CameraOwner;                                              // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x80];                                      // 0x00C8(0x0080) MISSED OFFSET
	float                                              shakeScale;                                               // 0x0148(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	float                                              OscillatorTimeRemaining;                                  // 0x014C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_CameraAnimInst*                      AnimInst;                                                 // 0x0150(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0158(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraShake");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}


	void ReceiveStopShake(bool bImmediately);
	void ReceivePlayShake(float Scale);
	bool ReceiveIsFinished();
	void BlueprintUpdateCameraShake(float DeltaTime, float ALPHA, const struct FEngine_MinimalViewInfo& POV, struct FEngine_MinimalViewInfo* ModifiedPOV);
};


// Class Engine.CameraAnim
// 0x0578 (0x05A0 - 0x0028)
class UEngine_CameraAnim : public UObject
{
public:
	class UEngine_InterpGroup*                         CameraInterpGroup;                                        // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              AnimLength;                                               // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FBox                                        BoundingBox;                                              // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRelativeToInitialTransform : 1;                          // 0x0050(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bRelativeToInitialFOV : 1;                                // 0x0050(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	float                                              BaseFOV;                                                  // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0058(0x0008) MISSED OFFSET
	struct FEngine_PostProcessSettings                 BasePostProcessSettings;                                  // 0x0060(0x0530)
	float                                              BasePostProcessBlendWeight;                               // 0x0590(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0594(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnim");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget
// 0x0008 (0x00D8 - 0x00D0)
class UEngine_TextureRenderTarget : public UEngine_Texture
{
public:
	float                                              TargetGamma;                                              // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0028 (0x0100 - 0x00D8)
class UEngine_TextureRenderTarget2D : public UEngine_TextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x00DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        AddressX;                                                 // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        AddressY;                                                 // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x00F2(0x0001)
	unsigned char                                      bHDR : 1;                                                 // 0x00F2(0x0001) (Deprecated)
	unsigned char                                      bGPUSharedFlag : 1;                                       // 0x00F2(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<FEngine_Engine_ETextureRenderTargetFormat> RenderTargetFormat;                                       // 0x00F3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoGenerateMips : 1;                                    // 0x00F4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<FEngine_Engine_ETextureFilter>         MipsSamplerFilter;                                        // 0x00F5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        MipsAddressU;                                             // 0x00F6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        MipsAddressV;                                             // 0x00F7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FCoreUObject_EPixelFormat>             OverrideFormat;                                           // 0x00F8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}

};


// Class Engine.Canvas
// 0x0298 (0x02C0 - 0x0028)
class UEngine_Canvas : public UObject
{
public:
	float                                              OrgX;                                                     // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              OrgY;                                                     // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipX;                                                    // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              ClipY;                                                    // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      DrawColor;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCenterX : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bCenterY : 1;                                             // 0x003C(0x0001)
	unsigned char                                      bNoSmooth : 1;                                            // 0x003C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0048(0x0008) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           DefaultTexture;                                           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           GradientTexture0;                                         // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_ReporterGraph*                       ReporterGraph;                                            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x248];                                     // 0x0078(0x0248) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	struct FVector2D K2_TextSize(class UEngine_Font* RenderFont, const struct FString& RenderText, const struct FVector2D& Scale);
	struct FVector2D K2_StrLen(class UEngine_Font* RenderFont, const struct FString& RenderText);
	struct FVector K2_Project(const struct FVector& WorldLocation);
	void K2_DrawTriangle(class UEngine_Texture* RenderTexture, TArray<struct FEngine_CanvasUVTri> Triangles);
	void K2_DrawTexture(class UEngine_Texture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, TEnumAsByte<FEngine_Engine_EBlendMode> BlendMode, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawText(class UEngine_Font* RenderFont, const struct FString& RenderText, const struct FVector2D& ScreenPosition, const struct FVector2D& Scale, const struct FLinearColor& RenderColor, float Kerning, const struct FLinearColor& ShadowColor, const struct FVector2D& ShadowOffset, bool bCentreX, bool bCentreY, bool bOutlined, const struct FLinearColor& OutlineColor);
	void K2_DrawPolygon(class UEngine_Texture* RenderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& Radius, int NumberOfSides, const struct FLinearColor& RenderColor);
	void K2_DrawMaterialTriangle(class UEngine_MaterialInterface* RenderMaterial, TArray<struct FEngine_CanvasUVTri> Triangles);
	void K2_DrawMaterial(class UEngine_MaterialInterface* RenderMaterial, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, float Rotation, const struct FVector2D& PivotPoint);
	void K2_DrawLine(const struct FVector2D& ScreenPositionA, const struct FVector2D& ScreenPositionB, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBox(const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, float Thickness, const struct FLinearColor& RenderColor);
	void K2_DrawBorder(class UEngine_Texture* BorderTexture, class UEngine_Texture* BackgroundTexture, class UEngine_Texture* LeftBorderTexture, class UEngine_Texture* RightBorderTexture, class UEngine_Texture* TopBorderTexture, class UEngine_Texture* BottomBorderTexture, const struct FVector2D& ScreenPosition, const struct FVector2D& ScreenSize, const struct FVector2D& CoordinatePosition, const struct FVector2D& CoordinateSize, const struct FLinearColor& RenderColor, const struct FVector2D& BorderScale, const struct FVector2D& BackgroundScale, float Rotation, const struct FVector2D& PivotPoint, const struct FVector2D& CornerSize);
	void K2_Deproject(const struct FVector2D& ScreenPosition, struct FVector* WorldOrigin, struct FVector* WorldDirection);
};


// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0120 - 0x0100)
class UEngine_CanvasRenderTarget2D : public UEngine_TextureRenderTarget2D
{
public:
	struct FScriptMulticastDelegate                    OnCanvasRenderTargetUpdate;                               // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	TWeakObjectPtr<class UEngine_World>                World;                                                    // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bShouldClearRenderTargetOnReceiveUpdate;                  // 0x0118(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CanvasRenderTarget2D");
		return ptr;
	}


	void UpdateResource();
	void ReceiveUpdate(class UEngine_Canvas* Canvas, int Width, int Height);
	void GetSize(int* Width, int* Height);
	class UEngine_CanvasRenderTarget2D* STATIC_CreateCanvasRenderTarget2D(class UObject* WorldContextObject, class UClass* CanvasRenderTarget2DClass, int Width, int Height);
};


// Class Engine.ChaosPhysicalMaterial
// 0x0010 (0x0038 - 0x0028)
class UEngine_ChaosPhysicalMaterial : public UObject
{
public:
	float                                              Friction;                                                 // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Restitution;                                              // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SleepingLinearVelocityThreshold;                          // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SleepingAngularVelocityThreshold;                         // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChaosPhysicalMaterial");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ChaosPhysicalMaterial");
		return ptr;
	}

};


// Class Engine.CheckBoxStyleAsset
// 0x0580 (0x05A8 - 0x0028)
class UEngine_CheckBoxStyleAsset : public UObject
{
public:
	struct FSlateCore_CheckBoxStyle                    CheckBoxStyle;                                            // 0x0028(0x0580) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CheckBoxStyleAsset");
		return ptr;
	}

};


// Class Engine.ChildConnection
// 0x0008 (0x19C8 - 0x19C0)
class UEngine_ChildConnection : public UEngine_NetConnection
{
public:
	class UEngine_NetConnection*                       Parent;                                                   // 0x19C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildConnection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}

};


// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
class UEngine_PlatformInterfaceBase : public UObject
{
public:
	TArray<struct FEngine_DelegateArray>               AllDelegates;                                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}

};


// Class Engine.CapsuleComponent
// 0x0010 (0x0400 - 0x03F0)
class UEngine_CapsuleComponent : public UEngine_ShapeComponent
{
public:
	float                                              CapsuleHalfHeight;                                        // 0x03F0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CapsuleRadius;                                            // 0x03F4(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CapsuleComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CapsuleComponent");
		return ptr;
	}


	void SetCapsuleSize(float InRadius, float InHalfHeight, bool bUpdateOverlaps);
	void SetCapsuleRadius(float Radius, bool bUpdateOverlaps);
	void SetCapsuleHalfHeight(float HalfHeight, bool bUpdateOverlaps);
	void GetUnscaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetUnscaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetUnscaledCapsuleRadius();
	float GetUnscaledCapsuleHalfHeight_WithoutHemisphere();
	float GetUnscaledCapsuleHalfHeight();
	float GetShapeScale();
	void GetScaledCapsuleSize_WithoutHemisphere(float* OutRadius, float* OutHalfHeightWithoutHemisphere);
	void GetScaledCapsuleSize(float* OutRadius, float* OutHalfHeight);
	float GetScaledCapsuleRadius();
	float GetScaledCapsuleHalfHeight_WithoutHemisphere();
	float GetScaledCapsuleHalfHeight();
};


// Class Engine.CollisionProfile
// 0x0120 (0x0158 - 0x0038)
class UEngine_CollisionProfile : public UEngine_DeveloperSettings
{
public:
	TArray<struct FEngine_CollisionResponseTemplate>   Profiles;                                                 // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FEngine_CustomChannelSetup>          DefaultChannelResponses;                                  // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FEngine_CustomProfile>               EditProfiles;                                             // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FEngine_Redirector>                  ProfileRedirects;                                         // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig)
	TArray<struct FEngine_Redirector>                  CollisionChannelRedirects;                                // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0xD0];                                      // 0x0088(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CollisionProfile");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CollisionProfile");
		return ptr;
	}

};


// Class Engine.Commandlet
// 0x0058 (0x0080 - 0x0028)
class UEngine_Commandlet : public UObject
{
public:
	struct FString                                     HelpDescription;                                          // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     HelpUsage;                                                // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     HelpWebLink;                                              // 0x0048(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamNames;                                           // 0x0058(0x0010) (ZeroConstructor)
	TArray<struct FString>                             HelpParamDescriptions;                                    // 0x0068(0x0010) (ZeroConstructor)
	unsigned char                                      IsServer : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsClient : 1;                                             // 0x0078(0x0001)
	unsigned char                                      IsEditor : 1;                                             // 0x0078(0x0001)
	unsigned char                                      LogToConsole : 1;                                         // 0x0078(0x0001)
	unsigned char                                      ShowErrorCount : 1;                                       // 0x0078(0x0001)
	unsigned char                                      ShowProgress : 1;                                         // 0x0078(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Commandlet");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Commandlet");
		return ptr;
	}

};


// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_ComponentDelegateBinding : public UEngine_DynamicBlueprintBinding
{
public:
	TArray<struct FEngine_BlueprintComponentDelegateBinding> ComponentDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ComponentDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ComponentDelegateBinding");
		return ptr;
	}

};


// Class Engine.CurveTable
// 0x0078 (0x00A0 - 0x0028)
class UEngine_CurveTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0028(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveTable");
		return ptr;
	}

};


// Class Engine.CompositeCurveTable
// 0x0028 (0x00C8 - 0x00A0)
class UEngine_CompositeCurveTable : public UEngine_CurveTable
{
public:
	TArray<class UEngine_CurveTable*>                  ParentTables;                                             // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UEngine_CurveTable*>                  OldParentTables;                                          // 0x00B0(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CompositeCurveTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CompositeCurveTable");
		return ptr;
	}

};


// Class Engine.DataTable
// 0x00A0 (0x00C8 - 0x0028)
class UEngine_DataTable : public UObject
{
public:
	class UScriptStruct*                               RowStruct;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0030(0x0050) MISSED OFFSET
	unsigned char                                      bStripFromClientBuilds : 1;                               // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreExtraFields : 1;                                   // 0x0080(0x0001) (Edit)
	unsigned char                                      bIgnoreMissingFields : 1;                                 // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	struct FString                                     ImportKeyField;                                           // 0x0088(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0098(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DataTable");
		return ptr;
	}

};


// Class Engine.CompositeDataTable
// 0x0028 (0x00F0 - 0x00C8)
class UEngine_CompositeDataTable : public UEngine_DataTable
{
public:
	TArray<class UEngine_DataTable*>                   ParentTables;                                             // 0x00C8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<class UEngine_DataTable*>                   OldParentTables;                                          // 0x00D8(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CompositeDataTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CompositeDataTable");
		return ptr;
	}

};


// Class Engine.Console
// 0x0108 (0x0130 - 0x0028)
class UEngine_Console : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	class UEngine_LocalPlayer*                         ConsoleTargetPlayer;                                      // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           DefaultTexture_Black;                                     // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           DefaultTexture_White;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0050(0x0018) MISSED OFFSET
	TArray<struct FString>                             HistoryBuffer;                                            // 0x0068(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0xB8];                                      // 0x0078(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0018 (0x0088 - 0x0070)
class UEngine_ControlChannel : public UEngine_Channel
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.StreamingSettings
// 0x0038 (0x0070 - 0x0038)
class UEngine_StreamingSettings : public UEngine_DeveloperSettings
{
public:
	unsigned char                                      AsyncLoadingThreadEnabled : 1;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      WarnIfTimeLimitExceeded : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	float                                              TimeLimitExceededMultiplier;                              // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TimeLimitExceededMinTime;                                 // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MinBulkDataSizeForAsyncLoading;                           // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UseBackgroundLevelStreaming : 1;                          // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      AsyncLoadingUseFullTimeLimit : 1;                         // 0x0048(0x0001) (Edit, Config)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              AsyncLoadingTimeLimit;                                    // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityAsyncLoadingExtraTime;                            // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingActorsUpdateTimeLimit;                      // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              PriorityLevelStreamingActorsUpdateExtraTime;              // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsRegistrationGranularity;          // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              LevelStreamingUnregisterComponentsTimeLimit;              // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                LevelStreamingComponentsUnregistrationGranularity;        // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      EventDrivenLoaderEnabled : 1;                             // 0x0068(0x0001) (Edit, Config)
	unsigned char                                      FlushStreamingOnExit : 1;                                 // 0x0068(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamingSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StreamingSettings");
		return ptr;
	}

};


// Class Engine.GarbageCollectionSettings
// 0x0020 (0x0058 - 0x0038)
class UEngine_GarbageCollectionSettings : public UEngine_DeveloperSettings
{
public:
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      FlushStreamingOnGC : 1;                                   // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      AllowParallelGC : 1;                                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      IncrementalBeginDestroyEnabled : 1;                       // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      MultithreadedDestructionEnabled : 1;                      // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      CreateGCClusters : 1;                                     // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      ActorClusteringEnabled : 1;                               // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      BlueprintClusteringEnabled : 1;                           // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      UseDisregardForGCOnDedicatedServers : 1;                  // 0x003C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	int                                                MinGCClusterSize;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                NumRetriesBeforeForcingGC;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsNotConsideredByGC;                              // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SizeOfPermanentObjectPool;                                // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInGame;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxObjectsInEditor;                                       // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GarbageCollectionSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GarbageCollectionSettings");
		return ptr;
	}

};


// Class Engine.CullDistanceVolume
// 0x0018 (0x0268 - 0x0250)
class AEngine_CullDistanceVolume : public AEngine_Volume
{
public:
	TArray<struct FEngine_CullDistanceSizePair>        CullDistances;                                            // 0x0250(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      bEnabled : 1;                                             // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0261(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}

};


// Class Engine.CurveBase
// 0x0008 (0x0030 - 0x0028)
class UEngine_CurveBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveBase");
		return ptr;
	}


	void GetValueRange(float* MinValue, float* MaxValue);
	void GetTimeRange(float* MinTime, float* MaxTime);
};


// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
class UEngine_CurveEdPresetCurve : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}

};


// Class Engine.CurveFloat
// 0x0088 (0x00B8 - 0x0030)
class UEngine_CurveFloat : public UEngine_CurveBase
{
public:
	struct FEngine_RichCurve                           FloatCurve;                                               // 0x0030(0x0080)
	bool                                               bIsEventCurve;                                            // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveFloat");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveFloat");
		return ptr;
	}


	float GetFloatValue(float InTime);
};


// Class Engine.CurveLinearColor
// 0x0220 (0x0250 - 0x0030)
class UEngine_CurveLinearColor : public UEngine_CurveBase
{
public:
	struct FEngine_RichCurve                           FloatCurves[0x4];                                         // 0x0030(0x0080)
	float                                              AdjustHue;                                                // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustSaturation;                                         // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightness;                                         // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustBrightnessCurve;                                    // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustVibrance;                                           // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMinAlpha;                                           // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AdjustMaxAlpha;                                           // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x024C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveLinearColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveLinearColor");
		return ptr;
	}


	struct FLinearColor GetLinearColorValue(float InTime);
	struct FLinearColor GetClampedLinearColorValue(float InTime);
};


// Class Engine.Texture2D
// 0x0030 (0x0100 - 0x00D0)
class UEngine_Texture2D : public UEngine_Texture
{
public:
	int                                                LevelIndex;                                               // 0x00D0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	int                                                FirstResourceMemMip;                                      // 0x00D4(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTemporarilyDisableStreaming : 1;                         // 0x00D8(0x0001) (Transient)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        AddressX;                                                 // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureAddress>        AddressY;                                                 // 0x00DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00DB(0x0001) MISSED OFFSET
	struct FIntPoint                                   ImportedSize;                                             // 0x00DC(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x00E4(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}


	int Blueprint_GetSizeY();
	int Blueprint_GetSizeX();
};


// Class Engine.CurveLinearColorAtlas
// 0x0018 (0x0118 - 0x0100)
class UEngine_CurveLinearColorAtlas : public UEngine_Texture2D
{
public:
	uint32_t                                           TextureSize;                                              // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<class UEngine_CurveLinearColor*>            GradientCurves;                                           // 0x0108(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveLinearColorAtlas");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveLinearColorAtlas");
		return ptr;
	}


	bool GetCurvePosition(class UEngine_CurveLinearColor* InCurve, float* Position);
};


// Class Engine.CurveSourceInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_CurveSourceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveSourceInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveSourceInterface");
		return ptr;
	}


	float GetCurveValue(const struct FName& CurveName);
	void GetCurves(TArray<struct FEngine_NamedCurveValue>* OutValues);
	struct FName GetBindingName();
};


// Class Engine.CurveVector
// 0x0180 (0x01B0 - 0x0030)
class UEngine_CurveVector : public UEngine_CurveBase
{
public:
	struct FEngine_RichCurve                           FloatCurves[0x3];                                         // 0x0030(0x0080)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveVector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CurveVector");
		return ptr;
	}


	struct FVector GetVectorValue(float InTime);
};


// Class Engine.DamageType
// 0x0018 (0x0040 - 0x0028)
class UEngine_DamageType : public UObject
{
public:
	unsigned char                                      bCausedByWorld : 1;                                       // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bScaleMomentumByMass : 1;                                 // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bRadialDamageVelChange : 1;                               // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              DamageImpulse;                                            // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleImpulse;                                      // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamageSpreadScale;                            // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DamageFalloff;                                            // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}

};


// Class Engine.PrimaryDataAsset
// 0x0000 (0x0030 - 0x0030)
class UEngine_PrimaryDataAsset : public UEngine_DataAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimaryDataAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PrimaryDataAsset");
		return ptr;
	}

};


// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_DataTableFunctionLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DataTableFunctionLibrary");
		return ptr;
	}


	void STATIC_GetDataTableRowNames(class UEngine_DataTable* Table, TArray<struct FName>* OutRowNames);
	bool STATIC_GetDataTableRowFromName(class UEngine_DataTable* Table, const struct FName& RowName, struct FEngine_TableRowBase* OutRow);
	TArray<struct FString> STATIC_GetDataTableColumnAsString(class UEngine_DataTable* DataTable, const struct FName& PropertyName);
	void STATIC_EvaluateCurveTableRow(class UEngine_CurveTable* CurveTable, const struct FName& RowName, float InXY, const struct FString& ContextString, TEnumAsByte<FEngine_Engine_EEvaluateCurveTableResult>* OutResult, float* OutXY);
	bool STATIC_DoesDataTableRowExist(class UEngine_DataTable* Table, const struct FName& RowName);
};


// Class Engine.DebugCameraController
// 0x0100 (0x0668 - 0x0568)
class AEngine_DebugCameraController : public AEngine_PlayerController
{
public:
	unsigned char                                      bShowSelectedInfo : 1;                                    // 0x0568(0x0001) (Config, GlobalConfig)
	unsigned char                                      bIsFrozenRendering : 1;                                   // 0x0568(0x0001)
	unsigned char                                      bIsOrbitingSelectedActor : 1;                             // 0x0568(0x0001)
	unsigned char                                      bOrbitPivotUseCenter : 1;                                 // 0x0568(0x0001)
	unsigned char                                      bEnableBufferVisualization : 1;                           // 0x0568(0x0001)
	unsigned char                                      bEnableBufferVisualizationFullMode : 1;                   // 0x0568(0x0001)
	unsigned char                                      bIsBufferVisualizationInputSetup : 1;                     // 0x0568(0x0001)
	unsigned char                                      bLastDisplayEnabled : 1;                                  // 0x0568(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0569(0x0007) MISSED OFFSET
	class UEngine_DrawFrustumComponent*                DrawFrustum;                                              // 0x0570(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class AEngine_Actor*                               SelectedActor;                                            // 0x0578(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_PrimitiveComponent*                  SelectedComponent;                                        // 0x0580(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FEngine_HitResult                           SelectedHitPoint;                                         // 0x0588(0x0088) (IsPlainOldData)
	class AEngine_PlayerController*                    OriginalControllerRef;                                    // 0x0610(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_Player*                              OriginalPlayer;                                           // 0x0618(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SpeedScale;                                               // 0x0620(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialMaxSpeed;                                          // 0x0624(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialAccel;                                             // 0x0628(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	float                                              InitialDecel;                                             // 0x062C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      UnknownData01[0x38];                                      // 0x0630(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraController");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DebugCameraController");
		return ptr;
	}


	void ToggleDisplay();
	void ShowDebugSelectedInfo();
	void SetPawnMovementSpeedScale(float NewSpeedScale);
	void ReceiveOnDeactivate(class AEngine_PlayerController* RestoredPC);
	void ReceiveOnActorSelected(class AEngine_Actor* NewSelectedActor, const struct FVector& SelectHitLocation, const struct FVector& SelectHitNormal, const struct FEngine_HitResult& Hit);
	void ReceiveOnActivate(class AEngine_PlayerController* OriginalPC);
	class AEngine_Actor* GetSelectedActor();
};


// Class Engine.DebugCameraControllerSettings
// 0x0010 (0x0048 - 0x0038)
class UEngine_DebugCameraControllerSettings : public UEngine_DeveloperSettings
{
public:
	TArray<struct FEngine_DebugCameraControllerSettingsViewModeIndex> CycleViewModes;                                           // 0x0038(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraControllerSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DebugCameraControllerSettings");
		return ptr;
	}

};


// Class Engine.DebugCameraHUD
// 0x0000 (0x0308 - 0x0308)
class AEngine_DebugCameraHUD : public AEngine_HUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DebugCameraHUD");
		return ptr;
	}

};


// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
class UEngine_DebugDrawService : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DebugDrawService");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DebugDrawService");
		return ptr;
	}

};


// Class Engine.DecalComponent
// 0x0040 (0x0230 - 0x01F0)
class UEngine_DecalComponent : public UEngine_SceneComponent
{
public:
	class UEngine_MaterialInterface*                   DecalMaterial;                                            // 0x01F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SortOrder;                                                // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeScreenSize;                                           // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeStartDelay;                                           // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeDuration;                                             // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInDuration;                                           // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FadeInStartDelay;                                         // 0x020C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDestroyOwnerAfterFade : 1;                               // 0x0210(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	struct FVector                                     DecalSize;                                                // 0x0214(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0220(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}


	void SetSortOrder(int Value);
	void SetFadeScreenSize(float NewFadeScreenSize);
	void SetFadeOut(float StartDelay, float Duration, bool DestroyOwnerAfterFade);
	void SetFadeIn(float StartDelay, float Duaration);
	void SetDecalMaterial(class UEngine_MaterialInterface* NewDecalMaterial);
	float GetFadeStartDelay();
	float GetFadeInStartDelay();
	float GetFadeInDuration();
	float GetFadeDuration();
	class UEngine_MaterialInterface* GetDecalMaterial();
	class UEngine_MaterialInstanceDynamic* CreateDynamicMaterialInstance();
};


// Class Engine.DefaultPawn
// 0x0028 (0x02A0 - 0x0278)
class AEngine_DefaultPawn : public AEngine_Pawn
{
public:
	float                                              BaseTurnRate;                                             // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              BaseLookUpRate;                                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	class UEngine_PawnMovementComponent*               MovementComponent;                                        // 0x0280(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_SphereComponent*                     CollisionComponent;                                       // 0x0288(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class UEngine_StaticMeshComponent*                 MeshComponent;                                            // 0x0290(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bAddDefaultMovementBindings : 1;                          // 0x0298(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0299(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPawn");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DefaultPawn");
		return ptr;
	}


	void TurnAtRate(float Rate);
	void MoveUp_World(float Val);
	void MoveRight(float Val);
	void MoveForward(float Val);
	void LookUpAtRate(float Rate);
};


// Class Engine.PhysicsVolume
// 0x0010 (0x0260 - 0x0250)
class AEngine_PhysicsVolume : public AEngine_Volume
{
public:
	float                                              TerminalVelocity;                                         // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                Priority;                                                 // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FluidFriction;                                            // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bWaterVolume : 1;                                         // 0x025C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bPhysicsOnContact : 1;                                    // 0x025C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x025D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}

};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0260 - 0x0260)
class AEngine_DefaultPhysicsVolume : public AEngine_PhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}

};


// Class Engine.DemoNetConnection
// 0x0070 (0x1A30 - 0x19C0)
class UEngine_DemoNetConnection : public UEngine_NetConnection
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x19C0(0x0070) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoNetConnection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DemoNetConnection");
		return ptr;
	}

};


// Class Engine.CloudStorageBase
// 0x0018 (0x0050 - 0x0038)
class UEngine_CloudStorageBase : public UEngine_PlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                          // 0x0038(0x0010) (ZeroConstructor)
	unsigned char                                      bSuppressDelegateCalls : 1;                               // 0x0048(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}

};


// Class Engine.PendingNetGame
// 0x0098 (0x00C0 - 0x0028)
class UEngine_PendingNetGame : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UEngine_NetDriver*                           NetDriver;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_DemoNetDriver*                       DemoNetDriver;                                            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x80];                                      // 0x0040(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingNetGame");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PendingNetGame");
		return ptr;
	}

};


// Class Engine.DemoPendingNetGame
// 0x0000 (0x00C0 - 0x00C0)
class UEngine_DemoPendingNetGame : public UEngine_PendingNetGame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPendingNetGame");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DemoPendingNetGame");
		return ptr;
	}

};


// Class Engine.DestructibleInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_DestructibleInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DestructibleInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DestructibleInterface");
		return ptr;
	}

};


// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
class UEngine_TextureLODSettings : public UObject
{
public:
	TArray<struct FEngine_TextureLODGroup>             TextureLODGroups;                                         // 0x0028(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureLODSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureLODSettings");
		return ptr;
	}

};


// Class Engine.DeviceProfile
// 0x0060 (0x0098 - 0x0038)
class UEngine_DeviceProfile : public UEngine_TextureLODSettings
{
public:
	struct FString                                     DeviceType;                                               // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst)
	struct FString                                     BaseProfileName;                                          // 0x0048(0x0010) (Edit, ZeroConstructor, Config)
	class UObject*                                     Parent;                                                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x18];                                      // 0x0060(0x0018) MISSED OFFSET
	TArray<struct FString>                             CVars;                                                    // 0x0078(0x0010) (Edit, ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0088(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeviceProfile");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DeviceProfile");
		return ptr;
	}

};


// Class Engine.DeviceProfileManager
// 0x0088 (0x00B0 - 0x0028)
class UEngine_DeviceProfileManager : public UObject
{
public:
	TArray<class UObject*>                             Profiles;                                                 // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x78];                                      // 0x0038(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DeviceProfileManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DeviceProfileManager");
		return ptr;
	}

};


// Class Engine.DialogueSoundWaveProxy
// 0x0018 (0x0178 - 0x0160)
class UEngine_DialogueSoundWaveProxy : public UEngine_SoundBase
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0160(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DialogueSoundWaveProxy");
		return ptr;
	}

};


// Class Engine.DialogueVoice
// 0x0018 (0x0040 - 0x0028)
class UEngine_DialogueVoice : public UObject
{
public:
	TEnumAsByte<FEngine_Engine_EGrammaticalGender>     Gender;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EGrammaticalNumber>     Plurality;                                                // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	struct FGuid                                       LocalizationGUID;                                         // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueVoice");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DialogueVoice");
		return ptr;
	}

};


// Class Engine.DialogueWave
// 0x0048 (0x0070 - 0x0028)
class UEngine_DialogueWave : public UObject
{
public:
	unsigned char                                      bMature : 1;                                              // 0x0028(0x0001) (Edit)
	unsigned char                                      bOverride_SubtitleOverride : 1;                           // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0029(0x0007) MISSED OFFSET
	struct FString                                     SpokenText;                                               // 0x0030(0x0010) (Edit, ZeroConstructor)
	struct FString                                     SubtitleOverride;                                         // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_DialogueContextMapping>      ContextMappings;                                          // 0x0050(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       LocalizationGUID;                                         // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DialogueWave");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DialogueWave");
		return ptr;
	}

};


// Class Engine.Light
// 0x0010 (0x0228 - 0x0218)
class AEngine_Light : public AEngine_Actor
{
public:
	class UEngine_LightComponent*                      LightComponent;                                           // 0x0218(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0220(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}


	void ToggleEnabled();
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UEngine_MaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetEnabled(bool bSetEnabled);
	void SetCastShadows(bool bNewValue);
	void SetBrightness(float NewBrightness);
	void SetAffectTranslucentLighting(bool bNewValue);
	void OnRep_bEnabled();
	bool IsEnabled();
	struct FLinearColor GetLightColor();
	float GetBrightness();
};


// Class Engine.DirectionalLight
// 0x0000 (0x0228 - 0x0228)
class AEngine_DirectionalLight : public AEngine_Light
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}

};


// Class Engine.LightComponentBase
// 0x0030 (0x0220 - 0x01F0)
class UEngine_LightComponentBase : public UEngine_SceneComponent
{
public:
	struct FGuid                                       LightGuid;                                                // 0x01F0(0x0010) (ZeroConstructor, IsPlainOldData)
	float                                              Brightness;                                               // 0x0200(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              Intensity;                                                // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      LightColor;                                               // 0x0208(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAffectsWorld : 1;                                        // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastShadows : 1;                                          // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastStaticShadows : 1;                                    // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      CastDynamicShadows : 1;                                   // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectTranslucentLighting : 1;                           // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bTransmission : 1;                                        // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastVolumetricShadow : 1;                                // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastDeepShadow : 1;                                      // 0x020C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastRaytracedShadow : 1;                                 // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectReflection : 1;                                    // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectGlobalIllumination : 1;                            // 0x020D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x2];                                       // 0x020E(0x0002) MISSED OFFSET
	float                                              IndirectLightingIntensity;                                // 0x0210(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricScatteringIntensity;                            // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                SamplesPerPixel;                                          // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponentBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightComponentBase");
		return ptr;
	}


	void SetSamplesPerPixel(int NewValue);
	void SetCastVolumetricShadow(bool bNewValue);
	void SetCastShadows(bool bNewValue);
	void SetCastRaytracedShadow(bool bNewValue);
	void SetCastDeepShadow(bool bNewValue);
	void SetAffectReflection(bool bNewValue);
	void SetAffectGlobalIllumination(bool bNewValue);
	struct FLinearColor GetLightColor();
};


// Class Engine.LightComponent
// 0x0120 (0x0340 - 0x0220)
class UEngine_LightComponent : public UEngine_LightComponentBase
{
public:
	float                                              Temperature;                                              // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxDrawDistance;                                          // 0x0224(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDistanceFadeRange;                                     // 0x0228(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseTemperature : 1;                                      // 0x022C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	int                                                ShadowMapChannel;                                         // 0x0230(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0234(0x0004) MISSED OFFSET
	float                                              MinRoughness;                                             // 0x0238(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              SpecularScale;                                            // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowResolutionScale;                                    // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowBias;                                               // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSlopeBias;                                          // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowSharpen;                                            // 0x024C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ContactShadowLength;                                      // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      ContactShadowLengthInWS : 1;                              // 0x0254(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      InverseSquaredFalloff : 1;                                // 0x0254(0x0001) (Deprecated)
	unsigned char                                      CastTranslucentShadows : 1;                               // 0x0254(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bCastShadowsFromCinematicObjectsOnly : 1;                 // 0x0254(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bAffectDynamicIndirectLighting : 1;                       // 0x0254(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceCachedShadowsForMovablePrimitives : 1;              // 0x0254(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	struct FEngine_LightingChannels                    LightingChannels;                                         // 0x0258(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0259(0x0007) MISSED OFFSET
	class UEngine_MaterialInterface*                   LightFunctionMaterial;                                    // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightFunctionScale;                                       // 0x0268(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	class UEngine_TextureLightProfile*                 IESTexture;                                               // 0x0278(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseIESBrightness : 1;                                    // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	float                                              IESBrightnessScale;                                       // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightFunctionFadeDistance;                                // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DisabledBrightness;                                       // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableLightShaftBloom : 1;                               // 0x0290(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0291(0x0003) MISSED OFFSET
	float                                              BloomScale;                                               // 0x0294(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomThreshold;                                           // 0x0298(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BloomMaxBrightness;                                       // 0x029C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      BloomTint;                                                // 0x02A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bUseRayTracedDistanceFieldShadows;                        // 0x02A4(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x02A5(0x0003) MISSED OFFSET
	float                                              RayStartOffsetDepthScale;                                 // 0x02A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x94];                                      // 0x02AC(0x0094) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}


	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetUseIESBrightness(bool bNewValue);
	void SetTransmission(bool bNewValue);
	void SetTemperature(float NewTemperature);
	void SetSpecularScale(float NewValue);
	void SetShadowSlopeBias(float NewValue);
	void SetShadowBias(float NewValue);
	void SetLightFunctionScale(const struct FVector& NewLightFunctionScale);
	void SetLightFunctionMaterial(class UEngine_MaterialInterface* NewLightFunctionMaterial);
	void SetLightFunctionFadeDistance(float NewLightFunctionFadeDistance);
	void SetLightFunctionDisabledBrightness(float NewValue);
	void SetLightColor(const struct FLinearColor& NewLightColor, bool bSRGB);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetIESTexture(class UEngine_TextureLightProfile* NewValue);
	void SetIESBrightnessScale(float NewValue);
	void SetForceCachedShadowsForMovablePrimitives(bool bNewValue);
	void SetEnableLightShaftBloom(bool bNewValue);
	void SetBloomTint(const struct FColor& NewValue);
	void SetBloomThreshold(float NewValue);
	void SetBloomScale(float NewValue);
	void SetBloomMaxBrightness(float NewValue);
	void SetAffectTranslucentLighting(bool bNewValue);
	void SetAffectDynamicIndirectLighting(bool bNewValue);
};


// Class Engine.DirectionalLightComponent
// 0x0070 (0x03B0 - 0x0340)
class UEngine_DirectionalLightComponent : public UEngine_LightComponent
{
public:
	float                                              OcclusionMaskDarkness;                                    // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionDepthRange;                                      // 0x0344(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     LightShaftOverrideDirection;                              // 0x0348(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x0354(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DynamicShadowDistanceMovableLight;                        // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DynamicShadowDistanceStationaryLight;                     // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                DynamicShadowCascades;                                    // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeDistributionExponent;                              // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CascadeTransitionFraction;                                // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowDistanceFadeoutFraction;                            // 0x036C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseInsetShadowsForMovableObjects : 1;                    // 0x0370(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	int                                                FarShadowCascadeCount;                                    // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FarShadowDistance;                                        // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldShadowDistance;                              // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceAngle;                                         // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LightSourceSoftAngle;                                     // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TraceDistance;                                            // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_LightmassDirectionalLightSettings   LightmassSettings;                                        // 0x038C(0x0010) (Edit)
	unsigned char                                      bCastModulatedShadows : 1;                                // 0x039C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x039D(0x0003) MISSED OFFSET
	struct FColor                                      ModulatedShadowColor;                                     // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              ShadowAmount;                                             // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsedAsAtmosphereSunLight : 1;                            // 0x03A8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0x3];                                       // 0x03A9(0x0003) MISSED OFFSET
	int                                                AtmosphereSunLightIndex;                                  // 0x03AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}


	void SetShadowDistanceFadeoutFraction(float NewValue);
	void SetShadowAmount(float NewValue);
	void SetOcclusionMaskDarkness(float NewValue);
	void SetLightShaftOverrideDirection(const struct FVector& NewValue);
	void SetEnableLightShaftOcclusion(bool bNewValue);
	void SetDynamicShadowDistanceStationaryLight(float NewValue);
	void SetDynamicShadowDistanceMovableLight(float NewValue);
	void SetDynamicShadowCascades(int NewValue);
	void SetCascadeTransitionFraction(float NewValue);
	void SetCascadeDistributionExponent(float NewValue);
};


// Class Engine.Distribution
// 0x0008 (0x0030 - 0x0028)
class UEngine_Distribution : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Distribution");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Distribution");
		return ptr;
	}

};


// Class Engine.DistributionFloat
// 0x0008 (0x0038 - 0x0030)
class UEngine_DistributionFloat : public UEngine_Distribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00 : 1;                                        // 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloat");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloat");
		return ptr;
	}

};


// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0000 (0x0050 - 0x0050)
class UEngine_AnimCompress_BitwiseCompressOnly : public UEngine_AnimCompress
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AnimCompress_BitwiseCompressOnly");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0008 (0x0040 - 0x0038)
class UEngine_DistributionFloatConstant : public UEngine_DistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0018 (0x0050 - 0x0038)
class UEngine_DistributionFloatConstantCurve : public UEngine_DistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0020 (0x0060 - 0x0040)
class UEngine_DistributionFloatParameterBase : public UEngine_DistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinInput;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxInput;                                                 // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinOutput;                                                // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxOutput;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDistributionParamMode> ParamMode;                                                // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionFloatParticleParameter
// 0x0000 (0x0060 - 0x0060)
class UEngine_DistributionFloatParticleParameter : public UEngine_DistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0040 - 0x0038)
class UEngine_DistributionFloatUniform : public UEngine_DistributionFloat
{
public:
	float                                              Min;                                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Max;                                                      // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0018 (0x0050 - 0x0038)
class UEngine_DistributionFloatUniformCurve : public UEngine_DistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionVector
// 0x0008 (0x0038 - 0x0030)
class UEngine_DistributionVector : public UEngine_Distribution
{
public:
	unsigned char                                      bCanBeBaked : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      bIsDirty : 1;                                             // 0x0030(0x0001)
	unsigned char                                      bBakedDataSuccesfully : 1;                                // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVector");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0020 (0x0058 - 0x0038)
class UEngine_DistributionVectorConstantCurve : public UEngine_DistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EDistributionVectorLockFlags> LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0018 (0x0050 - 0x0038)
class UEngine_DistributionVectorConstant : public UEngine_DistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EDistributionVectorLockFlags> LockedAxes;                                               // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x0040 (0x0090 - 0x0050)
class UEngine_DistributionVectorParameterBase : public UEngine_DistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinInput;                                                 // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInput;                                                 // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MinOutput;                                                // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxOutput;                                                // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDistributionParamMode> ParamModes[0x3];                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x008B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}

};


// Class Engine.DemoNetDriver
// 0x0958 (0x1060 - 0x0708)
class UEngine_DemoNetDriver : public UEngine_NetDriver
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0708(0x00F8) MISSED OFFSET
	TMap<struct FString, struct FEngine_RollbackNetStartupActorInfo> RollbackNetStartupActors;                                 // 0x0800(0x0050) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData01[0x3C4];                                     // 0x0850(0x03C4) MISSED OFFSET
	float                                              CheckpointSaveMaxMSPerFrame;                              // 0x0C14(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x30];                                      // 0x0C18(0x0030) MISSED OFFSET
	TArray<struct FEngine_MulticastRecordOptions>      MulticastRecordOptions;                                   // 0x0C48(0x0010) (ZeroConstructor, Config)
	bool                                               bIsLocalReplay;                                           // 0x0C58(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0C59(0x0007) MISSED OFFSET
	TArray<class AEngine_PlayerController*>            SpectatorControllers;                                     // 0x0C60(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x3F0];                                     // 0x0C70(0x03F0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoNetDriver");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DemoNetDriver");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0028 (0x0060 - 0x0038)
class UEngine_DistributionVectorUniform : public UEngine_DistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     Min;                                                      // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLockAxes : 1;                                            // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EDistributionVectorLockFlags> LockedAxes;                                               // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                         // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseExtremes : 1;                                         // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0000 (0x0090 - 0x0090)
class UEngine_DistributionVectorParticleParameter : public UEngine_DistributionVectorParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0020 (0x0400 - 0x03E0)
class UEngine_DrawFrustumComponent : public UEngine_PrimitiveComponent
{
public:
	float                                              FrustumAspectRatio;                                       // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumStartDist;                                         // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              FrustumEndDist;                                           // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class UEngine_Texture*                             Texture;                                                  // 0x03F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}

};


// Class Engine.SphereComponent
// 0x0010 (0x0400 - 0x03F0)
class UEngine_SphereComponent : public UEngine_ShapeComponent
{
public:
	float                                              SphereRadius;                                             // 0x03F0(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x03F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SphereComponent");
		return ptr;
	}


	void SetSphereRadius(float InSphereRadius, bool bUpdateOverlaps);
	float GetUnscaledSphereRadius();
	float GetShapeScale();
	float GetScaledSphereRadius();
};


// Class Engine.DrawSphereComponent
// 0x0000 (0x0400 - 0x0400)
class UEngine_DrawSphereComponent : public UEngine_SphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}

};


// Class Engine.GraphNodeContextMenuContext
// 0x0028 (0x0050 - 0x0028)
class UEngine_GraphNodeContextMenuContext : public UObject
{
public:
	class UEngine_Blueprint*                           Blueprint;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_EdGraph*                             Graph;                                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_EdGraphNode*                         Node;                                                     // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0040(0x0008) MISSED OFFSET
	bool                                               bIsDebugging;                                             // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GraphNodeContextMenuContext");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GraphNodeContextMenuContext");
		return ptr;
	}

};


// Class Engine.EdGraphNode
// 0x0070 (0x0098 - 0x0028)
class UEngine_EdGraphNode : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UEngine_EdGraphPin_Deprecated*>       DeprecatedPins;                                           // 0x0038(0x0010) (ZeroConstructor)
	int                                                NodePosX;                                                 // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodePosY;                                                 // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeWidth;                                                // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NodeHeight;                                               // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENodeAdvancedPins>      AdvancedPinDisplay;                                       // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ENodeEnabledState                   EnabledState;                                             // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x005A(0x0001) MISSED OFFSET
	unsigned char                                      UnknownData02 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      bDisplayAsDisabled : 1;                                   // 0x005B(0x0001)
	unsigned char                                      bUserSetEnabledState : 1;                                 // 0x005B(0x0001)
	unsigned char                                      UnknownData03 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      bIsNodeEnabled : 1;                                       // 0x005B(0x0001) (Deprecated)
	unsigned char                                      UnknownData04 : 1;                                        // 0x005B(0x0001)
	unsigned char                                      bHasCompilerMessage : 1;                                  // 0x005B(0x0001)
	unsigned char                                      UnknownData05[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     NodeComment;                                              // 0x0060(0x0010) (ZeroConstructor)
	int                                                ErrorType;                                                // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FString                                     ErrorMsg;                                                 // 0x0078(0x0010) (ZeroConstructor)
	struct FGuid                                       NodeGuid;                                                 // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphNode");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EdGraphNode");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0028 (0x0060 - 0x0038)
class UEngine_DistributionVectorUniformCurve : public UEngine_DistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0038(0x0018) (Edit, ZeroConstructor)
	unsigned char                                      bLockAxes1 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      bLockAxes2 : 1;                                           // 0x0050(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EDistributionVectorLockFlags> LockedAxes[0x2];                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDistributionVectorMirrorFlags> MirrorFlags[0x3];                                         // 0x0056(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned char                                      bUseExtremes : 1;                                         // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}

};


// Class Engine.EdGraphPin_Deprecated
// 0x00F0 (0x0118 - 0x0028)
class UEngine_EdGraphPin_Deprecated : public UObject
{
public:
	struct FString                                     PinName;                                                  // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     PinToolTip;                                               // 0x0038(0x0010) (ZeroConstructor)
	TEnumAsByte<FEngine_Engine_EEdGraphPinDirection>   Direction;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0049(0x0007) MISSED OFFSET
	struct FEngine_EdGraphPinType                      PinType;                                                  // 0x0050(0x0058)
	struct FString                                     DefaultValue;                                             // 0x00A8(0x0010) (ZeroConstructor)
	struct FString                                     AutogeneratedDefaultValue;                                // 0x00B8(0x0010) (ZeroConstructor)
	class UObject*                                     DefaultObject;                                            // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FText                                       DefaultTextValue;                                         // 0x00D0(0x0018)
	TArray<class UEngine_EdGraphPin_Deprecated*>       LinkedTo;                                                 // 0x00E8(0x0010) (ZeroConstructor)
	TArray<class UEngine_EdGraphPin_Deprecated*>       SubPins;                                                  // 0x00F8(0x0010) (ZeroConstructor)
	class UEngine_EdGraphPin_Deprecated*               ParentPin;                                                // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_EdGraphPin_Deprecated*               ReferencePassThroughConnection;                           // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphPin_Deprecated");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EdGraphPin_Deprecated");
		return ptr;
	}

};


// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
class UEngine_EdGraphSchema : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphSchema");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EdGraphSchema");
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0050 (0x0268 - 0x0218)
class AEngine_Emitter : public AEngine_Actor
{
public:
	class UEngine_ParticleSystemComponent*             ParticleSystemComponent;                                  // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bDestroyOnSystemFinish : 1;                               // 0x0220(0x0001)
	unsigned char                                      bPostUpdateTickGroup : 1;                                 // 0x0220(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bCurrentlyActive : 1;                                     // 0x0220(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnParticleSpawn;                                          // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleBurst;                                          // 0x0238(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleDeath;                                          // 0x0248(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnParticleCollide;                                        // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void ToggleActive();
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetTemplate(class UEngine_ParticleSystem* NewTemplate);
	void SetMaterialParameter(const struct FName& ParameterName, class UEngine_MaterialInterface* Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetActorParameter(const struct FName& ParameterName, class AEngine_Actor* Param);
	void OnRep_bCurrentlyActive();
	void OnParticleSystemFinished(class UEngine_ParticleSystemComponent* finishedComponent);
	bool IsActive();
	void Deactivate();
	void Activate();
};


// Class Engine.EdGraph
// 0x0038 (0x0060 - 0x0028)
class UEngine_EdGraph : public UObject
{
public:
	class UClass*                                      Schema;                                                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_EdGraphNode*>                 Nodes;                                                    // 0x0030(0x0010) (ZeroConstructor)
	unsigned char                                      bEditable : 1;                                            // 0x0040(0x0001)
	unsigned char                                      bAllowDeletion : 1;                                       // 0x0040(0x0001)
	unsigned char                                      bAllowRenaming : 1;                                       // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x1F];                                      // 0x0041(0x001F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraph");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EdGraph");
		return ptr;
	}

};


// Class Engine.EmitterCameraLensEffectBase
// 0x0068 (0x02D0 - 0x0268)
class AEngine_EmitterCameraLensEffectBase : public AEngine_Emitter
{
public:
	class UEngine_ParticleSystem*                      PS_CameraEffect;                                          // 0x0268(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	class UEngine_ParticleSystem*                      PS_CameraEffectNonExtremeContent;                         // 0x0270(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AEngine_PlayerCameraManager*                 BaseCamera;                                               // 0x0278(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	struct FTransform                                  RelativeTransform;                                        // 0x0280(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData)
	float                                              BaseFOV;                                                  // 0x02B0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	unsigned char                                      bAllowMultipleInstances : 1;                              // 0x02B4(0x0001) (Edit)
	unsigned char                                      bResetWhenRetriggered : 1;                                // 0x02B4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B5(0x0003) MISSED OFFSET
	TArray<class UClass*>                              EmittersToTreatAsSame;                                    // 0x02B8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance)
	float                                              DistFromCamera;                                           // 0x02C8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}

};


// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
class UEngine_EngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}

};


// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0028 - 0x0028)
class UEngine_EngineHandlerComponentFactory : public UPacketHandler_HandlerComponentFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineHandlerComponentFactory");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineHandlerComponentFactory");
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
class UEngine_LocalMessage : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}

};


// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
class UEngine_EngineMessage : public UEngine_LocalMessage
{
public:
	struct FString                                     FailedPlaceMessage;                                       // 0x0028(0x0010) (ZeroConstructor)
	struct FString                                     MaxedOutMessage;                                          // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     EnteredMessage;                                           // 0x0048(0x0010) (ZeroConstructor)
	struct FString                                     LeftMessage;                                              // 0x0058(0x0010) (ZeroConstructor)
	struct FString                                     GlobalNameChange;                                         // 0x0068(0x0010) (ZeroConstructor)
	struct FString                                     SpecEnteredMessage;                                       // 0x0078(0x0010) (ZeroConstructor)
	struct FString                                     NewPlayerMessage;                                         // 0x0088(0x0010) (ZeroConstructor)
	struct FString                                     NewSpecMessage;                                           // 0x0098(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineMessage");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineMessage");
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
class UEngine_EngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineTypes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}

};


// Class Engine.ExponentialHeightFogComponent
// 0x00A0 (0x0290 - 0x01F0)
class UEngine_ExponentialHeightFogComponent : public UEngine_SceneComponent
{
public:
	float                                              FogDensity;                                               // 0x01F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogHeightFalloff;                                         // 0x01F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExponentialHeightFogData            SecondFogData;                                            // 0x01F8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly)
	struct FLinearColor                                FogInscatteringColor;                                     // 0x0204(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0214(0x0004) MISSED OFFSET
	class UEngine_TextureCube*                         InscatteringColorCubemap;                                 // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InscatteringColorCubemapAngle;                            // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                InscatteringTextureTint;                                  // 0x0224(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FullyDirectionalInscatteringColorDistance;                // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              NonDirectionalInscatteringColorDistance;                  // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringExponent;                          // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              DirectionalInscatteringStartDistance;                     // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                DirectionalInscatteringColor;                             // 0x0244(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogMaxOpacity;                                            // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              StartDistance;                                            // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              FogCutoffDistance;                                        // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableVolumetricFog;                                     // 0x0260(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              VolumetricFogScatteringDistribution;                      // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      VolumetricFogAlbedo;                                      // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                VolumetricFogEmissive;                                    // 0x026C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogExtinctionScale;                             // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogDistance;                                    // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VolumetricFogStaticLightingScatteringIntensity;           // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bOverrideLightColorsWithFogInscatteringColors;            // 0x0288(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0289(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}


	void SetVolumetricFogScatteringDistribution(float NewValue);
	void SetVolumetricFogExtinctionScale(float NewValue);
	void SetVolumetricFogEmissive(const struct FLinearColor& NewValue);
	void SetVolumetricFogDistance(float NewValue);
	void SetVolumetricFogAlbedo(const struct FColor& NewValue);
	void SetVolumetricFog(bool bNewValue);
	void SetStartDistance(float Value);
	void SetNonDirectionalInscatteringColorDistance(float Value);
	void SetInscatteringTextureTint(const struct FLinearColor& Value);
	void SetInscatteringColorCubemapAngle(float Value);
	void SetInscatteringColorCubemap(class UEngine_TextureCube* Value);
	void SetFullyDirectionalInscatteringColorDistance(float Value);
	void SetFogMaxOpacity(float Value);
	void SetFogInscatteringColor(const struct FLinearColor& Value);
	void SetFogHeightFalloff(float Value);
	void SetFogDensity(float Value);
	void SetFogCutoffDistance(float Value);
	void SetDirectionalInscatteringStartDistance(float Value);
	void SetDirectionalInscatteringExponent(float Value);
	void SetDirectionalInscatteringColor(const struct FLinearColor& Value);
};


// Class Engine.Exporter
// 0x0050 (0x0078 - 0x0028)
class UEngine_Exporter : public UObject
{
public:
	class UClass*                                      SupportedClass;                                           // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UObject*                                     ExportRootScope;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FString>                             FormatExtension;                                          // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor)
	TArray<struct FString>                             FormatDescription;                                        // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor)
	int                                                PreferredFormatIndex;                                     // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TextIndent;                                               // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bText : 1;                                                // 0x0060(0x0001) (BlueprintVisible)
	unsigned char                                      bSelectedOnly : 1;                                        // 0x0060(0x0001)
	unsigned char                                      bForceFileOperations : 1;                                 // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	class UEngine_AssetExportTask*                     ExportTask;                                               // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0070(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Exporter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Exporter");
		return ptr;
	}


	bool ScriptRunAssetExportTask(class UEngine_AssetExportTask* Task);
	bool STATIC_RunAssetExportTasks(TArray<class UEngine_AssetExportTask*> ExportTasks);
	bool STATIC_RunAssetExportTask(class UEngine_AssetExportTask* Task);
};


// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B8 - 0x0098)
class UEngine_EdGraphNode_Documentation : public UEngine_EdGraphNode
{
public:
	struct FString                                     link;                                                     // 0x0098(0x0010) (ZeroConstructor)
	struct FString                                     Excerpt;                                                  // 0x00A8(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.EdGraphNode_Documentation");
		return ptr;
	}

};


// Class Engine.Font
// 0x01A8 (0x01D0 - 0x0028)
class UEngine_Font : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	FEngine_Engine_EFontCacheType                      FontCacheType;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FEngine_FontCharacter>               Characters;                                               // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<class UEngine_Texture2D*>                   Textures;                                                 // 0x0048(0x0010) (ZeroConstructor)
	int                                                IsRemapped;                                               // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EmScale;                                                  // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Ascent;                                                   // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Descent;                                                  // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Leading;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Kerning;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_FontImportOptionsData               ImportOptions;                                            // 0x0070(0x00B0) (Edit)
	int                                                NumCharacters;                                            // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<int>                                        MaxCharHeight;                                            // 0x0128(0x0010) (ZeroConstructor, Transient)
	float                                              ScalingFactor;                                            // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LegacyFontSize;                                           // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       LegacyFontName;                                           // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FSlateCore_CompositeFont                    CompositeFont;                                            // 0x0148(0x0038)
	unsigned char                                      UnknownData03[0x50];                                      // 0x0180(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}

};


// Class Engine.ExponentialHeightFog
// 0x0010 (0x0228 - 0x0218)
class AEngine_ExponentialHeightFog : public AEngine_Info
{
public:
	class UEngine_ExponentialHeightFogComponent*       Component;                                                // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x0220(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}


	void OnRep_bEnabled();
};


// Class Engine.DocumentationActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_DocumentationActor : public AEngine_Actor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DocumentationActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.DocumentationActor");
		return ptr;
	}

};


// Class Engine.FloatingPawnMovement
// 0x0018 (0x0150 - 0x0138)
class UEngine_FloatingPawnMovement : public UEngine_PawnMovementComponent
{
public:
	float                                              MaxSpeed;                                                 // 0x0138(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Acceleration;                                             // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Deceleration;                                             // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              TurningBoost;                                             // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPositionCorrected : 1;                                   // 0x0148(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FloatingPawnMovement");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.FloatingPawnMovement");
		return ptr;
	}

};


// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
class UEngine_FontImportOptions : public UObject
{
public:
	struct FEngine_FontImportOptionsData               Data;                                                     // 0x0028(0x00B0) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontImportOptions");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}

};


// Class Engine.ForceFeedbackAttenuation
// 0x00B0 (0x00D8 - 0x0028)
class UEngine_ForceFeedbackAttenuation : public UObject
{
public:
	struct FEngine_ForceFeedbackAttenuationSettings    Attenuation;                                              // 0x0028(0x00B0) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackAttenuation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ForceFeedbackAttenuation");
		return ptr;
	}

};


// Class Engine.ForceFeedbackEffect
// 0x0018 (0x0040 - 0x0028)
class UEngine_ForceFeedbackEffect : public UObject
{
public:
	TArray<struct FEngine_ForceFeedbackChannelDetails> ChannelDetails;                                           // 0x0028(0x0010) (Edit, ZeroConstructor)
	float                                              Duration;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackEffect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ForceFeedbackEffect");
		return ptr;
	}

};


// Class Engine.GameEngine
// 0x0050 (0x0E38 - 0x0DE8)
class UEngine_GameEngine : public UEngine_Engine
{
public:
	float                                              MaxDeltaTime;                                             // 0x0DE8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              ServerFlushLogInterval;                                   // 0x0DEC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	class UEngine_GameInstance*                        GameInstance;                                             // 0x0DF0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x40];                                      // 0x0DF8(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}

};


// Class Engine.GameInstanceSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngine_GameInstanceSubsystem : public UEngine_Subsystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInstanceSubsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameInstanceSubsystem");
		return ptr;
	}

};


// Class Engine.GameNetworkManager
// 0x00B0 (0x02C8 - 0x0218)
class AEngine_GameNetworkManager : public AEngine_Info
{
public:
	float                                              BadPacketLossThreshold;                                   // 0x0218(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              SeverePacketLossThreshold;                                // 0x021C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                BadPingThreshold;                                         // 0x0220(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                SeverePingThreshold;                                      // 0x0224(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                AdjustedNetSpeed;                                         // 0x0228(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastNetSpeedUpdateTime;                                   // 0x022C(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                TotalNetBandwidth;                                        // 0x0230(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MinDynamicBandwidth;                                      // 0x0234(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxDynamicBandwidth;                                      // 0x0238(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      bIsStandbyCheckingEnabled : 1;                            // 0x023C(0x0001) (Config)
	unsigned char                                      bHasStandbyCheatTriggered : 1;                            // 0x023C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	float                                              StandbyRxCheatTime;                                       // 0x0240(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              StandbyTxCheatTime;                                       // 0x0244(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForRxStandby;                               // 0x0248(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentMissingForTxStandby;                               // 0x024C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              PercentForBadPing;                                        // 0x0250(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0254(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              MoveRepSize;                                              // 0x0258(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXPOSITIONERRORSQUARED;                                  // 0x025C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXNEARZEROVELOCITYSQUARED;                               // 0x0260(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              CLIENTADJUSTUPDATECOST;                                   // 0x0264(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MAXCLIENTUPDATEINTERVAL;                                  // 0x0268(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientForcedUpdateDuration;                            // 0x026C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchThreshold;                         // 0x0270(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ServerForcedUpdateHitchCooldown;                          // 0x0274(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxMoveDeltaTime;                                         // 0x0278(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MaxClientSmoothingDeltaTime;                              // 0x027C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTime;                               // 0x0280(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeThrottled;                      // 0x0284(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetSendMoveDeltaTimeStationary;                     // 0x0288(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleAtNetSpeed;                      // 0x028C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                ClientNetSendMoveThrottleOverPlayerCount;                 // 0x0290(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               ClientAuthorativePosition;                                // 0x0294(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0295(0x0003) MISSED OFFSET
	float                                              ClientErrorUpdateRateLimit;                               // 0x0298(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdateDeltaTime;                              // 0x029C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              ClientNetCamUpdatePositionLimit;                          // 0x02A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyDetection;                        // 0x02A4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyResolution;                       // 0x02A5(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x02A6(0x0002) MISSED OFFSET
	float                                              MovementTimeDiscrepancyMaxTimeMargin;                     // 0x02A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyMinTimeMargin;                     // 0x02AC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyResolutionRate;                    // 0x02B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	float                                              MovementTimeDiscrepancyDriftAllowance;                    // 0x02B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bMovementTimeDiscrepancyForceCorrectionsDuringResolution; // 0x02B8(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bUseDistanceBasedRelevancy;                               // 0x02B9(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0xE];                                       // 0x02BA(0x000E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameNetworkManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameNetworkManager");
		return ptr;
	}

};


// Class Engine.GameSession
// 0x0018 (0x0230 - 0x0218)
class AEngine_GameSession : public AEngine_Info
{
public:
	int                                                MaxSpectators;                                            // 0x0218(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPlayers;                                               // 0x021C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	int                                                MaxPartySize;                                             // 0x0220(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      MaxSplitscreensPerConnection;                             // 0x0224(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	bool                                               bRequiresPushToTalk;                                      // 0x0225(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0226(0x0002) MISSED OFFSET
	struct FName                                       SessionName;                                              // 0x0228(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameSession");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameSession");
		return ptr;
	}

};


// Class Engine.GameUserSettings
// 0x00F8 (0x0120 - 0x0028)
class UEngine_GameUserSettings : public UObject
{
public:
	bool                                               bUseVSync;                                                // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDynamicResolution;                                    // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x56];                                      // 0x002A(0x0056) MISSED OFFSET
	bool                                               InitWindowedResolution;                                   // 0x0080(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	uint32_t                                           ResolutionSizeX;                                          // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           ResolutionSizeY;                                          // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeX;                         // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           LastUserConfirmedResolutionSizeY;                         // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosX;                                               // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                WindowPosY;                                               // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                FullscreenMode;                                           // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedFullscreenMode;                              // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                PreferredFullscreenMode;                                  // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           Version;                                                  // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                AudioQualityLevel;                                        // 0x00AC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastConfirmedAudioQualityLevel;                           // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              FrameRateLimit;                                           // 0x00B4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00B8(0x0004) MISSED OFFSET
	int                                                DesiredScreenWidth;                                       // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseDesiredScreenHeight;                                  // 0x00C0(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	int                                                DesiredScreenHeight;                                      // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenWidth;                      // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                LastUserConfirmedDesiredScreenHeight;                     // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenWidth;                               // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastRecommendedScreenHeight;                              // 0x00D4(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastCPUBenchmarkResult;                                   // 0x00D8(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	float                                              LastGPUBenchmarkResult;                                   // 0x00DC(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	TArray<float>                                      LastCPUBenchmarkSteps;                                    // 0x00E0(0x0010) (ZeroConstructor, Config)
	TArray<float>                                      LastGPUBenchmarkSteps;                                    // 0x00F0(0x0010) (ZeroConstructor, Config)
	float                                              LastGPUBenchmarkMultiplier;                               // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bUseHDRDisplayOutput;                                     // 0x0104(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	int                                                HDRDisplayOutputNits;                                     // 0x0108(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnGameUserSettingsUINeedsUpdate;                          // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameUserSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GameUserSettings");
		return ptr;
	}


	void ValidateSettings();
	bool SupportsHDRDisplayOutput();
	void SetVSyncEnabled(bool bEnable);
	void SetVisualEffectQuality(int Value);
	void SetViewDistanceQuality(int Value);
	void SetToDefaults();
	void SetTextureQuality(int Value);
	void SetShadowQuality(int Value);
	void SetShadingQuality(int Value);
	void SetScreenResolution(const struct FIntPoint& Resolution);
	void SetResolutionScaleValueEx(float NewScaleValue);
	void SetResolutionScaleValue(int NewScaleValue);
	void SetResolutionScaleNormalized(float NewScaleNormalized);
	void SetPostProcessingQuality(int Value);
	void SetOverallScalabilityLevel(int Value);
	void SetFullscreenMode(TEnumAsByte<FEngine_Engine_EWindowMode> InFullscreenMode);
	void SetFrameRateLimit(float NewLimit);
	void SetFoliageQuality(int Value);
	void SetDynamicResolutionEnabled(bool bEnable);
	void SetBenchmarkFallbackValues();
	void SetAudioQualityLevel(int QualityLevel);
	void SetAntiAliasingQuality(int Value);
	void SaveSettings();
	void RunHardwareBenchmark(int WorkScale, float CPUMultiplier, float GPUMultiplier);
	void RevertVideoMode();
	void ResetToCurrentSettings();
	void LoadSettings(bool bForceReload);
	bool IsVSyncEnabled();
	bool IsVSyncDirty();
	bool IsScreenResolutionDirty();
	bool IsHDREnabled();
	bool IsFullscreenModeDirty();
	bool IsDynamicResolutionEnabled();
	bool IsDynamicResolutionDirty();
	bool IsDirty();
	int GetVisualEffectQuality();
	int GetViewDistanceQuality();
	int GetTextureQuality();
	int STATIC_GetSyncInterval();
	int GetShadowQuality();
	int GetShadingQuality();
	struct FIntPoint GetScreenResolution();
	float GetResolutionScaleNormalized();
	void GetResolutionScaleInformationEx(float* CurrentScaleNormalized, float* CurrentScaleValue, float* MinScaleValue, float* MaxScaleValue);
	void GetResolutionScaleInformation(float* CurrentScaleNormalized, int* CurrentScaleValue, int* MinScaleValue, int* MaxScaleValue);
	float GetRecommendedResolutionScale();
	TEnumAsByte<FEngine_Engine_EWindowMode> GetPreferredFullscreenMode();
	int GetPostProcessingQuality();
	int GetOverallScalabilityLevel();
	struct FIntPoint GetLastConfirmedScreenResolution();
	TEnumAsByte<FEngine_Engine_EWindowMode> GetLastConfirmedFullscreenMode();
	class UEngine_GameUserSettings* STATIC_GetGameUserSettings();
	TEnumAsByte<FEngine_Engine_EWindowMode> GetFullscreenMode();
	float GetFrameRateLimit();
	int GetFoliageQuality();
	struct FIntPoint GetDesktopResolution();
	struct FIntPoint STATIC_GetDefaultWindowPosition();
	TEnumAsByte<FEngine_Engine_EWindowMode> STATIC_GetDefaultWindowMode();
	float GetDefaultResolutionScale();
	struct FIntPoint STATIC_GetDefaultResolution();
	int GetCurrentHDRDisplayNits();
	int GetAudioQualityLevel();
	int GetAntiAliasingQuality();
	void EnableHDRDisplayOutput(bool bEnable, int DisplayNits);
	void ConfirmVideoMode();
	void ApplySettings(bool bCheckForCommandLineOverrides);
	void ApplyResolutionSettings(bool bCheckForCommandLineOverrides);
	void ApplyNonResolutionSettings();
	void ApplyHardwareBenchmarkResults();
};


// Class Engine.SpotLight
// 0x0008 (0x0230 - 0x0228)
class AEngine_SpotLight : public AEngine_Light
{
public:
	class UEngine_SpotLightComponent*                  SpotLightComponent;                                       // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x0230 - 0x0230)
class AEngine_GeneratedMeshAreaLight : public AEngine_SpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}

};


// Class Engine.FontFace
// 0x0030 (0x0058 - 0x0028)
class UEngine_FontFace : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	struct FString                                     SourceFilename;                                           // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	FSlateCore_SlateCore_EFontHinting                  Hinting;                                                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FSlateCore_SlateCore_EFontLoadingPolicy            LoadingPolicy;                                            // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FSlateCore_SlateCore_EFontLayoutMethod             LayoutMethod;                                             // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x15];                                      // 0x0043(0x0015) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontFace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.FontFace");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0028 - 0x0028)
class UEngine_HapticFeedbackEffect_Base : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Base");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Base");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Buffer
// 0x0040 (0x0068 - 0x0028)
class UEngine_HapticFeedbackEffect_Buffer : public UEngine_HapticFeedbackEffect_Base
{
public:
	TArray<unsigned char>                              Amplitudes;                                               // 0x0028(0x0010) (Edit, ZeroConstructor)
	int                                                SampleRate;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2C];                                      // 0x003C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Buffer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Buffer");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (0x0138 - 0x0028)
class UEngine_HapticFeedbackEffect_Curve : public UEngine_HapticFeedbackEffect_Base
{
public:
	struct FEngine_HapticFeedbackDetails_Curve         HapticDetails;                                            // 0x0028(0x0110) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Curve");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_Curve");
		return ptr;
	}

};


// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0038 (0x0060 - 0x0028)
class UEngine_HapticFeedbackEffect_SoundWave : public UEngine_HapticFeedbackEffect_Base
{
public:
	class UEngine_SoundWave*                           SoundWave;                                                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x30];                                      // 0x0030(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_SoundWave");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HapticFeedbackEffect_SoundWave");
		return ptr;
	}

};


// Class Engine.ForceFeedbackComponent
// 0x00E0 (0x02D0 - 0x01F0)
class UEngine_ForceFeedbackComponent : public UEngine_SceneComponent
{
public:
	class UEngine_ForceFeedbackEffect*                 ForceFeedbackEffect;                                      // 0x01F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDestroy : 1;                                         // 0x01F8(0x0001)
	unsigned char                                      bStopWhenOwnerDestroyed : 1;                              // 0x01F8(0x0001)
	unsigned char                                      bLooping : 1;                                             // 0x01F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x01F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x01F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F9(0x0003) MISSED OFFSET
	float                                              IntensityMultiplier;                                      // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_ForceFeedbackAttenuation*            AttenuationSettings;                                      // 0x0200(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_ForceFeedbackAttenuationSettings    AttenuationOverrides;                                     // 0x0208(0x00B0) (Edit, BlueprintVisible)
	struct FScriptMulticastDelegate                    OnForceFeedbackFinished;                                  // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02C8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ForceFeedbackComponent");
		return ptr;
	}


	void Stop();
	void SetIntensityMultiplier(float NewIntensityMultiplier);
	void SetForceFeedbackEffect(class UEngine_ForceFeedbackEffect* NewForceFeedbackEffect);
	void Play(float StartTime);
	bool BP_GetAttenuationSettingsToApply(struct FEngine_ForceFeedbackAttenuationSettings* OutAttenuationSettings);
	void AdjustAttenuation(const struct FEngine_ForceFeedbackAttenuationSettings& InAttenuationSettings);
};


// Class Engine.HLODProxy
// 0x0010 (0x0038 - 0x0028)
class UEngine_HLODProxy : public UObject
{
public:
	TArray<struct FEngine_HLODProxyMesh>               ProxyMeshes;                                              // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HLODProxy");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HLODProxy");
		return ptr;
	}

};


// Class Engine.AmbisonicsSubmixSettingsBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_AmbisonicsSubmixSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbisonicsSubmixSettingsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.AmbisonicsSubmixSettingsBase");
		return ptr;
	}

};


// Class Engine.SpatializationPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_SpatializationPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpatializationPluginSourceSettingsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpatializationPluginSourceSettingsBase");
		return ptr;
	}

};


// Class Engine.OcclusionPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_OcclusionPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OcclusionPluginSourceSettingsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.OcclusionPluginSourceSettingsBase");
		return ptr;
	}

};


// Class Engine.SoundModulationPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_SoundModulationPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundModulationPluginSourceSettingsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundModulationPluginSourceSettingsBase");
		return ptr;
	}

};


// Class Engine.ImportanceSamplingLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_ImportanceSamplingLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImportanceSamplingLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ImportanceSamplingLibrary");
		return ptr;
	}


	float STATIC_RandomSobolFloat(int Index, int Dimension, float Seed);
	struct FVector STATIC_RandomSobolCell3D(int Index, int NumCells, const struct FVector& Cell, const struct FVector& Seed);
	struct FVector2D STATIC_RandomSobolCell2D(int Index, int NumCells, const struct FVector2D& Cell, const struct FVector2D& Seed);
	float STATIC_NextSobolFloat(int Index, int Dimension, float PreviousValue);
	struct FVector STATIC_NextSobolCell3D(int Index, int NumCells, const struct FVector& PreviousValue);
	struct FVector2D STATIC_NextSobolCell2D(int Index, int NumCells, const struct FVector2D& PreviousValue);
	struct FEngine_ImportanceTexture STATIC_MakeImportanceTexture(class UEngine_Texture2D* Texture, TEnumAsByte<FEngine_Engine_EImportanceWeight> WeightingFunc);
	void STATIC_ImportanceSample(const struct FEngine_ImportanceTexture& Texture, const struct FVector2D& Rand, int Samples, float Intensity, struct FVector2D* SamplePosition, struct FLinearColor* SampleColor, float* SampleIntensity, float* SampleSize);
	void STATIC_BreakImportanceTexture(const struct FEngine_ImportanceTexture& ImportanceTexture, class UEngine_Texture2D** Texture, TEnumAsByte<FEngine_Engine_EImportanceWeight>* WeightingFunc);
};


// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_ImportantToggleSettingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImportantToggleSettingInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ImportantToggleSettingInterface");
		return ptr;
	}

};


// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
class UEngine_InGameAdManager : public UEngine_PlatformInterfaceBase
{
public:
	unsigned char                                      bShouldPauseWhileAdOpen : 1;                              // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<struct FScriptDelegate>                     ClickedBannerDelegates;                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FScriptDelegate>                     ClosedAdDelegates;                                        // 0x0050(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InGameAdManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}

};


// Class Engine.InheritableComponentHandler
// 0x0020 (0x0048 - 0x0028)
class UEngine_InheritableComponentHandler : public UObject
{
public:
	TArray<struct FEngine_ComponentOverrideRecord>     Records;                                                  // 0x0028(0x0010) (ZeroConstructor)
	TArray<class UEngine_ActorComponent*>              UnnecessaryComponents;                                    // 0x0038(0x0010) (ExportObject, ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InheritableComponentHandler");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InheritableComponentHandler");
		return ptr;
	}

};


// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
class UEngine_InputDelegateBinding : public UEngine_DynamicBlueprintBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_InputActionDelegateBinding : public UEngine_InputDelegateBinding
{
public:
	TArray<struct FEngine_BlueprintInputActionDelegateBinding> InputActionDelegateBindings;                              // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputActionDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputActionDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_InputAxisDelegateBinding : public UEngine_InputDelegateBinding
{
public:
	TArray<struct FEngine_BlueprintInputAxisDelegateBinding> InputAxisDelegateBindings;                                // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputAxisDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_InputAxisKeyDelegateBinding : public UEngine_InputDelegateBinding
{
public:
	TArray<struct FEngine_BlueprintInputAxisKeyDelegateBinding> InputAxisKeyDelegateBindings;                             // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputAxisKeyDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputComponent
// 0x0088 (0x0138 - 0x00B0)
class UEngine_InputComponent : public UEngine_ActorComponent
{
public:
	unsigned char                                      UnknownData00[0x70];                                      // 0x00B0(0x0070) MISSED OFFSET
	TArray<struct FEngine_CachedKeyToActionInfo>       CachedKeyToActionInfo;                                    // 0x0120(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0130(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputComponent");
		return ptr;
	}


	bool WasControllerKeyJustReleased(const struct FInputCore_Key& Key);
	bool WasControllerKeyJustPressed(const struct FInputCore_Key& Key);
	bool IsControllerKeyDown(const struct FInputCore_Key& Key);
	void GetTouchState(int FingerIndex, float* LocationX, float* LocationY, bool* bIsCurrentlyPressed);
	struct FVector GetControllerVectorKeyState(const struct FInputCore_Key& Key);
	void GetControllerMouseDelta(float* DeltaX, float* DeltaY);
	float GetControllerKeyTimeDown(const struct FInputCore_Key& Key);
	void GetControllerAnalogStickState(TEnumAsByte<FEngine_Engine_EControllerAnalogStick> WhichStick, float* StickX, float* StickY);
	float GetControllerAnalogKeyState(const struct FInputCore_Key& Key);
};


// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_InputKeyDelegateBinding : public UEngine_InputDelegateBinding
{
public:
	TArray<struct FEngine_BlueprintInputKeyDelegateBinding> InputKeyDelegateBindings;                                 // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputKeyDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputSettings
// 0x00C8 (0x00F0 - 0x0028)
class UEngine_InputSettings : public UObject
{
public:
	TArray<struct FEngine_InputAxisConfigEntry>        AxisConfig;                                               // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config)
	unsigned char                                      bAltEnterTogglesFullscreen : 1;                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bF11TogglesFullscreen : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bUseMouseForTouch : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMouseSmoothing : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableFOVScaling : 1;                                    // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bCaptureMouseOnLaunch : 1;                                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bDefaultViewportMouseLock : 1;                            // 0x0038(0x0001) (Config, Deprecated)
	unsigned char                                      bAlwaysShowTouchInterface : 1;                            // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bShowConsoleOnFourFingerTap : 1;                          // 0x0039(0x0001) (Edit, Config)
	unsigned char                                      bEnableGestureRecognizer : 1;                             // 0x0039(0x0001) (Edit, Config)
	bool                                               bUseAutocorrect;                                          // 0x003A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x003B(0x0005) MISSED OFFSET
	TArray<struct FString>                             ExcludedAutocorrectOS;                                    // 0x0040(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ExcludedAutocorrectCultures;                              // 0x0050(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FString>                             ExcludedAutocorrectDeviceModels;                          // 0x0060(0x0010) (Edit, ZeroConstructor, Config)
	FEngine_Engine_EMouseCaptureMode                   DefaultViewportMouseCaptureMode;                          // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FEngine_Engine_EMouseLockMode                      DefaultViewportMouseLockMode;                             // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0072(0x0002) MISSED OFFSET
	float                                              FOVScale;                                                 // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DoubleClickTime;                                          // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FEngine_InputActionKeyMapping>       ActionMappings;                                           // 0x0080(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_InputAxisKeyMapping>         AxisMappings;                                             // 0x0090(0x0010) (Edit, ZeroConstructor, Config)
	TArray<struct FEngine_InputActionSpeechMapping>    SpeechMappings;                                           // 0x00A0(0x0010) (Edit, ZeroConstructor, Config)
	struct FSoftObjectPath                             DefaultTouchInterface;                                    // 0x00B0(0x0018) (Edit, ZeroConstructor, Config)
	struct FInputCore_Key                              ConsoleKey;                                               // 0x00C8(0x0018) (Config, Deprecated)
	TArray<struct FInputCore_Key>                      ConsoleKeys;                                              // 0x00E0(0x0010) (Edit, ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputSettings");
		return ptr;
	}


	void SaveKeyMappings();
	void RemoveAxisMapping(const struct FEngine_InputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void RemoveActionMapping(const struct FEngine_InputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	class UEngine_InputSettings* STATIC_GetInputSettings();
	void GetAxisNames(TArray<struct FName>* AxisNames);
	void GetAxisMappingByName(const struct FName& InAxisName, TArray<struct FEngine_InputAxisKeyMapping>* OutMappings);
	void GetActionNames(TArray<struct FName>* ActionNames);
	void GetActionMappingByName(const struct FName& InActionName, TArray<struct FEngine_InputActionKeyMapping>* OutMappings);
	void ForceRebuildKeymaps();
	void AddAxisMapping(const struct FEngine_InputAxisKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
	void AddActionMapping(const struct FEngine_InputActionKeyMapping& KeyMapping, bool bForceRebuildKeymaps);
};


// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
class UEngine_InputTouchDelegateBinding : public UEngine_InputDelegateBinding
{
public:
	TArray<struct FEngine_BlueprintInputTouchDelegateBinding> InputTouchDelegateBindings;                               // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputTouchDelegateBinding");
		return ptr;
	}

};


// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
class UEngine_InputVectorAxisDelegateBinding : public UEngine_InputAxisKeyDelegateBinding
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InputVectorAxisDelegateBinding");
		return ptr;
	}

};


// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
class UEngine_Interface_AssetUserData : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_AssetUserData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Interface_AssetUserData");
		return ptr;
	}

};


// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
class UEngine_Interface_CollisionDataProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Interface_CollisionDataProvider");
		return ptr;
	}

};


// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
class UEngine_Interface_PostProcessVolume : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Interface_PostProcessVolume");
		return ptr;
	}

};


// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (0x0028 - 0x0028)
class UEngine_Interface_PreviewMeshProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_PreviewMeshProvider");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Interface_PreviewMeshProvider");
		return ptr;
	}

};


// Class Engine.ReverbPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_ReverbPluginSourceSettingsBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbPluginSourceSettingsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReverbPluginSourceSettingsBase");
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
class UEngine_InterpData : public UObject
{
public:
	float                                              InterpLength;                                             // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              PathBuildTime;                                            // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_InterpGroup*>                 InterpGroups;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	class UEngine_InterpCurveEdSetup*                  CurveEdSetup;                                             // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              EdSectionStart;                                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              EdSectionEnd;                                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldBakeAndPrune : 1;                                  // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UEngine_InterpGroupDirector*                 CachedDirectorGroup;                                      // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<struct FName>                               AllEventNames;                                            // 0x0060(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpData");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}

};


// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_HealthSnapshotBlueprintLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HealthSnapshotBlueprintLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HealthSnapshotBlueprintLibrary");
		return ptr;
	}


	void STATIC_StopPerformanceSnapshots();
	void STATIC_StartPerformanceSnapshots();
	void STATIC_LogPerformanceSnapshot(const struct FString& SnapshotTitle, bool bResetStats);
};


// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
class UEngine_InterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x0028(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
class UEngine_InterpFilter_Classes : public UEngine_InterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
class UEngine_InterpFilter_Custom : public UEngine_InterpFilter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x0028 (0x0050 - 0x0028)
class UEngine_InterpGroup : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<class UEngine_InterpTrack*>                 InterpTracks;                                             // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	struct FName                                       GroupName;                                                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroupColor;                                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCollapsed : 1;                                           // 0x004C(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x004C(0x0001) (Transient)
	unsigned char                                      bIsFolder : 1;                                            // 0x004C(0x0001)
	unsigned char                                      bIsParented : 1;                                          // 0x004C(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x004C(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroup");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x0010 (0x0060 - 0x0050)
class UEngine_InterpGroupCamera : public UEngine_InterpGroup
{
public:
	class UEngine_CameraAnim*                          CameraAnimInst;                                           // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              CompressTolerance;                                        // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0050 - 0x0050)
class UEngine_InterpGroupDirector : public UEngine_InterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
class UEngine_InterpGroupInst : public UObject
{
public:
	class UEngine_InterpGroup*                         Group;                                                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_Actor*                               GroupActor;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_InterpTrackInst*>             TrackInst;                                                // 0x0038(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
class UEngine_InterpGroupInstCamera : public UEngine_InterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
class UEngine_InterpGroupInstDirector : public UEngine_InterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0048 (0x0070 - 0x0028)
class UEngine_InterpTrack : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET
	TArray<class UEngine_InterpTrack*>                 SubTracks;                                                // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UClass*                                      TrackInstClass;                                           // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETrackActiveCondition>  ActiveCondition;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      bOnePerGroup : 1;                                         // 0x0068(0x0001)
	unsigned char                                      bDirGroupOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bDisableTrack : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bIsSelected : 1;                                          // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsAnimControlTrack : 1;                                  // 0x0068(0x0001)
	unsigned char                                      bSubTrackOnly : 1;                                        // 0x0068(0x0001)
	unsigned char                                      bVisible : 1;                                             // 0x0068(0x0001) (Transient)
	unsigned char                                      bIsRecording : 1;                                         // 0x0068(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrack");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0020 (0x0090 - 0x0070)
class UEngine_InterpTrackFloatBase : public UEngine_InterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0020 (0x00B0 - 0x0090)
class UEngine_InterpTrackAnimControl : public UEngine_InterpTrackFloatBase
{
public:
	struct FName                                       SlotName;                                                 // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_AnimControlTrackKey>         AnimSeqs;                                                 // 0x0098(0x0010) (ZeroConstructor)
	unsigned char                                      bSkipAnimNotifiers : 1;                                   // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0020 (0x0090 - 0x0070)
class UEngine_InterpTrackVectorBase : public UEngine_InterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0090 - 0x0090)
class UEngine_InterpTrackAudioMaster : public UEngine_InterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0018 (0x0088 - 0x0070)
class UEngine_InterpTrackBoolProp : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_BoolTrackKey>                BoolTrack;                                                // 0x0070(0x0010) (ZeroConstructor)
	struct FName                                       PropertyName;                                             // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}

};


// Class Engine.InterpToMovementComponent
// 0x00A0 (0x0190 - 0x00F0)
class UEngine_InterpToMovementComponent : public UEngine_MovementComponent
{
public:
	float                                              Duration;                                                 // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPauseOnImpact : 1;                                       // 0x00F4(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET
	bool                                               bSweep;                                                   // 0x00F8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ETeleportType                       TeleportType;                                             // 0x00F9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EInterpToBehaviourType              BehaviourType;                                            // 0x00FA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCheckIfStillInWorld;                                     // 0x00FB(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x00FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnInterpToReverse;                                        // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnInterpToStop;                                           // 0x0110(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitBeginDelegate;                                      // 0x0120(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnWaitEndDelegate;                                        // 0x0130(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnResetDelegate;                                          // 0x0140(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              MaxSimulationTimeStep;                                    // 0x0150(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_InterpControlPoint>          ControlPoints;                                            // 0x0158(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0168(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpToMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpToMovementComponent");
		return ptr;
	}


	void StopSimulating(const struct FEngine_HitResult& HitResult);
	void RestartMovement(float InitialDirection);
	void OnInterpToWaitEndDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, float Time);
	void OnInterpToWaitBeginDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, float Time);
	void OnInterpToStopDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, float Time);
	void OnInterpToReverseDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, float Time);
	void OnInterpToResetDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, float Time);
	void FinaliseControlPoints();
};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x0098 - 0x0090)
class UEngine_InterpTrackColorProp : public UEngine_InterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0090 - 0x0090)
class UEngine_InterpTrackColorScale : public UEngine_InterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0018 (0x0088 - 0x0070)
class UEngine_InterpTrackDirector : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_DirectorTrackCut>            CutTrack;                                                 // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bSimulateCameraCutsOnClients : 1;                         // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0018 (0x0088 - 0x0070)
class UEngine_InterpTrackEvent : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_EventTrackKey>               EventTrack;                                               // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      bUseCustomEventName : 1;                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0018 (0x00A8 - 0x0090)
class UEngine_InterpTrackFade : public UEngine_InterpTrackFloatBase
{
public:
	unsigned char                                      bPersistFade : 1;                                         // 0x0090(0x0001) (Edit)
	unsigned char                                      bFadeAudio : 1;                                           // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	struct FLinearColor                                FadeColor;                                                // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UEngine_InterpTrackFloatMaterialParam : public UEngine_InterpTrackFloatBase
{
public:
	TArray<class UEngine_MaterialInterface*>           TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x0098 - 0x0090)
class UEngine_InterpTrackFloatParticleParam : public UEngine_InterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x0098 - 0x0090)
class UEngine_InterpTrackFloatProp : public UEngine_InterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
class UEngine_InterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstAnimControl : public UEngine_InterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
class UEngine_InterpTrackInstAudioMaster : public UEngine_InterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0038 - 0x0028)
class UEngine_InterpTrackInstProperty : public UEngine_InterpTrackInst
{
public:
	class UProperty*                                   InterpProperty;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x0018 (0x0050 - 0x0038)
class UEngine_InterpTrackInstBoolProp : public UEngine_InterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	class UBoolProperty*                               BoolProperty;                                             // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               ResetBool;                                                // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0049(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0010 (0x0048 - 0x0038)
class UEngine_InterpTrackInstColorProp : public UEngine_InterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FColor                                      ResetColor;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
class UEngine_InterpTrackInstColorScale : public UEngine_InterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstDirector : public UEngine_InterpTrackInst
{
public:
	class AEngine_Actor*                               OldViewTarget;                                            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstEvent : public UEngine_InterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatAnimBPParam
// 0x0020 (0x00B0 - 0x0090)
class UEngine_InterpTrackFloatAnimBPParam : public UEngine_InterpTrackFloatBase
{
public:
	class UEngine_AnimBlueprintGeneratedClass*         AnimBlueprintClass;                                       // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UClass*                                      AnimClass;                                                // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatAnimBPParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackFloatAnimBPParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x0018 (0x0040 - 0x0028)
class UEngine_InterpTrackInstFloatAnimBPParam : public UEngine_InterpTrackInst
{
public:
	class UEngine_AnimInstance*                        AnimScriptInstance;                                       // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	float                                              ResetFloat;                                               // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0034(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatAnimBPParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatAnimBPParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UEngine_InterpTrackInstFloatMaterialParam : public UEngine_InterpTrackInst
{
public:
	TArray<class UEngine_MaterialInstanceDynamic*>     MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<float>                                      ResetFloats;                                              // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FEngine_PrimitiveMaterialRef>        PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UEngine_InterpTrackFloatMaterialParam*       InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstFloatParticleParam : public UEngine_InterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x0010 (0x0048 - 0x0038)
class UEngine_InterpTrackInstFloatProp : public UEngine_InterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              ResetFloat;                                               // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0050 - 0x0038)
class UEngine_InterpTrackInstLinearColorProp : public UEngine_InterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FLinearColor                                ResetColor;                                               // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0018 (0x0040 - 0x0028)
class UEngine_InterpTrackInstMove : public UEngine_InterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData)
	struct FRotator                                    ResetRotation;                                            // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
class UEngine_InterpTrackInstFade : public UEngine_InterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstSlomo : public UEngine_InterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstParticleReplay : public UEngine_InterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
class UEngine_InterpTrackInstSound : public UEngine_InterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	class UEngine_AudioComponent*                      PlayAudioComp;                                            // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x0010 (0x0038 - 0x0028)
class UEngine_InterpTrackInstToggle : public UEngine_InterpTrackInst
{
public:
	TEnumAsByte<FEngine_Engine_ETrackToggleAction>     Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSavedActiveState : 1;                                    // 0x0030(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0018 (0x0050 - 0x0038)
class UEngine_InterpTrackInstVectorProp : public UEngine_InterpTrackInstProperty
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	struct FVector                                     ResetVector;                                              // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
class UEngine_InterpTrackInstVisibility : public UEngine_InterpTrackInst
{
public:
	TEnumAsByte<FEngine_Engine_EVisibilityTrackAction> Action;                                                   // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0020 (0x0090 - 0x0070)
class UEngine_InterpTrackLinearColorBase : public UEngine_InterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0070(0x0018) (ZeroConstructor)
	float                                              CurveTension;                                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x0098 - 0x0090)
class UEngine_InterpTrackLinearColorProp : public UEngine_InterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0058 (0x00C8 - 0x0070)
class UEngine_InterpTrackMove : public UEngine_InterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0070(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0088(0x0018) (ZeroConstructor)
	struct FEngine_InterpLookupTrack                   LookupTrack;                                              // 0x00A0(0x0010)
	struct FName                                       LookAtGroupName;                                          // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LinCurveTension;                                          // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngCurveTension;                                          // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseQuatInterpolation : 1;                                // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowArrowAtKeys : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bDisableMovement : 1;                                     // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowTranslationOnCurveEd : 1;                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      bShowRotationOnCurveEd : 1;                               // 0x00C0(0x0001) (Edit)
	unsigned char                                      bHide3DTrack : 1;                                         // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EInterpTrackMoveRotMode> RotMode;                                                  // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0018 (0x00A8 - 0x0090)
class UEngine_InterpTrackMoveAxis : public UEngine_InterpTrackFloatBase
{
public:
	TEnumAsByte<FEngine_Engine_EInterpMoveAxis>        MoveAxis;                                                 // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FEngine_InterpLookupTrack                   LookupTrack;                                              // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x0080 - 0x0070)
class UEngine_InterpTrackParticleReplay : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_ParticleReplayTrackKey>      TrackKeys;                                                // 0x0070(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0090 - 0x0090)
class UEngine_InterpTrackSlomo : public UEngine_InterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
class UEngine_InterpTrackInstVectorMaterialParam : public UEngine_InterpTrackInst
{
public:
	TArray<class UEngine_MaterialInstanceDynamic*>     MaterialInstances;                                        // 0x0028(0x0010) (ZeroConstructor)
	TArray<struct FVector>                             ResetVectors;                                             // 0x0038(0x0010) (ZeroConstructor)
	TArray<struct FEngine_PrimitiveMaterialRef>        PrimitiveMaterialRefs;                                    // 0x0048(0x0010) (ZeroConstructor)
	class UEngine_InterpTrackVectorMaterialParam*      InstancedTrack;                                           // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0018 (0x0088 - 0x0070)
class UEngine_InterpTrackToggle : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_ToggleTrackKey>              ToggleTrack;                                              // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bActivateSystemEachUpdate : 1;                            // 0x0080(0x0001) (Edit)
	unsigned char                                      bActivateWithJustAttachedFlag : 1;                        // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00A8 - 0x0090)
class UEngine_InterpTrackVectorMaterialParam : public UEngine_InterpTrackVectorBase
{
public:
	TArray<class UEngine_MaterialInterface*>           TargetMaterials;                                          // 0x0090(0x0010) (Edit, ZeroConstructor)
	struct FName                                       ParamName;                                                // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x0098 - 0x0090)
class UEngine_InterpTrackVectorProp : public UEngine_InterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0018 (0x0088 - 0x0070)
class UEngine_InterpTrackVisibility : public UEngine_InterpTrack
{
public:
	TArray<struct FEngine_VisibilityTrackKey>          VisibilityTrack;                                          // 0x0070(0x0010) (ZeroConstructor)
	unsigned char                                      bFireEventsWhenForwards : 1;                              // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenBackwards : 1;                             // 0x0080(0x0001) (Edit)
	unsigned char                                      bFireEventsWhenJumpingForwards : 1;                       // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}

};


// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
class UEngine_IntSerialization : public UObject
{
public:
	uint16_t                                           UnsignedInt16Variable;                                    // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002A(0x0002) MISSED OFFSET
	uint32_t                                           UnsignedInt32Variable;                                    // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData)
	uint64_t                                           UnsignedInt64Variable;                                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	int8_t                                             SignedInt8Variable;                                       // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0039(0x0001) MISSED OFFSET
	int16_t                                            SignedInt16Variable;                                      // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	int64_t                                            SignedInt64Variable;                                      // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnsignedInt8Variable;                                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	int                                                SignedInt32Variable;                                      // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IntSerialization");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.IntSerialization");
		return ptr;
	}

};


// Class Engine.KillZVolume
// 0x0000 (0x0260 - 0x0260)
class AEngine_KillZVolume : public AEngine_PhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KillZVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KillZVolume");
		return ptr;
	}

};


// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetArrayLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetArrayLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetArrayLibrary");
		return ptr;
	}


	void STATIC_SetArrayPropertyByName(class UObject* Object, const struct FName& PropertyName, TArray<int> Value);
	void STATIC_FilterArray(TArray<class AEngine_Actor*> TargetArray, class UClass* FilterClass, TArray<class AEngine_Actor*>* FilteredArray);
	void STATIC_Array_Swap(TArray<int> TargetArray, int FirstIndex, int SecondIndex);
	void STATIC_Array_Shuffle(TArray<int> TargetArray);
	void STATIC_Array_Set(TArray<int> TargetArray, int Index, int Item, bool bSizeToFit);
	void STATIC_Array_Resize(TArray<int> TargetArray, int Size);
	bool STATIC_Array_RemoveItem(TArray<int> TargetArray, int Item);
	void STATIC_Array_Remove(TArray<int> TargetArray, int IndexToRemove);
	int STATIC_Array_Length(TArray<int> TargetArray);
	int STATIC_Array_LastIndex(TArray<int> TargetArray);
	bool STATIC_Array_IsValidIndex(TArray<int> TargetArray, int IndexToTest);
	void STATIC_Array_Insert(TArray<int> TargetArray, int NewItem, int Index);
	bool STATIC_Array_Identical(TArray<int> ArrayA, TArray<int> ArrayB);
	void STATIC_Array_Get(TArray<int> TargetArray, int Index, int* Item);
	int STATIC_Array_Find(TArray<int> TargetArray, int ItemToFind);
	bool STATIC_Array_Contains(TArray<int> TargetArray, int ItemToFind);
	void STATIC_Array_Clear(TArray<int> TargetArray);
	void STATIC_Array_Append(TArray<int> TargetArray, TArray<int> SourceArray);
	int STATIC_Array_AddUnique(TArray<int> TargetArray, int NewItem);
	int STATIC_Array_Add(TArray<int> TargetArray, int NewItem);
};


// Class Engine.InterpTrackSound
// 0x0018 (0x00A8 - 0x0090)
class UEngine_InterpTrackSound : public UEngine_InterpTrackVectorBase
{
public:
	TArray<struct FEngine_SoundTrackKey>               Sounds;                                                   // 0x0090(0x0010) (ZeroConstructor)
	unsigned char                                      bPlayOnReverse : 1;                                       // 0x00A0(0x0001) (Edit)
	unsigned char                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A0(0x0001) (Edit)
	unsigned char                                      bSuppressSubtitles : 1;                                   // 0x00A0(0x0001) (Edit)
	unsigned char                                      bTreatAsDialogue : 1;                                     // 0x00A0(0x0001) (Edit)
	unsigned char                                      bAttach : 1;                                              // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}

};


// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetInputLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetInputLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetInputLibrary");
		return ptr;
	}


	bool STATIC_PointerEvent_IsTouchEvent(const struct FSlateCore_PointerEvent& Input);
	bool STATIC_PointerEvent_IsMouseButtonDown(const struct FSlateCore_PointerEvent& Input, const struct FInputCore_Key& MouseButton);
	float STATIC_PointerEvent_GetWheelDelta(const struct FSlateCore_PointerEvent& Input);
	int STATIC_PointerEvent_GetUserIndex(const struct FSlateCore_PointerEvent& Input);
	int STATIC_PointerEvent_GetTouchpadIndex(const struct FSlateCore_PointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetScreenSpacePosition(const struct FSlateCore_PointerEvent& Input);
	int STATIC_PointerEvent_GetPointerIndex(const struct FSlateCore_PointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetLastScreenSpacePosition(const struct FSlateCore_PointerEvent& Input);
	FEngine_Engine_ESlateGesture STATIC_PointerEvent_GetGestureType(const struct FSlateCore_PointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetGestureDelta(const struct FSlateCore_PointerEvent& Input);
	struct FInputCore_Key STATIC_PointerEvent_GetEffectingButton(const struct FSlateCore_PointerEvent& Input);
	struct FVector2D STATIC_PointerEvent_GetCursorDelta(const struct FSlateCore_PointerEvent& Input);
	bool STATIC_Key_IsVectorAxis(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsValid(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsMouseButton(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsModifierKey(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsKeyboardKey(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsGamepadKey(const struct FInputCore_Key& Key);
	bool STATIC_Key_IsFloatAxis(const struct FInputCore_Key& Key);
	FSlateCore_SlateCore_EUINavigation STATIC_Key_GetNavigationDirectionFromKey(const struct FSlateCore_KeyEvent& InKeyEvent);
	FSlateCore_SlateCore_EUINavigation STATIC_Key_GetNavigationDirectionFromAnalog(const struct FSlateCore_AnalogInputEvent& InAnalogEvent);
	FSlateCore_SlateCore_EUINavigationAction STATIC_Key_GetNavigationActionFromKey(const struct FSlateCore_KeyEvent& InKeyEvent);
	FSlateCore_SlateCore_EUINavigationAction STATIC_Key_GetNavigationAction(const struct FInputCore_Key& InKey);
	struct FText STATIC_Key_GetDisplayName(const struct FInputCore_Key& Key);
	bool STATIC_InputEvent_IsShiftDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsRightShiftDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsRightControlDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsRightCommandDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsRightAltDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsRepeat(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsLeftShiftDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsLeftControlDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsLeftCommandDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsLeftAltDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsControlDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsCommandDown(const struct FSlateCore_InputEvent& Input);
	bool STATIC_InputEvent_IsAltDown(const struct FSlateCore_InputEvent& Input);
	struct FText STATIC_InputChord_GetDisplayName(const struct FSlate_InputChord& Key);
	int STATIC_GetUserIndex(const struct FSlateCore_KeyEvent& Input);
	struct FInputCore_Key STATIC_GetKey(const struct FSlateCore_KeyEvent& Input);
	float STATIC_GetAnalogValue(const struct FSlateCore_AnalogInputEvent& Input);
	bool STATIC_EqualEqual_KeyKey(const struct FInputCore_Key& A, const struct FInputCore_Key& B);
	bool STATIC_EqualEqual_InputChordInputChord(const struct FSlate_InputChord& A, const struct FSlate_InputChord& B);
	void STATIC_CalibrateTilt();
};


// Class Engine.KismetInternationalizationLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetInternationalizationLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetInternationalizationLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetInternationalizationLibrary");
		return ptr;
	}


	bool STATIC_SetCurrentLocale(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentLanguageAndLocale(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentLanguage(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentCulture(const struct FString& Culture, bool SaveToConfig);
	bool STATIC_SetCurrentAssetGroupCulture(const struct FName& AssetGroup, const struct FString& Culture, bool SaveToConfig);
	struct FString STATIC_GetSuitableCulture(TArray<struct FString> AvailableCultures, const struct FString& CultureToMatch, const struct FString& FallbackCulture);
	struct FString STATIC_GetNativeCulture(FCoreUObject_ELocalizedTextSourceCategory TextCategory);
	TArray<struct FString> STATIC_GetLocalizedCultures(bool IncludeGame, bool IncludeEngine, bool IncludeEditor, bool IncludeAdditional);
	struct FString STATIC_GetCurrentLocale();
	struct FString STATIC_GetCurrentLanguage();
	struct FString STATIC_GetCurrentCulture();
	struct FString STATIC_GetCurrentAssetGroupCulture(const struct FName& AssetGroup);
	struct FString STATIC_GetCultureDisplayName(const struct FString& Culture, bool Localized);
	void STATIC_ClearCurrentAssetGroupCulture(const struct FName& AssetGroup, bool SaveToConfig);
};


// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetMaterialLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetMaterialLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetMaterialLibrary");
		return ptr;
	}


	void STATIC_SetVectorParameterValue(class UObject* WorldContextObject, class UEngine_MaterialParameterCollection* Collection, const struct FName& ParameterName, const struct FLinearColor& ParameterValue);
	void STATIC_SetScalarParameterValue(class UObject* WorldContextObject, class UEngine_MaterialParameterCollection* Collection, const struct FName& ParameterName, float ParameterValue);
	struct FLinearColor STATIC_GetVectorParameterValue(class UObject* WorldContextObject, class UEngine_MaterialParameterCollection* Collection, const struct FName& ParameterName);
	float STATIC_GetScalarParameterValue(class UObject* WorldContextObject, class UEngine_MaterialParameterCollection* Collection, const struct FName& ParameterName);
	class UEngine_MaterialInstanceDynamic* STATIC_CreateDynamicMaterialInstance(class UObject* WorldContextObject, class UEngine_MaterialInterface* Parent, const struct FName& OptionalName);
};


// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetMathLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetMathLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetMathLibrary");
		return ptr;
	}


	int STATIC_Xor_IntInt(int A, int B);
	int64_t STATIC_Xor_Int64Int64(int64_t A, int64_t B);
	struct FVector STATIC_WeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float Weight);
	struct FRotator STATIC_WeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float Weight);
	float STATIC_WeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float Weight);
	float STATIC_VSizeXYSquared(const struct FVector& A);
	float STATIC_VSizeXY(const struct FVector& A);
	float STATIC_VSizeSquared(const struct FVector& A);
	float STATIC_VSize2DSquared(const struct FVector2D& A);
	float STATIC_VSize2D(const struct FVector2D& A);
	float STATIC_VSize(const struct FVector& A);
	struct FVector STATIC_VLerp(const struct FVector& A, const struct FVector& B, float ALPHA);
	struct FVector STATIC_VInterpTo_Constant(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VInterpTo(const struct FVector& Current, const struct FVector& Target, float DeltaTime, float InterpSpeed);
	struct FVector STATIC_VectorSpringInterp(const struct FVector& Current, const struct FVector& Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FEngine_VectorSpringState* SpringState);
	struct FVector STATIC_Vector_Zero();
	struct FVector STATIC_Vector_Up();
	void STATIC_Vector_UnwindEuler(struct FVector* A);
	struct FVector2D STATIC_Vector_UnitCartesianToSpherical(const struct FVector& A);
	struct FVector STATIC_Vector_ToRadians(const struct FVector& A);
	struct FVector STATIC_Vector_ToDegrees(const struct FVector& A);
	struct FVector STATIC_Vector_SnappedToGrid(const struct FVector& InVect, float InGridSize);
	void STATIC_Vector_Set(float X, float Y, float Z, struct FVector* A);
	struct FVector STATIC_Vector_Right();
	struct FVector STATIC_Vector_Reciprocal(const struct FVector& A);
	struct FVector STATIC_Vector_ProjectOnToNormal(const struct FVector& V, const struct FVector& InNormal);
	struct FVector STATIC_Vector_One();
	struct FVector STATIC_Vector_NormalUnsafe(const struct FVector& A);
	void STATIC_Vector_Normalize(float Tolerance, struct FVector* A);
	struct FVector STATIC_Vector_Normal2D(const struct FVector& A, float Tolerance);
	struct FVector STATIC_Vector_MirrorByPlane(const struct FVector& A, const struct FPlane& InPlane);
	struct FVector STATIC_Vector_Left();
	bool STATIC_Vector_IsZero(const struct FVector& A);
	bool STATIC_Vector_IsUnit(const struct FVector& A, float SquaredLenthTolerance);
	bool STATIC_Vector_IsUniform(const struct FVector& A, float Tolerance);
	bool STATIC_Vector_IsNormal(const struct FVector& A);
	bool STATIC_Vector_IsNearlyZero(const struct FVector& A, float Tolerance);
	bool STATIC_Vector_IsNAN(const struct FVector& A);
	float STATIC_Vector_HeadingAngle(const struct FVector& A);
	struct FVector STATIC_Vector_GetSignVector(const struct FVector& A);
	struct FVector STATIC_Vector_GetProjection(const struct FVector& A);
	float STATIC_Vector_GetAbsMin(const struct FVector& A);
	float STATIC_Vector_GetAbsMax(const struct FVector& A);
	struct FVector STATIC_Vector_GetAbs(const struct FVector& A);
	struct FVector STATIC_Vector_Forward();
	struct FVector STATIC_Vector_Down();
	float STATIC_Vector_DistanceSquared(const struct FVector& v1, const struct FVector& v2);
	float STATIC_Vector_Distance2DSquared(const struct FVector& v1, const struct FVector& v2);
	float STATIC_Vector_Distance2D(const struct FVector& v1, const struct FVector& v2);
	float STATIC_Vector_Distance(const struct FVector& v1, const struct FVector& v2);
	float STATIC_Vector_CosineAngle2D(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Vector_ComponentMin(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Vector_ComponentMax(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Vector_ClampSizeMax2D(const struct FVector& A, float Max);
	struct FVector STATIC_Vector_ClampSizeMax(const struct FVector& A, float Max);
	struct FVector STATIC_Vector_ClampSize2D(const struct FVector& A, float Min, float Max);
	struct FVector STATIC_Vector_BoundedToCube(const struct FVector& InVect, float InRadius);
	struct FVector STATIC_Vector_BoundedToBox(const struct FVector& InVect, const struct FVector& InBoxMin, const struct FVector& InBoxMax);
	struct FVector STATIC_Vector_Backward();
	void STATIC_Vector_Assign(const struct FVector& InVector, struct FVector* A);
	void STATIC_Vector_AddBounded(const struct FVector& InAddVect, float InRadius, struct FVector* A);
	struct FVector4 STATIC_Vector4_Zero();
	float STATIC_Vector4_SizeSquared3(const struct FVector4& A);
	float STATIC_Vector4_SizeSquared(const struct FVector4& A);
	float STATIC_Vector4_Size3(const struct FVector4& A);
	float STATIC_Vector4_Size(const struct FVector4& A);
	void STATIC_Vector4_Set(float X, float Y, float Z, float W, struct FVector4* A);
	struct FVector4 STATIC_Vector4_NormalUnsafe3(const struct FVector4& A);
	void STATIC_Vector4_Normalize3(float Tolerance, struct FVector4* A);
	struct FVector4 STATIC_Vector4_Normal3(const struct FVector4& A, float Tolerance);
	struct FVector4 STATIC_Vector4_Negated(const struct FVector4& A);
	struct FVector4 STATIC_Vector4_MirrorByVector3(const struct FVector4& Direction, const struct FVector4& SurfaceNormal);
	bool STATIC_Vector4_IsZero(const struct FVector4& A);
	bool STATIC_Vector4_IsUnit3(const struct FVector4& A, float SquaredLenthTolerance);
	bool STATIC_Vector4_IsNormal3(const struct FVector4& A);
	bool STATIC_Vector4_IsNearlyZero3(const struct FVector4& A, float Tolerance);
	bool STATIC_Vector4_IsNAN(const struct FVector4& A);
	float STATIC_Vector4_DotProduct3(const struct FVector4& A, const struct FVector4& B);
	float STATIC_Vector4_DotProduct(const struct FVector4& A, const struct FVector4& B);
	struct FVector4 STATIC_Vector4_CrossProduct3(const struct FVector4& A, const struct FVector4& B);
	void STATIC_Vector4_Assign(const struct FVector4& InVector, struct FVector4* A);
	struct FVector2D STATIC_Vector2DInterpTo_Constant(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2DInterpTo(const struct FVector2D& Current, const struct FVector2D& Target, float DeltaTime, float InterpSpeed);
	struct FVector2D STATIC_Vector2D_Zero();
	struct FVector2D STATIC_Vector2D_Unit45Deg();
	struct FVector2D STATIC_Vector2D_One();
	struct FVector STATIC_VEase(const struct FVector& A, const struct FVector& B, float ALPHA, TEnumAsByte<FEngine_Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FDateTime STATIC_UtcNow();
	struct FRotator STATIC_TransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	struct FVector STATIC_TransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_TransformDirection(const struct FTransform& T, const struct FVector& Direction);
	float STATIC_Transform_Determinant(const struct FTransform& Transform);
	struct FVector2D STATIC_ToSign2D(const struct FVector2D& A);
	struct FVector2D STATIC_ToRounded2D(const struct FVector2D& A);
	void STATIC_ToDirectionAndLength2D(const struct FVector2D& A, struct FVector2D* OutDir, float* OutLength);
	struct FDateTime STATIC_Today();
	struct FTransform STATIC_TLerp(const struct FTransform& A, const struct FTransform& B, float ALPHA, TEnumAsByte<FEngine_Engine_ELerpInterpolationMode> InterpMode);
	struct FTransform STATIC_TInterpTo(const struct FTransform& Current, const struct FTransform& Target, float DeltaTime, float InterpSpeed);
	struct FTimespan STATIC_TimespanZeroValue();
	float STATIC_TimespanRatio(const struct FTimespan& A, const struct FTimespan& B);
	struct FTimespan STATIC_TimespanMinValue();
	struct FTimespan STATIC_TimespanMaxValue();
	bool STATIC_TimespanFromString(const struct FString& TimespanString, struct FTimespan* Result);
	struct FTransform STATIC_TEase(const struct FTransform& A, const struct FTransform& B, float ALPHA, TEnumAsByte<FEngine_Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	float STATIC_Tan(float A);
	struct FVector STATIC_Subtract_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Subtract_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Subtract_VectorFloat(const struct FVector& A, float B);
	struct FVector4 STATIC_Subtract_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Subtract_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Subtract_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Subtract_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat STATIC_Subtract_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FLinearColor STATIC_Subtract_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	int STATIC_Subtract_IntInt(int A, int B);
	int64_t STATIC_Subtract_Int64Int64(int64_t A, int64_t B);
	float STATIC_Subtract_FloatFloat(float A, float B);
	struct FDateTime STATIC_Subtract_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FTimespan STATIC_Subtract_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Subtract_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Square(float A);
	float STATIC_Sqrt(float A);
	struct FVector STATIC_Spherical2DToUnitCartesian(const struct FVector2D& A);
	float STATIC_Sin(float A);
	int64_t STATIC_SignOfInteger64(int64_t A);
	int STATIC_SignOfInteger(int A);
	float STATIC_SignOfFloat(float A);
	void STATIC_SetRandomStreamSeed(int NewSeed, struct FRandomStream* Stream);
	void STATIC_Set2D(float X, float Y, struct FVector2D* A);
	struct FVector STATIC_SelectVector(const struct FVector& A, const struct FVector& B, bool bPickA);
	struct FTransform STATIC_SelectTransform(const struct FTransform& A, const struct FTransform& B, bool bPickA);
	struct FString STATIC_SelectString(const struct FString& A, const struct FString& B, bool bPickA);
	struct FRotator STATIC_SelectRotator(const struct FRotator& A, const struct FRotator& B, bool bPickA);
	class UObject* STATIC_SelectObject(class UObject* A, class UObject* B, bool bSelectA);
	int STATIC_SelectInt(int A, int B, bool bPickA);
	float STATIC_SelectFloat(float A, float B, bool bPickA);
	struct FLinearColor STATIC_SelectColor(const struct FLinearColor& A, const struct FLinearColor& B, bool bPickA);
	class UClass* STATIC_SelectClass(class UClass* A, class UClass* B, bool bSelectA);
	void STATIC_SeedRandomStream(struct FRandomStream* Stream);
	float STATIC_SafeDivide(float A, float B);
	int64_t STATIC_Round64(float A);
	int STATIC_Round(float A);
	struct FRotator STATIC_RotatorFromAxisAndAngle(const struct FVector& Axis, float Angle);
	struct FVector STATIC_RotateAngleAxis(const struct FVector& InVect, float AngleDeg, const struct FVector& Axis);
	struct FRotator STATIC_RLerp(const struct FRotator& A, const struct FRotator& B, float ALPHA, bool bShortestPath);
	struct FRotator STATIC_RInterpTo_Constant(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	struct FRotator STATIC_RInterpTo(const struct FRotator& Current, const struct FRotator& Target, float DeltaTime, float InterpSpeed);
	void STATIC_RGBToHSV_Vector(const struct FLinearColor& RGB, struct FLinearColor* HSV);
	void STATIC_RGBToHSV(const struct FLinearColor& InColor, float* H, float* S, float* V, float* A);
	struct FLinearColor STATIC_RGBLinearToHSV(const struct FLinearColor& RGB);
	void STATIC_ResetVectorSpringState(struct FEngine_VectorSpringState* SpringState);
	void STATIC_ResetRandomStream(const struct FRandomStream& Stream);
	void STATIC_ResetFloatSpringState(struct FEngine_FloatSpringState* SpringState);
	struct FRotator STATIC_REase(const struct FRotator& A, const struct FRotator& B, float ALPHA, bool bShortestPath, TEnumAsByte<FEngine_Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadiansFromStream(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians, const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInRadians(const struct FVector& ConeDir, float MaxYawInRadians, float MaxPitchInRadians);
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegreesFromStream(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees, const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVectorInEllipticalConeInDegrees(const struct FVector& ConeDir, float MaxYawInDegrees, float MaxPitchInDegrees);
	struct FVector STATIC_RandomUnitVectorInConeInRadiansFromStream(const struct FVector& ConeDir, float ConeHalfAngleInRadians, const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVectorInConeInRadians(const struct FVector& ConeDir, float ConeHalfAngleInRadians);
	struct FVector STATIC_RandomUnitVectorInConeInDegreesFromStream(const struct FVector& ConeDir, float ConeHalfAngleInDegrees, const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVectorInConeInDegrees(const struct FVector& ConeDir, float ConeHalfAngleInDegrees);
	struct FVector STATIC_RandomUnitVectorFromStream(const struct FRandomStream& Stream);
	struct FVector STATIC_RandomUnitVector();
	struct FRotator STATIC_RandomRotatorFromStream(bool bRoll, const struct FRandomStream& Stream);
	struct FRotator STATIC_RandomRotator(bool bRoll);
	struct FVector STATIC_RandomPointInBoundingBox(const struct FVector& Origin, const struct FVector& BoxExtent);
	int STATIC_RandomIntegerInRangeFromStream(int Min, int Max, const struct FRandomStream& Stream);
	int STATIC_RandomIntegerInRange(int Min, int Max);
	int STATIC_RandomIntegerFromStream(int Max, const struct FRandomStream& Stream);
	int64_t STATIC_RandomInteger64InRange(int64_t Min, int64_t Max);
	int64_t STATIC_RandomInteger64(int64_t Max);
	int STATIC_RandomInteger(int Max);
	float STATIC_RandomFloatInRangeFromStream(float Min, float Max, const struct FRandomStream& Stream);
	float STATIC_RandomFloatInRange(float Min, float Max);
	float STATIC_RandomFloatFromStream(const struct FRandomStream& Stream);
	float STATIC_RandomFloat();
	bool STATIC_RandomBoolWithWeightFromStream(float Weight, const struct FRandomStream& RandomStream);
	bool STATIC_RandomBoolWithWeight(float Weight);
	bool STATIC_RandomBoolFromStream(const struct FRandomStream& Stream);
	bool STATIC_RandomBool();
	float STATIC_RadiansToDegrees(float A);
	struct FVector STATIC_Quat_VectorUp(const struct FQuat& Q);
	struct FVector STATIC_Quat_VectorRight(const struct FQuat& Q);
	struct FVector STATIC_Quat_VectorForward(const struct FQuat& Q);
	struct FVector STATIC_Quat_UnrotateVector(const struct FQuat& Q, const struct FVector& V);
	float STATIC_Quat_SizeSquared(const struct FQuat& Q);
	float STATIC_Quat_Size(const struct FQuat& Q);
	void STATIC_Quat_SetFromEuler(const struct FVector& Euler, struct FQuat* Q);
	void STATIC_Quat_SetComponents(float X, float Y, float Z, float W, struct FQuat* Q);
	struct FRotator STATIC_Quat_Rotator(const struct FQuat& Q);
	struct FVector STATIC_Quat_RotateVector(const struct FQuat& Q, const struct FVector& V);
	struct FQuat STATIC_Quat_Normalized(const struct FQuat& Q, float Tolerance);
	void STATIC_Quat_Normalize(float Tolerance, struct FQuat* Q);
	struct FQuat STATIC_Quat_MakeFromEuler(const struct FVector& Euler);
	struct FQuat STATIC_Quat_Log(const struct FQuat& Q);
	bool STATIC_Quat_IsNormalized(const struct FQuat& Q);
	bool STATIC_Quat_IsNonFinite(const struct FQuat& Q);
	bool STATIC_Quat_IsIdentity(const struct FQuat& Q, float Tolerance);
	bool STATIC_Quat_IsFinite(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Inversed(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Identity();
	struct FVector STATIC_Quat_GetRotationAxis(const struct FQuat& Q);
	struct FVector STATIC_Quat_GetAxisZ(const struct FQuat& Q);
	struct FVector STATIC_Quat_GetAxisY(const struct FQuat& Q);
	struct FVector STATIC_Quat_GetAxisX(const struct FQuat& Q);
	float STATIC_Quat_GetAngle(const struct FQuat& Q);
	struct FQuat STATIC_Quat_Exp(const struct FQuat& Q);
	struct FVector STATIC_Quat_Euler(const struct FQuat& Q);
	void STATIC_Quat_EnforceShortestArcWith(const struct FQuat& B, struct FQuat* A);
	float STATIC_Quat_AngularDistance(const struct FQuat& A, const struct FQuat& B);
	struct FVector STATIC_ProjectVectorOnToVector(const struct FVector& V, const struct FVector& Target);
	struct FVector STATIC_ProjectVectorOnToPlane(const struct FVector& V, const struct FVector& PlaneNormal);
	struct FVector STATIC_ProjectPointOnToPlane(const struct FVector& Point, const struct FVector& PlaneBase, const struct FVector& PlaneNormal);
	bool STATIC_PointsAreCoplanar(TArray<struct FVector> Points, float Tolerance);
	float STATIC_PerlinNoise1D(float Value);
	int STATIC_Percent_IntInt(int A, int B);
	float STATIC_Percent_FloatFloat(float A, float B);
	unsigned char STATIC_Percent_ByteByte(unsigned char A, unsigned char B);
	int STATIC_Or_IntInt(int A, int B);
	int64_t STATIC_Or_Int64Int64(int64_t A, int64_t B);
	struct FDateTime STATIC_Now();
	bool STATIC_NotEqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	bool STATIC_NotEqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool STATIC_NotEqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool STATIC_NotEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_NotEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool STATIC_NotEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_NotEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_NotEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_NotEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float ErrorTolerance);
	bool STATIC_NotEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_NotEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_NotEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	bool STATIC_NotEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool STATIC_NotEqual_IntInt(int A, int B);
	bool STATIC_NotEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_NotEqual_FloatFloat(float A, float B);
	bool STATIC_NotEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_NotEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_NotEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_NotEqual_BoolBool(bool A, bool B);
	bool STATIC_Not_PreBool(bool A);
	int64_t STATIC_Not_Int64(int64_t A);
	int STATIC_Not_Int(int A);
	struct FVector2D STATIC_NormalSafe2D(const struct FVector2D& A, float Tolerance);
	float STATIC_NormalizeToRange(float Value, float RangeMin, float RangeMax);
	struct FRotator STATIC_NormalizedDeltaRotator(const struct FRotator& A, const struct FRotator& B);
	float STATIC_NormalizeAxis(float Angle);
	void STATIC_Normalize2D(float Tolerance, struct FVector2D* A);
	struct FVector2D STATIC_Normal2D(const struct FVector2D& A);
	struct FVector STATIC_Normal(const struct FVector& A, float Tolerance);
	struct FVector STATIC_NegateVector(const struct FVector& A);
	struct FRotator STATIC_NegateRotator(const struct FRotator& A);
	struct FVector2D STATIC_Negated2D(const struct FVector2D& A);
	bool STATIC_NearlyEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B, float LocationTolerance, float RotationTolerance, float Scale3DTolerance);
	bool STATIC_NearlyEqual_FloatFloat(float A, float B, float ErrorTolerance);
	float STATIC_MultiplyMultiply_FloatFloat(float Base, float Exp);
	float STATIC_MultiplyByPi(float Value);
	struct FVector STATIC_Multiply_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Multiply_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Multiply_VectorFloat(const struct FVector& A, float B);
	struct FVector4 STATIC_Multiply_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Multiply_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Multiply_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Multiply_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FRotator STATIC_Multiply_RotatorInt(const struct FRotator& A, int B);
	struct FRotator STATIC_Multiply_RotatorFloat(const struct FRotator& A, float B);
	struct FQuat STATIC_Multiply_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix STATIC_Multiply_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FMatrix STATIC_Multiply_MatrixFloat(const struct FMatrix& A, float B);
	struct FLinearColor STATIC_Multiply_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	struct FLinearColor STATIC_Multiply_LinearColorFloat(const struct FLinearColor& A, float B);
	int STATIC_Multiply_IntInt(int A, int B);
	float STATIC_Multiply_IntFloat(int A, float B);
	int64_t STATIC_Multiply_Int64Int64(int64_t A, int64_t B);
	float STATIC_Multiply_FloatFloat(float A, float B);
	unsigned char STATIC_Multiply_ByteByte(unsigned char A, unsigned char B);
	struct FVector STATIC_MirrorVectorByNormal(const struct FVector& InVect, const struct FVector& InNormal);
	void STATIC_MinOfIntArray(TArray<int> IntArray, int* IndexOfMinValue, int* MinValue);
	void STATIC_MinOfFloatArray(TArray<float> FloatArray, int* IndexOfMinValue, float* MinValue);
	void STATIC_MinOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMinValue, unsigned char* MinValue);
	int64_t STATIC_MinInt64(int64_t A, int64_t B);
	void STATIC_MinimumAreaRectangle(class UObject* WorldContextObject, TArray<struct FVector> InVerts, const struct FVector& SampleSurfaceNormal, bool bDebugDraw, struct FVector* OutRectCenter, struct FRotator* OutRectRotation, float* OutSideLengthX, float* OutSideLengthY);
	int STATIC_Min(int A, int B);
	void STATIC_MaxOfIntArray(TArray<int> IntArray, int* IndexOfMaxValue, int* MaxValue);
	void STATIC_MaxOfFloatArray(TArray<float> FloatArray, int* IndexOfMaxValue, float* MaxValue);
	void STATIC_MaxOfByteArray(TArray<unsigned char> ByteArray, int* IndexOfMaxValue, unsigned char* MaxValue);
	int64_t STATIC_MaxInt64(int64_t A, int64_t B);
	int STATIC_Max(int A, int B);
	struct FVector4 STATIC_Matrix_TransformVector4(const struct FMatrix& M, const struct FVector4& V);
	struct FVector4 STATIC_Matrix_TransformVector(const struct FMatrix& M, const struct FVector& V);
	struct FVector4 STATIC_Matrix_TransformPosition(const struct FMatrix& M, const struct FVector& V);
	struct FQuat STATIC_Matrix_ToQuat(const struct FMatrix& M);
	void STATIC_Matrix_SetOrigin(const struct FVector& NewOrigin, struct FMatrix* M);
	void STATIC_Matrix_SetColumn(TEnumAsByte<FEngine_Engine_EMatrixColumns> Column, const struct FVector& Value, struct FMatrix* M);
	void STATIC_Matrix_SetAxis(TEnumAsByte<FCoreUObject_EAxis> Axis, const struct FVector& AxisVector, struct FMatrix* M);
	struct FMatrix STATIC_Matrix_ScaleTranslation(const struct FMatrix& M, const struct FVector& Scale3D);
	struct FMatrix STATIC_Matrix_RemoveTranslation(const struct FMatrix& M);
	void STATIC_Matrix_RemoveScaling(float Tolerance, struct FMatrix* M);
	struct FMatrix STATIC_Matrix_Mirror(const struct FMatrix& M, TEnumAsByte<FCoreUObject_EAxis> MirrorAxis, TEnumAsByte<FCoreUObject_EAxis> FlipAxis);
	struct FVector STATIC_Matrix_InverseTransformVector(const struct FMatrix& M, const struct FVector& V);
	struct FVector STATIC_Matrix_InverseTransformPosition(const struct FMatrix& M, const struct FVector& V);
	struct FMatrix STATIC_Matrix_Identity();
	struct FVector STATIC_Matrix_GetUnitAxis(const struct FMatrix& M, TEnumAsByte<FCoreUObject_EAxis> Axis);
	void STATIC_Matrix_GetUnitAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	struct FMatrix STATIC_Matrix_GetTransposed(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_GetTransposeAdjoint(const struct FMatrix& M);
	struct FVector STATIC_Matrix_GetScaleVector(const struct FMatrix& M, float Tolerance);
	struct FVector STATIC_Matrix_GetScaledAxis(const struct FMatrix& M, TEnumAsByte<FCoreUObject_EAxis> Axis);
	void STATIC_Matrix_GetScaledAxes(const struct FMatrix& M, struct FVector* X, struct FVector* Y, struct FVector* Z);
	float STATIC_Matrix_GetRotDeterminant(const struct FMatrix& M);
	struct FRotator STATIC_Matrix_GetRotator(const struct FMatrix& M);
	struct FVector STATIC_Matrix_GetOrigin(const struct FMatrix& InMatrix);
	float STATIC_Matrix_GetMaximumAxisScale(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_GetMatrixWithoutScale(const struct FMatrix& M, float Tolerance);
	struct FMatrix STATIC_Matrix_GetInverse(const struct FMatrix& M);
	bool STATIC_Matrix_GetFrustumTopPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool STATIC_Matrix_GetFrustumRightPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool STATIC_Matrix_GetFrustumNearPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool STATIC_Matrix_GetFrustumLeftPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool STATIC_Matrix_GetFrustumFarPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	bool STATIC_Matrix_GetFrustumBottomPlane(const struct FMatrix& M, struct FPlane* OutPlane);
	float STATIC_Matrix_GetDeterminant(const struct FMatrix& M);
	struct FVector STATIC_Matrix_GetColumn(const struct FMatrix& M, TEnumAsByte<FEngine_Engine_EMatrixColumns> Column);
	bool STATIC_Matrix_ContainsNaN(const struct FMatrix& M);
	struct FMatrix STATIC_Matrix_ConcatenateTranslation(const struct FMatrix& M, const struct FVector& Translation);
	struct FMatrix STATIC_Matrix_ApplyScale(const struct FMatrix& M, float Scale);
	float STATIC_MapRangeUnclamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	float STATIC_MapRangeClamped(float Value, float InRangeA, float InRangeB, float OutRangeA, float OutRangeB);
	struct FVector4 STATIC_MakeVector4(float X, float Y, float Z, float W);
	struct FVector2D STATIC_MakeVector2D(float X, float Y);
	struct FVector STATIC_MakeVector(float X, float Y, float Z);
	struct FTransform STATIC_MakeTransform(const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale);
	struct FTimespan STATIC_MakeTimespan2(int Days, int Hours, int Minutes, int Seconds, int FractionNano);
	struct FTimespan STATIC_MakeTimespan(int Days, int Hours, int Minutes, int Seconds, int Milliseconds);
	struct FRotator STATIC_MakeRotFromZY(const struct FVector& Z, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromZX(const struct FVector& Z, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromZ(const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYZ(const struct FVector& Y, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromYX(const struct FVector& Y, const struct FVector& X);
	struct FRotator STATIC_MakeRotFromY(const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromXZ(const struct FVector& X, const struct FVector& Z);
	struct FRotator STATIC_MakeRotFromXY(const struct FVector& X, const struct FVector& Y);
	struct FRotator STATIC_MakeRotFromX(const struct FVector& X);
	struct FRotator STATIC_MakeRotator(float Roll, float Pitch, float Yaw);
	struct FRotator STATIC_MakeRotationFromAxes(const struct FVector& Forward, const struct FVector& Right, const struct FVector& Up);
	struct FTransform STATIC_MakeRelativeTransform(const struct FTransform& A, const struct FTransform& RelativeTo);
	struct FRandomStream STATIC_MakeRandomStream(int InitialSeed);
	struct FQualifiedFrameTime STATIC_MakeQualifiedFrameTime(const struct FFrameNumber& Frame, const struct FFrameRate& FrameRate, float SubFrame);
	float STATIC_MakePulsatingValue(float InCurrentTime, float InPulsesPerSecond, float InPhase);
	struct FPlane STATIC_MakePlaneFromPointAndNormal(const struct FVector& Point, const struct FVector& Normal);
	struct FFrameRate STATIC_MakeFrameRate(int Numerator, int Denominator);
	struct FDateTime STATIC_MakeDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second, int Millisecond);
	struct FLinearColor STATIC_MakeColor(float R, float G, float B, float A);
	struct FBox2D STATIC_MakeBox2D(const struct FVector2D& Min, const struct FVector2D& Max);
	struct FBox STATIC_MakeBox(const struct FVector& Min, const struct FVector& Max);
	float STATIC_Loge(float A);
	float STATIC_Log(float A, float Base);
	bool STATIC_LinePlaneIntersection_OriginNormal(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FVector& PlaneOrigin, const struct FVector& PlaneNormal, float* T, struct FVector* Intersection);
	bool STATIC_LinePlaneIntersection(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FPlane& APlane, float* T, struct FVector* Intersection);
	struct FLinearColor STATIC_LinearColorLerpUsingHSV(const struct FLinearColor& A, const struct FLinearColor& B, float ALPHA);
	struct FLinearColor STATIC_LinearColorLerp(const struct FLinearColor& A, const struct FLinearColor& B, float ALPHA);
	struct FLinearColor STATIC_LinearColor_Yellow();
	struct FLinearColor STATIC_LinearColor_White();
	struct FLinearColor STATIC_LinearColor_Transparent();
	struct FColor STATIC_LinearColor_ToRGBE(const struct FLinearColor& InLinearColor);
	struct FLinearColor STATIC_LinearColor_ToNewOpacity(const struct FLinearColor& InColor, float InOpacity);
	void STATIC_LinearColor_SetTemperature(float InTemperature, struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetRGBA(float R, float G, float B, float A, struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetRandomHue(struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetFromSRGB(const struct FColor& InSRGB, struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetFromPow22(const struct FColor& InColor, struct FLinearColor* InOutColor);
	void STATIC_LinearColor_SetFromHSV(float H, float S, float V, float A, struct FLinearColor* InOutColor);
	void STATIC_LinearColor_Set(const struct FLinearColor& InColor, struct FLinearColor* InOutColor);
	struct FLinearColor STATIC_LinearColor_Red();
	struct FColor STATIC_LinearColor_QuantizeRound(const struct FLinearColor& InColor);
	struct FColor STATIC_LinearColor_Quantize(const struct FLinearColor& InColor);
	bool STATIC_LinearColor_IsNearEqual(const struct FLinearColor& A, const struct FLinearColor& B, float Tolerance);
	struct FLinearColor STATIC_LinearColor_Green();
	struct FLinearColor STATIC_LinearColor_Gray();
	float STATIC_LinearColor_GetMin(const struct FLinearColor& InColor);
	float STATIC_LinearColor_GetMax(const struct FLinearColor& InColor);
	float STATIC_LinearColor_GetLuminance(const struct FLinearColor& InColor);
	float STATIC_LinearColor_Distance(const struct FLinearColor& C1, const struct FLinearColor& C2);
	struct FLinearColor STATIC_LinearColor_Desaturated(const struct FLinearColor& InColor, float InDesaturation);
	struct FLinearColor STATIC_LinearColor_Blue();
	struct FLinearColor STATIC_LinearColor_Black();
	struct FVector STATIC_LessLess_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_LessEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_LessEqual_IntInt(int A, int B);
	bool STATIC_LessEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_LessEqual_FloatFloat(float A, float B);
	bool STATIC_LessEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_LessEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Less_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Less_IntInt(int A, int B);
	bool STATIC_Less_Int64Int64(int64_t A, int64_t B);
	bool STATIC_Less_FloatFloat(float A, float B);
	bool STATIC_Less_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Less_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Lerp(float A, float B, float ALPHA);
	bool STATIC_IsZero2D(const struct FVector2D& A);
	bool STATIC_IsPointInBoxWithTransform(const struct FVector& Point, const struct FTransform& BoxWorldTransform, const struct FVector& BoxExtent);
	bool STATIC_IsPointInBox(const struct FVector& Point, const struct FVector& BoxOrigin, const struct FVector& BoxExtent);
	bool STATIC_IsNearlyZero2D(const struct FVector2D& A, float Tolerance);
	bool STATIC_IsMorning(const struct FDateTime& A);
	bool STATIC_IsLeapYear(int Year);
	bool STATIC_IsAfternoon(const struct FDateTime& A);
	struct FTransform STATIC_InvertTransform(const struct FTransform& T);
	struct FRotator STATIC_InverseTransformRotation(const struct FTransform& T, const struct FRotator& Rotation);
	struct FVector STATIC_InverseTransformLocation(const struct FTransform& T, const struct FVector& Location);
	struct FVector STATIC_InverseTransformDirection(const struct FTransform& T, const struct FVector& Direction);
	bool STATIC_InRange_IntInt(int Value, int Min, int Max, bool InclusiveMin, bool InclusiveMax);
	bool STATIC_InRange_Int64Int64(int64_t Value, int64_t Min, int64_t Max, bool InclusiveMin, bool InclusiveMax);
	bool STATIC_InRange_FloatFloat(float Value, float Min, float Max, bool InclusiveMin, bool InclusiveMax);
	float STATIC_Hypotenuse(float Width, float Height);
	struct FLinearColor STATIC_HSVToRGBLinear(const struct FLinearColor& HSV);
	void STATIC_HSVToRGB_Vector(const struct FLinearColor& HSV, struct FLinearColor* RGB);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V, float A);
	float STATIC_GridSnap_Float(float Location, float GridSize);
	struct FVector STATIC_GreaterGreater_VectorRotator(const struct FVector& A, const struct FRotator& B);
	bool STATIC_GreaterEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_GreaterEqual_IntInt(int A, int B);
	bool STATIC_GreaterEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_GreaterEqual_FloatFloat(float A, float B);
	bool STATIC_GreaterEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_GreaterEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_Greater_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_Greater_IntInt(int A, int B);
	bool STATIC_Greater_Int64Int64(int64_t A, int64_t B);
	bool STATIC_Greater_FloatFloat(float A, float B);
	bool STATIC_Greater_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_Greater_ByteByte(unsigned char A, unsigned char B);
	int STATIC_GetYear(const struct FDateTime& A);
	void STATIC_GetYawPitchFromVector(const struct FVector& InVec, float* Yaw, float* Pitch);
	struct FVector STATIC_GetVectorArrayAverage(TArray<struct FVector> Vectors);
	struct FVector STATIC_GetUpVector(const struct FRotator& InRot);
	float STATIC_GetTotalSeconds(const struct FTimespan& A);
	float STATIC_GetTotalMinutes(const struct FTimespan& A);
	float STATIC_GetTotalMilliseconds(const struct FTimespan& A);
	float STATIC_GetTotalHours(const struct FTimespan& A);
	float STATIC_GetTotalDays(const struct FTimespan& A);
	struct FTimespan STATIC_GetTimeOfDay(const struct FDateTime& A);
	float STATIC_GetTAU();
	void STATIC_GetSlopeDegreeAngles(const struct FVector& MyRightYAxis, const struct FVector& FloorNormal, const struct FVector& UpVector, float* OutSlopePitchDegreeAngle, float* OutSlopeRollDegreeAngle);
	int STATIC_GetSeconds(const struct FTimespan& A);
	int STATIC_GetSecond(const struct FDateTime& A);
	struct FVector2D STATIC_GetRotated2D(const struct FVector2D& A, float AngleDeg);
	struct FVector STATIC_GetRightVector(const struct FRotator& InRot);
	struct FVector STATIC_GetReflectionVector(const struct FVector& Direction, const struct FVector& SurfaceNormal);
	float STATIC_GetPointDistanceToSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	float STATIC_GetPointDistanceToLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	float STATIC_GetPI();
	int STATIC_GetMonth(const struct FDateTime& A);
	int STATIC_GetMinutes(const struct FTimespan& A);
	int STATIC_GetMinute(const struct FDateTime& A);
	float STATIC_GetMinElement(const struct FVector& A);
	float STATIC_GetMin2D(const struct FVector2D& A);
	int STATIC_GetMilliseconds(const struct FTimespan& A);
	int STATIC_GetMillisecond(const struct FDateTime& A);
	float STATIC_GetMaxElement(const struct FVector& A);
	float STATIC_GetMax2D(const struct FVector2D& A);
	int STATIC_GetHours(const struct FTimespan& A);
	int STATIC_GetHour12(const struct FDateTime& A);
	int STATIC_GetHour(const struct FDateTime& A);
	struct FVector STATIC_GetForwardVector(const struct FRotator& InRot);
	struct FTimespan STATIC_GetDuration(const struct FTimespan& A);
	struct FVector STATIC_GetDirectionUnitVector(const struct FVector& From, const struct FVector& To);
	int STATIC_GetDays(const struct FTimespan& A);
	int STATIC_GetDayOfYear(const struct FDateTime& A);
	int STATIC_GetDay(const struct FDateTime& A);
	struct FDateTime STATIC_GetDate(const struct FDateTime& A);
	void STATIC_GetAzimuthAndElevation(const struct FVector& InDirection, const struct FTransform& ReferenceFrame, float* Azimuth, float* Elevation);
	void STATIC_GetAxes(const struct FRotator& A, struct FVector* X, struct FVector* Y, struct FVector* Z);
	float STATIC_GetAbsMax2D(const struct FVector2D& A);
	struct FVector2D STATIC_GetAbs2D(const struct FVector2D& A);
	struct FIntVector STATIC_FTruncVector(const struct FVector& InVector);
	int64_t STATIC_FTrunc64(float A);
	int STATIC_FTrunc(float A);
	struct FTimespan STATIC_FromSeconds(float Seconds);
	struct FTimespan STATIC_FromMinutes(float Minutes);
	struct FTimespan STATIC_FromMilliseconds(float Milliseconds);
	struct FTimespan STATIC_FromHours(float Hours);
	struct FTimespan STATIC_FromDays(float Days);
	float STATIC_Fraction(float A);
	int STATIC_FMod(float Dividend, float Divisor, float* Remainder);
	float STATIC_FMin(float A, float B);
	float STATIC_FMax(float A, float B);
	float STATIC_FloatSpringInterp(float Current, float Target, float Stiffness, float CriticalDampingFactor, float DeltaTime, float Mass, struct FEngine_FloatSpringState* SpringState);
	float STATIC_FixedTurn(float InCurrent, float InDesired, float InDeltaRate);
	float STATIC_FInterpTo_Constant(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpTo(float Current, float Target, float DeltaTime, float InterpSpeed);
	float STATIC_FInterpEaseInOut(float A, float B, float ALPHA, float Exponent);
	void STATIC_FindNearestPointsOnLineSegments(const struct FVector& Segment1Start, const struct FVector& Segment1End, const struct FVector& Segment2Start, const struct FVector& Segment2End, struct FVector* Segment1Point, struct FVector* Segment2Point);
	struct FRotator STATIC_FindLookAtRotation(const struct FVector& Start, const struct FVector& Target);
	struct FVector STATIC_FindClosestPointOnSegment(const struct FVector& Point, const struct FVector& SegmentStart, const struct FVector& SegmentEnd);
	struct FVector STATIC_FindClosestPointOnLine(const struct FVector& Point, const struct FVector& LineOrigin, const struct FVector& LineDirection);
	int64_t STATIC_FFloor64(float A);
	int STATIC_FFloor(float A);
	float STATIC_FClamp(float Value, float Min, float Max);
	int64_t STATIC_FCeil64(float A);
	int STATIC_FCeil(float A);
	float STATIC_Exp(float A);
	bool STATIC_EqualExactly_VectorVector(const struct FVector& A, const struct FVector& B);
	bool STATIC_EqualExactly_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	bool STATIC_EqualExactly_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	bool STATIC_EqualEqual_VectorVector(const struct FVector& A, const struct FVector& B, float ErrorTolerance);
	bool STATIC_EqualEqual_Vector4Vector4(const struct FVector4& A, const struct FVector4& B, float ErrorTolerance);
	bool STATIC_EqualEqual_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B, float ErrorTolerance);
	bool STATIC_EqualEqual_TransformTransform(const struct FTransform& A, const struct FTransform& B);
	bool STATIC_EqualEqual_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	bool STATIC_EqualEqual_RotatorRotator(const struct FRotator& A, const struct FRotator& B, float ErrorTolerance);
	bool STATIC_EqualEqual_QuatQuat(const struct FQuat& A, const struct FQuat& B, float Tolerance);
	bool STATIC_EqualEqual_ObjectObject(class UObject* A, class UObject* B);
	bool STATIC_EqualEqual_NameName(const struct FName& A, const struct FName& B);
	bool STATIC_EqualEqual_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B, float Tolerance);
	bool STATIC_EqualEqual_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	bool STATIC_EqualEqual_IntInt(int A, int B);
	bool STATIC_EqualEqual_Int64Int64(int64_t A, int64_t B);
	bool STATIC_EqualEqual_FloatFloat(float A, float B);
	bool STATIC_EqualEqual_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	bool STATIC_EqualEqual_ClassClass(class UClass* A, class UClass* B);
	bool STATIC_EqualEqual_ByteByte(unsigned char A, unsigned char B);
	bool STATIC_EqualEqual_BoolBool(bool A, bool B);
	float STATIC_Ease(float A, float B, float ALPHA, TEnumAsByte<FEngine_Engine_EEasingFunc> EasingFunc, float BlendExp, int Steps);
	struct FVector STATIC_DynamicWeightedMovingAverage_FVector(const struct FVector& CurrentSample, const struct FVector& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	struct FRotator STATIC_DynamicWeightedMovingAverage_FRotator(const struct FRotator& CurrentSample, const struct FRotator& PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float STATIC_DynamicWeightedMovingAverage_Float(float CurrentSample, float PreviousSample, float MaxDistance, float MinWeight, float MaxWeight);
	float STATIC_DotProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	float STATIC_Dot_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Divide_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Divide_VectorFloat(const struct FVector& A, float B);
	struct FVector4 STATIC_Divide_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Divide_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Divide_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Divide_TimespanFloat(const struct FTimespan& A, float Scalar);
	struct FLinearColor STATIC_Divide_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	int STATIC_Divide_IntInt(int A, int B);
	int64_t STATIC_Divide_Int64Int64(int64_t A, int64_t B);
	float STATIC_Divide_FloatFloat(float A, float B);
	unsigned char STATIC_Divide_ByteByte(unsigned char A, unsigned char B);
	float STATIC_DistanceSquared2D(const struct FVector2D& v1, const struct FVector2D& v2);
	float STATIC_Distance2D(const struct FVector2D& v1, const struct FVector2D& v2);
	float STATIC_DegTan(float A);
	float STATIC_DegSin(float A);
	float STATIC_DegreesToRadians(float A);
	float STATIC_DegCos(float A);
	float STATIC_DegAtan2(float Y, float X);
	float STATIC_DegAtan(float A);
	float STATIC_DegAsin(float A);
	float STATIC_DegAcos(float A);
	int STATIC_DaysInYear(int Year);
	int STATIC_DaysInMonth(int Year, int Month);
	struct FDateTime STATIC_DateTimeMinValue();
	struct FDateTime STATIC_DateTimeMaxValue();
	bool STATIC_DateTimeFromString(const struct FString& DateTimeString, struct FDateTime* Result);
	bool STATIC_DateTimeFromIsoString(const struct FString& IsoString, struct FDateTime* Result);
	float STATIC_CrossProduct2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector STATIC_Cross_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_CreateVectorFromYawPitch(float Yaw, float Pitch, float Length);
	float STATIC_Cos(float A);
	struct FTransform STATIC_ConvertTransformToRelative(const struct FTransform& Transform, const struct FTransform& ParentTransform);
	struct FVector2D STATIC_Conv_VectorToVector2D(const struct FVector& InVector);
	struct FTransform STATIC_Conv_VectorToTransform(const struct FVector& InLocation);
	struct FRotator STATIC_Conv_VectorToRotator(const struct FVector& InVec);
	struct FQuat STATIC_Conv_VectorToQuaterion(const struct FVector& InVec);
	struct FLinearColor STATIC_Conv_VectorToLinearColor(const struct FVector& InVec);
	struct FVector STATIC_Conv_Vector4ToVector(const struct FVector4& InVector4);
	struct FRotator STATIC_Conv_Vector4ToRotator(const struct FVector4& InVec);
	struct FQuat STATIC_Conv_Vector4ToQuaterion(const struct FVector4& InVec);
	struct FVector STATIC_Conv_Vector2DToVector(const struct FVector2D& InVector2D, float Z);
	struct FIntPoint STATIC_Conv_Vector2DToIntPoint(const struct FVector2D& InVector2D);
	struct FMatrix STATIC_Conv_TransformToMatrix(const struct FTransform& Transform);
	struct FVector STATIC_Conv_RotatorToVector(const struct FRotator& InRot);
	struct FTransform STATIC_Conv_RotatorToTransform(const struct FRotator& InRotator);
	struct FTransform STATIC_Conv_MatrixToTransform(const struct FMatrix& InMatrix);
	struct FRotator STATIC_Conv_MatrixToRotator(const struct FMatrix& InMatrix);
	struct FVector STATIC_Conv_LinearColorToVector(const struct FLinearColor& InLinearColor);
	struct FColor STATIC_Conv_LinearColorToColor(const struct FLinearColor& InLinearColor, bool InUseSRGB);
	struct FVector STATIC_Conv_IntVectorToVector(const struct FIntVector& InIntVector);
	struct FIntVector STATIC_Conv_IntToIntVector(int inInt);
	int64_t STATIC_Conv_IntToInt64(int inInt);
	float STATIC_Conv_IntToFloat(int inInt);
	unsigned char STATIC_Conv_IntToByte(int inInt);
	bool STATIC_Conv_IntToBool(int inInt);
	struct FVector STATIC_Conv_FloatToVector(float InFloat);
	struct FLinearColor STATIC_Conv_FloatToLinearColor(float InFloat);
	struct FLinearColor STATIC_Conv_ColorToLinearColor(const struct FColor& InColor);
	int STATIC_Conv_ByteToInt(unsigned char InByte);
	float STATIC_Conv_ByteToFloat(unsigned char InByte);
	int STATIC_Conv_BoolToInt(bool InBool);
	float STATIC_Conv_BoolToFloat(bool InBool);
	unsigned char STATIC_Conv_BoolToByte(bool InBool);
	struct FTransform STATIC_ComposeTransforms(const struct FTransform& A, const struct FTransform& B);
	struct FRotator STATIC_ComposeRotators(const struct FRotator& A, const struct FRotator& B);
	bool STATIC_ClassIsChildOf(class UClass* TestClass, class UClass* ParentClass);
	struct FVector STATIC_ClampVectorSize(const struct FVector& A, float Min, float Max);
	int64_t STATIC_ClampInt64(int64_t Value, int64_t Min, int64_t Max);
	float STATIC_ClampAxis(float Angle);
	struct FVector2D STATIC_ClampAxes2D(const struct FVector2D& A, float MinAxisVal, float MaxAxisVal);
	float STATIC_ClampAngle(float AngleDegrees, float MinAngleDegrees, float MaxAngleDegrees);
	int STATIC_Clamp(int Value, int Min, int Max);
	struct FLinearColor STATIC_CInterpTo(const struct FLinearColor& Current, const struct FLinearColor& Target, float DeltaTime, float InterpSpeed);
	void STATIC_BreakVector4(const struct FVector4& InVec, float* X, float* Y, float* Z, float* W);
	void STATIC_BreakVector2D(const struct FVector2D& InVec, float* X, float* Y);
	void STATIC_BreakVector(const struct FVector& InVec, float* X, float* Y, float* Z);
	void STATIC_BreakTransform(const struct FTransform& InTransform, struct FVector* Location, struct FRotator* Rotation, struct FVector* Scale);
	void STATIC_BreakTimespan2(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* FractionNano);
	void STATIC_BreakTimespan(const struct FTimespan& InTimespan, int* Days, int* Hours, int* Minutes, int* Seconds, int* Milliseconds);
	void STATIC_BreakRotIntoAxes(const struct FRotator& InRot, struct FVector* X, struct FVector* Y, struct FVector* Z);
	void STATIC_BreakRotator(const struct FRotator& InRot, float* Roll, float* Pitch, float* Yaw);
	void STATIC_BreakRandomStream(const struct FRandomStream& InRandomStream, int* InitialSeed);
	void STATIC_BreakQualifiedFrameTime(const struct FQualifiedFrameTime& InFrameTime, struct FFrameNumber* Frame, struct FFrameRate* FrameRate, float* SubFrame);
	void STATIC_BreakFrameRate(const struct FFrameRate& InFrameRate, int* Numerator, int* Denominator);
	void STATIC_BreakDateTime(const struct FDateTime& InDateTime, int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second, int* Millisecond);
	void STATIC_BreakColor(const struct FLinearColor& InColor, float* R, float* G, float* B, float* A);
	bool STATIC_BooleanXOR(bool A, bool B);
	bool STATIC_BooleanOR(bool A, bool B);
	bool STATIC_BooleanNOR(bool A, bool B);
	bool STATIC_BooleanNAND(bool A, bool B);
	bool STATIC_BooleanAND(bool A, bool B);
	unsigned char STATIC_BMin(unsigned char A, unsigned char B);
	unsigned char STATIC_BMax(unsigned char A, unsigned char B);
	float STATIC_Atan2(float Y, float X);
	float STATIC_Atan(float A);
	float STATIC_Asin(float A);
	int STATIC_And_IntInt(int A, int B);
	int64_t STATIC_And_Int64Int64(int64_t A, int64_t B);
	struct FVector STATIC_Add_VectorVector(const struct FVector& A, const struct FVector& B);
	struct FVector STATIC_Add_VectorInt(const struct FVector& A, int B);
	struct FVector STATIC_Add_VectorFloat(const struct FVector& A, float B);
	struct FVector4 STATIC_Add_Vector4Vector4(const struct FVector4& A, const struct FVector4& B);
	struct FVector2D STATIC_Add_Vector2DVector2D(const struct FVector2D& A, const struct FVector2D& B);
	struct FVector2D STATIC_Add_Vector2DFloat(const struct FVector2D& A, float B);
	struct FTimespan STATIC_Add_TimespanTimespan(const struct FTimespan& A, const struct FTimespan& B);
	struct FQuat STATIC_Add_QuatQuat(const struct FQuat& A, const struct FQuat& B);
	struct FMatrix STATIC_Add_MatrixMatrix(const struct FMatrix& A, const struct FMatrix& B);
	struct FLinearColor STATIC_Add_LinearColorLinearColor(const struct FLinearColor& A, const struct FLinearColor& B);
	int STATIC_Add_IntInt(int A, int B);
	int64_t STATIC_Add_Int64Int64(int64_t A, int64_t B);
	float STATIC_Add_FloatFloat(float A, float B);
	struct FDateTime STATIC_Add_DateTimeTimespan(const struct FDateTime& A, const struct FTimespan& B);
	struct FDateTime STATIC_Add_DateTimeDateTime(const struct FDateTime& A, const struct FDateTime& B);
	unsigned char STATIC_Add_ByteByte(unsigned char A, unsigned char B);
	float STATIC_Acos(float A);
	int64_t STATIC_Abs_Int64(int64_t A);
	int STATIC_Abs_Int(int A);
	float STATIC_Abs(float A);
};


// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetNodeHelperLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetNodeHelperLibrary");
		return ptr;
	}


	void STATIC_MarkBit(int Index, int* Data);
	bool STATIC_HasUnmarkedBit(int Data, int NumBits);
	bool STATIC_HasMarkedBit(int Data, int NumBits);
	unsigned char STATIC_GetValidValue(class UEnum* Enum, unsigned char EnumeratorValue);
	int STATIC_GetUnmarkedBit(int Data, int StartIdx, int NumBits, bool bRandom);
	int STATIC_GetRandomUnmarkedBit(int Data, int StartIdx, int NumBits);
	int STATIC_GetFirstUnmarkedBit(int Data, int StartIdx, int NumBits);
	unsigned char STATIC_GetEnumeratorValueFromIndex(class UEnum* Enum, unsigned char EnumeratorIndex);
	struct FString STATIC_GetEnumeratorUserFriendlyName(class UEnum* Enum, unsigned char EnumeratorValue);
	struct FName STATIC_GetEnumeratorName(class UEnum* Enum, unsigned char EnumeratorValue);
	void STATIC_ClearBit(int Index, int* Data);
	void STATIC_ClearAllBits(int* Data);
	bool STATIC_BitIsMarked(int Data, int Index);
};


// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetRenderingLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetRenderingLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetRenderingLibrary");
		return ptr;
	}


	void STATIC_SetCastInsetShadowForAllAttachments(class UEngine_PrimitiveComponent* PrimitiveComponent, bool bCastInsetShadow, bool bLightAttachmentsAsGroup);
	class UEngine_Texture2D* STATIC_RenderTargetCreateStaticTexture2DEditorOnly(class UEngine_TextureRenderTarget2D* RenderTarget, const struct FString& Name, TEnumAsByte<FEngine_Engine_ETextureCompressionSettings> CompressionSettings, TEnumAsByte<FEngine_Engine_ETextureMipGenSettings> MipSettings);
	void STATIC_ReleaseRenderTarget2D(class UEngine_TextureRenderTarget2D* TextureRenderTarget);
	struct FColor STATIC_ReadRenderTargetUV(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawUV(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, float U, float V);
	struct FLinearColor STATIC_ReadRenderTargetRawPixel(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	struct FColor STATIC_ReadRenderTargetPixel(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, int X, int Y);
	struct FEngine_SkelMeshSkinWeightInfo STATIC_MakeSkinWeightInfo(int Bone0, unsigned char Weight0, int Bone1, unsigned char Weight1, int Bone2, unsigned char Weight2, int Bone3, unsigned char Weight3);
	class UEngine_Texture2D* STATIC_ImportFileAsTexture2D(class UObject* WorldContextObject, const struct FString& Filename);
	class UEngine_Texture2D* STATIC_ImportBufferAsTexture2D(class UObject* WorldContextObject, TArray<unsigned char> Buffer);
	void STATIC_ExportTexture2D(class UObject* WorldContextObject, class UEngine_Texture2D* Texture, const struct FString& FilePath, const struct FString& Filename);
	void STATIC_ExportRenderTarget(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, const struct FString& FilePath, const struct FString& Filename);
	void STATIC_EndDrawCanvasToRenderTarget(class UObject* WorldContextObject, const struct FEngine_DrawToRenderTargetContext& Context);
	void STATIC_DrawMaterialToRenderTarget(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, class UEngine_MaterialInterface* Material);
	class UEngine_TextureRenderTarget2D* STATIC_CreateRenderTarget2D(class UObject* WorldContextObject, int Width, int Height, TEnumAsByte<FEngine_Engine_ETextureRenderTargetFormat> Format, const struct FLinearColor& ClearColor, bool bAutoGenerateMipMaps);
	void STATIC_ConvertRenderTargetToTexture2DEditorOnly(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* RenderTarget, class UEngine_Texture2D* Texture);
	void STATIC_ClearRenderTarget2D(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, const struct FLinearColor& ClearColor);
	void STATIC_BreakSkinWeightInfo(const struct FEngine_SkelMeshSkinWeightInfo& InWeight, int* Bone0, unsigned char* Weight0, int* Bone1, unsigned char* Weight1, int* Bone2, unsigned char* Weight2, int* Bone3, unsigned char* Weight3);
	void STATIC_BeginDrawCanvasToRenderTarget(class UObject* WorldContextObject, class UEngine_TextureRenderTarget2D* TextureRenderTarget, class UEngine_Canvas** Canvas, struct FVector2D* Size, struct FEngine_DrawToRenderTargetContext* Context);
};


// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetStringLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetStringLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetStringLibrary");
		return ptr;
	}


	struct FString STATIC_TrimTrailing(const struct FString& SourceString);
	struct FString STATIC_Trim(const struct FString& SourceString);
	struct FString STATIC_ToUpper(const struct FString& SourceString);
	struct FString STATIC_ToLower(const struct FString& SourceString);
	struct FString STATIC_TimeSecondsToString(float InSeconds);
	bool STATIC_StartsWith(const struct FString& SourceString, const struct FString& InPrefix, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase);
	bool STATIC_Split(const struct FString& SourceString, const struct FString& InStr, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase, TEnumAsByte<FCoreUObject_ESearchDir> SearchDir, struct FString* LeftS, struct FString* RightS);
	struct FString STATIC_RightPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_RightChop(const struct FString& SourceString, int count);
	struct FString STATIC_Right(const struct FString& SourceString, int count);
	struct FString STATIC_Reverse(const struct FString& SourceString);
	int STATIC_ReplaceInline(const struct FString& SearchText, const struct FString& ReplacementText, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase, struct FString* SourceString);
	struct FString STATIC_Replace(const struct FString& SourceString, const struct FString& From, const struct FString& To, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase);
	TArray<struct FString> STATIC_ParseIntoArray(const struct FString& SourceString, const struct FString& Delimiter, bool CullEmptyStrings);
	bool STATIC_NotEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_NotEqual_StriStri(const struct FString& A, const struct FString& B);
	struct FString STATIC_Mid(const struct FString& SourceString, int Start, int count);
	bool STATIC_MatchesWildcard(const struct FString& SourceString, const struct FString& Wildcard, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase);
	int STATIC_Len(const struct FString& S);
	struct FString STATIC_LeftPad(const struct FString& SourceString, int ChCount);
	struct FString STATIC_LeftChop(const struct FString& SourceString, int count);
	struct FString STATIC_Left(const struct FString& SourceString, int count);
	struct FString STATIC_JoinStringArray(TArray<struct FString> SourceArray, const struct FString& Separator);
	bool STATIC_IsNumeric(const struct FString& SourceString);
	struct FString STATIC_GetSubstring(const struct FString& SourceString, int StartIndex, int Length);
	int STATIC_GetCharacterAsNumber(const struct FString& SourceString, int Index);
	TArray<struct FString> STATIC_GetCharacterArrayFromString(const struct FString& SourceString);
	int STATIC_FindSubstring(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd, int StartPosition);
	bool STATIC_EqualEqual_StrStr(const struct FString& A, const struct FString& B);
	bool STATIC_EqualEqual_StriStri(const struct FString& A, const struct FString& B);
	bool STATIC_EndsWith(const struct FString& SourceString, const struct FString& InSuffix, TEnumAsByte<FCoreUObject_ESearchCase> SearchCase);
	int STATIC_CullArray(const struct FString& SourceString, TArray<struct FString>* inArray);
	struct FString STATIC_Conv_VectorToString(const struct FVector& InVec);
	struct FString STATIC_Conv_Vector2dToString(const struct FVector2D& InVec);
	struct FString STATIC_Conv_TransformToString(const struct FTransform& InTrans);
	void STATIC_Conv_StringToVector2D(const struct FString& inString, struct FVector2D* OutConvertedVector2D, bool* OutIsValid);
	void STATIC_Conv_StringToVector(const struct FString& inString, struct FVector* OutConvertedVector, bool* OutIsValid);
	void STATIC_Conv_StringToRotator(const struct FString& inString, struct FRotator* OutConvertedRotator, bool* OutIsValid);
	struct FName STATIC_Conv_StringToName(const struct FString& inString);
	int STATIC_Conv_StringToInt(const struct FString& inString);
	float STATIC_Conv_StringToFloat(const struct FString& inString);
	void STATIC_Conv_StringToColor(const struct FString& inString, struct FLinearColor* OutConvertedColor, bool* OutIsValid);
	struct FString STATIC_Conv_RotatorToString(const struct FRotator& InRot);
	struct FString STATIC_Conv_ObjectToString(class UObject* InObj);
	struct FString STATIC_Conv_NameToString(const struct FName& InName);
	struct FString STATIC_Conv_MatrixToString(const struct FMatrix& InMatrix);
	struct FString STATIC_Conv_IntVectorToString(const struct FIntVector& InIntVec);
	struct FString STATIC_Conv_IntToString(int inInt);
	struct FString STATIC_Conv_FloatToString(float InFloat);
	struct FString STATIC_Conv_ColorToString(const struct FLinearColor& InColor);
	struct FString STATIC_Conv_ByteToString(unsigned char InByte);
	struct FString STATIC_Conv_BoolToString(bool InBool);
	bool STATIC_Contains(const struct FString& SearchIn, const struct FString& Substring, bool bUseCase, bool bSearchFromEnd);
	struct FString STATIC_Concat_StrStr(const struct FString& A, const struct FString& B);
	struct FString STATIC_BuildString_Vector2d(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector2D& InVector2D, const struct FString& Suffix);
	struct FString STATIC_BuildString_Vector(const struct FString& AppendTo, const struct FString& Prefix, const struct FVector& InVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Rotator(const struct FString& AppendTo, const struct FString& Prefix, const struct FRotator& InRot, const struct FString& Suffix);
	struct FString STATIC_BuildString_Object(const struct FString& AppendTo, const struct FString& Prefix, class UObject* InObj, const struct FString& Suffix);
	struct FString STATIC_BuildString_Name(const struct FString& AppendTo, const struct FString& Prefix, const struct FName& InName, const struct FString& Suffix);
	struct FString STATIC_BuildString_IntVector(const struct FString& AppendTo, const struct FString& Prefix, const struct FIntVector& InIntVector, const struct FString& Suffix);
	struct FString STATIC_BuildString_Int(const struct FString& AppendTo, const struct FString& Prefix, int inInt, const struct FString& Suffix);
	struct FString STATIC_BuildString_Float(const struct FString& AppendTo, const struct FString& Prefix, float InFloat, const struct FString& Suffix);
	struct FString STATIC_BuildString_Color(const struct FString& AppendTo, const struct FString& Prefix, const struct FLinearColor& InColor, const struct FString& Suffix);
	struct FString STATIC_BuildString_Bool(const struct FString& AppendTo, const struct FString& Prefix, bool InBool, const struct FString& Suffix);
};


// Class Engine.KismetStringTableLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetStringTableLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetStringTableLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetStringTableLibrary");
		return ptr;
	}


	bool STATIC_IsRegisteredTableId(const struct FName& TableId);
	bool STATIC_IsRegisteredTableEntry(const struct FName& TableId, const struct FString& Key);
	struct FString STATIC_GetTableNamespace(const struct FName& TableId);
	struct FString STATIC_GetTableEntrySourceString(const struct FName& TableId, const struct FString& Key);
	struct FString STATIC_GetTableEntryMetaData(const struct FName& TableId, const struct FString& Key, const struct FName& MetaDataId);
	TArray<struct FName> STATIC_GetRegisteredStringTables();
	TArray<struct FName> STATIC_GetMetaDataIdsFromStringTableEntry(const struct FName& TableId, const struct FString& Key);
	TArray<struct FString> STATIC_GetKeysFromStringTable(const struct FName& TableId);
};


// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetSystemLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetSystemLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetSystemLibrary");
		return ptr;
	}


	void STATIC_UnregisterForRemoteNotifications();
	void STATIC_UnloadPrimaryAssetList(TArray<struct FPrimaryAssetId> PrimaryAssetIdList);
	void STATIC_UnloadPrimaryAsset(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_TransactObject(class UObject* Object);
	void STATIC_StackTrace();
	bool STATIC_SphereTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_SphereTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_SphereTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_SphereTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_SphereTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_SphereTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_SphereOverlapComponents(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class UEngine_PrimitiveComponent*>* OutComponents);
	bool STATIC_SphereOverlapActors(class UObject* WorldContextObject, const struct FVector& SpherePos, float SphereRadius, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class AEngine_Actor*>* OutActors);
	void STATIC_SnapshotObject(class UObject* Object);
	void STATIC_ShowPlatformSpecificLeaderboardScreen(const struct FString& CategoryName);
	void STATIC_ShowPlatformSpecificAchievementsScreen(class AEngine_PlayerController* SpecificPlayer);
	void STATIC_ShowInterstitialAd();
	void STATIC_ShowAdBanner(int AdIdIndex, bool bShowOnBottomOfScreen);
	void STATIC_SetWindowTitle(const struct FText& Title);
	void STATIC_SetVolumeButtonsHandledBySystem(bool bEnabled);
	void STATIC_SetVectorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FVector& Value);
	void STATIC_SetUserActivity(const struct FEngine_UserActivity& UserActivity);
	void STATIC_SetTransformPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FTransform& Value);
	void STATIC_SetTextPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FText& Value);
	void STATIC_SetSuppressViewportTransitionMessage(class UObject* WorldContextObject, bool bState);
	void STATIC_SetStructurePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FEngine_GenericStruct& Value);
	void STATIC_SetStringPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FString& Value);
	void STATIC_SetSoftObjectPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void STATIC_SetSoftClassPropertyByName(class UObject* Object, const struct FName& PropertyName);
	void STATIC_SetRotatorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FRotator& Value);
	void STATIC_SetObjectPropertyByName(class UObject* Object, const struct FName& PropertyName, class UObject* Value);
	void STATIC_SetNamePropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FName& Value);
	void STATIC_SetLinearColorPropertyByName(class UObject* Object, const struct FName& PropertyName, const struct FLinearColor& Value);
	void STATIC_SetIntPropertyByName(class UObject* Object, const struct FName& PropertyName, int Value);
	void STATIC_SetInterfacePropertyByName(class UObject* Object, const struct FName& PropertyName, const TScriptInterface<class UInterface>& Value);
	void STATIC_SetInt64PropertyByName(class UObject* Object, const struct FName& PropertyName, int64_t Value);
	void STATIC_SetFloatPropertyByName(class UObject* Object, const struct FName& PropertyName, float Value);
	void STATIC_SetCollisionProfileNameProperty(class UObject* Object, const struct FName& PropertyName, const struct FEngine_CollisionProfileName& Value);
	void STATIC_SetClassPropertyByName(class UObject* Object, const struct FName& PropertyName, class UClass* Value);
	void STATIC_SetBytePropertyByName(class UObject* Object, const struct FName& PropertyName, unsigned char Value);
	void STATIC_SetBoolPropertyByName(class UObject* Object, const struct FName& PropertyName, bool Value);
	void STATIC_RetriggerableDelay(class UObject* WorldContextObject, float Duration, const struct FEngine_LatentActionInfo& LatentInfo);
	void STATIC_ResetGamepadAssignmentToController(int ControllerId);
	void STATIC_ResetGamepadAssignments();
	void STATIC_RegisterForRemoteNotifications();
	void STATIC_QuitGame(class UObject* WorldContextObject, class AEngine_PlayerController* SpecificPlayer, TEnumAsByte<FEngine_Engine_EQuitPreference> QuitPreference, bool bIgnorePlatformRestrictions);
	void STATIC_PrintWarning(const struct FString& inString);
	void STATIC_PrintText(class UObject* WorldContextObject, const struct FText& InText, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void STATIC_PrintString(class UObject* WorldContextObject, const struct FString& inString, bool bPrintToScreen, bool bPrintToLog, const struct FLinearColor& TextColor, float Duration);
	void OnAssetLoaded__DelegateSignature(class UObject* Loaded);
	void OnAssetClassLoaded__DelegateSignature(class UClass* Loaded);
	bool STATIC_NotEqual_SoftObjectReference();
	bool STATIC_NotEqual_SoftClassReference();
	bool STATIC_NotEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool STATIC_NotEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	struct FString STATIC_NormalizeFilename(const struct FString& InFilename);
	void STATIC_MoveComponentTo(class UEngine_SceneComponent* Component, const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, bool bEaseOut, bool bEaseIn, float OverTime, bool bForceShortestRotationPath, TEnumAsByte<FEngine_Engine_EMoveComponentAction> MoveAction, const struct FEngine_LatentActionInfo& LatentInfo);
	struct FSoftObjectPath STATIC_MakeSoftObjectPath(const struct FString& PathString);
	struct FSoftClassPath STATIC_MakeSoftClassPath(const struct FString& PathString);
	struct FText STATIC_MakeLiteralText(const struct FText& Value);
	struct FString STATIC_MakeLiteralString(const struct FString& Value);
	struct FName STATIC_MakeLiteralName(const struct FName& Value);
	int STATIC_MakeLiteralInt(int Value);
	float STATIC_MakeLiteralFloat(float Value);
	unsigned char STATIC_MakeLiteralByte(unsigned char Value);
	bool STATIC_MakeLiteralBool(bool Value);
	void STATIC_LoadInterstitialAd(int AdIdIndex);
	class UClass* STATIC_LoadClassAsset_Blocking();
	void STATIC_LoadAssetClass(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FEngine_LatentActionInfo& LatentInfo);
	class UObject* STATIC_LoadAsset_Blocking();
	void STATIC_LoadAsset(class UObject* WorldContextObject, const struct FScriptDelegate& OnLoaded, const struct FEngine_LatentActionInfo& LatentInfo);
	bool STATIC_LineTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_LineTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_LineTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_LineTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_LineTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_LineTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	void STATIC_LaunchURL(const struct FString& URL);
	void STATIC_K2_UnPauseTimerHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	void STATIC_K2_UnPauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_UnPauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_TimerExistsHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	bool STATIC_K2_TimerExistsDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_TimerExists(class UObject* Object, const struct FString& FunctionName);
	struct FEngine_TimerHandle STATIC_K2_SetTimerDelegate(const struct FScriptDelegate& Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	struct FEngine_TimerHandle STATIC_K2_SetTimer(class UObject* Object, const struct FString& FunctionName, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance);
	void STATIC_K2_PauseTimerHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	void STATIC_K2_PauseTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_PauseTimer(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsValidTimerHandle(const struct FEngine_TimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	bool STATIC_K2_IsTimerPausedDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerPaused(class UObject* Object, const struct FString& FunctionName);
	bool STATIC_K2_IsTimerActiveHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	bool STATIC_K2_IsTimerActiveDelegate(const struct FScriptDelegate& Delegate);
	bool STATIC_K2_IsTimerActive(class UObject* Object, const struct FString& FunctionName);
	struct FEngine_TimerHandle STATIC_K2_InvalidateTimerHandle(struct FEngine_TimerHandle* Handle);
	float STATIC_K2_GetTimerRemainingTimeHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	float STATIC_K2_GetTimerRemainingTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerRemainingTime(class UObject* Object, const struct FString& FunctionName);
	float STATIC_K2_GetTimerElapsedTimeHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	float STATIC_K2_GetTimerElapsedTimeDelegate(const struct FScriptDelegate& Delegate);
	float STATIC_K2_GetTimerElapsedTime(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearTimerHandle(class UObject* WorldContextObject, const struct FEngine_TimerHandle& Handle);
	void STATIC_K2_ClearTimerDelegate(const struct FScriptDelegate& Delegate);
	void STATIC_K2_ClearTimer(class UObject* Object, const struct FString& FunctionName);
	void STATIC_K2_ClearAndInvalidateTimerHandle(class UObject* WorldContextObject, struct FEngine_TimerHandle* Handle);
	bool STATIC_IsValidSoftObjectReference();
	bool STATIC_IsValidSoftClassReference();
	bool STATIC_IsValidPrimaryAssetType(const struct FPrimaryAssetType& PrimaryAssetType);
	bool STATIC_IsValidPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	bool STATIC_IsValidClass(class UClass* Class);
	bool STATIC_IsValid(class UObject* Object);
	bool STATIC_IsUnattended();
	bool STATIC_IsStandalone(class UObject* WorldContextObject);
	bool STATIC_IsServer(class UObject* WorldContextObject);
	bool STATIC_IsScreensaverEnabled();
	bool STATIC_IsPackagedForDistribution();
	bool STATIC_IsLoggedIn(class AEngine_PlayerController* SpecificPlayer);
	bool STATIC_IsInterstitialAdRequested();
	bool STATIC_IsInterstitialAdAvailable();
	bool STATIC_IsDedicatedServer(class UObject* WorldContextObject);
	bool STATIC_IsControllerAssignedToGamepad(int ControllerId);
	void STATIC_HideAdBanner();
	bool STATIC_GetVolumeButtonsHandledBySystem();
	struct FString STATIC_GetUniqueDeviceId();
	bool STATIC_GetSupportedFullscreenResolutions(TArray<struct FIntPoint>* Resolutions);
	void STATIC_GetSoftObjectReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_GetSoftClassReferenceFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int STATIC_GetRenderingMaterialQualityLevel();
	int STATIC_GetRenderingDetailMode();
	struct FString STATIC_GetProjectSavedDirectory();
	struct FString STATIC_GetProjectDirectory();
	struct FString STATIC_GetProjectContentDirectory();
	void STATIC_GetPrimaryAssetsWithBundleState(TArray<struct FName> RequiredBundles, TArray<struct FName> ExcludedBundles, TArray<struct FPrimaryAssetType> ValidTypes, bool bForceCurrentState, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	void STATIC_GetPrimaryAssetIdList(const struct FPrimaryAssetType& PrimaryAssetType, TArray<struct FPrimaryAssetId>* OutPrimaryAssetIdList);
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftObjectReference();
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromSoftClassReference();
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromObject(class UObject* Object);
	struct FPrimaryAssetId STATIC_GetPrimaryAssetIdFromClass(class UClass* Class);
	TArray<struct FString> STATIC_GetPreferredLanguages();
	struct FString STATIC_GetPlatformUserName();
	struct FString STATIC_GetPathName(class UObject* Object);
	class UObject* STATIC_GetOuterObject(class UObject* Object);
	struct FString STATIC_GetObjectName(class UObject* Object);
	class UObject* STATIC_GetObjectFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	int STATIC_GetMinYResolutionForUI();
	int STATIC_GetMinYResolutionFor3DView();
	struct FString STATIC_GetLocalCurrencySymbol();
	struct FString STATIC_GetLocalCurrencyCode();
	float STATIC_GetGameTimeInSeconds(class UObject* WorldContextObject);
	struct FString STATIC_GetGamepadControllerName(int ControllerId);
	struct FString STATIC_GetGameName();
	struct FString STATIC_GetGameBundleId();
	int64_t STATIC_GetFrameCount();
	struct FString STATIC_GetEngineVersion();
	struct FString STATIC_GetDisplayName(class UObject* Object);
	struct FString STATIC_GetDeviceId();
	struct FString STATIC_GetDefaultLocale();
	struct FString STATIC_GetDefaultLanguage();
	bool STATIC_GetCurrentBundleState(const struct FPrimaryAssetId& PrimaryAssetId, bool bForceCurrentState, TArray<struct FName>* OutBundles);
	bool STATIC_GetConvenientWindowedResolutions(TArray<struct FIntPoint>* Resolutions);
	int STATIC_GetConsoleVariableIntValue(const struct FString& VariableName);
	float STATIC_GetConsoleVariableFloatValue(const struct FString& VariableName);
	bool STATIC_GetConsoleVariableBoolValue(const struct FString& VariableName);
	void STATIC_GetComponentBounds(class UEngine_SceneComponent* Component, struct FVector* Origin, struct FVector* BoxExtent, float* SphereRadius);
	struct FString STATIC_GetCommandLine();
	class UClass* STATIC_GetClassFromPrimaryAssetId(const struct FPrimaryAssetId& PrimaryAssetId);
	struct FString STATIC_GetClassDisplayName(class UClass* Class);
	int STATIC_GetAdIDCount();
	void STATIC_GetActorListFromComponentList(TArray<class UEngine_PrimitiveComponent*> ComponentList, class UClass* ActorClassFilter, TArray<class AEngine_Actor*>* OutActorList);
	void STATIC_GetActorBounds(class AEngine_Actor* Actor, struct FVector* Origin, struct FVector* BoxExtent);
	void STATIC_ForceCloseAdBanner();
	void STATIC_FlushPersistentDebugLines(class UObject* WorldContextObject);
	void STATIC_FlushDebugStrings(class UObject* WorldContextObject);
	void STATIC_ExecuteConsoleCommand(class UObject* WorldContextObject, const struct FString& Command, class AEngine_PlayerController* SpecificPlayer);
	bool STATIC_EqualEqual_SoftObjectReference();
	bool STATIC_EqualEqual_SoftClassReference();
	bool STATIC_EqualEqual_PrimaryAssetType(const struct FPrimaryAssetType& A, const struct FPrimaryAssetType& B);
	bool STATIC_EqualEqual_PrimaryAssetId(const struct FPrimaryAssetId& A, const struct FPrimaryAssetId& B);
	int STATIC_EndTransaction();
	void STATIC_DrawDebugString(class UObject* WorldContextObject, const struct FVector& TextLocation, const struct FString& Text, class AEngine_Actor* TestBaseActor, const struct FLinearColor& TextColor, float Duration);
	void STATIC_DrawDebugSphere(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugPoint(class UObject* WorldContextObject, const struct FVector& Position, float Size, const struct FLinearColor& PointColor, float Duration);
	void STATIC_DrawDebugPlane(class UObject* WorldContextObject, const struct FPlane& PlaneCoordinates, const struct FVector& Location, float Size, const struct FLinearColor& PlaneColor, float Duration);
	void STATIC_DrawDebugLine(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugFrustum(class UObject* WorldContextObject, const struct FTransform& FrustumTransform, const struct FLinearColor& FrustumColor, float Duration, float Thickness);
	void STATIC_DrawDebugFloatHistoryTransform(class UObject* WorldContextObject, const struct FEngine_DebugFloatHistory& FloatHistory, const struct FTransform& DrawTransform, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugFloatHistoryLocation(class UObject* WorldContextObject, const struct FEngine_DebugFloatHistory& FloatHistory, const struct FVector& DrawLocation, const struct FVector2D& DrawSize, const struct FLinearColor& DrawColor, float Duration);
	void STATIC_DrawDebugCylinder(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, int Segments, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCoordinateSystem(class UObject* WorldContextObject, const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, float Duration, float Thickness);
	void STATIC_DrawDebugConeInDegrees(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCone(class UObject* WorldContextObject, const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCircle(class UObject* WorldContextObject, const struct FVector& Center, float Radius, int NumSegments, const struct FLinearColor& LineColor, float Duration, float Thickness, const struct FVector& YAxis, const struct FVector& ZAxis, bool bDrawAxis);
	void STATIC_DrawDebugCapsule(class UObject* WorldContextObject, const struct FVector& Center, float HalfHeight, float Radius, const struct FRotator& Rotation, const struct FLinearColor& LineColor, float Duration, float Thickness);
	void STATIC_DrawDebugCamera(class AEngine_CameraActor* CameraActor, const struct FLinearColor& CameraColor, float Duration);
	void STATIC_DrawDebugBox(class UObject* WorldContextObject, const struct FVector& Center, const struct FVector& Extent, const struct FLinearColor& LineColor, const struct FRotator& Rotation, float Duration, float Thickness);
	void STATIC_DrawDebugArrow(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, float ArrowSize, const struct FLinearColor& LineColor, float Duration, float Thickness);
	bool STATIC_DoesImplementInterface(class UObject* TestObject, class UClass* Interface);
	void STATIC_Delay(class UObject* WorldContextObject, float Duration, const struct FEngine_LatentActionInfo& LatentInfo);
	void STATIC_CreateCopyForUndoBuffer(class UObject* ObjectToModify);
	struct FString STATIC_ConvertToRelativePath(const struct FString& Filename);
	struct FString STATIC_ConvertToAbsolutePath(const struct FString& Filename);
	void STATIC_Conv_SoftObjPathToSoftObjRef(const struct FSoftObjectPath& SoftObjectPath);
	struct FString STATIC_Conv_SoftObjectReferenceToString();
	class UObject* STATIC_Conv_SoftObjectReferenceToObject();
	struct FString STATIC_Conv_SoftClassReferenceToString();
	class UClass* STATIC_Conv_SoftClassReferenceToClass();
	void STATIC_Conv_SoftClassPathToSoftClassRef(const struct FSoftClassPath& SoftClassPath);
	struct FString STATIC_Conv_PrimaryAssetTypeToString(const struct FPrimaryAssetType& PrimaryAssetType);
	struct FString STATIC_Conv_PrimaryAssetIdToString(const struct FPrimaryAssetId& PrimaryAssetId);
	void STATIC_Conv_ObjectToSoftObjectReference(class UObject* Object);
	class UObject* STATIC_Conv_InterfaceToObject(const TScriptInterface<class UInterface>& Interface);
	void STATIC_Conv_ClassToSoftClassReference(class UClass* Class);
	void STATIC_ControlScreensaver(bool bAllowScreenSaver);
	bool STATIC_ComponentOverlapComponents(class UEngine_PrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class UEngine_PrimitiveComponent*>* OutComponents);
	bool STATIC_ComponentOverlapActors(class UEngine_PrimitiveComponent* Component, const struct FTransform& ComponentTransform, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class AEngine_Actor*>* OutActors);
	void STATIC_CollectGarbage();
	bool STATIC_CapsuleTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_CapsuleTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_CapsuleTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_CapsuleTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_CapsuleTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_CapsuleTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_CapsuleOverlapComponents(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class UEngine_PrimitiveComponent*>* OutComponents);
	bool STATIC_CapsuleOverlapActors(class UObject* WorldContextObject, const struct FVector& CapsulePos, float Radius, float HalfHeight, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class AEngine_Actor*>* OutActors);
	bool STATIC_CanLaunchURL(const struct FString& URL);
	void STATIC_CancelTransaction(int Index);
	void STATIC_BreakSoftObjectPath(const struct FSoftObjectPath& InSoftObjectPath, struct FString* PathString);
	void STATIC_BreakSoftClassPath(const struct FSoftClassPath& InSoftClassPath, struct FString* PathString);
	bool STATIC_BoxTraceSingleForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_BoxTraceSingleByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_BoxTraceSingle(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, struct FEngine_HitResult* OutHit);
	bool STATIC_BoxTraceMultiForObjects(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_BoxTraceMultiByProfile(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, const struct FName& ProfileName, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_BoxTraceMulti(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, TEnumAsByte<FEngine_Engine_ETraceTypeQuery> TraceChannel, bool bTraceComplex, TArray<class AEngine_Actor*> ActorsToIgnore, TEnumAsByte<FEngine_Engine_EDrawDebugTrace> DrawDebugType, bool bIgnoreSelf, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, float DrawTime, TArray<struct FEngine_HitResult>* OutHits);
	bool STATIC_BoxOverlapComponents(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& Extent, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ComponentClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class UEngine_PrimitiveComponent*>* OutComponents);
	bool STATIC_BoxOverlapActors(class UObject* WorldContextObject, const struct FVector& BoxPos, const struct FVector& BoxExtent, TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypes, class UClass* ActorClassFilter, TArray<class AEngine_Actor*> ActorsToIgnore, TArray<class AEngine_Actor*>* OutActors);
	int STATIC_BeginTransaction(const struct FString& Context, const struct FText& Description, class UObject* PrimaryObject);
	struct FEngine_DebugFloatHistory STATIC_AddFloatHistorySample(float Value, const struct FEngine_DebugFloatHistory& FloatHistory);
};


// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetTextLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetTextLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetTextLibrary");
		return ptr;
	}


	struct FText STATIC_TextTrimTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPrecedingAndTrailing(const struct FText& InText);
	struct FText STATIC_TextTrimPreceding(const struct FText& InText);
	struct FText STATIC_TextToUpper(const struct FText& InText);
	struct FText STATIC_TextToLower(const struct FText& InText);
	bool STATIC_TextIsTransient(const struct FText& InText);
	bool STATIC_TextIsFromStringTable(const struct FText& Text);
	bool STATIC_TextIsEmpty(const struct FText& InText);
	bool STATIC_TextIsCultureInvariant(const struct FText& InText);
	struct FText STATIC_TextFromStringTable(const struct FName& TableId, const struct FString& Key);
	bool STATIC_StringTableIdAndKeyFromText(const struct FText& Text, struct FName* OutTableId, struct FString* OutKey);
	struct FText STATIC_PolyglotDataToText(const struct FPolyglotTextData& PolyglotData);
	bool STATIC_NotEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_NotEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	void STATIC_IsPolyglotDataValid(const struct FPolyglotTextData& PolyglotData, bool* IsValid, struct FText* ErrorMessage);
	struct FText STATIC_GetEmptyText();
	struct FText STATIC_Format(const struct FText& InPattern, TArray<struct FEngine_FormatArgumentData> InArgs);
	bool STATIC_FindTextInLocalizationTable(const struct FString& Namespace, const struct FString& Key, struct FText* OutText);
	bool STATIC_EqualEqual_TextText(const struct FText& A, const struct FText& B);
	bool STATIC_EqualEqual_IgnoreCase_TextText(const struct FText& A, const struct FText& B);
	struct FText STATIC_Conv_VectorToText(const struct FVector& InVec);
	struct FText STATIC_Conv_Vector2dToText(const struct FVector2D& InVec);
	struct FText STATIC_Conv_TransformToText(const struct FTransform& InTrans);
	struct FString STATIC_Conv_TextToString(const struct FText& InText);
	struct FText STATIC_Conv_StringToText(const struct FString& inString);
	struct FText STATIC_Conv_RotatorToText(const struct FRotator& InRot);
	struct FText STATIC_Conv_ObjectToText(class UObject* InObj);
	struct FText STATIC_Conv_NameToText(const struct FName& InName);
	struct FText STATIC_Conv_IntToText(int Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_Int64ToText(int64_t Value, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits);
	struct FText STATIC_Conv_FloatToText(float Value, TEnumAsByte<FEngine_Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_Conv_ColorToText(const struct FLinearColor& InColor);
	struct FText STATIC_Conv_ByteToText(unsigned char Value);
	struct FText STATIC_Conv_BoolToText(bool InBool);
	struct FText STATIC_AsTimeZoneTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDateTime_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimeZoneDate_DateTime(const struct FDateTime& InDateTime, const struct FString& InTimeZone);
	struct FText STATIC_AsTimespan_Timespan(const struct FTimespan& InTimespan);
	struct FText STATIC_AsTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsPercent_Float(float Value, TEnumAsByte<FEngine_Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits);
	struct FText STATIC_AsDateTime_DateTime(const struct FDateTime& In);
	struct FText STATIC_AsDate_DateTime(const struct FDateTime& InDateTime);
	struct FText STATIC_AsCurrencyBase(int BaseValue, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Integer(int Value, TEnumAsByte<FEngine_Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
	struct FText STATIC_AsCurrency_Float(float Value, TEnumAsByte<FEngine_Engine_ERoundingMode> RoundingMode, bool bAlwaysSign, bool bUseGrouping, int MinimumIntegralDigits, int MaximumIntegralDigits, int MinimumFractionalDigits, int MaximumFractionalDigits, const struct FString& CurrencyCode);
};


// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
class UEngine_Layer : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsVisible : 1;                                           // 0x0030(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<struct FEngine_LayerActorStats>             ActorStats;                                               // 0x0038(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Layer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Layer");
		return ptr;
	}

};


// Class Engine.Level
// 0x0258 (0x0280 - 0x0028)
class UEngine_Level : public UObject
{
public:
	unsigned char                                      UnknownData00[0x90];                                      // 0x0028(0x0090) MISSED OFFSET
	class UEngine_World*                               OwningWorld;                                              // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_Model*                               Model;                                                    // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_ModelComponent*>              ModelComponents;                                          // 0x00C8(0x0010) (ExportObject, ZeroConstructor)
	class UEngine_LevelActorContainer*                 ActorCluster;                                             // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                NumTextureStreamingUnbuiltComponents;                     // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                NumTextureStreamingDirtyResources;                        // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData)
	class AEngine_LevelScriptActor*                    LevelScriptActor;                                         // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_NavigationObjectBase*                NavListStart;                                             // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_NavigationObjectBase*                NavListEnd;                                               // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_NavigationDataChunk*>         NavDataChunks;                                            // 0x0100(0x0010) (ZeroConstructor)
	float                                              LightmapTotalSize;                                        // 0x0110(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              ShadowmapTotalSize;                                       // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FVector>                             StaticNavigableGeometry;                                  // 0x0118(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               StreamingTextureGuids;                                    // 0x0128(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x98];                                      // 0x0138(0x0098) MISSED OFFSET
	struct FGuid                                       LevelBuildDataId;                                         // 0x01D0(0x0010) (ZeroConstructor, IsPlainOldData)
	class UEngine_MapBuildDataRegistry*                MapBuildData;                                             // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FIntVector                                  LightBuildLevelOffset;                                    // 0x01E8(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsLightingScenario : 1;                                  // 0x01F4(0x0001)
	unsigned char                                      UnknownData02 : 2;                                        // 0x01F4(0x0001)
	unsigned char                                      bTextureStreamingRotationChanged : 1;                     // 0x01F4(0x0001)
	unsigned char                                      bStaticComponentsRegisteredInStreamingManager : 1;        // 0x01F4(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsVisible : 1;                                           // 0x01F4(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x4B];                                      // 0x01F5(0x004B) MISSED OFFSET
	class AEngine_WorldSettings*                       WorldSettings;                                            // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0248(0x0008) MISSED OFFSET
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0250(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0260(0x0010) MISSED OFFSET
	TArray<struct FEngine_ReplicatedStaticActorDestructionInfo> DestroyedReplicatedStaticActors;                          // 0x0270(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.LevelActorContainer
// 0x0010 (0x0038 - 0x0028)
class UEngine_LevelActorContainer : public UObject
{
public:
	TArray<class AEngine_Actor*>                       Actors;                                                   // 0x0028(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelActorContainer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelActorContainer");
		return ptr;
	}

};


// Class Engine.LevelBounds
// 0x0008 (0x0220 - 0x0218)
class AEngine_LevelBounds : public AEngine_Actor
{
public:
	bool                                               bAutoUpdateBounds;                                        // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0219(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBounds");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelBounds");
		return ptr;
	}

};


// Class Engine.LevelScriptBlueprint
// 0x0000 (0x00A0 - 0x00A0)
class UEngine_LevelScriptBlueprint : public UEngine_Blueprint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelScriptBlueprint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelScriptBlueprint");
		return ptr;
	}

};


// Class Engine.World
// 0x06C0 (0x06E8 - 0x0028)
class UEngine_World : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UEngine_Level*                               PersistentLevel;                                          // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_NetDriver*                           NetDriver;                                                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_LineBatchComponent*                  LineBatcher;                                              // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UEngine_LineBatchComponent*                  PersistentLineBatcher;                                    // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UEngine_LineBatchComponent*                  ForegroundLineBatcher;                                    // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class AEngine_GameNetworkManager*                  NetworkManager;                                           // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_PhysicsCollisionHandler*             PhysicsCollisionHandler;                                  // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UObject*>                             ExtraReferencedObjects;                                   // 0x0068(0x0010) (ZeroConstructor, Transient)
	TArray<class UObject*>                             PerModuleDataObjects;                                     // 0x0078(0x0010) (ZeroConstructor, Transient)
	TArray<class AEngine_Actor*>                       LevelSequenceActors;                                      // 0x0088(0x0010) (ZeroConstructor, Transient)
	TArray<class UEngine_LevelStreaming*>              StreamingLevels;                                          // 0x0098(0x0010) (ZeroConstructor, Transient)
	struct FEngine_StreamingLevelsToConsider           StreamingLevelsToConsider;                                // 0x00A8(0x0028) (Transient, DuplicateTransient)
	struct FString                                     StreamingLevelsPrefix;                                    // 0x00D0(0x0010) (ZeroConstructor)
	class UEngine_Level*                               CurrentLevelPendingVisibility;                            // 0x00E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_Level*                               CurrentLevelPendingInvisibility;                          // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_DemoNetDriver*                       DemoNetDriver;                                            // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_ParticleEventManager*                MyParticleEventManager;                                   // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData)
	class AEngine_PhysicsVolume*                       DefaultPhysicsVolume;                                     // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1D];                                      // 0x0108(0x001D) MISSED OFFSET
	unsigned char                                      UnknownData02 : 3;                                        // 0x0125(0x0001)
	unsigned char                                      bAreConstraintsDirty : 1;                                 // 0x0125(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	class UEngine_NavigationSystemBase*                NavigationSystem;                                         // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_GameModeBase*                        AuthorityGameMode;                                        // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class AEngine_GameStateBase*                       GameState;                                                // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_AISystemBase*                        AISystem;                                                 // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_AvoidanceManager*                    AvoidanceManager;                                         // 0x0148(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UEngine_Level*>                       Levels;                                                   // 0x0150(0x0010) (ZeroConstructor, Transient)
	TArray<struct FEngine_LevelCollection>             LevelCollections;                                         // 0x0160(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0170(0x0008) MISSED OFFSET
	class UEngine_GameInstance*                        OwningGameInstance;                                       // 0x0178(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	TArray<class UEngine_MaterialParameterCollectionInstance*> ParameterCollectionInstances;                             // 0x0180(0x0010) (ZeroConstructor, Transient)
	class UEngine_Canvas*                              CanvasForRenderingToTarget;                               // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_Canvas*                              CanvasForDrawMaterialToRenderTarget;                      // 0x0198(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData05[0x50];                                      // 0x01A0(0x0050) MISSED OFFSET
	TArray<class UEngine_ActorComponent*>              ComponentsThatNeedEndOfFrameUpdate;                       // 0x01F0(0x0010) (ExportObject, ZeroConstructor, Transient)
	TArray<class UEngine_ActorComponent*>              ComponentsThatNeedEndOfFrameUpdate_OnGameThread;          // 0x0200(0x0010) (ExportObject, ZeroConstructor, Transient)
	unsigned char                                      UnknownData06[0x340];                                     // 0x0210(0x0340) MISSED OFFSET
	class UEngine_WorldComposition*                    WorldComposition;                                         // 0x0550(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData07[0x70];                                      // 0x0558(0x0070) MISSED OFFSET
	struct FEngine_WorldPSCPool                        PSCPool;                                                  // 0x05C8(0x0058)
	unsigned char                                      UnknownData08[0xC8];                                      // 0x0620(0x00C8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.World");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}


	class AEngine_WorldSettings* K2_GetWorldSettings();
	void HandleTimelineScrubbed();
};


// Class Engine.LevelStreaming
// 0x0128 (0x0150 - 0x0028)
class UEngine_LevelStreaming : public UObject
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0028(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Engine.LevelStreaming.WorldAsset
	struct FName                                       PackageNameToLoad;                                        // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               LODPackageNames;                                          // 0x0058(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0068(0x0018) MISSED OFFSET
	struct FTransform                                  LevelTransform;                                           // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData)
	int                                                LevelLODIndex;                                            // 0x00B0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData)
	int                                                StreamingPriority;                                        // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00B8(0x0002) MISSED OFFSET
	unsigned char                                      UnknownData03 : 3;                                        // 0x00BA(0x0001)
	unsigned char                                      bShouldBeVisible : 1;                                     // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBeLoaded : 1;                                      // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bLocked : 1;                                              // 0x00BA(0x0001)
	unsigned char                                      bIsStatic : 1;                                            // 0x00BA(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bShouldBlockOnLoad : 1;                                   // 0x00BA(0x0001) (BlueprintVisible)
	unsigned char                                      bShouldBlockOnUnload : 1;                                 // 0x00BB(0x0001) (BlueprintVisible)
	unsigned char                                      bDisableDistanceStreaming : 1;                            // 0x00BB(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bDrawOnLevelStatusMap : 1;                                // 0x00BB(0x0001) (Edit)
	struct FLinearColor                                LevelColor;                                               // 0x00BC(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	TArray<class AEngine_LevelStreamingVolume*>        EditorStreamingVolumes;                                   // 0x00D0(0x0010) (Edit, ZeroConstructor)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnLevelLoaded;                                            // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelUnloaded;                                          // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelShown;                                             // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnLevelHidden;                                            // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	class UEngine_Level*                               LoadedLevel;                                              // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_Level*                               PendingUnloadLevel;                                       // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData06[0x18];                                      // 0x0138(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreaming");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}


	bool ShouldBeLoaded();
	void SetShouldBeVisible(bool bInShouldBeVisible);
	void SetShouldBeLoaded(bool bInShouldBeLoaded);
	void SetPriority(int NewPriority);
	void SetLevelLODIndex(int LODIndex);
	bool IsStreamingStatePending();
	bool IsLevelVisible();
	bool IsLevelLoaded();
	struct FName GetWorldAssetPackageFName();
	class UEngine_Level* GetLoadedLevel();
	class AEngine_LevelScriptActor* GetLevelScriptActor();
	class UEngine_LevelStreaming* CreateInstance(const struct FString& UniqueInstanceName);
};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0000 (0x0150 - 0x0150)
class UEngine_LevelStreamingAlwaysLoaded : public UEngine_LevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}

};


// Class Engine.LevelStreamingDynamic
// 0x0000 (0x0150 - 0x0150)
class UEngine_LevelStreamingDynamic : public UEngine_LevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingDynamic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelStreamingDynamic");
		return ptr;
	}


	class UEngine_LevelStreamingDynamic* STATIC_LoadLevelInstanceBySoftObjectPtr(class UObject* WorldContextObject, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess);
	class UEngine_LevelStreamingDynamic* STATIC_LoadLevelInstance(class UObject* WorldContextObject, const struct FString& LevelName, const struct FVector& Location, const struct FRotator& Rotation, bool* bOutSuccess);
};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x0150 - 0x0150)
class UEngine_LevelStreamingPersistent : public UEngine_LevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0268 - 0x0250)
class AEngine_LevelStreamingVolume : public AEngine_Volume
{
public:
	TArray<struct FName>                               StreamingLevelNames;                                      // 0x0250(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	unsigned char                                      bEditorPreVisOnly : 1;                                    // 0x0260(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisabled : 1;                                            // 0x0260(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EStreamingVolumeUsage>  StreamingUsage;                                           // 0x0264(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0265(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
class UEngine_LightmappedSurfaceCollection : public UObject
{
public:
	class UEngine_Model*                               SourceModel;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<int>                                        Surfaces;                                                 // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}

};


// Class Engine.LightMapTexture2D
// 0x0008 (0x0108 - 0x0100)
class UEngine_LightMapTexture2D : public UEngine_Texture2D
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}

};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_LightmassCharacterIndirectDetailVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_LightmassImportanceVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}

};


// Class Engine.LightmassPortal
// 0x0008 (0x0220 - 0x0218)
class AEngine_LightmassPortal : public AEngine_Actor
{
public:
	class UEngine_LightmassPortalComponent*            PortalComponent;                                          // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPortal");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmassPortal");
		return ptr;
	}

};


// Class Engine.LightmassPortalComponent
// 0x0010 (0x0200 - 0x01F0)
class UEngine_LightmassPortalComponent : public UEngine_SceneComponent
{
public:
	class UEngine_BoxComponent*                        PreviewBox;                                               // 0x01F0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01F8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPortalComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmassPortalComponent");
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
class UEngine_LightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FEngine_LightmassPrimitiveSettings          LightmassSettings;                                        // 0x0028(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0040 (0x0420 - 0x03E0)
class UEngine_LineBatchComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x40];                                      // 0x03E0(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}

};


// Class Engine.LocalLightComponent
// 0x0010 (0x0350 - 0x0340)
class UEngine_LocalLightComponent : public UEngine_LightComponent
{
public:
	float                                              AttenuationRadius;                                        // 0x0340(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_LightmassPointLightSettings         LightmassSettings;                                        // 0x0344(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LocalLightComponent");
		return ptr;
	}


	void SetIntensityUnits(FEngine_Engine_ELightUnits NewIntensityUnits);
	void SetAttenuationRadius(float NewRadius);
	float STATIC_GetUnitsConversionFactor(FEngine_Engine_ELightUnits SrcUnits, FEngine_Engine_ELightUnits TargetUnits, float CosHalfConeAngle);
};


// Class Engine.LocalPlayer
// 0x07D8 (0x0820 - 0x0048)
class UEngine_LocalPlayer : public UEngine_Player
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0048(0x0028) MISSED OFFSET
	class UEngine_GameViewportClient*                  ViewportClient;                                           // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1C];                                      // 0x0078(0x001C) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAspectRatioAxisConstraint> AspectRatioAxisConstraint;                                // 0x0094(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	class UClass*                                      PendingLevelPlayerControllerClass;                        // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSentSplitJoin : 1;                                       // 0x00A0(0x0001) (Edit, Transient, EditConst)
	unsigned char                                      UnknownData03[0x17];                                      // 0x00A1(0x0017) MISSED OFFSET
	int                                                ControllerId;                                             // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x764];                                     // 0x00BC(0x0764) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}

};


// Class Engine.LocalPlayerSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngine_LocalPlayerSubsystem : public UEngine_Subsystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayerSubsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LocalPlayerSubsystem");
		return ptr;
	}

};


// Class Engine.LODActor
// 0x0088 (0x02A0 - 0x0218)
class AEngine_LODActor : public AEngine_Actor
{
public:
	class UEngine_StaticMeshComponent*                 StaticMeshComponent;                                      // 0x0218(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TMap<class UEngine_MaterialInterface*, class UEngine_InstancedStaticMeshComponent*> ImpostersStaticMeshComponents;                            // 0x0220(0x0050) (Edit, ExportObject, ZeroConstructor, EditConst)
	class UEngine_HLODProxy*                           Proxy;                                                    // 0x0270(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       Key;                                                      // 0x0278(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	float                                              LODDrawDistance;                                          // 0x0280(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                LODLevel;                                                 // 0x0284(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<class AEngine_Actor*>                       SubActors;                                                // 0x0288(0x0010) (Edit, ZeroConstructor, EditConst)
	unsigned char                                      CachedNumHLODLevels;                                      // 0x0298(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0299(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LODActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LODActor");
		return ptr;
	}

};


// Class Engine.MapBuildDataRegistry
// 0x0210 (0x0238 - 0x0028)
class UEngine_MapBuildDataRegistry : public UObject
{
public:
	TEnumAsByte<FEngine_Engine_ELightingBuildQuality>  LevelLightingQuality;                                     // 0x0028(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x20F];                                     // 0x0029(0x020F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapBuildDataRegistry");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MapBuildDataRegistry");
		return ptr;
	}

};


// Class Engine.Material
// 0x0210 (0x0298 - 0x0088)
class UEngine_Material : public UEngine_MaterialInterface
{
public:
	class UEngine_PhysicalMaterial*                    PhysMaterial;                                             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ScalarMaterialInput                 Metallic;                                                 // 0x0090(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FEngine_ScalarMaterialInput                 Specular;                                                 // 0x00A4(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	struct FEngine_VectorMaterialInput                 Normal;                                                   // 0x00B8(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C4(0x0008) MISSED OFFSET
	struct FEngine_ColorMaterialInput                  EmissiveColor;                                            // 0x00CC(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EMaterialDomain>        MaterialDomain;                                           // 0x00E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EBlendMode>             BlendMode;                                                // 0x00E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDecalBlendMode>        DecalBlendMode;                                           // 0x00E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialDecalResponse> MaterialDecalResponse;                                    // 0x00E3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialShadingModel>  ShadingModel;                                             // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCastDynamicShadowAsMasked : 1;                           // 0x00E5(0x0001) (Edit)
	struct FEngine_MaterialShadingModelField           ShadingModels;                                            // 0x00E6(0x0002)
	float                                              OpacityMaskClipValue;                                     // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_VectorMaterialInput                 WorldPositionOffset;                                      // 0x00EC(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00F8(0x0008) MISSED OFFSET
	struct FEngine_ScalarMaterialInput                 Refraction;                                               // 0x0100(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x010C(0x0008) MISSED OFFSET
	struct FEngine_MaterialAttributesInput             MaterialAttributes;                                       // 0x0114(0x0010)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0124(0x0008) MISSED OFFSET
	struct FEngine_ScalarMaterialInput                 PixelDepthOffset;                                         // 0x012C(0x000C)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0138(0x0008) MISSED OFFSET
	struct FEngine_ShadingModelMaterialInput           ShadingModelFromMaterialExpression;                       // 0x0140(0x000C) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x8];                                       // 0x014C(0x0008) MISSED OFFSET
	unsigned char                                      bEnableSeparateTranslucency : 1;                          // 0x0154(0x0001) (Edit)
	unsigned char                                      bEnableResponsiveAA : 1;                                  // 0x0154(0x0001) (Edit)
	unsigned char                                      bScreenSpaceReflections : 1;                              // 0x0154(0x0001) (Edit)
	unsigned char                                      bContactShadows : 1;                                      // 0x0154(0x0001) (Edit)
	unsigned char                                      TwoSided : 1;                                             // 0x0154(0x0001) (Edit)
	unsigned char                                      DitheredLODTransition : 1;                                // 0x0154(0x0001) (Edit)
	unsigned char                                      DitherOpacityMask : 1;                                    // 0x0154(0x0001) (Edit)
	unsigned char                                      bAllowNegativeEmissiveColor : 1;                          // 0x0154(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_ETranslucencyLightingMode> TranslucencyLightingMode;                                 // 0x0155(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableMobileSeparateTranslucency : 1;                    // 0x0156(0x0001) (Edit)
	unsigned char                                      UnknownData09[0x1];                                       // 0x0157(0x0001) MISSED OFFSET
	int                                                NumCustomizedUVs;                                         // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucencyDirectionalLightingIntensity;                 // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowDensityScale;                            // 0x0160(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowDensityScale;                        // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondDensityScale;                  // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentSelfShadowSecondOpacity;                       // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentBackscatteringExponent;                        // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                TranslucentMultipleScatteringExtinction;                  // 0x0174(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TranslucentShadowStartOffset;                             // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableDepthTest : 1;                                    // 0x0188(0x0001) (Edit)
	unsigned char                                      bWriteOnlyAlpha : 1;                                      // 0x0188(0x0001) (Edit)
	unsigned char                                      bGenerateSphericalParticleNormals : 1;                    // 0x0188(0x0001) (Edit)
	unsigned char                                      bTangentSpaceNormal : 1;                                  // 0x0188(0x0001) (Edit)
	unsigned char                                      bUseEmissiveForDynamicAreaLighting : 1;                   // 0x0188(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBlockGI : 1;                                             // 0x0188(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x0188(0x0001) (DuplicateTransient)
	unsigned char                                      bUsedWithSkeletalMesh : 1;                                // 0x0188(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithEditorCompositing : 1;                           // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithParticleSprites : 1;                             // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithBeamTrails : 1;                                  // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMeshParticles : 1;                               // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraSprites : 1;                              // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraRibbons : 1;                              // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithNiagaraMeshParticles : 1;                        // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCache : 1;                               // 0x0189(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithStaticLighting : 1;                              // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithMorphTargets : 1;                                // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithSplineMeshes : 1;                                // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithInstancedStaticMeshes : 1;                       // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithGeometryCollections : 1;                         // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsesDistortion : 1;                                      // 0x018A(0x0001)
	unsigned char                                      bUsedWithClothing : 1;                                    // 0x018A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData10[0x1];                                       // 0x018B(0x0001) MISSED OFFSET
	unsigned char                                      bUsedWithWater : 1;                                       // 0x018C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsedWithHairStrands : 1;                                 // 0x018C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData11[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	unsigned char                                      bUsedWithUI : 1;                                          // 0x0190(0x0001) (Deprecated)
	unsigned char                                      bAutomaticallySetUsageInEditor : 1;                       // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bFullyRough : 1;                                          // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseFullPrecision : 1;                                    // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseLightmapDirectionality : 1;                           // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUseHQForwardReflections : 1;                             // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bUsePlanarForwardReflections : 1;                         // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bNormalCurvatureToRoughness : 1;                          // 0x0190(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	TEnumAsByte<FEngine_Engine_EMaterialTessellationMode> D3D11TessellationMode;                                    // 0x0191(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableCrackFreeDisplacement : 1;                         // 0x0192(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bEnableAdaptiveTessellation : 1;                          // 0x0192(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      AllowTranslucentCustomDepthWrites : 1;                    // 0x0192(0x0001) (Edit)
	unsigned char                                      Wireframe : 1;                                            // 0x0192(0x0001) (Edit)
	unsigned char                                      bOutputVelocityOnBasePass : 1;                            // 0x0192(0x0001) (Edit)
	unsigned char                                      UnknownData12[0x5];                                       // 0x0193(0x0005) MISSED OFFSET
	TArray<class UEngine_MaterialExpression*>          Expressions;                                              // 0x0198(0x0010) (ZeroConstructor)
	TArray<struct FEngine_MaterialFunctionInfo>        MaterialFunctionInfos;                                    // 0x01A8(0x0010) (ZeroConstructor)
	TArray<struct FEngine_MaterialParameterCollectionInfo> MaterialParameterCollectionInfos;                         // 0x01B8(0x0010) (ZeroConstructor)
	unsigned char                                      bCanMaskedBeAssumedOpaque : 1;                            // 0x01C8(0x0001)
	unsigned char                                      bIsMasked : 1;                                            // 0x01C8(0x0001) (Deprecated)
	unsigned char                                      bIsPreviewMaterial : 1;                                   // 0x01C8(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsFunctionPreviewMaterial : 1;                           // 0x01C8(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bUseMaterialAttributes : 1;                               // 0x01C8(0x0001) (Edit)
	unsigned char                                      bCastRayTracedShadows : 1;                                // 0x01C8(0x0001) (Edit)
	unsigned char                                      bUseTranslucencyVertexFog : 1;                            // 0x01C8(0x0001) (Edit)
	unsigned char                                      bIsSky : 1;                                               // 0x01C8(0x0001) (Edit)
	unsigned char                                      bComputeFogPerPixel : 1;                                  // 0x01C9(0x0001) (Edit)
	unsigned char                                      bOutputTranslucentVelocity : 1;                           // 0x01C9(0x0001) (Edit)
	unsigned char                                      bAllowDevelopmentShaderCompile : 1;                       // 0x01C9(0x0001) (Transient, DuplicateTransient)
	unsigned char                                      bIsMaterialEditorStatsMaterial : 1;                       // 0x01C9(0x0001) (Transient, DuplicateTransient)
	TEnumAsByte<FEngine_Engine_EBlendableLocation>     BlendableLocation;                                        // 0x01CA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      BlendableOutputAlpha : 1;                                 // 0x01CB(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableStencilTest : 1;                                   // 0x01CB(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EMaterialStencilCompare> StencilCompare;                                           // 0x01CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      StencilRefValue;                                          // 0x01CD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERefractionMode>        RefractionMode;                                           // 0x01CE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData13[0x1];                                       // 0x01CF(0x0001) MISSED OFFSET
	int                                                BlendablePriority;                                        // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	uint32_t                                           UsageFlagWarnings;                                        // 0x01D4(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	float                                              RefractionDepthBias;                                      // 0x01D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       StateId;                                                  // 0x01DC(0x0010) (ZeroConstructor, IsPlainOldData)
	float                                              MaxDisplacement;                                          // 0x01EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData14[0x8];                                       // 0x01F0(0x0008) MISSED OFFSET
	TArray<bool>                                       CachedQualityLevelsUsed;                                  // 0x01F8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData15[0x80];                                      // 0x0208(0x0080) MISSED OFFSET
	TArray<class UObject*>                             ExpressionTextureReferences;                              // 0x0288(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}

};


// Class Engine.MaterialBillboardComponent
// 0x0010 (0x03F0 - 0x03E0)
class UEngine_MaterialBillboardComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialBillboardComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialBillboardComponent");
		return ptr;
	}


	void SetElements(TArray<struct FEngine_MaterialSpriteElement> NewElements);
	void AddElement(class UEngine_MaterialInterface* Material, class UEngine_CurveFloat* DistanceToOpacityCurve, bool bSizeIsInScreenSpace, float BaseSizeX, float BaseSizeY, class UEngine_CurveFloat* DistanceToSizeCurve);
};


// Class Engine.MaterialExpressionAbs
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionAbs : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorPositionWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionActorPositionWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionActorPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionAdd : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0008 (0x00F8 - 0x00F0)
class UEngine_MaterialExpressionAntialiasedTextureMask : public UEngine_MaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETextureColorChannel>   Channel;                                                  // 0x00F4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionAppendVector : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosine
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArccosine : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArccosine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArccosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArccosineFast
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArccosineFast : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArccosineFast");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArccosineFast");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsine
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArcsine : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArcsine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArcsine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArcsineFast
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArcsineFast : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArcsineFast");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArcsineFast");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArctangent : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionArctangent2 : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Y;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     X;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent2");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent2");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangent2Fast
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionArctangent2Fast : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Y;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     X;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent2Fast");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangent2Fast");
		return ptr;
	}

};


// Class Engine.MaterialExpressionArctangentFast
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionArctangentFast : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangentFast");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionArctangentFast");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionAtmosphericFogColor : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     WorldPosition;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericFogColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionAtmosphericLightColor : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionAtmosphericLightVector : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightVector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionAtmosphericLightVector");
		return ptr;
	}

};


// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_KismetGuidLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetGuidLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.KismetGuidLibrary");
		return ptr;
	}


	void STATIC_Parse_StringToGuid(const struct FString& GuidString, struct FGuid* OutGuid, bool* success);
	bool STATIC_NotEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FGuid STATIC_NewGuid();
	bool STATIC_IsValid_Guid(const struct FGuid& InGuid);
	void STATIC_Invalidate_Guid(struct FGuid* InGuid);
	bool STATIC_EqualEqual_GuidGuid(const struct FGuid& A, const struct FGuid& B);
	struct FString STATIC_Conv_GuidToString(const struct FGuid& InGuid);
};


// Class Engine.MaterialExpressionBlackBody
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionBlackBody : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Temp;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionBlackBody");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionBlendMaterialAttributes : public UEngine_MaterialExpression
{
public:
	struct FEngine_MaterialAttributesInput             A;                                                        // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FEngine_MaterialAttributesInput             B;                                                        // 0x0058(0x0010)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ALPHA;                                                    // 0x0070(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x007C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EMaterialAttributeBlend> PixelAttributeBlendType;                                  // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialAttributeBlend> VertexAttributeBlendType;                                 // 0x0085(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x0086(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBlendMaterialAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionBlendMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionBreakMaterialAttributes : public UEngine_MaterialExpression
{
public:
	struct FEngine_MaterialAttributesInput             MaterialAttributes;                                       // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionBreakMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionBumpOffset : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Height;                                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     HeightRatioInput;                                         // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              HeightRatio;                                              // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReferencePlane;                                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraPositionWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionCameraPositionWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVectorWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionCameraVectorWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVectorWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionCeil : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionParameter : public UEngine_MaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}

};


// Class Engine.InterpCurveEdSetup
// 0x0018 (0x0040 - 0x0028)
class UEngine_InterpCurveEdSetup : public UObject
{
public:
	TArray<struct FEngine_CurveEdTab>                  Tabs;                                                     // 0x0028(0x0010) (ZeroConstructor)
	int                                                ActiveTab;                                                // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0018 (0x0070 - 0x0058)
class UEngine_MaterialExpressionVectorParameter : public UEngine_MaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0018 (0x0088 - 0x0070)
class UEngine_MaterialExpressionChannelMaskParameter : public UEngine_MaterialExpressionVectorParameter
{
public:
	TEnumAsByte<FEngine_Engine_EChannelMaskParameterColor> MaskChannel;                                              // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0074(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionChannelMaskParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionChannelMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionClamp : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Min;                                                      // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Max;                                                      // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EClampMode>             ClampMode;                                                // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	float                                              MinDefault;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxDefault;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionClearCoatNormalCustomOutput : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClearCoatNormalCustomOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionClearCoatNormalCustomOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCollectionParameter
// 0x0020 (0x0060 - 0x0040)
class UEngine_MaterialExpressionCollectionParameter : public UEngine_MaterialExpression
{
public:
	class UEngine_MaterialParameterCollection*         Collection;                                               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       ParameterName;                                            // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ParameterId;                                              // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCollectionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionComment : public UEngine_MaterialExpression
{
public:
	int                                                SizeX;                                                    // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SizeY;                                                    // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     Text;                                                     // 0x0048(0x0010) (Edit, ZeroConstructor)
	struct FLinearColor                                CommentColor;                                             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontSize;                                                 // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionComponentMask : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	unsigned char                                      R : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      G : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      B : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      A : 1;                                                    // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionConstant : public UEngine_MaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionConstant2Vector : public UEngine_MaterialExpression
{
public:
	float                                              R;                                                        // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              G;                                                        // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x0010 (0x0050 - 0x0040)
class UEngine_MaterialExpressionConstant3Vector : public UEngine_MaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionCosine : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionCrossProduct : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0008 (0x0060 - 0x0058)
class UEngine_MaterialExpressionScalarParameter : public UEngine_MaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomPrimitiveData;                                  // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      PrimitiveDataIndex;                                       // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x0028 (0x0088 - 0x0060)
class UEngine_MaterialExpressionCurveAtlasRowParameter : public UEngine_MaterialExpressionScalarParameter
{
public:
	class UEngine_CurveLinearColor*                    Curve;                                                    // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_CurveLinearColorAtlas*               Atlas;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExpressionInput                     InputTime;                                                // 0x0070(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x007C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCurveAtlasRowParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCurveAtlasRowParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionCustom : public UEngine_MaterialExpression
{
public:
	struct FString                                     code;                                                     // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<FEngine_Engine_ECustomMaterialOutputType> OutputType;                                               // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0058(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_CustomInput>                 Inputs;                                                   // 0x0068(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDX
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDDX : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Value;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDDX");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDDX");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDDY
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDDY : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Value;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDDY");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDDY");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0020 (0x0060 - 0x0040)
class UEngine_MaterialExpressionConstantBiasScale : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Bias;                                                     // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Scale;                                                    // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionDecalLifetimeOpacity : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalLifetimeOpacity");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalLifetimeOpacity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0020 (0x0060 - 0x0040)
class UEngine_MaterialExpressionDecalMipmapLevel : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     TextureSize;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              ConstWidth;                                               // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstHeight;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalMipmapLevel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalMipmapLevel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeltaTime
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionDeltaTime : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDeltaTime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDeltaTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthFade
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionDepthFade : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     InOpacity;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     FadeDistance;                                             // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              OpacityDefault;                                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeDistanceDefault;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDepthOfFieldFunction : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EDepthOfFieldFunctionValue> FunctionValue;                                            // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FEngine_ExpressionInput                     Depth;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDeriveNormalZ : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     InXY;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionDesaturation : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Fraction;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FLinearColor                                LuminanceFactors;                                         // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDecalDerivative
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionDecalDerivative : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalDerivative");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDecalDerivative");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionDistance : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceCullFade
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionDistanceCullFade : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceCullFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0050 - 0x0040)
class UEngine_MaterialExpressionConstant4Vector : public UEngine_MaterialExpression
{
public:
	struct FLinearColor                                Constant;                                                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDistanceToNearestSurface : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceToNearestSurface");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionDivide : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionDotProduct : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionDynamicParameter : public UEngine_MaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	struct FLinearColor                                DefaultValue;                                             // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ParameterIndex;                                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionEyeAdaptation
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionEyeAdaptation : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionEyeAdaptation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x0068 (0x00A8 - 0x0040)
class UEngine_MaterialExpressionFeatureLevelSwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Inputs[0x4];                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x24];                                      // 0x0084(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFeatureLevelSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionFloor : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionFmod : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0010 (0x0050 - 0x0040)
class UEngine_MaterialExpressionFontSample : public UEngine_MaterialExpression
{
public:
	class UEngine_Font*                                Font;                                                     // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FontTexturePage;                                          // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x0070 - 0x0050)
class UEngine_MaterialExpressionFontSampleParameter : public UEngine_MaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionFrac : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionDistanceFieldGradient : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionDistanceFieldGradient");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x0080 (0x00C0 - 0x0040)
class UEngine_MaterialExpressionFunctionInput : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Preview;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FName                                       InputName;                                                // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0060(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       ID;                                                       // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EFunctionInputType>     InputType;                                                // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0081(0x000F) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsePreviewValueAsDefault : 1;                            // 0x00A0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                SortPriority;                                             // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCompilingFunctionPreview : 1;                            // 0x00A8(0x0001) (Transient)
	unsigned char                                      UnknownData04[0x17];                                      // 0x00A9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionFunctionOutput : public UEngine_MaterialExpression
{
public:
	struct FName                                       OutputName;                                               // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FString                                     Description;                                              // 0x0048(0x0010) (Edit, ZeroConstructor)
	int                                                SortPriority;                                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExpressionInput                     A;                                                        // 0x005C(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	unsigned char                                      bLastPreviewed : 1;                                       // 0x0070(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	struct FGuid                                       ID;                                                       // 0x0074(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0084(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionGetMaterialAttributes : public UEngine_MaterialExpression
{
public:
	struct FEngine_MaterialAttributesInput             MaterialAttributes;                                       // 0x0040(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	TArray<struct FGuid>                               AttributeGetTypes;                                        // 0x0058(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionGetMaterialAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionGetMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionGIReplace
// 0x0040 (0x0080 - 0x0040)
class UEngine_MaterialExpressionGIReplace : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     StaticIndirect;                                           // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     DynamicIndirect;                                          // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0074(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionGIReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionHairAttributes
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionHairAttributes : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionHairAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionHairAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x0070 (0x00B0 - 0x0040)
class UEngine_MaterialExpressionIf : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     AGreaterThanB;                                            // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     AEqualsB;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ALessThanB;                                               // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	float                                              EqualsThreshold;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAEqualsB;                                            // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionLightmapUVs : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionFresnel : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     ExponentIn;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Exponent;                                                 // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExpressionInput                     BaseReflectFractionIn;                                    // 0x0058(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	float                                              BaseReflectFraction;                                      // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExpressionInput                     Normal;                                                   // 0x0070(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x007C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionLightmassReplace : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     RealTime;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Lightmass;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionLightVector : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionLinearInterpolate : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ALPHA;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstAlpha;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm10
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionLogarithm10 : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     X;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm10");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm10");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0208 (0x0248 - 0x0040)
class UEngine_MaterialExpressionMakeMaterialAttributes : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     BaseColor;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Metallic;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Specular;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Roughness;                                                // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     EmissiveColor;                                            // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Opacity;                                                  // 0x00A4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     OpacityMask;                                              // 0x00B8(0x000C)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00C4(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Normal;                                                   // 0x00CC(0x000C)
	unsigned char                                      UnknownData07[0x8];                                       // 0x00D8(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     WorldPositionOffset;                                      // 0x00E0(0x000C)
	unsigned char                                      UnknownData08[0x8];                                       // 0x00EC(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     WorldDisplacement;                                        // 0x00F4(0x000C)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0100(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     TessellationMultiplier;                                   // 0x0108(0x000C)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0114(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     SubsurfaceColor;                                          // 0x011C(0x000C)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0128(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ClearCoat;                                                // 0x0130(0x000C)
	unsigned char                                      UnknownData12[0x8];                                       // 0x013C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ClearCoatRoughness;                                       // 0x0144(0x000C)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0150(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     AmbientOcclusion;                                         // 0x0158(0x000C)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0164(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Refraction;                                               // 0x016C(0x000C)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0178(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     CustomizedUVs[0x8];                                       // 0x0180(0x000C)
	unsigned char                                      UnknownData16[0x40];                                      // 0x01E0(0x0040) MISSED OFFSET
	struct FEngine_ExpressionInput                     PixelDepthOffset;                                         // 0x0220(0x000C)
	unsigned char                                      UnknownData17[0x8];                                       // 0x022C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ShadingModel;                                             // 0x0234(0x000C)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0240(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMakeMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionMapARPassthroughCameraUV : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMapARPassthroughCameraUV");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMapARPassthroughCameraUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x00A8 (0x00E8 - 0x0040)
class UEngine_MaterialExpressionMaterialAttributeLayers : public UEngine_MaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FEngine_MaterialAttributesInput             Input;                                                    // 0x0058(0x0010)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) MISSED OFFSET
	struct FEngine_MaterialLayersFunctions             DefaultLayers;                                            // 0x0070(0x0040) (Edit)
	TArray<class UEngine_MaterialExpressionMaterialFunctionCall*> LayerCallers;                                             // 0x00B0(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveLayerCallers;                                    // 0x00C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<class UEngine_MaterialExpressionMaterialFunctionCall*> BlendCallers;                                             // 0x00C8(0x0010) (ZeroConstructor, Transient)
	int                                                NumActiveBlendCallers;                                    // 0x00D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsLayerGraphBuilt;                                       // 0x00DC(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData02[0xB];                                       // 0x00DD(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialAttributeLayers");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialAttributeLayers");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionMaterialFunctionCall : public UEngine_MaterialExpression
{
public:
	class UEngine_MaterialFunctionInterface*           MaterialFunction;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_MaterialParameterInfo               FunctionParameterInfo;                                    // 0x0048(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLogarithm2
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionLogarithm2 : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     X;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm2");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionLogarithm2");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0000 (0x0088 - 0x0088)
class UEngine_MaterialExpressionMaterialLayerOutput : public UEngine_MaterialExpressionFunctionOutput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialLayerOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialLayerOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionMaterialProxyReplace : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     RealTime;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     MaterialProxy;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialProxyReplace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialProxyReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMax
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionMax : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMax");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMax");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMin
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionMin : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMin");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMin");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionMultiply : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNoise
// 0x0050 (0x0090 - 0x0040)
class UEngine_MaterialExpressionNoise : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     FilterWidth;                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              Scale;                                                    // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Quality;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ENoiseFunction>         NoiseFunction;                                            // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned char                                      bTurbulence : 1;                                          // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	int                                                Levels;                                                   // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMin;                                                // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OutputMax;                                                // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LevelScale;                                               // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	uint32_t                                           RepeatSize;                                               // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNoise");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionNoise");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionNormalize : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     VectorInput;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionObjectOrientation : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionObjectRadius : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionOneMinus : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0050 (0x0090 - 0x0040)
class UEngine_MaterialExpressionPanner : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Time;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Speed;                                                    // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	float                                              SpeedX;                                                   // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SpeedY;                                                   // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFractionalPart;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0089(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleColor
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleColor : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleDirection
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleDirection : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleDirection");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleMacroUV : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleMotionBlurFade : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMotionBlurFade");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticlePositionWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticlePositionWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticlePositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectBounds
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionObjectBounds : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectBounds");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRadius
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleRadius : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRandom
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleRandom : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRandom");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleRelativeTime : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleRelativeTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSize
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleSize : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSpeed
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleSpeed : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSpeed");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0008 (0x00D8 - 0x00D0)
class UEngine_MaterialExpressionParticleSubUV : public UEngine_MaterialExpressionTextureSample
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUVProperties
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionParticleSubUVProperties : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUVProperties");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUVProperties");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPerInstanceFadeAmount : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceFadeAmount");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPerInstanceRandom : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPixelDepth : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelNormalWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPixelNormalWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelNormalWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionPower : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Base;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Exponent;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstExponent;                                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPrecomputedAOMask : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPrecomputedAOMask");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPrecomputedAOMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPreSkinnedLocalBounds : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedLocalBounds");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedLocalBounds");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectPositionWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionObjectPositionWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectPositionWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionPreviousFrameSwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     CurrentFrame;                                             // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     PreviousFrame;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPreviousFrameSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPreviousFrameSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x0050 (0x0090 - 0x0040)
class UEngine_MaterialExpressionQualitySwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Inputs[0x3];                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0078(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionRayTracingQualitySwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Normal;                                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     RayTraced;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRayTracingQualitySwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRayTracingQualitySwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVectorWS
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionReflectionVectorWS : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     CustomWorldNormal;                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	unsigned char                                      bNormalizeCustomWorldNormal : 1;                          // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVectorWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReroute
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionReroute : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReroute");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionReroute");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0058 (0x0098 - 0x0040)
class UEngine_MaterialExpressionRotateAboutAxis : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     NormalizedRotationAxis;                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     RotationAngle;                                            // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     PivotPoint;                                               // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Position;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionRotator : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinate;                                               // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Time;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              CenterX;                                                  // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterY;                                                  // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ConstCoordinate;                                          // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRound
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionRound : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRound");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRound");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPreSkinnedPosition : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedPosition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionPreSkinnedNormal : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedNormal");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionPreSkinnedNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionRuntimeVirtualTextureSample : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     MipValue;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	class UEngine_RuntimeVirtualTexture*               VirtualTexture;                                           // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ERuntimeVirtualTextureMaterialType  MaterialType;                                             // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x0071(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERuntimeVirtualTextureMipValueMode> MipValueMode;                                             // 0x0072(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x5];                                       // 0x0073(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSample");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter
// 0x0020 (0x0098 - 0x0078)
class UEngine_MaterialExpressionRuntimeVirtualTextureSampleParameter : public UEngine_MaterialExpressionRuntimeVirtualTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       ExpressionGUID;                                           // 0x0080(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       Group;                                                    // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x0078 (0x00B8 - 0x0040)
class UEngine_MaterialExpressionRuntimeVirtualTextureOutput : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     BaseColor;                                                // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Specular;                                                 // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Roughness;                                                // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Normal;                                                   // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     WorldHeight;                                              // 0x0090(0x000C)
	unsigned char                                      UnknownData04[0x8];                                       // 0x009C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Opacity;                                                  // 0x00A4(0x000C)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00B0(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionRuntimeVirtualTextureReplace : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     VirtualTextureOutput;                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureReplace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionRuntimeVirtualTextureReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneColor
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionSceneColor : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EMaterialSceneAttributeInputMode> InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     OffsetFraction;                                           // 0x0058(0x000C) (Deprecated)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionBentNormalCustomOutput : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBentNormalCustomOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionBentNormalCustomOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexelSize
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionSceneTexelSize : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexelSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSaturate
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSaturate : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSaturate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSaturate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSceneTexture : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Coordinates;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ESceneTextureId>        SceneTextureId;                                           // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bFiltered;                                                // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionScreenPosition : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0020 (0x0060 - 0x0040)
class UEngine_MaterialExpressionSetMaterialAttributes : public UEngine_MaterialExpression
{
public:
	TArray<struct FEngine_ExpressionInput>             Inputs;                                                   // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FGuid>                               AttributeSetTypes;                                        // 0x0050(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSetMaterialAttributes");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSetMaterialAttributes");
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadingModel
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionShadingModel : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EMaterialShadingModel>  ShadingModel;                                             // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionShadingModel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionShadingModel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionShaderStageSwitch
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionShaderStageSwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     PixelShader;                                              // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     VertexShader;                                             // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionShaderStageSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionShaderStageSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadingPathSwitch
// 0x0050 (0x0090 - 0x0040)
class UEngine_MaterialExpressionShadingPathSwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Inputs[0x3];                                              // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0078(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionShadingPathSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionShadingPathSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionShadowReplace
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionShadowReplace : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Default;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Shadow;                                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionShadowReplace");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionShadowReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSine : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSign
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSign : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSign");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSign");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput
// 0x0040 (0x0080 - 0x0040)
class UEngine_MaterialExpressionSingleLayerWaterMaterialOutput : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     ScatteringCoefficients;                                   // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     AbsorptionCoefficients;                                   // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     PhaseG;                                                   // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0xC];                                       // 0x0074(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSingleLayerWaterMaterialOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightDirection
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereLightDirection : public UEngine_MaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDirection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDirection");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereLightIlluminance : public UEngine_MaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FEngine_ExpressionInput                     WorldPosition;                                            // 0x0044(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0050(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightIlluminance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereLightDiskLuminance : public UEngine_MaterialExpression
{
public:
	int                                                LightIndex;                                               // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereLightDiskLuminance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereAerialPerspective : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     WorldPosition;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereAerialPerspective");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSkyAtmosphereViewLuminance
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionSkyAtmosphereViewLuminance : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereViewLuminance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSkyAtmosphereViewLuminance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSobol
// 0x0048 (0x0088 - 0x0040)
class UEngine_MaterialExpressionSobol : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Cell;                                                     // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Index;                                                    // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Seed;                                                     // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	uint32_t                                           ConstIndex;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ConstSeed;                                                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSobol");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSobol");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSphericalParticleOpacity : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Density;                                                  // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              ConstantDensity;                                          // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSphericalParticleOpacity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionSquareRoot : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionStaticBool : public UEngine_MaterialExpression
{
public:
	unsigned char                                      Value : 1;                                                // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x0060 - 0x0058)
class UEngine_MaterialExpressionStaticBoolParameter : public UEngine_MaterialExpressionParameter
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0059(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0018 (0x0070 - 0x0058)
class UEngine_MaterialExpressionStaticComponentMaskParameter : public UEngine_MaterialExpressionParameter
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0058(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	unsigned char                                      DefaultR : 1;                                             // 0x006C(0x0001) (Edit)
	unsigned char                                      DefaultG : 1;                                             // 0x006C(0x0001) (Edit)
	unsigned char                                      DefaultB : 1;                                             // 0x006C(0x0001) (Edit)
	unsigned char                                      DefaultA : 1;                                             // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x0040 (0x0080 - 0x0040)
class UEngine_MaterialExpressionStaticSwitch : public UEngine_MaterialExpression
{
public:
	unsigned char                                      DefaultValue : 1;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FEngine_ExpressionInput                     A;                                                        // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0058(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Value;                                                    // 0x006C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0078(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0028 (0x0088 - 0x0060)
class UEngine_MaterialExpressionStaticSwitchParameter : public UEngine_MaterialExpressionStaticBoolParameter
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0060(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x006C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0074(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0030 (0x0070 - 0x0040)
class UEngine_MaterialExpressionSubtract : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	float                                              ConstA;                                                   // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ConstB;                                                   // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTangent
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTangent : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	float                                              Period;                                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTangent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTangent");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTangentOutput
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTangentOutput : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTangentOutput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTangentOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTemporalSobol
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionTemporalSobol : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Index;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Seed;                                                     // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	uint32_t                                           ConstIndex;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   ConstSeed;                                                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTemporalSobol");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTemporalSobol");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0050 - 0x0040)
class UEngine_MaterialExpressionTextureCoordinate : public UEngine_MaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              UTiling;                                                  // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              VTiling;                                                  // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnMirrorU : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnMirrorV : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0000 (0x0050 - 0x0050)
class UEngine_MaterialExpressionTextureObject : public UEngine_MaterialExpressionTextureBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x00F0 - 0x00F0)
class UEngine_MaterialExpressionTextureObjectParameter : public UEngine_MaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x0058 (0x0098 - 0x0040)
class UEngine_MaterialExpressionSphereMask : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     A;                                                        // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     B;                                                        // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Radius;                                                   // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Hardness;                                                 // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	float                                              AttenuationRadius;                                        // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              HardnessPercent;                                          // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureProperty
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTextureProperty : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     TextureObject;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EMaterialExposedTextureProperty> Property;                                                 // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureProperty");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureProperty");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2DArray
// 0x0000 (0x00F0 - 0x00F0)
class UEngine_MaterialExpressionTextureSampleParameter2DArray : public UEngine_MaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2DArray");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2DArray");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x00F0 - 0x00F0)
class UEngine_MaterialExpressionTextureSampleParameterCube : public UEngine_MaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0008 (0x00F8 - 0x00F0)
class UEngine_MaterialExpressionTextureSampleParameterSubUV : public UEngine_MaterialExpressionTextureSampleParameter2D
{
public:
	unsigned char                                      bBlend : 1;                                               // 0x00F0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (0x00F0 - 0x00F0)
class UEngine_MaterialExpressionTextureSampleParameterVolume : public UEngine_MaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterVolume");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionTime : public UEngine_MaterialExpression
{
public:
	unsigned char                                      bIgnorePause : 1;                                         // 0x0040(0x0001) (Edit)
	unsigned char                                      bOverride_Period : 1;                                     // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              Period;                                                   // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTransform : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EMaterialVectorCoordTransformSource> TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialVectorCoordTransform> TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTransformPosition : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EMaterialPositionTransformSource> TransformSourceType;                                      // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMaterialPositionTransformSource> TransformType;                                            // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0056(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTruncate
// 0x0018 (0x0058 - 0x0040)
class UEngine_MaterialExpressionTruncate : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x004C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTruncate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTruncate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionTwoSidedSign : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSpeedTree
// 0x0060 (0x00A0 - 0x0040)
class UEngine_MaterialExpressionSpeedTree : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     GeometryInput;                                            // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     WindInput;                                                // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     LODInput;                                                 // 0x0068(0x000C)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0074(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     ExtraBendWS;                                              // 0x007C(0x000C)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0088(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ESpeedTreeGeometryType> GeometryType;                                             // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESpeedTreeWindType>     WindType;                                                 // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESpeedTreeLODType>      LODType;                                                  // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0093(0x0001) MISSED OFFSET
	float                                              BillboardThreshold;                                       // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAccurateWindVelocities;                                  // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0099(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSpeedTree");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexInterpolator
// 0x0020 (0x0060 - 0x0040)
class UEngine_MaterialExpressionVertexInterpolator : public UEngine_MaterialExpressionCustomOutput
{
public:
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x14];                                      // 0x004C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexInterpolator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexInterpolator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexNormalWS
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionVertexNormalWS : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexNormalWS");
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionViewProperty : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EMaterialExposedViewProperty> Property;                                                 // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionViewProperty");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionViewProperty");
		return ptr;
	}

};


// Class Engine.MaterialExpressionViewSize
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionViewSize : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionViewSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionVirtualTextureFeatureSwitch : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     No;                                                       // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Yes;                                                      // 0x0054(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0060(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVirtualTextureFeatureSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVirtualTextureFeatureSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0048 - 0x0040)
class UEngine_MaterialExpressionWorldPosition : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EWorldPositionIncludedOffsets> WorldPositionShaderOffset;                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0038 (0x0078 - 0x0040)
class UEngine_MaterialExpressionSceneDepth : public UEngine_MaterialExpression
{
public:
	TEnumAsByte<FEngine_Engine_EMaterialSceneAttributeInputMode> InputMode;                                                // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FEngine_ExpressionInput                     Input;                                                    // 0x0044(0x000C)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0050(0x0008) MISSED OFFSET
	struct FEngine_ExpressionInput                     Coordinates;                                              // 0x0058(0x000C) (Deprecated)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0064(0x0008) MISSED OFFSET
	struct FVector2D                                   ConstInput;                                               // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorNoise
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialExpressionVectorNoise : public UEngine_MaterialExpression
{
public:
	struct FEngine_ExpressionInput                     Position;                                                 // 0x0040(0x000C)
	unsigned char                                      UnknownData00[0x8];                                       // 0x004C(0x0008) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EVectorNoiseFunction>   NoiseFunction;                                            // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                Quality;                                                  // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTiling : 1;                                              // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	uint32_t                                           TileSize;                                                 // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorNoise");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorNoise");
		return ptr;
	}

};


// Class Engine.MaterialFunctionInterface
// 0x0018 (0x0040 - 0x0028)
class UEngine_MaterialFunctionInterface : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	FEngine_Engine_EMaterialFunctionUsage              MaterialFunctionUsage;                                    // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionInterface");
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0028 (0x0068 - 0x0040)
class UEngine_MaterialFunction : public UEngine_MaterialFunctionInterface
{
public:
	struct FString                                     Description;                                              // 0x0040(0x0010) (Edit, ZeroConstructor)
	TArray<class UEngine_MaterialExpression*>          FunctionExpressions;                                      // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      bExposeToLibrary : 1;                                     // 0x0060(0x0001) (Edit)
	unsigned char                                      bPrefixParameterNames : 1;                                // 0x0060(0x0001) (Edit)
	unsigned char                                      bReentrantFlag : 1;                                       // 0x0060(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunction");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}

};


// Class Engine.MaterialFunctionInstance
// 0x0080 (0x00C0 - 0x0040)
class UEngine_MaterialFunctionInstance : public UEngine_MaterialFunctionInterface
{
public:
	class UEngine_MaterialFunctionInterface*           Parent;                                                   // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_MaterialFunctionInterface*           Base;                                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_ScalarParameterValue>        ScalarParameterValues;                                    // 0x0050(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_VectorParameterValue>        VectorParameterValues;                                    // 0x0060(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_TextureParameterValue>       TextureParameterValues;                                   // 0x0070(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_FontParameterValue>          FontParameterValues;                                      // 0x0080(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_StaticSwitchParameter>       StaticSwitchParameterValues;                              // 0x0090(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_StaticComponentMaskParameter> StaticComponentMaskParameterValues;                       // 0x00A0(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_RuntimeVirtualTextureParameterValue> RuntimeVirtualTextureParameterValues;                     // 0x00B0(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionInstance");
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayer
// 0x0000 (0x0068 - 0x0068)
class UEngine_MaterialFunctionMaterialLayer : public UEngine_MaterialFunction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayer");
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (0x00C0 - 0x00C0)
class UEngine_MaterialFunctionMaterialLayerInstance : public UEngine_MaterialFunctionInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerInstance");
		return ptr;
	}

};


// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (0x00C0 - 0x00C0)
class UEngine_MaterialFunctionMaterialLayerBlendInstance : public UEngine_MaterialFunctionInstance
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlendInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlendInstance");
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0010 (0x0228 - 0x0218)
class AEngine_MaterialInstanceActor : public AEngine_Actor
{
public:
	TArray<class AEngine_Actor*>                       TargetActors;                                             // 0x0218(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}

};


// Class Engine.MaterialInstanceDynamic
// 0x0050 (0x0228 - 0x01D8)
class UEngine_MaterialInstanceDynamic : public UEngine_MaterialInstance
{
public:
	unsigned char                                      UnknownData00[0x50];                                      // 0x01D8(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialInstanceDynamic");
		return ptr;
	}


	void SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UEngine_Texture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void K2_InterpolateMaterialInstanceParams(class UEngine_MaterialInstance* SourceA, class UEngine_MaterialInstance* SourceB, float ALPHA);
	struct FLinearColor K2_GetVectorParameterValue(const struct FName& ParameterName);
	class UEngine_Texture* K2_GetTextureParameterValue(const struct FName& ParameterName);
	float K2_GetScalarParameterValue(const struct FName& ParameterName);
	void K2_CopyMaterialInstanceParameters(class UEngine_MaterialInterface* Source, bool bQuickParametersOnly);
	void CopyParameterOverrides(class UEngine_MaterialInstance* MaterialInstance);
	void CopyInterpParameters(class UEngine_MaterialInstance* Source);
};


// Class Engine.MaterialParameterCollection
// 0x0050 (0x0078 - 0x0028)
class UEngine_MaterialParameterCollection : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	TArray<struct FEngine_CollectionScalarParameter>   ScalarParameters;                                         // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_CollectionVectorParameter>   VectorParameters;                                         // 0x0048(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x20];                                      // 0x0058(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialParameterCollection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialParameterCollection");
		return ptr;
	}

};


// Class Engine.MaterialParameterCollectionInstance
// 0x00C8 (0x00F0 - 0x0028)
class UEngine_MaterialParameterCollectionInstance : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	class UEngine_MaterialParameterCollection*         Collection;                                               // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xB8];                                      // 0x0038(0x00B8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialParameterCollectionInstance");
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x00A8 (0x02C0 - 0x0218)
class AEngine_MatineeActor : public AEngine_Actor
{
public:
	class UEngine_InterpData*                          MatineeData;                                              // 0x0218(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	struct FName                                       MatineeControllerName;                                    // 0x0220(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              PlayRate;                                                 // 0x0228(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPlayOnLevelLoad : 1;                                     // 0x022C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceStartPos : 1;                                       // 0x022C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	float                                              ForceStartPosition;                                       // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLooping : 1;                                             // 0x0234(0x0001) (Edit, BlueprintVisible, Net)
	unsigned char                                      bRewindOnPlay : 1;                                        // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoResetOnRewind : 1;                                     // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRewindIfAlreadyPlaying : 1;                              // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableRadioFilter : 1;                                  // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bClientSideOnly : 1;                                      // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSkipUpdateIfNotVisible : 1;                              // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSkippable : 1;                                         // 0x0234(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	int                                                PreferredSplitScreenNum;                                  // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDisableMovementInput : 1;                                // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDisableLookAtInput : 1;                                  // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHidePlayer : 1;                                          // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bHideHud : 1;                                             // 0x023C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x023D(0x0003) MISSED OFFSET
	TArray<struct FEngine_InterpGroupActorInfo>        GroupActorInfos;                                          // 0x0240(0x0010) (Net, ZeroConstructor)
	unsigned char                                      bShouldShowGore : 1;                                      // 0x0250(0x0001) (Transient)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0251(0x0007) MISSED OFFSET
	TArray<class UEngine_InterpGroupInst*>             GroupInst;                                                // 0x0258(0x0010) (ZeroConstructor, Transient)
	TArray<struct FEngine_CameraCutInfo>               CameraCuts;                                               // 0x0268(0x0010) (ZeroConstructor, Transient)
	unsigned char                                      bIsPlaying : 1;                                           // 0x0278(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst)
	unsigned char                                      bReversePlayback : 1;                                     // 0x0278(0x0001) (Net)
	unsigned char                                      bPaused : 1;                                              // 0x0278(0x0001) (Net, Transient)
	unsigned char                                      bPendingStop : 1;                                         // 0x0278(0x0001) (Net, Transient)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0279(0x0003) MISSED OFFSET
	float                                              InterpPosition;                                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0280(0x0004) MISSED OFFSET
	unsigned char                                      ReplicationForceIsPlaying;                                // 0x0284(0x0001) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0285(0x0003) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnPlay;                                                   // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnStop;                                                   // 0x0298(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnPause;                                                  // 0x02A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData07[0x8];                                       // 0x02B8(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}


	void Stop();
	void SetPosition(float NewPosition, bool bJump);
	void SetLoopingState(bool bNewLooping);
	void Reverse();
	void Play();
	void Pause();
	void EnableGroupByName(const struct FString& GroupName, bool bEnable);
	void ChangePlaybackDirection();
};


// Class Engine.MatineeActorCameraAnim
// 0x0008 (0x02C8 - 0x02C0)
class AEngine_MatineeActorCameraAnim : public AEngine_MatineeActor
{
public:
	class UEngine_CameraAnim*                          CameraAnim;                                               // 0x02C0(0x0008) (ZeroConstructor, Transient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MatineeActorCameraAnim");
		return ptr;
	}

};


// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_MatineeAnimInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeAnimInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MatineeAnimInterface");
		return ptr;
	}

};


// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_MatineeInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MatineeInterface");
		return ptr;
	}

};


// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_MeshMergeCullingVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshMergeCullingVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MeshMergeCullingVolume");
		return ptr;
	}

};


// Class Engine.MeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UEngine_MeshSimplificationSettings : public UEngine_DeveloperSettings
{
public:
	struct FName                                       MeshReductionModuleName;                                  // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshSimplificationSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MeshSimplificationSettings");
		return ptr;
	}

};


// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_MeshVertexPainterKismetLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshVertexPainterKismetLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MeshVertexPainterKismetLibrary");
		return ptr;
	}


	void STATIC_RemovePaintedVertices(class UEngine_StaticMeshComponent* StaticMeshComponent);
	void STATIC_PaintVerticesSingleColor(class UEngine_StaticMeshComponent* StaticMeshComponent, const struct FLinearColor& FillColor, bool bConvertToSRGB);
	void STATIC_PaintVerticesLerpAlongAxis(class UEngine_StaticMeshComponent* StaticMeshComponent, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, FEngine_Engine_EVertexPaintAxis Axis, bool bConvertToSRGB);
};


// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0000 (0x0068 - 0x0068)
class UEngine_MaterialFunctionMaterialLayerBlend : public UEngine_MaterialFunction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlend");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialFunctionMaterialLayerBlend");
		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
class UEngine_MicroTransactionBase : public UEngine_PlatformInterfaceBase
{
public:
	TArray<struct FEngine_PurchaseInfo>                AvailableProducts;                                        // 0x0038(0x0010) (ZeroConstructor)
	struct FString                                     LastError;                                                // 0x0048(0x0010) (ZeroConstructor)
	struct FString                                     LastErrorSolution;                                        // 0x0058(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}

};


// Class Engine.ModelComponent
// 0x0040 (0x0420 - 0x03E0)
class UEngine_ModelComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET
	class UEngine_BodySetup*                           ModelBodySetup;                                           // 0x03F0(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x03F8(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ModelComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}

};


// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavAgentInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavAgentInterface");
		return ptr;
	}

};


// Class Engine.NavCollisionBase
// 0x0048 (0x0070 - 0x0028)
class UEngine_NavCollisionBase : public UObject
{
public:
	unsigned char                                      bIsDynamicObstacle : 1;                                   // 0x0028(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x47];                                      // 0x0029(0x0047) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavCollisionBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavCollisionBase");
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0018 (0x0040 - 0x0028)
class UEngine_MorphTarget : public UObject
{
public:
	class UEngine_SkeletalMesh*                        BaseSkelMesh;                                             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0030(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTarget");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}

};


// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavEdgeProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavEdgeProviderInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavEdgeProviderInterface");
		return ptr;
	}

};


// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
class UEngine_NavigationDataChunk : public UObject
{
public:
	struct FName                                       NavigationDataName;                                       // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationDataChunk");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavigationDataChunk");
		return ptr;
	}

};


// Class Engine.NavigationDataInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavigationDataInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationDataInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavigationDataInterface");
		return ptr;
	}

};


// Class Engine.NavigationObjectBase
// 0x0028 (0x0240 - 0x0218)
class AEngine_NavigationObjectBase : public AEngine_Actor
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	class UEngine_CapsuleComponent*                    CapsuleComponent;                                         // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_BillboardComponent*                  GoodSprite;                                               // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_BillboardComponent*                  BadSprite;                                                // 0x0230(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      bIsPIEPlayerStart : 1;                                    // 0x0238(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0239(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationObjectBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavigationObjectBase");
		return ptr;
	}

};


// Class Engine.NavigationSystemBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavigationSystemBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationSystemBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavigationSystemBase");
		return ptr;
	}

};


// Class Engine.NavigationSystemConfig
// 0x0028 (0x0050 - 0x0028)
class UEngine_NavigationSystemConfig : public UObject
{
public:
	struct FSoftClassPath                              NavigationSystemClass;                                    // 0x0028(0x0018) (Edit, ZeroConstructor)
	struct FEngine_NavAgentSelector                    SupportedAgentsMask;                                      // 0x0040(0x0004) (Edit)
	struct FName                                       DefaultAgentName;                                         // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIsOverriden : 1;                                         // 0x004C(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationSystemConfig");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavigationSystemConfig");
		return ptr;
	}

};


// Class Engine.NullNavSysConfig
// 0x0000 (0x0050 - 0x0050)
class UEngine_NullNavSysConfig : public UEngine_NavigationSystemConfig
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NullNavSysConfig");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NullNavSysConfig");
		return ptr;
	}

};


// Class Engine.NavLinkDefinition
// 0x0028 (0x0050 - 0x0028)
class UEngine_NavLinkDefinition : public UObject
{
public:
	TArray<struct FEngine_NavigationLink>              Links;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	TArray<struct FEngine_NavigationSegmentLink>       SegmentLinks;                                             // 0x0038(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0048(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavLinkDefinition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavLinkDefinition");
		return ptr;
	}

};


// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavPathObserverInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavPathObserverInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavPathObserverInterface");
		return ptr;
	}

};


// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NavRelevantInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavRelevantInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NavRelevantInterface");
		return ptr;
	}

};


// Class Engine.SimulatedClientNetConnection
// 0x0000 (0x19C0 - 0x19C0)
class UEngine_SimulatedClientNetConnection : public UEngine_NetConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimulatedClientNetConnection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SimulatedClientNetConnection");
		return ptr;
	}

};


// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NetworkPredictionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetworkPredictionInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NetworkPredictionInterface");
		return ptr;
	}

};


// Class Engine.NetworkSettings
// 0x0020 (0x0058 - 0x0038)
class UEngine_NetworkSettings : public UEngine_DeveloperSettings
{
public:
	unsigned char                                      bVerifyPeer : 1;                                          // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bEnableMultiplayerWorldOriginRebasing : 1;                // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxRepArraySize;                                          // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxRepArrayMemory;                                        // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET
	TArray<struct FEngine_NetworkEmulationProfileDescription> NetworkEmulationProfiles;                                 // 0x0048(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetworkSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NetworkSettings");
		return ptr;
	}

};


// Class Engine.NodeMappingContainer
// 0x0140 (0x0168 - 0x0028)
class UEngine_NodeMappingContainer : public UObject
{
public:
	TMap<struct FName, struct FEngine_NodeItem>        SourceItems;                                              // 0x0028(0x0050) (Edit, ZeroConstructor, EditConst)
	TMap<struct FName, struct FEngine_NodeItem>        TargetItems;                                              // 0x0078(0x0050) (Edit, ZeroConstructor, EditConst)
	TMap<struct FName, struct FName>                   SourceToTarget;                                           // 0x00C8(0x0050) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0118(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Engine.NodeMappingContainer.SourceAsset
	unsigned char                                      UnknownData01[0x28];                                      // 0x0140(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Engine.NodeMappingContainer.TargetAsset

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NodeMappingContainer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NodeMappingContainer");
		return ptr;
	}

};


// Class Engine.Note
// 0x0000 (0x0218 - 0x0218)
class AEngine_Note : public AEngine_Actor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.ObjectLibrary
// 0x0080 (0x00A8 - 0x0028)
class UEngine_ObjectLibrary : public UObject
{
public:
	class UClass*                                      ObjectBaseClass;                                          // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bHasBlueprintClasses;                                     // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	TArray<class UObject*>                             Objects;                                                  // 0x0038(0x0010) (Edit, ZeroConstructor)
	TArray<TWeakObjectPtr<class UObject>>              WeakObjects;                                              // 0x0048(0x0010) (ZeroConstructor)
	bool                                               bUseWeakReferences;                                       // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	bool                                               bIsFullyLoaded;                                           // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4E];                                      // 0x005A(0x004E) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ObjectLibrary");
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
class UEngine_ObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x0028(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}

};


// Class Engine.PackageMapClient
// 0x0318 (0x03F8 - 0x00E0)
class UEngine_PackageMapClient : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x318];                                     // 0x00E0(0x0318) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapClient");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PackageMapClient");
		return ptr;
	}

};


// Class Engine.PainCausingVolume
// 0x0028 (0x0288 - 0x0260)
class AEngine_PainCausingVolume : public AEngine_PhysicsVolume
{
public:
	unsigned char                                      bPainCausing : 1;                                         // 0x0260(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0261(0x0003) MISSED OFFSET
	float                                              DamagePerSec;                                             // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UClass*                                      DamageType;                                               // 0x0268(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              PainInterval;                                             // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEntryPain : 1;                                           // 0x0274(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      BACKUP_bPainCausing : 1;                                  // 0x0274(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0275(0x0003) MISSED OFFSET
	class AEngine_Controller*                          DamageInstigator;                                         // 0x0278(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0280(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PainCausingVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PainCausingVolume");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0040 - 0x0040)
class UEngine_MaterialExpressionVertexColor : public UEngine_MaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}

};


// Class Engine.NodeMappingProviderInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_NodeMappingProviderInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NodeMappingProviderInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.NodeMappingProviderInterface");
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0190 (0x01B8 - 0x0028)
class UEngine_ParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubUVDataOffset;                                          // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EEmitterRenderMode>     EmitterRenderMode;                                        // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EParticleSignificanceLevel          SignificanceLevel;                                        // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0036(0x0001) MISSED OFFSET
	unsigned char                                      bUseLegacySpawningBehavior : 1;                           // 0x0037(0x0001) (Edit)
	unsigned char                                      UnknownData01 : 3;                                        // 0x0037(0x0001)
	unsigned char                                      ConvertedModules : 1;                                     // 0x0037(0x0001)
	unsigned char                                      bIsSoloing : 1;                                           // 0x0037(0x0001) (Transient)
	unsigned char                                      bCookedOut : 1;                                           // 0x0037(0x0001)
	unsigned char                                      bDisabledLODsKeepEmitterAlive : 1;                        // 0x0037(0x0001) (Edit)
	unsigned char                                      bDisableWhenInsignficant : 1;                             // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TArray<class UEngine_ParticleLODLevel*>            LODLevels;                                                // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	int                                                PeakActiveParticles;                                      // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                InitialAllocationCount;                                   // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              QualityLevelSpawnRateScale;                               // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           DetailModeBitmask;                                        // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x158];                                     // 0x0060(0x0158) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
class UEngine_ParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	class UEngine_ParticleModuleRequired*              RequiredModule;                                           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	TArray<class UEngine_ParticleModule*>              Modules;                                                  // 0x0038(0x0010) (ExportObject, ZeroConstructor)
	class UEngine_ParticleModuleTypeDataBase*          TypeDataModule;                                           // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UEngine_ParticleModuleSpawn*                 SpawnModule;                                              // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	class UEngine_ParticleModuleEventGenerator*        EventGenerator;                                           // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_ParticleModuleSpawnBase*>     SpawningModules;                                          // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_ParticleModule*>              SpawnModules;                                             // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_ParticleModule*>              UpdateModules;                                            // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_ParticleModuleOrbit*>         OrbitModules;                                             // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UEngine_ParticleModuleEventReceiverBase*> EventReceiverModules;                                     // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient)
	unsigned char                                      ConvertedModules : 1;                                     // 0x00B0(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	int                                                PeakActiveParticles;                                      // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}

};


// Class Engine.ParticleEventManager
// 0x0000 (0x0218 - 0x0218)
class AEngine_ParticleEventManager : public AEngine_Actor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x0008 (0x0030 - 0x0028)
class UEngine_ParticleModule : public UObject
{
public:
	unsigned char                                      bSpawnModule : 1;                                         // 0x0028(0x0001)
	unsigned char                                      bUpdateModule : 1;                                        // 0x0028(0x0001)
	unsigned char                                      bFinalUpdateModule : 1;                                   // 0x0028(0x0001)
	unsigned char                                      bUpdateForGPUEmitter : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bCurvesAsColor : 1;                                       // 0x0028(0x0001)
	unsigned char                                      b3DDrawMode : 1;                                          // 0x0028(0x0001) (Edit)
	unsigned char                                      bSupported3DDrawMode : 1;                                 // 0x0028(0x0001)
	unsigned char                                      bEnabled : 1;                                             // 0x0028(0x0001)
	unsigned char                                      bEditable : 1;                                            // 0x0029(0x0001)
	unsigned char                                      LODDuplicate : 1;                                         // 0x0029(0x0001)
	unsigned char                                      bSupportsRandomSeed : 1;                                  // 0x0029(0x0001)
	unsigned char                                      bRequiresLoopingNotification : 1;                         // 0x0029(0x0001)
	unsigned char                                      LODValidity;                                              // 0x002A(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x5];                                       // 0x002B(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModule");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleAccelerationBase : public UEngine_ParticleModule
{
public:
	unsigned char                                      bAlwaysInWorldSpace : 1;                                  // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationConstant
// 0x0010 (0x0048 - 0x0038)
class UEngine_ParticleModuleAccelerationConstant : public UEngine_ParticleModuleAccelerationBase
{
public:
	struct FVector                                     Acceleration;                                             // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationConstant");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDrag
// 0x0038 (0x0070 - 0x0038)
class UEngine_ParticleModuleAccelerationDrag : public UEngine_ParticleModuleAccelerationBase
{
public:
	class UEngine_DistributionFloat*                   DragCoefficient;                                          // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RawDistributionFloat                DragCoefficientRaw;                                       // 0x0040(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDrag");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0038 (0x0070 - 0x0038)
class UEngine_ParticleModuleAccelerationDragScaleOverLife : public UEngine_ParticleModuleAccelerationBase
{
public:
	class UEngine_DistributionFloat*                   DragScale;                                                // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RawDistributionFloat                DragScaleRaw;                                             // 0x0040(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationDragScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0048 (0x0080 - 0x0038)
class UEngine_ParticleModuleAccelerationOverLifetime : public UEngine_ParticleModuleAccelerationBase
{
public:
	struct FEngine_RawDistributionVector               AccelOverLife;                                            // 0x0038(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleAttractorBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0078 (0x00A8 - 0x0030)
class UEngine_ParticleModuleAttractorLine : public UEngine_ParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EndPoint1;                                                // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_RawDistributionFloat                Range;                                                    // 0x0048(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                Strength;                                                 // 0x0078(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x0080 (0x00B0 - 0x0030)
class UEngine_ParticleModuleAttractorParticle : public UEngine_ParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	struct FEngine_RawDistributionFloat                Range;                                                    // 0x0038(0x0030) (Edit)
	unsigned char                                      bStrengthByDistance : 1;                                  // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                Strength;                                                 // 0x0070(0x0030) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAttractorParticleSelectionMethod> SelectionMethod;                                          // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	unsigned char                                      bRenewSource : 1;                                         // 0x00A8(0x0001) (Edit)
	unsigned char                                      bInheritSourceVel : 1;                                    // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x00AC(0x0004) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x00B0 (0x00E0 - 0x0030)
class UEngine_ParticleModuleAttractorPoint : public UEngine_ParticleModuleAttractorBase
{
public:
	struct FEngine_RawDistributionVector               Position;                                                 // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                Range;                                                    // 0x0078(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                Strength;                                                 // 0x00A8(0x0030) (Edit)
	unsigned char                                      StrengthByDistance : 1;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      bAffectBaseVelocity : 1;                                  // 0x00D8(0x0001) (Edit)
	unsigned char                                      bOverrideVelocity : 1;                                    // 0x00D8(0x0001) (Edit)
	unsigned char                                      bUseWorldSpacePosition : 1;                               // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_X : 1;                                           // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x00D8(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x00D8(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x00D8(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x00D9(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x00D9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00DA(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPointGravity
// 0x0048 (0x0078 - 0x0030)
class UEngine_ParticleModuleAttractorPointGravity : public UEngine_ParticleModuleAttractorBase
{
public:
	struct FVector                                     Position;                                                 // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_DistributionFloat*                   Strength;                                                 // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RawDistributionFloat                StrengthRaw;                                              // 0x0048(0x0030) (Edit, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPointGravity");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleBeamBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x00D8 (0x0108 - 0x0030)
class UEngine_ParticleModuleBeamModifier : public UEngine_ParticleModuleBeamBase
{
public:
	TEnumAsByte<FEngine_Engine_EBeamModifierType>      ModifierType;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FEngine_BeamModifierOptions                 PositionOptions;                                          // 0x0034(0x0004) (Edit)
	struct FEngine_RawDistributionVector               Position;                                                 // 0x0038(0x0048) (Edit)
	struct FEngine_BeamModifierOptions                 TangentOptions;                                           // 0x0080(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionVector               Tangent;                                                  // 0x0088(0x0048) (Edit)
	unsigned char                                      bAbsoluteTangent : 1;                                     // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	struct FEngine_BeamModifierOptions                 StrengthOptions;                                          // 0x00D4(0x0004) (Edit)
	struct FEngine_RawDistributionFloat                Strength;                                                 // 0x00D8(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x0160 (0x0190 - 0x0030)
class UEngine_ParticleModuleBeamNoise : public UEngine_ParticleModuleBeamBase
{
public:
	unsigned char                                      bLowFreq_Enabled : 1;                                     // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                Frequency;                                                // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Frequency_LowRange;                                       // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionVector               NoiseRange;                                               // 0x0040(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                NoiseRangeScale;                                          // 0x0088(0x0030) (Edit)
	unsigned char                                      bNRScaleEmitterTime : 1;                                  // 0x00B8(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionVector               NoiseSpeed;                                               // 0x00C0(0x0048) (Edit)
	unsigned char                                      bSmooth : 1;                                              // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	float                                              NoiseLockRadius;                                          // 0x010C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bNoiseLock : 1;                                           // 0x0110(0x0001)
	unsigned char                                      bOscillate : 1;                                           // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              NoiseLockTime;                                            // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseTension;                                             // 0x0118(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseNoiseTangents : 1;                                    // 0x011C(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	struct FEngine_RawDistributionFloat                NoiseTangentStrength;                                     // 0x0120(0x0030) (Edit)
	int                                                NoiseTessellation;                                        // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bTargetNoise : 1;                                         // 0x0154(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0155(0x0003) MISSED OFFSET
	float                                              FrequencyDistance;                                        // 0x0158(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyNoiseScale : 1;                                     // 0x015C(0x0001) (Edit)
	unsigned char                                      UnknownData07[0x3];                                       // 0x015D(0x0003) MISSED OFFSET
	struct FEngine_RawDistributionFloat                NoiseScale;                                               // 0x0160(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x00E8 (0x0118 - 0x0030)
class UEngine_ParticleModuleBeamSource : public UEngine_ParticleModuleBeamBase
{
public:
	TEnumAsByte<FEngine_Engine_EBeam2SourceTargetMethod> SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bSourceAbsolute : 1;                                      // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	struct FEngine_RawDistributionVector               Source;                                                   // 0x0040(0x0048) (Edit)
	unsigned char                                      bLockSource : 1;                                          // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EBeam2SourceTargetTangentMethod> SourceTangentMethod;                                      // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FEngine_RawDistributionVector               SourceTangent;                                            // 0x0090(0x0048) (Edit)
	unsigned char                                      bLockSourceTangent : 1;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                SourceStrength;                                           // 0x00E0(0x0030) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x7];                                       // 0x0111(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x00F0 (0x0120 - 0x0030)
class UEngine_ParticleModuleBeamTarget : public UEngine_ParticleModuleBeamBase
{
public:
	TEnumAsByte<FEngine_Engine_EBeam2SourceTargetMethod> TargetMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionVector               Target;                                                   // 0x0040(0x0048) (Edit)
	unsigned char                                      bTargetAbsolute : 1;                                      // 0x0088(0x0001) (Edit)
	unsigned char                                      bLockTarget : 1;                                          // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EBeam2SourceTargetTangentMethod> TargetTangentMethod;                                      // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FEngine_RawDistributionVector               TargetTangent;                                            // 0x0090(0x0048) (Edit)
	unsigned char                                      bLockTargetTangent : 1;                                   // 0x00D8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                TargetStrength;                                           // 0x00E0(0x0030) (Edit)
	unsigned char                                      bLockTargetStength : 1;                                   // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              LockRadius;                                               // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0118(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleCameraBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleCollisionBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x0160 (0x0190 - 0x0030)
class UEngine_ParticleModuleCollision : public UEngine_ParticleModuleCollisionBase
{
public:
	struct FEngine_RawDistributionVector               DampingFactor;                                            // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionVector               DampingFactorRotation;                                    // 0x0078(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                MaxCollisions;                                            // 0x00C0(0x0030) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleCollisionComplete> CollisionCompletionOption;                                // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET
	TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> CollisionTypes;                                           // 0x00F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0108(0x0008) MISSED OFFSET
	unsigned char                                      bApplyPhysics : 1;                                        // 0x0110(0x0001) (Edit)
	unsigned char                                      bIgnoreTriggerVolumes : 1;                                // 0x0110(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                ParticleMass;                                             // 0x0118(0x0030) (Edit)
	float                                              DirScalar;                                                // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPawnsDoNotDecrementCount : 1;                            // 0x014C(0x0001) (Edit)
	unsigned char                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x014C(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x014D(0x0003) MISSED OFFSET
	float                                              VerticalFudgeFactor;                                      // 0x0150(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionFloat                DelayAmount;                                              // 0x0158(0x0030) (Edit)
	unsigned char                                      bDropDetail : 1;                                          // 0x0188(0x0001) (Edit)
	unsigned char                                      bCollideOnlyIfVisible : 1;                                // 0x0188(0x0001) (Edit)
	unsigned char                                      bIgnoreSourceActor : 1;                                   // 0x0188(0x0001) (Edit)
	unsigned char                                      UnknownData05[0x3];                                       // 0x0189(0x0003) MISSED OFFSET
	float                                              MaxCollisionDistance;                                     // 0x018C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionGPU
// 0x0078 (0x00A8 - 0x0030)
class UEngine_ParticleModuleCollisionGPU : public UEngine_ParticleModuleCollisionBase
{
public:
	struct FEngine_RawDistributionFloat                Resilience;                                               // 0x0030(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                ResilienceScaleOverLife;                                  // 0x0060(0x0030) (Edit)
	float                                              Friction;                                                 // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomSpread;                                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomDistribution;                                       // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusScale;                                              // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RadiusBias;                                               // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EParticleCollisionResponse> Response;                                                 // 0x00A4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EParticleCollisionMode> CollisionMode;                                            // 0x00A5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00A6(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionGPU");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleColorBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x0080 (0x00B0 - 0x0030)
class UEngine_ParticleModuleColor : public UEngine_ParticleModuleColorBase
{
public:
	struct FEngine_RawDistributionVector               StartColor;                                               // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                StartAlpha;                                               // 0x0078(0x0030) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0020 (0x00D0 - 0x00B0)
class UEngine_ParticleModuleColor_Seeded : public UEngine_ParticleModuleColor
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x00B0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0050 (0x0088 - 0x0038)
class UEngine_ParticleModuleAcceleration : public UEngine_ParticleModuleAccelerationBase
{
public:
	struct FEngine_RawDistributionVector               Acceleration;                                             // 0x0038(0x0048) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleCameraOffset : public UEngine_ParticleModuleCameraBase
{
public:
	struct FEngine_RawDistributionFloat                CameraOffset;                                             // 0x0030(0x0030) (Edit)
	unsigned char                                      bSpawnTimeOnly : 1;                                       // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EParticleCameraOffsetUpdateMethod> UpdateMethod;                                             // 0x0064(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x0080 (0x00B0 - 0x0030)
class UEngine_ParticleModuleColorScaleOverLife : public UEngine_ParticleModuleColorBase
{
public:
	struct FEngine_RawDistributionVector               ColorScaleOverLife;                                       // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                AlphaScaleOverLife;                                       // 0x0078(0x0030) (Edit)
	unsigned char                                      bEmitterTime : 1;                                         // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x0080 (0x00B0 - 0x0030)
class UEngine_ParticleModuleColorOverLife : public UEngine_ParticleModuleColorBase
{
public:
	struct FEngine_RawDistributionVector               ColorOverLife;                                            // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                AlphaOverLife;                                            // 0x0078(0x0030) (Edit)
	unsigned char                                      bClampAlpha : 1;                                          // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleEventBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleEventGenerator : public UEngine_ParticleModuleEventBase
{
public:
	TArray<struct FEngine_ParticleEvent_GenerateInfo>  Events;                                                   // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleEventReceiverBase : public UEngine_ParticleModuleEventBase
{
public:
	TEnumAsByte<FEngine_Engine_EParticleEventType>     EventGeneratorType;                                       // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
class UEngine_ParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0008 (0x0048 - 0x0040)
class UEngine_ParticleModuleEventReceiverKillParticles : public UEngine_ParticleModuleEventReceiverBase
{
public:
	unsigned char                                      bStopSpawning : 1;                                        // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0041(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleKillBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x0098 (0x00C8 - 0x0030)
class UEngine_ParticleModuleKillBox : public UEngine_ParticleModuleKillBase
{
public:
	struct FEngine_RawDistributionVector               LowerLeftCorner;                                          // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionVector               UpperRightCorner;                                         // 0x0078(0x0048) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      bKillInside : 1;                                          // 0x00C0(0x0001) (Edit)
	unsigned char                                      bAxisAlignedAndFixedSize : 1;                             // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleKillHeight : public UEngine_ParticleModuleKillBase
{
public:
	struct FEngine_RawDistributionFloat                Height;                                                   // 0x0030(0x0030) (Edit)
	unsigned char                                      bAbsolute : 1;                                            // 0x0060(0x0001) (Edit)
	unsigned char                                      bFloor : 1;                                               // 0x0060(0x0001) (Edit)
	unsigned char                                      bApplyPSysScale : 1;                                      // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleLifetimeBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x0030 (0x0060 - 0x0030)
class UEngine_ParticleModuleLifetime : public UEngine_ParticleModuleLifetimeBase
{
public:
	struct FEngine_RawDistributionFloat                LifeTime;                                                 // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0080 - 0x0060)
class UEngine_ParticleModuleLifetime_Seeded : public UEngine_ParticleModuleLifetime
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLightBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleLightBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLightBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLightBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLight
// 0x00F0 (0x0120 - 0x0030)
class UEngine_ParticleModuleLight : public UEngine_ParticleModuleLightBase
{
public:
	bool                                               bUseInverseSquaredFalloff;                                // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bAffectsTranslucency;                                     // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bPreviewLightRadius;                                      // 0x0032(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0033(0x0001) MISSED OFFSET
	float                                              SpawnFraction;                                            // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_RawDistributionVector               ColorScaleOverLife;                                       // 0x0038(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                BrightnessOverLife;                                       // 0x0080(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                RadiusScale;                                              // 0x00B0(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                LightExponent;                                            // 0x00E0(0x0030) (Edit)
	struct FEngine_LightingChannels                    LightingChannels;                                         // 0x0110(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              VolumetricScatteringIntensity;                            // 0x0114(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bHighQualityLights;                                       // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShadowCastingLights;                                     // 0x0119(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x011A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLight_Seeded
// 0x0020 (0x0140 - 0x0120)
class UEngine_ParticleModuleLight_Seeded : public UEngine_ParticleModuleLight
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0120(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLight_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleLocationBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0050 (0x0080 - 0x0030)
class UEngine_ParticleModuleLocation : public UEngine_ParticleModuleLocationBase
{
public:
	struct FEngine_RawDistributionVector               StartLocation;                                            // 0x0030(0x0048) (Edit)
	float                                              DistributeOverNPoints;                                    // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistributeThreshold;                                      // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00A0 - 0x0080)
class UEngine_ParticleModuleLocation_Seeded : public UEngine_ParticleModuleLocation
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0040 (0x0070 - 0x0030)
class UEngine_ParticleModuleLocationBoneSocket : public UEngine_ParticleModuleLocationBase
{
public:
	TEnumAsByte<FEngine_Engine_ELocationBoneSocketSource> SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_LocationBoneSocketInfo>      SourceLocations;                                          // 0x0040(0x0010) (Edit, ZeroConstructor)
	TEnumAsByte<FEngine_Engine_ELocationBoneSocketSelectionMethod> SelectionMethod;                                          // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0054(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0054(0x0001)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x005C(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                NumPreSelectedIndices;                                    // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0068(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0120 (0x0150 - 0x0030)
class UEngine_ParticleModuleLocationDirect : public UEngine_ParticleModuleLocationBase
{
public:
	struct FEngine_RawDistributionVector               Location;                                                 // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionVector               LocationOffset;                                           // 0x0078(0x0048) (Edit)
	struct FEngine_RawDistributionVector               ScaleFactor;                                              // 0x00C0(0x0048) (Edit)
	struct FEngine_RawDistributionVector               Direction;                                                // 0x0108(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0020 (0x0050 - 0x0030)
class UEngine_ParticleModuleLocationEmitter : public UEngine_ParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ELocationEmitterSelectionMethod> SelectionMethod;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	unsigned char                                      InheritSourceVelocity : 1;                                // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              InheritSourceVelocityScale;                               // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bInheritSourceRotation : 1;                               // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              InheritSourceRotationScale;                               // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleLocationEmitterDirect : public UEngine_ParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0080 (0x00B0 - 0x0030)
class UEngine_ParticleModuleLocationPrimitiveBase : public UEngine_ParticleModuleLocationBase
{
public:
	unsigned char                                      Positive_X : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Y : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Positive_Z : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_X : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Y : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      Negative_Z : 1;                                           // 0x0030(0x0001) (Edit)
	unsigned char                                      SurfaceOnly : 1;                                          // 0x0030(0x0001) (Edit)
	unsigned char                                      Velocity : 1;                                             // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                VelocityScale;                                            // 0x0038(0x0030) (Edit)
	struct FEngine_RawDistributionVector               StartLocation;                                            // 0x0068(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0070 (0x0120 - 0x00B0)
class UEngine_ParticleModuleLocationPrimitiveCylinder : public UEngine_ParticleModuleLocationPrimitiveBase
{
public:
	unsigned char                                      RadialVelocity : 1;                                       // 0x00B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00B1(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                StartRadius;                                              // 0x00B8(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                StartHeight;                                              // 0x00E8(0x0030) (Edit)
	TEnumAsByte<FEngine_Engine_ECylinderHeightAxis>    HeightAxis;                                               // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0119(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0020 (0x0140 - 0x0120)
class UEngine_ParticleModuleLocationPrimitiveCylinder_Seeded : public UEngine_ParticleModuleLocationPrimitiveCylinder
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0120(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0030 (0x00E0 - 0x00B0)
class UEngine_ParticleModuleLocationPrimitiveSphere : public UEngine_ParticleModuleLocationPrimitiveBase
{
public:
	struct FEngine_RawDistributionFloat                StartRadius;                                              // 0x00B0(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0100 - 0x00E0)
class UEngine_ParticleModuleLocationPrimitiveSphere_Seeded : public UEngine_ParticleModuleLocationPrimitiveSphere
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x00E0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x0090 - 0x0030)
class UEngine_ParticleModuleLocationSkelVertSurface : public UEngine_ParticleModuleLocationBase
{
public:
	TEnumAsByte<FEngine_Engine_ELocationSkelVertSurfaceSource> SourceType;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUpdatePositionEachFrame : 1;                             // 0x0040(0x0001) (Edit)
	unsigned char                                      bOrientMeshEmitters : 1;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bInheritBoneVelocity : 1;                                 // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              InheritVelocityScale;                                     // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0050(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bEnforceNormalCheck : 1;                                  // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FVector                                     NormalToCompare;                                          // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckToleranceDegrees;                              // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NormalCheckTolerance;                                     // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0078(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bInheritVertexColor : 1;                                  // 0x0088(0x0001) (Edit)
	unsigned char                                      bInheritUV : 1;                                           // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	uint32_t                                           InheritUVChannel;                                         // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0080 - 0x0080)
class UEngine_ParticleModuleLocationWorldOffset : public UEngine_ParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00A0 - 0x0080)
class UEngine_ParticleModuleLocationWorldOffset_Seeded : public UEngine_ParticleModuleLocationWorldOffset
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleMaterialBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleMeshMaterial : public UEngine_ParticleModuleMaterialBase
{
public:
	TArray<class UEngine_MaterialInterface*>           MeshMaterials;                                            // 0x0030(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleRotationBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0050 (0x0080 - 0x0030)
class UEngine_ParticleModuleMeshRotation : public UEngine_ParticleModuleRotationBase
{
public:
	struct FEngine_RawDistributionVector               StartRotation;                                            // 0x0030(0x0048) (Edit)
	unsigned char                                      bInheritParent : 1;                                       // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0020 (0x00A0 - 0x0080)
class UEngine_ParticleModuleMeshRotation_Seeded : public UEngine_ParticleModuleMeshRotation
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0080(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleRotationRateBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00D8 (0x0108 - 0x0030)
class UEngine_ParticleModuleLocationPrimitiveTriangle : public UEngine_ParticleModuleLocationBase
{
public:
	struct FEngine_RawDistributionVector               StartOffset;                                              // 0x0030(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                Height;                                                   // 0x0078(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                Angle;                                                    // 0x00A8(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                Thickness;                                                // 0x00D8(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveTriangle");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x0048 (0x0078 - 0x0030)
class UEngine_ParticleModuleMeshRotationRate : public UEngine_ParticleModuleRotationRateBase
{
public:
	struct FEngine_RawDistributionVector               StartRotationRate;                                        // 0x0030(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x0098 - 0x0078)
class UEngine_ParticleModuleMeshRotationRate_Seeded : public UEngine_ParticleModuleMeshRotationRate
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0078(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0048 (0x0078 - 0x0030)
class UEngine_ParticleModuleMeshRotationRateMultiplyLife : public UEngine_ParticleModuleRotationRateBase
{
public:
	struct FEngine_RawDistributionVector               LifeMultiplier;                                           // 0x0030(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0050 (0x0080 - 0x0030)
class UEngine_ParticleModuleMeshRotationRateOverLife : public UEngine_ParticleModuleRotationRateBase
{
public:
	struct FEngine_RawDistributionVector               RotRate;                                                  // 0x0030(0x0048) (Edit)
	unsigned char                                      bScaleRotRate : 1;                                        // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleOrbitBase : public UEngine_ParticleModule
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x00F8 (0x0130 - 0x0038)
class UEngine_ParticleModuleOrbit : public UEngine_ParticleModuleOrbitBase
{
public:
	TEnumAsByte<FEngine_Engine_EOrbitChainMode>        ChainMode;                                                // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionVector               OffsetAmount;                                             // 0x0040(0x0048) (Edit)
	struct FEngine_OrbitOptions                        OffsetOptions;                                            // 0x0088(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionVector               RotationAmount;                                           // 0x0090(0x0048) (Edit)
	struct FEngine_OrbitOptions                        RotationOptions;                                          // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionVector               RotationRateAmount;                                       // 0x00E0(0x0048) (Edit)
	struct FEngine_OrbitOptions                        RotationRateOptions;                                      // 0x0128(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleOrientationBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0098 (0x00D8 - 0x0040)
class UEngine_ParticleModuleEventReceiverSpawn : public UEngine_ParticleModuleEventReceiverBase
{
public:
	struct FEngine_RawDistributionFloat                SpawnCount;                                               // 0x0040(0x0030) (Edit)
	unsigned char                                      bUseParticleTime : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      bUsePSysLocation : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      bInheritVelocity : 1;                                     // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionVector               InheritVelocityScale;                                     // 0x0078(0x0048) (Edit)
	TArray<class UEngine_PhysicalMaterial*>            PhysicalMaterials;                                        // 0x00C0(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bBanPhysicalMaterials : 1;                                // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleOrientationAxisLock : public UEngine_ParticleModuleOrientationBase
{
public:
	TEnumAsByte<FEngine_Engine_EParticleAxisLock>      LockAxisFlags;                                            // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleParameterBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0018 (0x0048 - 0x0030)
class UEngine_ParticleModuleParameterDynamic : public UEngine_ParticleModuleParameterBase
{
public:
	TArray<struct FEngine_EmitterDynamicParameter>     DynamicParams;                                            // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	int                                                UpdateFlags;                                              // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUsesVelocity : 1;                                        // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0020 (0x0068 - 0x0048)
class UEngine_ParticleModuleParameterDynamic_Seeded : public UEngine_ParticleModuleParameterDynamic
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0048(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModulePivotOffset : public UEngine_ParticleModuleLocationBase
{
public:
	struct FVector2D                                   PivotOffset;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModulePivotOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x0110 (0x0140 - 0x0030)
class UEngine_ParticleModuleRequired : public UEngine_ParticleModule
{
public:
	class UEngine_MaterialInterface*                   Material;                                                 // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MinFacingCameraBlendDistance;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxFacingCameraBlendDistance;                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     EmitterOrigin;                                            // 0x0040(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    EmitterRotation;                                          // 0x004C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EParticleScreenAlignment> ScreenAlignment;                                          // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLocalSpace : 1;                                       // 0x0059(0x0001) (Edit)
	unsigned char                                      bKillOnDeactivate : 1;                                    // 0x0059(0x0001) (Edit)
	unsigned char                                      bKillOnCompleted : 1;                                     // 0x0059(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleSortMode>      SortMode;                                                 // 0x005A(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseLegacyEmitterTime : 1;                                // 0x005B(0x0001) (Edit)
	unsigned char                                      bRemoveHMDRoll : 1;                                       // 0x005B(0x0001) (Edit)
	unsigned char                                      bEmitterDurationUseRange : 1;                             // 0x005B(0x0001) (Edit)
	float                                              EmitterDuration;                                          // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_RawDistributionFloat                SpawnRate;                                                // 0x0060(0x0030)
	TArray<struct FEngine_ParticleBurst>               BurstList;                                                // 0x0090(0x0010) (ExportObject, ZeroConstructor, NoClear)
	float                                              EmitterDelay;                                             // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDelayLow;                                          // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDelayFirstLoopOnly : 1;                                  // 0x00A8(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleSubUVInterpMethod> InterpolationMethod;                                      // 0x00A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bScaleUV : 1;                                             // 0x00AA(0x0001) (Edit)
	unsigned char                                      bEmitterDelayUseRange : 1;                                // 0x00AA(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleBurstMethod>   ParticleBurstMethod;                                      // 0x00AB(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideSystemMacroUV : 1;                               // 0x00AC(0x0001) (Edit)
	unsigned char                                      bUseMaxDrawCount : 1;                                     // 0x00AC(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EOpacitySourceMode>     OpacitySourceMode;                                        // 0x00AD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EEmitterNormalsMode>    EmitterNormalsMode;                                       // 0x00AE(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x00AF(0x0001) (Edit)
	int                                                SubImages_Horizontal;                                     // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RandomImageTime;                                          // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                RandomImageChanges;                                       // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MacroUVPosition;                                          // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EParticleUVFlipMode                 UVFlippingMode;                                           // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESubUVBoundingVertexCount> BoundingMode;                                             // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDurationRecalcEachLoop : 1;                              // 0x00D2(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00D3(0x0001) MISSED OFFSET
	struct FVector                                     NormalsSphereCenter;                                      // 0x00D4(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AlphaThreshold;                                           // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                EmitterLoops;                                             // 0x00E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_Texture2D*                           CutoutTexture;                                            // 0x00E8(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxDrawCount;                                             // 0x00F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              EmitterDurationLow;                                       // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x00F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<struct FName>                               NamedMaterialOverrides;                                   // 0x0108(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x28];                                      // 0x0118(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x0030 (0x0060 - 0x0030)
class UEngine_ParticleModuleRotation : public UEngine_ParticleModuleRotationBase
{
public:
	struct FEngine_RawDistributionFloat                StartRotation;                                            // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0080 - 0x0060)
class UEngine_ParticleModuleRotation_Seeded : public UEngine_ParticleModuleRotation
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleRotationOverLifetime : public UEngine_ParticleModuleRotationBase
{
public:
	struct FEngine_RawDistributionFloat                RotationOverLife;                                         // 0x0030(0x0030) (Edit)
	unsigned char                                      Scale : 1;                                                // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x0030 (0x0060 - 0x0030)
class UEngine_ParticleModuleRotationRate : public UEngine_ParticleModuleRotationRateBase
{
public:
	struct FEngine_RawDistributionFloat                StartRotationRate;                                        // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0030 (0x0060 - 0x0030)
class UEngine_ParticleModuleRotationRateMultiplyLife : public UEngine_ParticleModuleRotationRateBase
{
public:
	struct FEngine_RawDistributionFloat                LifeMultiplier;                                           // 0x0030(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleSizeBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x0048 (0x0078 - 0x0030)
class UEngine_ParticleModuleSize : public UEngine_ParticleModuleSizeBase
{
public:
	struct FEngine_RawDistributionVector               StartSize;                                                // 0x0030(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x0098 - 0x0078)
class UEngine_ParticleModuleSize_Seeded : public UEngine_ParticleModuleSize
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0078(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0050 (0x0080 - 0x0030)
class UEngine_ParticleModuleSizeMultiplyLife : public UEngine_ParticleModuleSizeBase
{
public:
	struct FEngine_RawDistributionVector               LifeMultiplier;                                           // 0x0030(0x0048) (Edit)
	unsigned char                                      MultiplyX : 1;                                            // 0x0078(0x0001) (Edit)
	unsigned char                                      MultiplyY : 1;                                            // 0x0078(0x0001) (Edit)
	unsigned char                                      MultiplyZ : 1;                                            // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0050 (0x0080 - 0x0030)
class UEngine_ParticleModuleSizeScale : public UEngine_ParticleModuleSizeBase
{
public:
	struct FEngine_RawDistributionVector               SizeScale;                                                // 0x0030(0x0048) (Edit)
	unsigned char                                      EnableX : 1;                                              // 0x0078(0x0001) (Edit)
	unsigned char                                      EnableY : 1;                                              // 0x0078(0x0001) (Edit)
	unsigned char                                      EnableZ : 1;                                              // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0080 - 0x0060)
class UEngine_ParticleModuleRotationRate_Seeded : public UEngine_ParticleModuleRotationRate
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x0048 (0x0078 - 0x0030)
class UEngine_ParticleModuleSourceMovement : public UEngine_ParticleModuleLocationBase
{
public:
	struct FEngine_RawDistributionVector               SourceMovementScale;                                      // 0x0030(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleSpawnBase : public UEngine_ParticleModule
{
public:
	unsigned char                                      bProcessSpawnRate : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      bProcessBurstList : 1;                                    // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x00B0 (0x00E8 - 0x0038)
class UEngine_ParticleModuleSpawn : public UEngine_ParticleModuleSpawnBase
{
public:
	struct FEngine_RawDistributionFloat                Rate;                                                     // 0x0038(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                RateScale;                                                // 0x0068(0x0030) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleBurstMethod>   ParticleBurstMethod;                                      // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<struct FEngine_ParticleBurst>               BurstList;                                                // 0x00A0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear)
	struct FEngine_RawDistributionFloat                BurstScale;                                               // 0x00B0(0x0030) (Edit)
	unsigned char                                      bApplyGlobalSpawnRateScale : 1;                           // 0x00E0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0040 (0x0078 - 0x0038)
class UEngine_ParticleModuleSpawnPerUnit : public UEngine_ParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MovementTolerance;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_RawDistributionFloat                SpawnPerUnit;                                             // 0x0040(0x0030) (Edit)
	float                                              MaxFrameDistance;                                         // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongX : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongY : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      bIgnoreMovementAlongZ : 1;                                // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleSubUVBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0040 (0x0070 - 0x0030)
class UEngine_ParticleModuleSubUV : public UEngine_ParticleModuleSubUVBase
{
public:
	class UEngine_SubUVAnimation*                      Animation;                                                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FEngine_RawDistributionFloat                SubImageIndex;                                            // 0x0038(0x0030) (Edit)
	unsigned char                                      bUseRealTime : 1;                                         // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0040 (0x00B0 - 0x0070)
class UEngine_ParticleModuleSubUVMovie : public UEngine_ParticleModuleSubUV
{
public:
	unsigned char                                      bUseEmitterTime : 1;                                      // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                FrameRate;                                                // 0x0078(0x0030) (Edit)
	int                                                StartingFrame;                                            // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleTrailBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleTypeDataBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleSizeScaleBySpeed : public UEngine_ParticleModuleSizeBase
{
public:
	struct FVector2D                                   SpeedScale;                                               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector2D                                   MaxScale;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleBySpeed");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0018 (0x0048 - 0x0030)
class UEngine_ParticleModuleTypeDataAnimTrail : public UEngine_ParticleModuleTypeDataBase
{
public:
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0030(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0030(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TangentTessellationStepSize;                              // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WidthTessellationStepSize;                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0044(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0120 (0x0150 - 0x0030)
class UEngine_ParticleModuleTypeDataBeam2 : public UEngine_ParticleModuleTypeDataBase
{
public:
	TEnumAsByte<FEngine_Engine_EBeam2Method>           BeamMethod;                                               // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	int                                                TextureTile;                                              // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureTileDistance;                                      // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                Sheets;                                                   // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxBeamCount;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                InterpolationPoints;                                      // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysOn : 1;                                            // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	int                                                UpVectorStepSize;                                         // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FName                                       BranchParentName;                                         // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionFloat                Distance;                                                 // 0x0060(0x0030) (Edit)
	TEnumAsByte<FEngine_Engine_EBeamTaperMethod>       TaperMethod;                                              // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FEngine_RawDistributionFloat                TaperFactor;                                              // 0x0098(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                TaperScale;                                               // 0x00C8(0x0030) (Edit)
	unsigned char                                      RenderGeometry : 1;                                       // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderDirectLine : 1;                                     // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderLines : 1;                                          // 0x00F8(0x0001) (Edit)
	unsigned char                                      RenderTessellation : 1;                                   // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x57];                                      // 0x00F9(0x0057) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x0060 (0x0090 - 0x0030)
class UEngine_ParticleModuleTrailSource : public UEngine_ParticleModuleTrailBase
{
public:
	TEnumAsByte<FEngine_Engine_ETrail2SourceMethod>    SourceMethod;                                             // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FEngine_RawDistributionFloat                SourceStrength;                                           // 0x0040(0x0030) (Edit)
	unsigned char                                      bLockSourceStength : 1;                                   // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	int                                                SourceOffsetCount;                                        // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TEnumAsByte<FEngine_Engine_EParticleSourceSelectionMethod> SelectionMethod;                                          // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned char                                      bInheritRotation : 1;                                     // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x008D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0068 (0x0098 - 0x0030)
class UEngine_ParticleModuleTypeDataMesh : public UEngine_ParticleModuleTypeDataBase
{
public:
	class UEngine_StaticMesh*                          Mesh;                                                     // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET
	float                                              LODSizeScale;                                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseStaticMeshLODs : 1;                                   // 0x0044(0x0001) (Edit)
	unsigned char                                      CastShadows : 1;                                          // 0x0044(0x0001)
	unsigned char                                      DoCollisions : 1;                                         // 0x0044(0x0001)
	TEnumAsByte<FEngine_Engine_EMeshScreenAlignment>   MeshAlignment;                                            // 0x0045(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverrideMaterial : 1;                                    // 0x0046(0x0001) (Edit)
	unsigned char                                      bOverrideDefaultMotionBlurSettings : 1;                   // 0x0046(0x0001) (Edit)
	unsigned char                                      bEnableMotionBlur : 1;                                    // 0x0046(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	struct FEngine_RawDistributionVector               RollPitchYawRange;                                        // 0x0048(0x0048) (Edit)
	TEnumAsByte<FEngine_Engine_EParticleAxisLock>      AxisLockOption;                                           // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraFacing : 1;                                        // 0x0091(0x0001) (Edit)
	TEnumAsByte<FEngine_Engine_EMeshCameraFacingUpAxis> CameraFacingUpAxisOption;                                 // 0x0092(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMeshCameraFacingOptions> CameraFacingOption;                                       // 0x0093(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bApplyParticleRotationAsSpin : 1;                         // 0x0094(0x0001) (Edit)
	unsigned char                                      bFaceCameraDirectionRatherThanPosition : 1;               // 0x0094(0x0001) (Edit)
	unsigned char                                      bCollisionsConsiderPartilceSize : 1;                      // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0095(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0060 - 0x0030)
class UEngine_ParticleModuleTypeDataRibbon : public UEngine_ParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                SheetsPerTrail;                                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxTrailCount;                                            // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                MaxParticleInTrailCount;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bDeadTrailsOnDeactivate : 1;                              // 0x0040(0x0001) (Edit)
	unsigned char                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0040(0x0001) (Edit)
	unsigned char                                      bClipSourceSegement : 1;                                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0040(0x0001) (Edit)
	unsigned char                                      bTangentRecalculationEveryFrame : 1;                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bSpawnInitialParticle : 1;                                // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ETrailsRenderAxisOption> RenderAxis;                                               // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRenderGeometry : 1;                                      // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderSpawnPoints : 1;                                   // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTangents : 1;                                      // 0x004C(0x0001) (Edit)
	unsigned char                                      bRenderTessellation : 1;                                  // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              TilingDistance;                                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceTessellationStepSize;                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnableTangentDiffInterpScale : 1;                        // 0x0058(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	float                                              TangentTessellationScalar;                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldBase
// 0x0000 (0x0030 - 0x0030)
class UEngine_ParticleModuleVectorFieldBase : public UEngine_ParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldGlobal
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleVectorFieldGlobal : public UEngine_ParticleModuleVectorFieldBase
{
public:
	unsigned char                                      bOverrideGlobalVectorFieldTightness : 1;                  // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0031(0x0003) MISSED OFFSET
	float                                              GlobalVectorFieldScale;                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GlobalVectorFieldTightness;                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldGlobal");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldLocal
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleVectorFieldLocal : public UEngine_ParticleModuleVectorFieldBase
{
public:
	class UEngine_VectorField*                         VectorField;                                              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeTranslation;                                      // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale3D;                                          // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bIgnoreComponentTransform : 1;                            // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileX : 1;                                               // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileY : 1;                                               // 0x0064(0x0001) (Edit)
	unsigned char                                      bTileZ : 1;                                               // 0x0064(0x0001) (Edit)
	unsigned char                                      bUseFixDT : 1;                                            // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldLocal");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0048 - 0x0030)
class UEngine_ParticleModuleVectorFieldRotation : public UEngine_ParticleModuleVectorFieldBase
{
public:
	struct FVector                                     MinInitialRotation;                                       // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MaxInitialRotation;                                       // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x0010 (0x0040 - 0x0030)
class UEngine_ParticleModuleVectorFieldRotationRate : public UEngine_ParticleModuleVectorFieldBase
{
public:
	struct FVector                                     RotationRate;                                             // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScale
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleVectorFieldScale : public UEngine_ParticleModuleVectorFieldBase
{
public:
	class UEngine_DistributionFloat*                   VectorFieldScale;                                         // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RawDistributionFloat                VectorFieldScaleRaw;                                      // 0x0038(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0038 (0x0068 - 0x0030)
class UEngine_ParticleModuleVectorFieldScaleOverLife : public UEngine_ParticleModuleVectorFieldBase
{
public:
	class UEngine_DistributionFloat*                   VectorFieldScaleOverLife;                                 // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RawDistributionFloat                VectorFieldScaleOverLifeRaw;                              // 0x0038(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVectorFieldScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0008 (0x0038 - 0x0030)
class UEngine_ParticleModuleVelocityBase : public UEngine_ParticleModule
{
public:
	unsigned char                                      bInWorldSpace : 1;                                        // 0x0030(0x0001) (Edit)
	unsigned char                                      bApplyOwnerScale : 1;                                     // 0x0030(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0031(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0078 (0x00B0 - 0x0038)
class UEngine_ParticleModuleVelocity : public UEngine_ParticleModuleVelocityBase
{
public:
	struct FEngine_RawDistributionVector               StartVelocity;                                            // 0x0038(0x0048) (Edit)
	struct FEngine_RawDistributionFloat                StartVelocityRadial;                                      // 0x0080(0x0030) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataGpu
// 0x03F0 (0x0420 - 0x0030)
class UEngine_ParticleModuleTypeDataGpu : public UEngine_ParticleModuleTypeDataBase
{
public:
	struct FEngine_GPUSpriteEmitterInfo                EmitterInfo;                                              // 0x0030(0x0280)
	struct FEngine_GPUSpriteResourceData               ResourceData;                                             // 0x02B0(0x0160)
	float                                              CameraMotionBlurAmount;                                   // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bClearExistingParticlesOnInit : 1;                        // 0x0414(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0415(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataGpu");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0070 (0x00A8 - 0x0038)
class UEngine_ParticleModuleVelocityCone : public UEngine_ParticleModuleVelocityBase
{
public:
	struct FEngine_RawDistributionFloat                Angle;                                                    // 0x0038(0x0030) (Edit)
	struct FEngine_RawDistributionFloat                Velocity;                                                 // 0x0068(0x0030) (Edit)
	struct FVector                                     Direction;                                                // 0x0098(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00D0 - 0x00B0)
class UEngine_ParticleModuleVelocity_Seeded : public UEngine_ParticleModuleVelocity
{
public:
	struct FEngine_ParticleRandomSeedInfo              RandomSeedInfo;                                           // 0x00B0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x01B8 - 0x01B8)
class UEngine_ParticleSpriteEmitter : public UEngine_ParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x00E0 (0x0110 - 0x0030)
class UEngine_ParticleSystem : public UEngine_FXSystemAsset
{
public:
	float                                              UpdateTime_FPS;                                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              UpdateTime_Delta;                                         // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              WarmupTime;                                               // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              WarmupTickRate;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_ParticleEmitter*>             Emitters;                                                 // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	class UEngine_ParticleSystemComponent*             PreviewComponent;                                         // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData)
	class UEngine_InterpCurveEdSetup*                  CurveEdSetup;                                             // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData)
	float                                              LODDistanceCheckTime;                                     // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MacroUVRadius;                                            // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<float>                                      LODDistances;                                             // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FEngine_ParticleSystemLOD>           LODSettings;                                              // 0x0078(0x0010) (Edit, ZeroConstructor)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x0088(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SecondsBeforeInactive;                                    // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Delay;                                                    // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayLow;                                                 // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOrientZAxisTowardCamera : 1;                             // 0x00B0(0x0001) (Edit)
	unsigned char                                      bUseFixedRelativeBoundingBox : 1;                         // 0x00B0(0x0001) (Edit)
	unsigned char                                      bShouldResetPeakCounts : 1;                               // 0x00B0(0x0001)
	unsigned char                                      bHasPhysics : 1;                                          // 0x00B0(0x0001) (Transient)
	unsigned char                                      bUseRealtimeThumbnail : 1;                                // 0x00B0(0x0001) (Edit)
	unsigned char                                      ThumbnailImageOutOfDate : 1;                              // 0x00B0(0x0001)
	unsigned char                                      UnknownData00 : 2;                                        // 0x00B0(0x0001)
	unsigned char                                      bUseDelayRange : 1;                                       // 0x00B1(0x0001) (Edit)
	unsigned char                                      bAllowManagedTicking : 1;                                 // 0x00B1(0x0001) (Edit)
	unsigned char                                      bAutoDeactivate : 1;                                      // 0x00B1(0x0001) (Edit)
	unsigned char                                      bRegenerateLODDuplicate : 1;                              // 0x00B1(0x0001)
	TEnumAsByte<FEngine_Engine_EParticleSystemUpdateMode> SystemUpdateMode;                                         // 0x00B2(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EParticleSystemLODMethod> LODMethod;                                                // 0x00B3(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	FEngine_Engine_EParticleSystemInsignificanceReaction InsignificantReaction;                                    // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EParticleSystemOcclusionBoundsMethod> OcclusionBoundsMethod;                                    // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00B6(0x0001) MISSED OFFSET
	FEngine_Engine_EParticleSignificanceLevel          MaxSignificanceLevel;                                     // 0x00B7(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MinTimeBetweenTicks;                                      // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              InsignificanceDelay;                                      // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FVector                                     MacroUVPosition;                                          // 0x00C0(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x00CC(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_LODSoloTrack>                SoloTracking;                                             // 0x00E8(0x0010) (ZeroConstructor, Transient)
	TArray<struct FEngine_NamedEmitterMaterial>        NamedMaterialSlots;                                       // 0x00F8(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}


	bool ContainsEmitterType(class UClass* TypeData);
};


// Class Engine.ParticleSystemReplay
// 0x0018 (0x0040 - 0x0028)
class UEngine_ParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData00[0x14];                                      // 0x002C(0x0014) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}

};


// Class Engine.PathFollowingAgentInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_PathFollowingAgentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathFollowingAgentInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PathFollowingAgentInterface");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x0048 (0x0080 - 0x0038)
class UEngine_ParticleModuleVelocityInheritParent : public UEngine_ParticleModuleVelocityBase
{
public:
	struct FEngine_RawDistributionVector               Scale;                                                    // 0x0038(0x0048) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0050 (0x0088 - 0x0038)
class UEngine_ParticleModuleVelocityOverLifetime : public UEngine_ParticleModuleVelocityBase
{
public:
	struct FEngine_RawDistributionVector               VelOverLife;                                              // 0x0038(0x0048) (Edit)
	unsigned char                                      Absolute : 1;                                             // 0x0080(0x0001) (Edit, ExportObject)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}

};


// Class Engine.PhysicalAnimationComponent
// 0x0040 (0x00F0 - 0x00B0)
class UEngine_PhysicalAnimationComponent : public UEngine_ActorComponent
{
public:
	float                                              StrengthMultiplyer;                                       // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class UEngine_SkeletalMeshComponent*               SkeletalMeshComponent;                                    // 0x00B8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData01[0x30];                                      // 0x00C0(0x0030) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalAnimationComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicalAnimationComponent");
		return ptr;
	}


	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetSkeletalMeshComponent(class UEngine_SkeletalMeshComponent* InSkeletalMeshComponent);
	struct FTransform GetBodyTargetTransform(const struct FName& BodyName);
	void ApplyPhysicalAnimationSettingsBelow(const struct FName& BodyName, const struct FEngine_PhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ApplyPhysicalAnimationSettings(const struct FName& BodyName, const struct FEngine_PhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationProfileBelow(const struct FName& BodyName, const struct FName& ProfileName, bool bIncludeSelf, bool bClearNotFound);
};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0028 - 0x0028)
class UEngine_PhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x00F8 (0x0120 - 0x0028)
class UEngine_PhysicsAsset : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<int>                                        BoundsBodies;                                             // 0x0030(0x0010) (ZeroConstructor)
	TArray<class UEngine_SkeletalBodySetup*>           SkeletalBodySetups;                                       // 0x0040(0x0010) (ExportObject, ZeroConstructor)
	TArray<class UEngine_PhysicsConstraintTemplate*>   ConstraintSetup;                                          // 0x0050(0x0010) (ExportObject, ZeroConstructor)
	unsigned char                                      bNotForDedicatedServer : 1;                               // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xA7];                                      // 0x0061(0x00A7) MISSED OFFSET
	class UEngine_ThumbnailInfo*                       ThumbnailInfo;                                            // 0x0108(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	TArray<class UEngine_BodySetup*>                   BodySetup;                                                // 0x0110(0x0010) (ExportObject, ZeroConstructor, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}

};


// Class Engine.SkeletalBodySetup
// 0x0018 (0x0258 - 0x0240)
class UEngine_SkeletalBodySetup : public UEngine_BodySetup
{
public:
	bool                                               bSkipScaleFromAnimation;                                  // 0x0240(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0241(0x0007) MISSED OFFSET
	TArray<struct FEngine_PhysicalAnimationProfile>    PhysicalAnimationData;                                    // 0x0248(0x0010) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalBodySetup");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalBodySetup");
		return ptr;
	}

};


// Class Engine.PhysicsCollisionHandler
// 0x0018 (0x0040 - 0x0028)
class UEngine_PhysicsCollisionHandler : public UObject
{
public:
	float                                              ImpactThreshold;                                          // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ImpactReFireDelay;                                        // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_SoundBase*                           DefaultImpactSound;                                       // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastImpactSoundTime;                                      // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsCollisionHandler");
		return ptr;
	}

};


// Class Engine.RigidBodyBase
// 0x0000 (0x0218 - 0x0218)
class AEngine_RigidBodyBase : public AEngine_Actor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintActor
// 0x0020 (0x0238 - 0x0218)
class AEngine_PhysicsConstraintActor : public AEngine_RigidBodyBase
{
public:
	class UEngine_PhysicsConstraintComponent*          ConstraintComp;                                           // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	class AEngine_Actor*                               ConstraintActor1;                                         // 0x0220(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	class AEngine_Actor*                               ConstraintActor2;                                         // 0x0228(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      bDisableCollision : 1;                                    // 0x0230(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0231(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsConstraintActor");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintComponent
// 0x0200 (0x03F0 - 0x01F0)
class UEngine_PhysicsConstraintComponent : public UEngine_SceneComponent
{
public:
	class AEngine_Actor*                               ConstraintActor1;                                         // 0x01F0(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FEngine_ConstrainComponentPropName          ComponentName1;                                           // 0x01F8(0x0008) (Edit)
	class AEngine_Actor*                               ConstraintActor2;                                         // 0x0200(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData)
	struct FEngine_ConstrainComponentPropName          ComponentName2;                                           // 0x0208(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0210(0x0010) MISSED OFFSET
	class UEngine_PhysicsConstraintTemplate*           ConstraintSetup;                                          // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FScriptMulticastDelegate                    OnConstraintBroken;                                       // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FEngine_ConstraintInstance                  ConstraintInstance;                                       // 0x0238(0x01B8) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsConstraintComponent");
		return ptr;
	}


	void SetOrientationDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetOrientationDriveSLERP(bool bEnableSLERP);
	void SetLinearZLimit(TEnumAsByte<FEngine_Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearYLimit(TEnumAsByte<FEngine_Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearXLimit(TEnumAsByte<FEngine_Engine_ELinearConstraintMotion> ConstraintType, float LimitSize);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearVelocityDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetLinearPositionDrive(bool bEnableDriveX, bool bEnableDriveY, bool bEnableDriveZ);
	void SetLinearDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetLinearBreakable(bool bLinearBreakable, float LinearBreakThreshold);
	void SetDisableCollision(bool bDisableCollision);
	void SetConstraintReferencePosition(TEnumAsByte<FEngine_Engine_EConstraintFrame> Frame, const struct FVector& RefPosition);
	void SetConstraintReferenceOrientation(TEnumAsByte<FEngine_Engine_EConstraintFrame> Frame, const struct FVector& PriAxis, const struct FVector& SecAxis);
	void SetConstraintReferenceFrame(TEnumAsByte<FEngine_Engine_EConstraintFrame> Frame, const struct FTransform& RefFrame);
	void SetConstrainedComponents(class UEngine_PrimitiveComponent* Component1, const struct FName& BoneName1, class UEngine_PrimitiveComponent* Component2, const struct FName& BoneName2);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularVelocityDriveTwistAndSwing(bool bEnableTwistDrive, bool bEnableSwingDrive);
	void SetAngularVelocityDriveSLERP(bool bEnableSLERP);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularTwistLimit(TEnumAsByte<FEngine_Engine_EAngularConstraintMotion> ConstraintType, float TwistLimitAngle);
	void SetAngularSwing2Limit(TEnumAsByte<FEngine_Engine_EAngularConstraintMotion> MotionType, float Swing2LimitAngle);
	void SetAngularSwing1Limit(TEnumAsByte<FEngine_Engine_EAngularConstraintMotion> MotionType, float Swing1LimitAngle);
	void SetAngularOrientationTarget(const struct FRotator& InPosTarget);
	void SetAngularOrientationDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularDriveParams(float PositionStrength, float VelocityStrength, float InForceLimit);
	void SetAngularDriveMode(TEnumAsByte<FEngine_Engine_EAngularDriveMode> DriveMode);
	void SetAngularBreakable(bool bAngularBreakable, float AngularBreakThreshold);
	bool IsBroken();
	float GetCurrentTwist();
	float GetCurrentSwing2();
	float GetCurrentSwing1();
	void GetConstraintForce(struct FVector* OutLinearForce, struct FVector* OutAngularForce);
	void BreakConstraint();
};


// Class Engine.PawnNoiseEmitterComponent
// 0x0028 (0x00D8 - 0x00B0)
class UEngine_PawnNoiseEmitterComponent : public UEngine_ActorComponent
{
public:
	unsigned char                                      bAIPerceptionSystemCompatibilityMode : 1;                 // 0x00B0(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	struct FVector                                     LastRemoteNoisePosition;                                  // 0x00B4(0x000C) (ZeroConstructor, IsPlainOldData)
	float                                              NoiseLifetime;                                            // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseVolume;                                    // 0x00C4(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastRemoteNoiseTime;                                      // 0x00C8(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseVolume;                                     // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              LastLocalNoiseTime;                                       // 0x00D0(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PawnNoiseEmitterComponent");
		return ptr;
	}


	void MakeNoise(class AEngine_Actor* NoiseMaker, float Loudness, const struct FVector& NoiseLocation);
};


// Class Engine.PhysicsHandleComponent
// 0x00B0 (0x0160 - 0x00B0)
class UEngine_PhysicsHandleComponent : public UEngine_ActorComponent
{
public:
	class UEngine_PrimitiveComponent*                  GrabbedComponent;                                         // 0x00B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) MISSED OFFSET
	unsigned char                                      UnknownData01 : 1;                                        // 0x00C0(0x0001)
	unsigned char                                      bSoftAngularConstraint : 1;                               // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bSoftLinearConstraint : 1;                                // 0x00C0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bInterpolateTarget : 1;                                   // 0x00C0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData02[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	float                                              LinearDamping;                                            // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              LinearStiffness;                                          // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularDamping;                                           // 0x00CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AngularStiffness;                                         // 0x00D0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x6C];                                      // 0x00D4(0x006C) MISSED OFFSET
	float                                              InterpolationSpeed;                                       // 0x0140(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x1C];                                      // 0x0144(0x001C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsHandleComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsHandleComponent");
		return ptr;
	}


	void SetTargetRotation(const struct FRotator& NewRotation);
	void SetTargetLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetTargetLocation(const struct FVector& NewLocation);
	void SetLinearStiffness(float NewLinearStiffness);
	void SetLinearDamping(float NewLinearDamping);
	void SetInterpolationSpeed(float NewInterpolationSpeed);
	void SetAngularStiffness(float NewAngularStiffness);
	void SetAngularDamping(float NewAngularDamping);
	void ReleaseComponent();
	void GrabComponentAtLocationWithRotation(class UEngine_PrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& Location, const struct FRotator& Rotation);
	void GrabComponentAtLocation(class UEngine_PrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation);
	void GrabComponent(class UEngine_PrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
	void GetTargetLocationAndRotation(struct FVector* TargetLocation, struct FRotator* TargetRotation);
	class UEngine_PrimitiveComponent* GetGrabbedComponent();
};


// Class Engine.PhysicsSpringComponent
// 0x0030 (0x0220 - 0x01F0)
class UEngine_PhysicsSpringComponent : public UEngine_SceneComponent
{
public:
	float                                              SpringStiffness;                                          // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringDamping;                                            // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringLengthAtRest;                                       // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              SpringRadius;                                             // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionChannel>      SpringChannel;                                            // 0x0200(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bIgnoreSelf;                                              // 0x0201(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0202(0x0002) MISSED OFFSET
	float                                              SpringCompression;                                        // 0x0204(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x18];                                      // 0x0208(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsSpringComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsSpringComponent");
		return ptr;
	}


	struct FVector GetSpringRestingPoint();
	struct FVector GetSpringDirection();
	struct FVector GetSpringCurrentEndPoint();
	float GetNormalizedCompressionScalar();
};


// Class Engine.PhysicsThruster
// 0x0008 (0x0220 - 0x0218)
class AEngine_PhysicsThruster : public AEngine_RigidBodyBase
{
public:
	class UEngine_PhysicsThrusterComponent*            ThrusterComponent;                                        // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsThruster");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsThruster");
		return ptr;
	}

};


// Class Engine.PhysicsThrusterComponent
// 0x0010 (0x0200 - 0x01F0)
class UEngine_PhysicsThrusterComponent : public UEngine_SceneComponent
{
public:
	float                                              ThrustStrength;                                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x01F4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsThrusterComponent");
		return ptr;
	}

};


// Class Engine.SceneCapture
// 0x0010 (0x0228 - 0x0218)
class AEngine_SceneCapture : public AEngine_Actor
{
public:
	class UEngine_StaticMeshComponent*                 MeshComp;                                                 // 0x0218(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UEngine_SceneComponent*                      SceneComponent;                                           // 0x0220(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCapture");
		return ptr;
	}

};


// Class Engine.PlanarReflection
// 0x0010 (0x0238 - 0x0228)
class AEngine_PlanarReflection : public AEngine_SceneCapture
{
public:
	class UEngine_PlanarReflectionComponent*           PlanarReflectionComponent;                                // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x0230(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0231(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlanarReflection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlanarReflection");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureComponent
// 0x00A0 (0x0290 - 0x01F0)
class UEngine_SceneCaptureComponent : public UEngine_SceneComponent
{
public:
	FEngine_Engine_ESceneCapturePrimitiveRenderMode    PrimitiveRenderMode;                                      // 0x01F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESceneCaptureSource>    CaptureSource;                                            // 0x01F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x6];                                       // 0x01F2(0x0006) MISSED OFFSET
	TArray<TWeakObjectPtr<class UEngine_PrimitiveComponent>> HiddenComponents;                                         // 0x01F8(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AEngine_Actor*>                       HiddenActors;                                             // 0x0208(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	TArray<TWeakObjectPtr<class UEngine_PrimitiveComponent>> ShowOnlyComponents;                                       // 0x0218(0x0010) (ExportObject, ZeroConstructor)
	TArray<class AEngine_Actor*>                       ShowOnlyActors;                                           // 0x0228(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate)
	bool                                               bCaptureEveryFrame;                                       // 0x0238(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureOnMovement;                                       // 0x0239(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bAlwaysPersistRenderingState;                             // 0x023A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x1];                                       // 0x023B(0x0001) MISSED OFFSET
	float                                              LODDistanceFactor;                                        // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              MaxViewDistanceOverride;                                  // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                CaptureSortPriority;                                      // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_EngineShowFlagsSetting>      ShowFlagSettings;                                         // 0x0248(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData02[0x10];                                      // 0x0258(0x0010) MISSED OFFSET
	struct FString                                     ProfilingEventName;                                       // 0x0268(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x18];                                      // 0x0278(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}


	void ShowOnlyComponent(class UEngine_PrimitiveComponent* InComponent);
	void ShowOnlyActorComponents(class AEngine_Actor* InActor);
	void SetCaptureSortPriority(int NewCaptureSortPriority);
	void RemoveShowOnlyComponent(class UEngine_PrimitiveComponent* InComponent);
	void RemoveShowOnlyActorComponents(class AEngine_Actor* InActor);
	void HideComponent(class UEngine_PrimitiveComponent* InComponent);
	void HideActorComponents(class AEngine_Actor* InActor);
	void ClearShowOnlyComponents();
	void ClearHiddenComponents();
};


// Class Engine.PlanarReflectionComponent
// 0x00E0 (0x0370 - 0x0290)
class UEngine_PlanarReflectionComponent : public UEngine_SceneCaptureComponent
{
public:
	float                                              NormalDistortionStrength;                                 // 0x0290(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughness;                                       // 0x0294(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PrefilterRoughnessDistance;                               // 0x0298(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                ScreenPercentage;                                         // 0x029C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ExtraFOV;                                                 // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeStart;                               // 0x02A4(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeEnd;                                 // 0x02A8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutStart;                            // 0x02AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFromPlaneFadeoutEnd;                              // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeStart;                                  // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AngleFromPlaneFadeEnd;                                    // 0x02B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bShowPreviewPlane;                                        // 0x02BC(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bRenderSceneTwoSided;                                     // 0x02BD(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xB2];                                      // 0x02BE(0x00B2) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlanarReflectionComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlanarReflectionComponent");
		return ptr;
	}

};


// Class Engine.PhysicsConstraintTemplate
// 0x02D0 (0x02F8 - 0x0028)
class UEngine_PhysicsConstraintTemplate : public UObject
{
public:
	struct FEngine_ConstraintInstance                  DefaultInstance;                                          // 0x0028(0x01B8) (Edit)
	TArray<struct FEngine_PhysicsConstraintProfileHandle> ProfileHandles;                                           // 0x01E0(0x0010) (ZeroConstructor)
	struct FEngine_ConstraintProfileProperties         DefaultProfile;                                           // 0x01F0(0x0104) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02F4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsConstraintTemplate");
		return ptr;
	}

};


// Class Engine.PlaneReflectionCaptureComponent
// 0x0010 (0x0280 - 0x0270)
class UEngine_PlaneReflectionCaptureComponent : public UEngine_ReflectionCaptureComponent
{
public:
	class UEngine_DrawSphereComponent*                 PreviewInfluenceRadius;                                   // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_BoxComponent*                        PreviewCaptureBox;                                        // 0x0278(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlaneReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.PlatformEventsComponent
// 0x0020 (0x00D0 - 0x00B0)
class UEngine_PlatformEventsComponent : public UEngine_ActorComponent
{
public:
	struct FScriptMulticastDelegate                    PlatformChangedToLaptopModeDelegate;                      // 0x00B0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    PlatformChangedToTabletModeDelegate;                      // 0x00C0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformEventsComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlatformEventsComponent");
		return ptr;
	}


	bool SupportsConvertibleLaptops();
	void PlatformEventDelegate__DelegateSignature();
	bool IsInTabletMode();
	bool IsInLaptopMode();
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0088 (0x00B0 - 0x0028)
class UEngine_PlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                              // 0x0028(0x0010) (ZeroConstructor)
	int                                                ResponseCode;                                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                Tag;                                                      // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FString                                     StringResponse;                                           // 0x0040(0x0010) (ZeroConstructor)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0050(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0060(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}


	int GetNumHeaders();
	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
};


// Class Engine.PlayerInput
// 0x0380 (0x03A8 - 0x0028)
class UEngine_PlayerInput : public UObject
{
public:
	unsigned char                                      UnknownData00[0xF8];                                      // 0x0028(0x00F8) MISSED OFFSET
	TArray<struct FEngine_KeyBind>                     DebugExecBindings;                                        // 0x0120(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData01[0x30];                                      // 0x0130(0x0030) MISSED OFFSET
	TArray<struct FName>                               InvertedAxis;                                             // 0x0160(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData02[0x238];                                     // 0x0170(0x0238) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	void SetMouseSensitivity(float Sensitivity);
	void SetBind(const struct FName& BindName, const struct FString& Command);
	void InvertAxisKey(const struct FInputCore_Key& AxisKey);
	void InvertAxis(const struct FName& AxisName);
	void ClearSmoothing();
};


// Class Engine.PlayerStart
// 0x0008 (0x0248 - 0x0240)
class AEngine_PlayerStart : public AEngine_NavigationObjectBase
{
public:
	struct FName                                       PlayerStartTag;                                           // 0x0240(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}

};


// Class Engine.PlayerStartPIE
// 0x0000 (0x0248 - 0x0248)
class AEngine_PlayerStartPIE : public AEngine_PlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStartPIE");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerStartPIE");
		return ptr;
	}

};


// Class Engine.PlaneReflectionCapture
// 0x0000 (0x0220 - 0x0220)
class AEngine_PlaneReflectionCapture : public AEngine_ReflectionCapture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlaneReflectionCapture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlaneReflectionCapture");
		return ptr;
	}

};


// Class Engine.PluginCommandlet
// 0x0020 (0x00A0 - 0x0080)
class UEngine_PluginCommandlet : public UEngine_Commandlet
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0080(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PluginCommandlet");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PluginCommandlet");
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0008 (0x0230 - 0x0228)
class AEngine_PointLight : public AEngine_Light
{
public:
	class UEngine_PointLightComponent*                 PointLightComponent;                                      // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}


	void SetRadius(float NewRadius);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.PointLightComponent
// 0x0020 (0x0370 - 0x0350)
class UEngine_PointLightComponent : public UEngine_LocalLightComponent
{
public:
	unsigned char                                      bUseInverseSquaredFalloff : 1;                            // 0x0350(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0351(0x0003) MISSED OFFSET
	float                                              LightFalloffExponent;                                     // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceRadius;                                             // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SoftSourceRadius;                                         // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceLength;                                             // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0364(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}


	void SetSourceRadius(float bNewValue);
	void SetSourceLength(float NewValue);
	void SetSoftSourceRadius(float bNewValue);
	void SetLightFalloffExponent(float NewLightFalloffExponent);
};


// Class Engine.Polys
// 0x0010 (0x0038 - 0x0028)
class UEngine_Polys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.PoseableMeshComponent
// 0x0160 (0x0770 - 0x0610)
class UEngine_PoseableMeshComponent : public UEngine_SkinnedMeshComponent
{
public:
	unsigned char                                      UnknownData00[0x160];                                     // 0x0610(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseableMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PoseableMeshComponent");
		return ptr;
	}


	void SetBoneTransformByName(const struct FName& BoneName, const struct FTransform& InTransform, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	void SetBoneScaleByName(const struct FName& BoneName, const struct FVector& InScale3D, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	void SetBoneRotationByName(const struct FName& BoneName, const struct FRotator& InRotation, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	void SetBoneLocationByName(const struct FName& BoneName, const struct FVector& InLocation, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	void ResetBoneTransformByName(const struct FName& BoneName);
	struct FTransform GetBoneTransformByName(const struct FName& BoneName, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneScaleByName(const struct FName& BoneName, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	struct FRotator GetBoneRotationByName(const struct FName& BoneName, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	struct FVector GetBoneLocationByName(const struct FName& BoneName, TEnumAsByte<FEngine_Engine_EBoneSpaces> BoneSpace);
	void CopyPoseFromSkeletalComponent(class UEngine_SkeletalMeshComponent* InComponentToCopy);
};


// Class Engine.PoseAsset
// 0x00A0 (0x0120 - 0x0080)
class UEngine_PoseAsset : public UEngine_AnimationAsset
{
public:
	struct FEngine_PoseDataContainer                   PoseContainer;                                            // 0x0080(0x0090)
	bool                                               bAdditivePose;                                            // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	int                                                BasePoseIndex;                                            // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData)
	struct FName                                       RetargetSource;                                           // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PoseAsset");
		return ptr;
	}

};


// Class Engine.PoseWatch
// 0x0010 (0x0038 - 0x0028)
class UEngine_PoseWatch : public UObject
{
public:
	class UEngine_EdGraphNode*                         Node;                                                     // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FColor                                      PoseWatchColour;                                          // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PoseWatch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PoseWatch");
		return ptr;
	}

};


// Class Engine.PostProcessComponent
// 0x0550 (0x0740 - 0x01F0)
class UEngine_PostProcessComponent : public UEngine_SceneComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x01F0(0x0010) MISSED OFFSET
	struct FEngine_PostProcessSettings                 Settings;                                                 // 0x0200(0x0530) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0730(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0734(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0738(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x073C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x073C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x073D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PostProcessComponent");
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UEngine_BlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PostProcessVolume
// 0x0550 (0x07A0 - 0x0250)
class AEngine_PostProcessVolume : public AEngine_Volume
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0250(0x0010) MISSED OFFSET
	struct FEngine_PostProcessSettings                 Settings;                                                 // 0x0260(0x0530) (Edit, BlueprintVisible)
	float                                              Priority;                                                 // 0x0790(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendRadius;                                              // 0x0794(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BlendWeight;                                              // 0x0798(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bEnabled : 1;                                             // 0x079C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUnbound : 1;                                             // 0x079C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x079D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}


	void AddOrUpdateBlendable(const TScriptInterface<class UEngine_BlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x0280 - 0x0250)
class AEngine_PrecomputedVisibilityOverrideVolume : public AEngine_Volume
{
public:
	TArray<class AEngine_Actor*>                       OverrideVisibleActors;                                    // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<class AEngine_Actor*>                       OverrideInvisibleActors;                                  // 0x0260(0x0010) (Edit, BlueprintVisible, ZeroConstructor)
	TArray<struct FName>                               OverrideInvisibleLevels;                                  // 0x0270(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0250 - 0x0250)
class AEngine_PrecomputedVisibilityVolume : public AEngine_Volume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}

};


// Class Engine.PreviewCollectionInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_PreviewCollectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PreviewCollectionInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PreviewCollectionInterface");
		return ptr;
	}

};


// Class Engine.PreviewMeshCollection
// 0x0020 (0x0050 - 0x0030)
class UEngine_PreviewMeshCollection : public UEngine_DataAsset
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0030(0x0008) MISSED OFFSET
	class UEngine_Skeleton*                            Skeleton;                                                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	TArray<struct FEngine_PreviewMeshCollectionEntry>  SkeletalMeshes;                                           // 0x0040(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PreviewMeshCollection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PreviewMeshCollection");
		return ptr;
	}

};


// Class Engine.PrimaryAssetLabel
// 0x0038 (0x0068 - 0x0030)
class UEngine_PrimaryAssetLabel : public UEngine_PrimaryDataAsset
{
public:
	struct FEngine_PrimaryAssetRules                   Rules;                                                    // 0x0030(0x000C) (Edit)
	unsigned char                                      bLabelAssetsInMyDirectory : 1;                            // 0x003C(0x0001) (Edit)
	unsigned char                                      bIsRuntimeLabel : 1;                                      // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x10];                                      // 0x003D(0x0010) UNKNOWN PROPERTY: ArrayProperty Engine.PrimaryAssetLabel.ExplicitAssets
	unsigned char                                      UnknownData02[0x10];                                      // 0x0050(0x0010) UNKNOWN PROPERTY: ArrayProperty Engine.PrimaryAssetLabel.ExplicitBlueprints
	struct FEngine_CollectionReference                 AssetCollection;                                          // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimaryAssetLabel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PrimaryAssetLabel");
		return ptr;
	}

};


// Class Engine.ProjectileMovementComponent
// 0x00E0 (0x01D0 - 0x00F0)
class UEngine_ProjectileMovementComponent : public UEngine_MovementComponent
{
public:
	float                                              InitialSpeed;                                             // 0x00F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MaxSpeed;                                                 // 0x00F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationFollowsVelocity : 1;                             // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bRotationRemainsVertical : 1;                             // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bShouldBounce : 1;                                        // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInitialVelocityInLocalSpace : 1;                         // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bForceSubStepping : 1;                                    // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSimulationEnabled : 1;                                   // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSweepCollision : 1;                                      // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsHomingProjectile : 1;                                  // 0x00F8(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bBounceAngleAffectsFriction : 1;                          // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIsSliding : 1;                                           // 0x00F9(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst)
	unsigned char                                      bInterpMovement : 1;                                      // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInterpRotation : 1;                                      // 0x00F9(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	float                                              PreviousHitTime;                                          // 0x00FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	struct FVector                                     PreviousHitNormal;                                        // 0x0100(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData)
	float                                              ProjectileGravityScale;                                   // 0x010C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Buoyancy;                                                 // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              Bounciness;                                               // 0x0114(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Friction;                                                 // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              BounceVelocityStopSimulatingThreshold;                    // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinFrictionFraction;                                      // 0x0120(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnProjectileBounce;                                       // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	struct FScriptMulticastDelegate                    OnProjectileStop;                                         // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	float                                              HomingAccelerationMagnitude;                              // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TWeakObjectPtr<class UEngine_SceneComponent>       HomingTargetComponent;                                    // 0x014C(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData)
	float                                              MaxSimulationTimeStep;                                    // 0x0154(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                MaxSimulationIterations;                                  // 0x0158(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                BounceAdditionalIterations;                               // 0x015C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationTime;                                       // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpRotationTime;                                       // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationMaxLagDistance;                             // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              InterpLocationSnapToTargetDistance;                       // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x60];                                      // 0x0170(0x0060) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProjectileMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ProjectileMovementComponent");
		return ptr;
	}


	void StopSimulating(const struct FEngine_HitResult& HitResult);
	void SetVelocityInLocalSpace(const struct FVector& NewVelocity);
	void SetInterpolatedComponent(class UEngine_SceneComponent* Component);
	void ResetInterpolation();
	void OnProjectileStopDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult);
	void OnProjectileBounceDelegate__DelegateSignature(const struct FEngine_HitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void MoveInterpolationTarget(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	struct FVector LimitVelocity(const struct FVector& NewVelocity);
	bool IsVelocityUnderSimulationThreshold();
	bool IsInterpolationComplete();
};


// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UEngine_ProxyLODMeshSimplificationSettings : public UEngine_DeveloperSettings
{
public:
	struct FName                                       ProxyLODMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProxyLODMeshSimplificationSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ProxyLODMeshSimplificationSettings");
		return ptr;
	}

};


// Class Engine.RadialForceActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_RadialForceActor : public AEngine_RigidBodyBase
{
public:
	class UEngine_RadialForceComponent*                ForceComponent;                                           // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialForceActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RadialForceActor");
		return ptr;
	}


	void ToggleForce();
	void FireImpulse();
	void EnableForce();
	void DisableForce();
};


// Class Engine.RadialForceComponent
// 0x0030 (0x0220 - 0x01F0)
class UEngine_RadialForceComponent : public UEngine_SceneComponent
{
public:
	float                                              Radius;                                                   // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ERadialImpulseFalloff>  Falloff;                                                  // 0x01F4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F5(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bImpulseVelChange : 1;                                    // 0x01FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreOwningActor : 1;                                   // 0x01FC(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x01FD(0x0003) MISSED OFFSET
	float                                              ForceStrength;                                            // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              DestructibleDamage;                                       // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TArray<TEnumAsByte<FEngine_Engine_EObjectTypeQuery>> ObjectTypesToAffect;                                      // 0x0208(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0218(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialForceComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RadialForceComponent");
		return ptr;
	}


	void RemoveObjectTypeToAffect(TEnumAsByte<FEngine_Engine_EObjectTypeQuery> ObjectType);
	void FireImpulse();
	void AddObjectTypeToAffect(TEnumAsByte<FEngine_Engine_EObjectTypeQuery> ObjectType);
};


// Class Engine.RectLight
// 0x0008 (0x0230 - 0x0228)
class AEngine_RectLight : public AEngine_Light
{
public:
	class UEngine_RectLightComponent*                  RectLightComponent;                                       // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RectLight");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RectLight");
		return ptr;
	}

};


// Class Engine.RectLightComponent
// 0x0020 (0x0370 - 0x0350)
class UEngine_RectLightComponent : public UEngine_LocalLightComponent
{
public:
	float                                              SourceWidth;                                              // 0x0350(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceHeight;                                             // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BarnDoorAngle;                                            // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              BarnDoorLength;                                           // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_Texture*                             SourceTexture;                                            // 0x0360(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RectLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RectLightComponent");
		return ptr;
	}


	void SetSourceWidth(float bNewValue);
	void SetSourceTexture(class UEngine_Texture* bNewValue);
	void SetSourceHeight(float NewValue);
	void SetBarnDoorLength(float NewValue);
	void SetBarnDoorAngle(float NewValue);
};


// Class Engine.PhysicsSettings
// 0x0100 (0x0138 - 0x0038)
class UEngine_PhysicsSettings : public UEngine_DeveloperSettings
{
public:
	float                                              DefaultGravityZ;                                          // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultTerminalVelocity;                                  // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              DefaultFluidFriction;                                     // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                SimulateScratchMemorySize;                                // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                RagdollAggregateThreshold;                                // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              TriangleMeshTriangleMinAreaThreshold;                     // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableShapeSharing;                                      // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnablePCM;                                               // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableStabilization;                                     // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bWarnMissingLocks;                                        // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnable2DPhysics;                                         // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FEngine_RigidBodyErrorCorrection            PhysicErrorCorrection;                                    // 0x0058(0x0034) (Edit, Config)
	TEnumAsByte<FEngine_Engine_ESettingsLockedAxis>    LockedAxis;                                               // 0x008C(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESettingsDOF>           DefaultDegreesOfFreedom;                                  // 0x008D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x008E(0x0002) MISSED OFFSET
	float                                              BounceThresholdVelocity;                                  // 0x0090(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EFrictionCombineMode>   FrictionCombineMode;                                      // 0x0094(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EFrictionCombineMode>   RestitutionCombineMode;                                   // 0x0095(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0096(0x0002) MISSED OFFSET
	float                                              MaxAngularVelocity;                                       // 0x0098(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxDepenetrationVelocity;                                 // 0x009C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              ContactOffsetMultiplier;                                  // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinContactOffset;                                         // 0x00A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MaxContactOffset;                                         // 0x00A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateSkeletalMeshOnDedicatedServer;                   // 0x00AC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionTraceFlag>    DefaultShapeComplexity;                                   // 0x00AD(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDefaultHasComplexCollision;                              // 0x00AE(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData)
	bool                                               bSuppressFaceRemapTable;                                  // 0x00AF(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSupportUVFromHitResults;                                 // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableActiveActors;                                     // 0x00B1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicStaticPairs;                             // 0x00B2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableKinematicKinematicPairs;                          // 0x00B3(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bDisableCCD;                                              // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bEnableEnhancedDeterminism;                               // 0x00B5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData03[0x2];                                       // 0x00B6(0x0002) MISSED OFFSET
	float                                              AnimPhysicsMinDeltaTime;                                  // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSimulateAnimPhysicsAfterReset;                           // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	float                                              MaxPhysicsDeltaTime;                                      // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubstepping;                                             // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bSubsteppingAsync;                                        // 0x00C5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData05[0x2];                                       // 0x00C6(0x0002) MISSED OFFSET
	float                                              MaxSubstepDeltaTime;                                      // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                MaxSubsteps;                                              // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              SyncSceneSmoothingFactor;                                 // 0x00D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              InitialAverageFrameRate;                                  // 0x00D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                PhysXTreeRebuildRate;                                     // 0x00D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData06[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<struct FEngine_PhysicalSurfaceName>         PhysicalSurfaces;                                         // 0x00E0(0x0010) (Edit, ZeroConstructor, Config)
	struct FEngine_BroadphaseSettings                  DefaultBroadphaseSettings;                                // 0x00F0(0x0040) (Edit, Config)
	struct FEngine_ChaosPhysicsSettings                ChaosSettings;                                            // 0x0130(0x0003) (Edit, Config)
	unsigned char                                      UnknownData07[0x5];                                       // 0x0133(0x0005) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PhysicsSettings");
		return ptr;
	}

};


// Class Engine.RendererOverrideSettings
// 0x0008 (0x0040 - 0x0038)
class UEngine_RendererOverrideSettings : public UEngine_DeveloperSettings
{
public:
	unsigned char                                      bSupportAllShaderPermutations : 1;                        // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bForceRecomputeTangents : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RendererOverrideSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RendererOverrideSettings");
		return ptr;
	}

};


// Class Engine.ReplicationDriver
// 0x0000 (0x0028 - 0x0028)
class UEngine_ReplicationDriver : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationDriver");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReplicationDriver");
		return ptr;
	}

};


// Class Engine.ReplicationConnectionDriver
// 0x0000 (0x0028 - 0x0028)
class UEngine_ReplicationConnectionDriver : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationConnectionDriver");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReplicationConnectionDriver");
		return ptr;
	}

};


// Class Engine.ReporterBase
// 0x0008 (0x0030 - 0x0028)
class UEngine_ReporterBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReporterBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReporterBase");
		return ptr;
	}

};


// Class Engine.RendererSettings
// 0x00B0 (0x00E8 - 0x0038)
class UEngine_RendererSettings : public UEngine_DeveloperSettings
{
public:
	unsigned char                                      bMobileHDR : 1;                                           // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      bMobileDisableVertexFog : 1;                              // 0x0038(0x0001) (Edit, Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MaxMobileCascades;                                        // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EMobileMSAASampleCount> MobileMSAASampleCount;                                    // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	unsigned char                                      bMobileUseLegacyShadingModel : 1;                         // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bMobileUseHWsRGBEncoding : 1;                             // 0x0044(0x0001) (Config)
	unsigned char                                      bMobileAllowDitheredLODTransition : 1;                    // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowSoftwareOcclusionCulling : 1;                 // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bDiscardUnusedQualityLevels : 1;                          // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      bOcclusionCulling : 1;                                    // 0x0044(0x0001) (Edit, Config)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              MinScreenRadiusForLights;                                 // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForEarlyZPass;                             // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	float                                              MinScreenRadiusForCSMdepth;                               // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bPrecomputedVisibilityWarning : 1;                        // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bTextureStreaming : 1;                                    // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bUseDXT5NormalMaps : 1;                                   // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextures : 1;                                     // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTexturedLightmaps : 1;                            // 0x0054(0x0001) (Edit, Config)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	uint32_t                                           VirtualTextureTileSize;                                   // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureTileBorderSize;                             // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	uint32_t                                           VirtualTextureFeedbackFactor;                             // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bVirtualTextureEnableCompressZlib : 1;                    // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bVirtualTextureEnableCompressCrunch : 1;                  // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      bClearCoatEnableSecondNormal : 1;                         // 0x0064(0x0001) (Edit, Config)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	int                                                ReflectionCaptureResolution;                              // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      ReflectionEnvironmentLightmapMixBasedOnRoughness : 1;     // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bForwardShading : 1;                                      // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bVertexFoggingForOpaque : 1;                              // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bAllowStaticLighting : 1;                                 // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bUseNormalMapsForStaticLighting : 1;                      // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bGenerateMeshDistanceFields : 1;                          // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bEightBitMeshDistanceFields : 1;                          // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bGenerateLandscapeGIData : 1;                             // 0x006C(0x0001) (Edit, Config)
	unsigned char                                      bCompressMeshDistanceFields : 1;                          // 0x006D(0x0001) (Edit, Config)
	unsigned char                                      UnknownData05[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	float                                              TessellationAdaptivePixelsPerTriangle;                    // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bSeparateTranslucency : 1;                                // 0x0074(0x0001) (Edit, Config)
	unsigned char                                      UnknownData06[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_ETranslucentSortPolicy> TranslucentSortPolicy;                                    // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData07[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	struct FVector                                     TranslucentSortAxis;                                      // 0x007C(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECustomDepthStencil>    CustomDepthStencil;                                       // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData08[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned char                                      bCustomDepthTaaJitter : 1;                                // 0x008C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData09[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAlphaChannelMode>      bEnableAlphaChannelInPostProcessing;                      // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData10[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	unsigned char                                      bDefaultFeatureBloom : 1;                                 // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusion : 1;                      // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAmbientOcclusionStaticFraction : 1;        // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureAutoExposure : 1;                          // 0x0094(0x0001) (Edit, Config)
	unsigned char                                      UnknownData11[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAutoExposureMethodUI>  DefaultFeatureAutoExposure;                               // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData12[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned char                                      bExtendDefaultLuminanceRangeInAutoExposureSettings : 1;   // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bUsePreExposure : 1;                                      // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bEnablePreExposureOnlyInTheEditor : 1;                    // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureMotionBlur : 1;                            // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bDefaultFeatureLensFlare : 1;                             // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bTemporalUpsampling : 1;                                  // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      bSSGI : 1;                                                // 0x009C(0x0001) (Edit, Config)
	unsigned char                                      UnknownData13[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EAntiAliasingMethod>    DefaultFeatureAntiAliasing;                               // 0x00A0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FEngine_Engine_ELightUnits                         DefaultLightUnits;                                        // 0x00A1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EDefaultBackBufferPixelFormat> DefaultBackBufferPixelFormat;                             // 0x00A2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData14[0x1];                                       // 0x00A3(0x0001) MISSED OFFSET
	unsigned char                                      bRenderUnbuiltPreviewShadowsInGame : 1;                   // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      bStencilForLODDither : 1;                                 // 0x00A4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData15[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EEarlyZPass>            EarlyZPass;                                               // 0x00A8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData16[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned char                                      bEarlyZPassOnlyMaterialMasking : 1;                       // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      bDBuffer : 1;                                             // 0x00AC(0x0001) (Edit, Config)
	unsigned char                                      UnknownData17[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EClearSceneOptions>     ClearSceneMethod;                                         // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData18[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	unsigned char                                      bBasePassOutputsVelocity : 1;                             // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bSelectiveBasePassOutputs : 1;                            // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      bDefaultParticleCutouts : 1;                              // 0x00B4(0x0001) (Edit, Config)
	unsigned char                                      UnknownData19[0x3];                                       // 0x00B5(0x0003) MISSED OFFSET
	int                                                GPUSimulationTextureSizeX;                                // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	int                                                GPUSimulationTextureSizeY;                                // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bGlobalClipPlane : 1;                                     // 0x00C0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData20[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	TEnumAsByte<FEngine_Engine_EGBufferFormat>         GBufferFormat;                                            // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData21[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	unsigned char                                      bUseGPUMorphTargets : 1;                                  // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bNvidiaAftermathEnabled : 1;                              // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bInstancedStereo : 1;                                     // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bMultiView : 1;                                           // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiView : 1;                                     // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bMobileMultiViewDirect : 1;                               // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bRoundRobinOcclusion : 1;                                 // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      bODSCapture : 1;                                          // 0x00C8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData22[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	float                                              WireframeCullThreshold;                                   // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bEnableRayTracing : 1;                                    // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bEnableRayTracingTextureLOD : 1;                          // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportStationarySkylight : 1;                           // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportLowQualityLightmaps : 1;                          // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportPointLightWholeSceneShadows : 1;                  // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportAtmosphericFog : 1;                               // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphere : 1;                                // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkyAtmosphereAffectsHeightFog : 1;                // 0x00D0(0x0001) (Edit, Config)
	unsigned char                                      bSupportSkinCacheShaders : 1;                             // 0x00D1(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableStaticAndCSMShadowReceivers : 1;             // 0x00D1(0x0001) (Edit, Config)
	unsigned char                                      bMobileEnableMovableLightCSMShaderCulling : 1;            // 0x00D1(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowDistanceFieldShadows : 1;                     // 0x00D1(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableDirectionalLights : 1;                 // 0x00D1(0x0001) (Edit, Config)
	unsigned char                                      UnknownData23[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	uint32_t                                           MobileNumDynamicPointLights;                              // 0x00D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bMobileDynamicPointLightsUseStaticBranch : 1;             // 0x00D8(0x0001) (Edit, Config)
	unsigned char                                      bMobileAllowMovableSpotlights : 1;                        // 0x00D8(0x0001) (Edit, Config)
	unsigned char                                      UnknownData24[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	float                                              SkinCacheSceneMemoryLimitInMB;                            // 0x00DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      bGPUSkinLimit2BoneInfluences : 1;                         // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bSupportDepthOnlyIndexBuffers : 1;                        // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bSupportReversedIndexBuffers : 1;                         // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bSupportMaterialLayers : 1;                               // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      bLPV : 1;                                                 // 0x00E0(0x0001) (Edit, Config)
	unsigned char                                      UnknownData25[0x7];                                       // 0x00E1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RendererSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RendererSettings");
		return ptr;
	}

};


// Class Engine.ReverbEffect
// 0x0030 (0x0058 - 0x0028)
class UEngine_ReverbEffect : public UObject
{
public:
	float                                              Density;                                                  // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Diffusion;                                                // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Gain;                                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              GainHF;                                                   // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayTime;                                                // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DecayHFRatio;                                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsGain;                                          // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              ReflectionsDelay;                                         // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateGain;                                                 // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LateDelay;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AirAbsorptionGainHF;                                      // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              RoomRolloffFactor;                                        // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbEffect");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReverbEffect");
		return ptr;
	}

};


// Class Engine.ReporterGraph
// 0x0078 (0x00A8 - 0x0030)
class UEngine_ReporterGraph : public UEngine_ReporterBase
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0030(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReporterGraph");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ReporterGraph");
		return ptr;
	}

};


// Class Engine.Rig
// 0x0028 (0x0050 - 0x0028)
class UEngine_Rig : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0028(0x0008) MISSED OFFSET
	TArray<struct FEngine_TransformBase>               TransformBases;                                           // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FEngine_Node>                        Nodes;                                                    // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Rig");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Rig");
		return ptr;
	}

};


// Class Engine.RotatingMovementComponent
// 0x0020 (0x0110 - 0x00F0)
class UEngine_RotatingMovementComponent : public UEngine_MovementComponent
{
public:
	struct FRotator                                    RotationRate;                                             // 0x00F0(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     PivotTranslation;                                         // 0x00FC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bRotationInLocalSpace : 1;                                // 0x0108(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0109(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RotatingMovementComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RotatingMovementComponent");
		return ptr;
	}

};


// Class Engine.PlayerState
// 0x0128 (0x0340 - 0x0218)
class AEngine_PlayerState : public AEngine_Info
{
public:
	float                                              Score;                                                    // 0x0218(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x0220(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0230(0x0010) MISSED OFFSET
	int                                                PlayerId;                                                 // 0x0240(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      Ping;                                                     // 0x0244(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x1];                                       // 0x0245(0x0001) MISSED OFFSET
	unsigned char                                      bShouldUpdateReplicatedPing : 1;                          // 0x0246(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bIsSpectator : 1;                                         // 0x0246(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      bOnlySpectator : 1;                                       // 0x0246(0x0001) (Net)
	unsigned char                                      bIsABot : 1;                                              // 0x0246(0x0001) (BlueprintVisible, BlueprintReadOnly, Net)
	unsigned char                                      UnknownData03 : 1;                                        // 0x0246(0x0001)
	unsigned char                                      bIsInactive : 1;                                          // 0x0246(0x0001) (Net)
	unsigned char                                      bFromPreviousLevel : 1;                                   // 0x0246(0x0001) (Net)
	unsigned char                                      UnknownData04[0x1];                                       // 0x0247(0x0001) MISSED OFFSET
	int                                                StartTime;                                                // 0x0248(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData05[0x4];                                       // 0x024C(0x0004) MISSED OFFSET
	class UClass*                                      EngineMessageClass;                                       // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0258(0x0008) MISSED OFFSET
	struct FString                                     SavedNetworkAddress;                                      // 0x0260(0x0010) (ZeroConstructor)
	struct FEngine_UniqueNetIdRepl                     UniqueId;                                                 // 0x0270(0x0028) (Net)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0298(0x0008) MISSED OFFSET
	class AEngine_Pawn*                                PawnPrivate;                                              // 0x02A0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData08[0x78];                                      // 0x02A8(0x0078) MISSED OFFSET
	struct FString                                     PlayerNamePrivate;                                        // 0x0320(0x0010) (Net, ZeroConstructor)
	unsigned char                                      UnknownData09[0x10];                                      // 0x0330(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerState");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.PlayerState");
		return ptr;
	}


	void ReceiveOverrideWith(class AEngine_PlayerState* OldPlayerState);
	void ReceiveCopyProperties(class AEngine_PlayerState* NewPlayerState);
	void OnRep_UniqueId();
	void OnRep_Score();
	void OnRep_PlayerName();
	void OnRep_PlayerId();
	void OnRep_bIsInactive();
	struct FString GetPlayerName();
};


// Class Engine.RuntimeVirtualTexture
// 0x0068 (0x0090 - 0x0028)
class UEngine_RuntimeVirtualTexture : public UObject
{
public:
	FEngine_Engine_ERuntimeVirtualTextureMaterialType  MaterialType;                                             // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bCompressTextures;                                        // 0x0029(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnable;                                                  // 0x002A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bClearTextures;                                           // 0x002B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bPrivateSpace;                                            // 0x002D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableScalability;                                       // 0x002E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x1];                                       // 0x002F(0x0001) MISSED OFFSET
	int                                                Size;                                                     // 0x0030(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData)
	int                                                TileCount;                                                // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileSize;                                                 // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                TileBorderSize;                                           // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                RemoveLowMips;                                            // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                StreamLowMips;                                            // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_RuntimeVirtualTextureStreamingProxy* StreamingTexture;                                         // 0x0048(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData01[0x40];                                      // 0x0050(0x0040) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RuntimeVirtualTexture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RuntimeVirtualTexture");
		return ptr;
	}

};


// Class Engine.RuntimeVirtualTextureComponent
// 0x0020 (0x0210 - 0x01F0)
class UEngine_RuntimeVirtualTextureComponent : public UEngine_SceneComponent
{
public:
	class UEngine_RuntimeVirtualTexture*               VirtualTexture;                                           // 0x01F0(0x0008) (Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData)
	bool                                               bUseStreamingLowMipsInEditor;                             // 0x01F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F9(0x0007) MISSED OFFSET
	class AEngine_Actor*                               BoundsSourceActor;                                        // 0x0200(0x0008) (Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0208(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureComponent");
		return ptr;
	}

};


// Class Engine.RuntimeOptionsBase
// 0x0010 (0x0038 - 0x0028)
class UEngine_RuntimeOptionsBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0028(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RuntimeOptionsBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RuntimeOptionsBase");
		return ptr;
	}

};


// Class Engine.RuntimeVirtualTextureVolume
// 0x0008 (0x0220 - 0x0218)
class AEngine_RuntimeVirtualTextureVolume : public AEngine_Actor
{
public:
	class UEngine_RuntimeVirtualTextureComponent*      VirtualTextureComponent;                                  // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureVolume");
		return ptr;
	}

};


// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_RVOAvoidanceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RVOAvoidanceInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RVOAvoidanceInterface");
		return ptr;
	}

};


// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
class UEngine_Scene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scene");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}

};


// Class Engine.SceneCapture2D
// 0x0008 (0x0230 - 0x0228)
class AEngine_SceneCapture2D : public AEngine_SceneCapture
{
public:
	class UEngine_SceneCaptureComponent2D*             CaptureComponent2D;                                       // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCapture2D");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.SceneCaptureComponent2D
// 0x05D0 (0x0860 - 0x0290)
class UEngine_SceneCaptureComponent2D : public UEngine_SceneCaptureComponent
{
public:
	float                                              OrthoWidth;                                               // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	class UEngine_TextureRenderTarget2D*               TextureTarget;                                            // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESceneCaptureCompositeMode> CompositeMode;                                            // 0x02A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x02A1(0x000F) MISSED OFFSET
	struct FEngine_PostProcessSettings                 PostProcessSettings;                                      // 0x02B0(0x0530) (Edit, BlueprintVisible)
	float                                              PostProcessBlendWeight;                                   // 0x07E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bOverride_CustomNearClippingPlane : 1;                    // 0x07E4(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x07E5(0x0003) MISSED OFFSET
	float                                              CustomNearClippingPlane;                                  // 0x07E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bUseCustomProjectionMatrix;                               // 0x07EC(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x3];                                       // 0x07ED(0x0003) MISSED OFFSET
	struct FMatrix                                     CustomProjectionMatrix;                                   // 0x07F0(0x0040) (BlueprintVisible, ZeroConstructor, IsPlainOldData)
	bool                                               bEnableClipPlane;                                         // 0x0830(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData04[0x3];                                       // 0x0831(0x0003) MISSED OFFSET
	struct FVector                                     ClipPlaneBase;                                            // 0x0834(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     ClipPlaneNormal;                                          // 0x0840(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bCameraCutThisFrame : 1;                                  // 0x084C(0x0001) (BlueprintVisible, Transient)
	unsigned char                                      bConsiderUnrenderedOpaquePixelAsFullyTranslucent : 1;     // 0x084C(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData05[0x13];                                      // 0x084D(0x0013) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCaptureComponent2D");
		return ptr;
	}


	void CaptureScene();
	void AddOrUpdateBlendable(const TScriptInterface<class UEngine_BlendableInterface>& InBlendableObject, float InWeight);
};


// Class Engine.SceneCaptureComponentCube
// 0x0030 (0x02C0 - 0x0290)
class UEngine_SceneCaptureComponentCube : public UEngine_SceneCaptureComponent
{
public:
	bool                                               bCaptureRotation;                                         // 0x0290(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0291(0x0007) MISSED OFFSET
	class UEngine_TextureRenderTargetCube*             TextureTargetLeft;                                        // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_TextureRenderTargetCube*             TextureTargetRight;                                       // 0x02A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	class UEngine_TextureRenderTarget2D*               TextureTargetODS;                                         // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              IPD;                                                      // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0xC];                                       // 0x02B4(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCaptureComponentCube");
		return ptr;
	}


	void CaptureScene();
};


// Class Engine.SceneCaptureCube
// 0x0008 (0x0230 - 0x0228)
class AEngine_SceneCaptureCube : public AEngine_SceneCapture
{
public:
	class UEngine_SceneCaptureComponentCube*           CaptureComponentCube;                                     // 0x0228(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCube");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SceneCaptureCube");
		return ptr;
	}


	void OnInterpToggle(bool bEnable);
};


// Class Engine.RuntimeVirtualTextureStreamingProxy
// 0x0018 (0x0118 - 0x0100)
class UEngine_RuntimeVirtualTextureStreamingProxy : public UEngine_Texture2D
{
public:
	struct FEngine_VirtualTextureBuildSettings         Settings;                                                 // 0x0100(0x000C) (ZeroConstructor, IsPlainOldData)
	bool                                               bSinglePhysicalSpace;                                     // 0x010C(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	uint32_t                                           BuildHash;                                                // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureStreamingProxy");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.RuntimeVirtualTextureStreamingProxy");
		return ptr;
	}

};


// Class Engine.SCS_Node
// 0x00B0 (0x00D8 - 0x0028)
class UEngine_SCS_Node : public UObject
{
public:
	class UClass*                                      ComponentClass;                                           // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData)
	class UEngine_ActorComponent*                      ComponentTemplate;                                        // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	struct FEngine_BlueprintCookedComponentInstancingData CookedComponentInstancingData;                            // 0x0038(0x0048)
	struct FName                                       AttachToName;                                             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOrVariableName;                            // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       ParentComponentOwnerClassName;                            // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	bool                                               bIsParentComponentNative;                                 // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	TArray<class UEngine_SCS_Node*>                    ChildNodes;                                               // 0x00A0(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BPVariableMetaDataEntry>     MetaDataArray;                                            // 0x00B0(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       VariableGuid;                                             // 0x00C0(0x0010) (ZeroConstructor, IsPlainOldData)
	struct FName                                       InternalVariableName;                                     // 0x00D0(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SCS_Node");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SCS_Node");
		return ptr;
	}

};


// Class Engine.Selection
// 0x0078 (0x00A0 - 0x0028)
class UEngine_Selection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x78];                                      // 0x0028(0x0078) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Selection");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}

};


// Class Engine.ServerStatReplicator
// 0x00C8 (0x02E0 - 0x0218)
class AEngine_ServerStatReplicator : public AEngine_Info
{
public:
	bool                                               bUpdateStatNet;                                           // 0x0218(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bOverwriteClientStats;                                    // 0x0219(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x021A(0x0002) MISSED OFFSET
	uint32_t                                           Channels;                                                 // 0x021C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRate;                                                   // 0x0220(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRate;                                                  // 0x0224(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutSaturation;                                            // 0x0228(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           MaxPacketOverhead;                                        // 0x022C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMax;                                          // 0x0230(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientMin;                                          // 0x0234(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InRateClientAvg;                                          // 0x0238(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMax;                                       // 0x023C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientMin;                                       // 0x0240(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPacketsClientAvg;                                       // 0x0244(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMax;                                         // 0x0248(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientMin;                                         // 0x024C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutRateClientAvg;                                         // 0x0250(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMax;                                      // 0x0254(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientMin;                                      // 0x0258(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPacketsClientAvg;                                      // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetNumClients;                                            // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InPackets;                                                // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutPackets;                                               // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InBunches;                                                // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutBunches;                                               // 0x0270(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           OutLoss;                                                  // 0x0274(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           InLoss;                                                   // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesSent;                                           // 0x027C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoiceBytesRecv;                                           // 0x0280(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsSent;                                         // 0x0284(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           VoicePacketsRecv;                                         // 0x0288(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentInVoice;                                           // 0x028C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PercentOutVoice;                                          // 0x0290(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActorChannels;                                         // 0x0294(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumConsideredActors;                                      // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           PrioritizedActors;                                        // 0x029C(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantActors;                                        // 0x02A0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumRelevantDeletedActors;                                 // 0x02A4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActorAttempts;                               // 0x02A8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumReplicatedActors;                                      // 0x02AC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumActors;                                                // 0x02B0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetActors;                                             // 0x02B4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumDormantActors;                                         // 0x02B8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumInitiallyDormantActors;                                // 0x02BC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsAckd;                                          // 0x02C0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsPending;                                       // 0x02C4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NumNetGUIDsUnAckd;                                        // 0x02C8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           ObjPathBytes;                                             // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDOutRate;                                           // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetGUIDInRate;                                            // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	uint32_t                                           NetSaturated;                                             // 0x02D8(0x0004) (Net, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerStatReplicator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ServerStatReplicator");
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0008 (0x0108 - 0x0100)
class UEngine_ShadowMapTexture2D : public UEngine_Texture2D
{
public:
	TEnumAsByte<FEngine_Engine_EShadowMapFlags>        ShadowmapFlags;                                           // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0101(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}

};


// Class Engine.SimpleConstructionScript
// 0x0078 (0x00A0 - 0x0028)
class UEngine_SimpleConstructionScript : public UObject
{
public:
	TArray<class UEngine_SCS_Node*>                    RootNodes;                                                // 0x0028(0x0010) (ZeroConstructor)
	TArray<class UEngine_SCS_Node*>                    AllNodes;                                                 // 0x0038(0x0010) (ZeroConstructor)
	class UEngine_SCS_Node*                            DefaultSceneRootNode;                                     // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0050(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimpleConstructionScript");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SimpleConstructionScript");
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0340 (0x0380 - 0x0040)
class UEngine_SkeletalMesh : public UEngine_StreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	class UEngine_Skeleton*                            Skeleton;                                                 // 0x0060(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FBoxSphereBounds                            ImportedBounds;                                           // 0x0068(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x0084(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData)
	struct FVector                                     PositiveBoundsExtension;                                  // 0x00A0(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x00AC(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_SkeletalMaterial>            Materials;                                                // 0x00B8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FEngine_BoneMirrorInfo>              SkelMirrorTable;                                          // 0x00C8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<struct FEngine_SkeletalMeshLODInfo>         LODInfo;                                                  // 0x00D8(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	unsigned char                                      UnknownData01[0x50];                                      // 0x00E8(0x0050) MISSED OFFSET
	struct FEngine_PerPlatformInt                      MinLOD;                                                   // 0x0138(0x0004) (Edit)
	struct FEngine_PerPlatformBool                     DisableBelowMinLodStripping;                              // 0x013C(0x0001) (Edit)
	TEnumAsByte<FCoreUObject_EAxis>                    SkelMirrorAxis;                                           // 0x013D(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FCoreUObject_EAxis>                    SkelMirrorFlipAxis;                                       // 0x013E(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bUseFullPrecisionUVs : 1;                                 // 0x013F(0x0001) (Deprecated)
	unsigned char                                      bUseHighPrecisionTangentBasis : 1;                        // 0x013F(0x0001) (Deprecated)
	unsigned char                                      bHasBeenSimplified : 1;                                   // 0x013F(0x0001)
	unsigned char                                      bHasVertexColors : 1;                                     // 0x013F(0x0001)
	unsigned char                                      UnknownData02 : 1;                                        // 0x013F(0x0001)
	unsigned char                                      bEnablePerPolyCollision : 1;                              // 0x013F(0x0001) (Edit)
	class UEngine_BodySetup*                           BodySetup;                                                // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_PhysicsAsset*                        PhysicsAsset;                                             // 0x0148(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_PhysicsAsset*                        ShadowPhysicsAsset;                                       // 0x0150(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_NodeMappingContainer*>        NodeMappingData;                                          // 0x0158(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	TArray<class UEngine_MorphTarget*>                 MorphTargets;                                             // 0x0168(0x0010) (BlueprintVisible, ZeroConstructor)
	unsigned char                                      UnknownData03[0x178];                                     // 0x0178(0x0178) MISSED OFFSET
	class UClass*                                      PostProcessAnimBlueprint;                                 // 0x02F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<class UClothingSystemRuntimeInterface_ClothingAssetBase*> MeshClothingAssets;                                       // 0x02F8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor)
	struct FEngine_SkeletalMeshSamplingInfo            SamplingInfo;                                             // 0x0308(0x0030) (Edit)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0338(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0348(0x0008) MISSED OFFSET
	TArray<class UEngine_SkeletalMeshSocket*>          Sockets;                                                  // 0x0350(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData05[0x10];                                      // 0x0360(0x0010) MISSED OFFSET
	TArray<struct FEngine_SkinWeightProfileInfo>       SkinWeightProfiles;                                       // 0x0370(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}


	void SetLODSettings(class UEngine_SkeletalMeshLODSettings* InLODSettings);
	int NumSockets();
	TArray<struct FString> K2_GetAllMorphTargetNames();
	bool IsSectionUsingCloth(int InSectionIndex, bool bCheckCorrespondingSections);
	class UEngine_SkeletalMeshSocket* GetSocketByIndex(int Index);
	class UEngine_NodeMappingContainer* GetNodeMappingContainer(class UEngine_Blueprint* SourceAsset);
	struct FBoxSphereBounds GetImportedBounds();
	struct FBoxSphereBounds GetBounds();
	class UEngine_SkeletalMeshSocket* FindSocketInfo(const struct FName& InSocketName, struct FTransform* OutTransform, int* OutBoneIndex, int* OutIndex);
	class UEngine_SkeletalMeshSocket* FindSocketAndIndex(const struct FName& InSocketName, int* OutIndex);
	class UEngine_SkeletalMeshSocket* FindSocket(const struct FName& InSocketName);
};


// Class Engine.SkeletalMeshLODSettings
// 0x0020 (0x0050 - 0x0030)
class UEngine_SkeletalMeshLODSettings : public UEngine_DataAsset
{
public:
	struct FEngine_PerPlatformInt                      MinLOD;                                                   // 0x0030(0x0004) (Edit, Config, GlobalConfig)
	struct FEngine_PerPlatformBool                     DisableBelowMinLodStripping;                              // 0x0034(0x0001) (Edit, Config, GlobalConfig)
	struct FEngine_PerPlatformBool                     bSupportLODStreaming;                                     // 0x0035(0x0001) (Edit, Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	struct FEngine_PerPlatformInt                      MaxNumStreamedLODs;                                       // 0x0038(0x0004) (Edit, Config, GlobalConfig)
	struct FEngine_PerPlatformInt                      MaxNumOptionalLODs;                                       // 0x003C(0x0004) (Edit, Config, GlobalConfig)
	TArray<struct FEngine_SkeletalMeshLODGroupSettings> LODGroups;                                                // 0x0040(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshLODSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMeshLODSettings");
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0038 (0x0060 - 0x0028)
class UEngine_SkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FName                                       BoneName;                                                 // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bForceAlwaysAnimated;                                     // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}


	void InitializeSocketFromLocation(class UEngine_SkeletalMeshComponent* SkelComp, const struct FVector& WorldLocation, const struct FVector& WorldNormal);
	struct FVector GetSocketLocation(class UEngine_SkeletalMeshComponent* SkelComp);
};


// Class Engine.SkyAtmosphereComponent
// 0x00D0 (0x02C0 - 0x01F0)
class UEngine_SkyAtmosphereComponent : public UEngine_SceneComponent
{
public:
	float                                              BottomRadius;                                             // 0x01F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      GroundAlbedo;                                             // 0x01F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AtmosphereHeight;                                         // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MultiScatteringFactor;                                    // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighScatteringScale;                                  // 0x0200(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                RayleighScattering;                                       // 0x0204(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              RayleighExponentialDistribution;                          // 0x0214(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieScatteringScale;                                       // 0x0218(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieScattering;                                            // 0x021C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAbsorptionScale;                                       // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                MieAbsorption;                                            // 0x0230(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieAnisotropy;                                            // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MieExponentialDistribution;                               // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OtherAbsorptionScale;                                     // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                OtherAbsorption;                                          // 0x024C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_TentDistribution                    OtherTentDistribution;                                    // 0x025C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                SkyLuminanceFactor;                                       // 0x0268(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              AerialPespectiveViewDistanceScale;                        // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              HeightFogContribution;                                    // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              TransmittanceMinLightElevationAngle;                      // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0284(0x0028) MISSED OFFSET
	struct FGuid                                       bStaticLightingBuiltGUID;                                 // 0x02AC(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyAtmosphereComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkyAtmosphereComponent");
		return ptr;
	}


	void SetSkyLuminanceFactor(const struct FLinearColor& NewValue);
	void SetRayleighScatteringScale(float NewValue);
	void SetRayleighScattering(const struct FLinearColor& NewValue);
	void SetRayleighExponentialDistribution(float NewValue);
	void SetOtherAbsorptionScale(float NewValue);
	void SetOtherAbsorption(const struct FLinearColor& NewValue);
	void SetMieScatteringScale(float NewValue);
	void SetMieScattering(const struct FLinearColor& NewValue);
	void SetMieExponentialDistribution(float NewValue);
	void SetMieAnisotropy(float NewValue);
	void SetMieAbsorptionScale(float NewValue);
	void SetMieAbsorption(const struct FLinearColor& NewValue);
	void SetHeightFogContribution(float NewValue);
	void SetAerialPespectiveViewDistanceScale(float NewValue);
	void OverrideAtmosphereLightDirection(int AtmosphereLightIndex, const struct FVector& LightDirection);
};


// Class Engine.SkeletalMeshSimplificationSettings
// 0x0008 (0x0040 - 0x0038)
class UEngine_SkeletalMeshSimplificationSettings : public UEngine_DeveloperSettings
{
public:
	struct FName                                       SkeletalMeshReductionModuleName;                          // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSimplificationSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkeletalMeshSimplificationSettings");
		return ptr;
	}

};


// Class Engine.SkyAtmosphere
// 0x0008 (0x0220 - 0x0218)
class AEngine_SkyAtmosphere : public AEngine_Info
{
public:
	class UEngine_SkyAtmosphereComponent*              SkyAtmosphereComponent;                                   // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyAtmosphere");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkyAtmosphere");
		return ptr;
	}

};


// Class Engine.SlateBrushAsset
// 0x0088 (0x00B0 - 0x0028)
class UEngine_SlateBrushAsset : public UObject
{
public:
	struct FSlateCore_SlateBrush                       Brush;                                                    // 0x0028(0x0088) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlateBrushAsset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SlateBrushAsset");
		return ptr;
	}

};


// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_SlateTextureAtlasInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlateTextureAtlasInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SlateTextureAtlasInterface");
		return ptr;
	}

};


// Class Engine.SoundAttenuation
// 0x02F0 (0x0318 - 0x0028)
class UEngine_SoundAttenuation : public UObject
{
public:
	struct FEngine_SoundAttenuationSettings            Attenuation;                                              // 0x0028(0x02F0) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundAttenuation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundAttenuation");
		return ptr;
	}

};


// Class Engine.SoundClass
// 0x0068 (0x0090 - 0x0028)
class UEngine_SoundClass : public UObject
{
public:
	struct FEngine_SoundClassProperties                Properties;                                               // 0x0028(0x0030) (Edit, BlueprintVisible, BlueprintReadOnly)
	TArray<class UEngine_SoundClass*>                  ChildClasses;                                             // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	TArray<struct FEngine_PassiveSoundMixModifier>     PassiveSoundMixModifiers;                                 // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	struct FEngine_SoundModulation                     Modulation;                                               // 0x0078(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly)
	class UEngine_SoundClass*                          ParentClass;                                              // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundClass");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x0080 - 0x0080)
class UEngine_SmokeTestCommandlet : public UEngine_Commandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}

};


// Class Engine.SoundConcurrency
// 0x0020 (0x0048 - 0x0028)
class UEngine_SoundConcurrency : public UObject
{
public:
	struct FEngine_SoundConcurrencySettings            Concurrency;                                              // 0x0028(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundConcurrency");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundConcurrency");
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0320 (0x0480 - 0x0160)
class UEngine_SoundCue : public UEngine_SoundBase
{
public:
	unsigned char                                      bPrimeOnLoad : 1;                                         // 0x0160(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0161(0x0007) MISSED OFFSET
	class UEngine_SoundNode*                           FirstNode;                                                // 0x0168(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              VolumeMultiplier;                                         // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMultiplier;                                          // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_SoundAttenuationSettings            AttenuationOverrides;                                     // 0x0178(0x02F0) (Edit)
	float                                              SubtitlePriority;                                         // 0x0468(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x046C(0x0004) MISSED OFFSET
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0470(0x0001) (Edit)
	unsigned char                                      bExcludeFromRandomNodeBranchCulling : 1;                  // 0x0470(0x0001) (Edit)
	unsigned char                                      bHasPlayWhenSilent : 1;                                   // 0x0470(0x0001)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0471(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCue");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}

};


// Class Engine.SoundCueTemplate
// 0x0000 (0x0480 - 0x0480)
class UEngine_SoundCueTemplate : public UEngine_SoundCue
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCueTemplate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundCueTemplate");
		return ptr;
	}

};


// Class Engine.SkyLightComponent
// 0x01C0 (0x03E0 - 0x0220)
class UEngine_SkyLightComponent : public UEngine_LightComponentBase
{
public:
	TEnumAsByte<FEngine_Engine_ESkyLightSourceType>    SourceType;                                               // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0221(0x0007) MISSED OFFSET
	class UEngine_TextureCube*                         Cubemap;                                                  // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SourceCubemapAngle;                                       // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CubemapResolution;                                        // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              SkyDistanceThreshold;                                     // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bCaptureEmissiveOnly;                                     // 0x023C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	bool                                               bLowerHemisphereIsBlack;                                  // 0x023D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x023E(0x0002) MISSED OFFSET
	struct FLinearColor                                LowerHemisphereColor;                                     // 0x0240(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionMaxDistance;                                     // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Contrast;                                                 // 0x0254(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              OcclusionExponent;                                        // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MinOcclusion;                                             // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FColor                                      OcclusionTint;                                            // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EOcclusionCombineMode>  OcclusionCombineMode;                                     // 0x0264(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0xA3];                                      // 0x0265(0x00A3) MISSED OFFSET
	class UEngine_TextureCube*                         BlendDestinationCubemap;                                  // 0x0308(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0xD0];                                      // 0x0310(0x00D0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}


	void SetVolumetricScatteringIntensity(float NewIntensity);
	void SetOcclusionTint(const struct FColor& InTint);
	void SetOcclusionExponent(float InOcclusionExponent);
	void SetOcclusionContrast(float InOcclusionContrast);
	void SetMinOcclusion(float InMinOcclusion);
	void SetLowerHemisphereColor(const struct FLinearColor& InLowerHemisphereColor);
	void SetLightColor(const struct FLinearColor& NewLightColor);
	void SetIntensity(float NewIntensity);
	void SetIndirectLightingIntensity(float NewIntensity);
	void SetCubemapBlend(class UEngine_TextureCube* SourceCubemap, class UEngine_TextureCube* DestinationCubemap, float InBlendFraction);
	void SetCubemap(class UEngine_TextureCube* NewCubemap);
	void RecaptureSky();
};


// Class Engine.SoundEffectSourcePreset
// 0x0000 (0x0040 - 0x0040)
class UEngine_SoundEffectSourcePreset : public UEngine_SoundEffectPreset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSourcePreset");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundEffectSourcePreset");
		return ptr;
	}

};


// Class Engine.SoundMix
// 0x0060 (0x0088 - 0x0028)
class UEngine_SoundMix : public UObject
{
public:
	unsigned char                                      bApplyEQ : 1;                                             // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	float                                              EQPriority;                                               // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_AudioEQEffect                       EQSettings;                                               // 0x0030(0x0038) (Edit)
	TArray<struct FEngine_SoundClassAdjuster>          SoundClassEffects;                                        // 0x0068(0x0010) (Edit, ZeroConstructor)
	float                                              InitialDelay;                                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeInTime;                                               // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Duration;                                                 // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FadeOutTime;                                              // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundMix");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundMix");
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0018 (0x0040 - 0x0028)
class UEngine_SoundNode : public UObject
{
public:
	TArray<class UEngine_SoundNode*>                   ChildNodes;                                               // 0x0028(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNode");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}

};


// Class Engine.SoundNodeAssetReferencer
// 0x0000 (0x0040 - 0x0040)
class UEngine_SoundNodeAssetReferencer : public UEngine_SoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAssetReferencer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeAssetReferencer");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x0300 (0x0340 - 0x0040)
class UEngine_SoundNodeAttenuation : public UEngine_SoundNode
{
public:
	class UEngine_SoundAttenuation*                    AttenuationSettings;                                      // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	struct FEngine_SoundAttenuationSettings            AttenuationOverrides;                                     // 0x0048(0x02F0) (Edit)
	unsigned char                                      bOverrideAttenuation : 1;                                 // 0x0338(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0339(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}

};


// Class Engine.SoundNodeBranch
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeBranch : public UEngine_SoundNode
{
public:
	struct FName                                       BoolParameterName;                                        // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeBranch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeBranch");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeConcatenator : public UEngine_SoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeDelay : public UEngine_SoundNode
{
public:
	float                                              DelayMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DelayMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}

};


// Class Engine.SoundEffectSourcePresetChain
// 0x0018 (0x0040 - 0x0028)
class UEngine_SoundEffectSourcePresetChain : public UObject
{
public:
	TArray<struct FEngine_SourceEffectChainEntry>      Chain;                                                    // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      bPlayEffectChainTails : 1;                                // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundEffectSourcePresetChain");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundEffectSourcePresetChain");
		return ptr;
	}

};


// Class Engine.SoundGroups
// 0x0060 (0x0088 - 0x0028)
class UEngine_SoundGroups : public UObject
{
public:
	TArray<struct FEngine_SoundGroup>                  SoundGroupProfiles;                                       // 0x0028(0x0010) (ZeroConstructor, Config)
	unsigned char                                      UnknownData00[0x50];                                      // 0x0038(0x0050) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundGroups");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundGroups");
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeDistanceCrossFade : public UEngine_SoundNode
{
public:
	TArray<struct FEngine_DistanceDatum>               CrossFadeInput;                                           // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeDoppler : public UEngine_SoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	bool                                               bUseSmoothing;                                            // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              SmoothingInterpSpeed;                                     // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x004C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x0148 (0x0188 - 0x0040)
class UEngine_SoundNodeEnveloper : public UEngine_SoundNode
{
public:
	float                                              LoopStart;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              LoopEnd;                                                  // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DurationAfterLoop;                                        // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LoopCount;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0050(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0051(0x0007) MISSED OFFSET
	class UEngine_DistributionFloatConstantCurve*      VolumeInterpCurve;                                        // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	class UEngine_DistributionFloatConstantCurve*      PitchInterpCurve;                                         // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData)
	struct FEngine_RuntimeFloatCurve                   VolumeCurve;                                              // 0x0068(0x0088) (Edit)
	struct FEngine_RuntimeFloatCurve                   PitchCurve;                                               // 0x00F0(0x0088) (Edit)
	float                                              PitchMin;                                                 // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}

};


// Class Engine.SoundNodeGroupControl
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeGroupControl : public UEngine_SoundNode
{
public:
	TArray<int>                                        GroupSizes;                                               // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeGroupControl");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeGroupControl");
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeLooping : public UEngine_SoundNode
{
public:
	int                                                LoopCount;                                                // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoopIndefinitely : 1;                                    // 0x0044(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x0040 - 0x0040)
class UEngine_SoundNodeMature : public UEngine_SoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeModulator : public UEngine_SoundNode
{
public:
	float                                              PitchMin;                                                 // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              PitchMax;                                                 // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMin;                                                // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              VolumeMax;                                                // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}

};


// Class Engine.SoundNodeDialoguePlayer
// 0x0028 (0x0068 - 0x0040)
class UEngine_SoundNodeDialoguePlayer : public UEngine_SoundNode
{
public:
	struct FEngine_DialogueWaveParameter               DialogueWaveParameter;                                    // 0x0040(0x0020) (Edit)
	unsigned char                                      bLooping : 1;                                             // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeDialoguePlayer");
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0040 (0x0080 - 0x0040)
class UEngine_SoundNodeModulatorContinuous : public UEngine_SoundNode
{
public:
	struct FEngine_ModulatorContinuousParams           PitchModulationParams;                                    // 0x0040(0x0020) (Edit)
	struct FEngine_ModulatorContinuousParams           VolumeModulationParams;                                   // 0x0060(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0028 (0x0068 - 0x0040)
class UEngine_SoundNodeOscillator : public UEngine_SoundNode
{
public:
	unsigned char                                      bModulateVolume : 1;                                      // 0x0040(0x0001) (Edit)
	unsigned char                                      bModulatePitch : 1;                                       // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              AmplitudeMin;                                             // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              AmplitudeMax;                                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMin;                                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FrequencyMax;                                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMin;                                                // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              OffsetMax;                                                // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMin;                                                // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              CenterMax;                                                // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}

};


// Class Engine.SoundNodeQualityLevel
// 0x0000 (0x0040 - 0x0040)
class UEngine_SoundNodeQualityLevel : public UEngine_SoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeQualityLevel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeQualityLevel");
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0030 (0x0070 - 0x0040)
class UEngine_SoundNodeRandom : public UEngine_SoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor)
	TArray<bool>                                       HasBeenUsed;                                              // 0x0050(0x0010) (ZeroConstructor, Transient)
	int                                                NumRandomUsed;                                            // 0x0060(0x0004) (ZeroConstructor, Transient, IsPlainOldData)
	int                                                PreselectAtLevelLoad;                                     // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bShouldExcludeFromBranchCulling : 1;                      // 0x0068(0x0001) (Edit)
	unsigned char                                      bSoundCueExcludedFromBranchCulling : 1;                   // 0x0068(0x0001)
	unsigned char                                      bRandomizeWithoutReplacement : 1;                         // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0069(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}

};


// Class Engine.SoundNodeSoundClass
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeSoundClass : public UEngine_SoundNode
{
public:
	class UEngine_SoundClass*                          SoundClassOverride;                                       // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeSoundClass");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeSoundClass");
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x0010 (0x0050 - 0x0040)
class UEngine_SoundNodeMixer : public UEngine_SoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}

};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeWaveParam : public UEngine_SoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}

};


// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0058 - 0x0050)
class UEngine_SoundNodeParamCrossFade : public UEngine_SoundNodeDistanceCrossFade
{
public:
	struct FName                                       ParamName;                                                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeParamCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeSwitch
// 0x0008 (0x0048 - 0x0040)
class UEngine_SoundNodeSwitch : public UEngine_SoundNode
{
public:
	struct FName                                       IntParameterName;                                         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeSwitch");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeSwitch");
		return ptr;
	}

};


// Class Engine.SoundSourceBus
// 0x0018 (0x0390 - 0x0378)
class UEngine_SoundSourceBus : public UEngine_SoundWave
{
public:
	FEngine_Engine_ESourceBusChannels                  SourceBusChannels;                                        // 0x0378(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0379(0x0003) MISSED OFFSET
	float                                              SourceBusDuration;                                        // 0x037C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoDeactivateWhenSilent : 1;                            // 0x0380(0x0001) (Edit)
	unsigned char                                      UnknownData01[0xF];                                       // 0x0381(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundSourceBus");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundSourceBus");
		return ptr;
	}

};


// Class Engine.SoundSubmix
// 0x0060 (0x0088 - 0x0028)
class UEngine_SoundSubmix : public UObject
{
public:
	TArray<class UEngine_SoundSubmix*>                 ChildSubmixes;                                            // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst)
	class UEngine_SoundSubmix*                         ParentSubmix;                                             // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData)
	FEngine_Engine_ESubmixChannelFormat                ChannelFormat;                                            // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bMuteWhenBackgrounded : 1;                                // 0x0041(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0042(0x0006) MISSED OFFSET
	TArray<class UEngine_SoundEffectSubmixPreset*>     SubmixEffectChain;                                        // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor)
	class UEngine_AmbisonicsSubmixSettingsBase*        AmbisonicsPluginSettings;                                 // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerAttackTime;                               // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	int                                                EnvelopeFollowerReleaseTime;                              // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              OutputVolume;                                             // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FScriptMulticastDelegate                    OnSubmixRecordedFileDone;                                 // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundSubmix");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundSubmix");
		return ptr;
	}


	void StopRecordingOutput(class UObject* WorldContextObject, FEngine_Engine_EAudioRecordingExportType ExportType, const struct FString& Name, const struct FString& Path, class UEngine_SoundWave* ExistingSoundWaveToOverwrite);
	void StopEnvelopeFollowing(class UObject* WorldContextObject);
	void StartRecordingOutput(class UObject* WorldContextObject, float ExpectedDuration);
	void StartEnvelopeFollowing(class UObject* WorldContextObject);
	void SetSubmixOutputVolume(class UObject* WorldContextObject, float InOutputVolume);
	void AddEnvelopeFollowerDelegate(class UObject* WorldContextObject, const struct FScriptDelegate& OnSubmixEnvelopeBP);
};


// Class Engine.SoundNodeWavePlayer
// 0x0038 (0x0078 - 0x0040)
class UEngine_SoundNodeWavePlayer : public UEngine_SoundNodeAssetReferencer
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0040(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Engine.SoundNodeWavePlayer.SoundWaveAssetPtr
	class UEngine_SoundWave*                           SoundWave;                                                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01 : 1;                                        // 0x0070(0x0001)
	unsigned char                                      bLooping : 1;                                             // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0071(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SoundNodeWavePlayer");
		return ptr;
	}

};


// Class Engine.SpectatorPawn
// 0x0000 (0x02A0 - 0x02A0)
class AEngine_SpectatorPawn : public AEngine_DefaultPawn
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpectatorPawn");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpectatorPawn");
		return ptr;
	}

};


// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0158 - 0x0150)
class UEngine_SpectatorPawnMovement : public UEngine_FloatingPawnMovement
{
public:
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0150(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0151(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpectatorPawnMovement");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpectatorPawnMovement");
		return ptr;
	}

};


// Class Engine.SphereReflectionCapture
// 0x0008 (0x0228 - 0x0220)
class AEngine_SphereReflectionCapture : public AEngine_ReflectionCapture
{
public:
	class UEngine_DrawSphereComponent*                 DrawCaptureRadius;                                        // 0x0220(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereReflectionCapture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SphereReflectionCapture");
		return ptr;
	}

};


// Class Engine.SphereReflectionCaptureComponent
// 0x0010 (0x0280 - 0x0270)
class UEngine_SphereReflectionCaptureComponent : public UEngine_ReflectionCaptureComponent
{
public:
	class UEngine_DrawSphereComponent*                 PreviewInfluenceRadius;                                   // 0x0270(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0278(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SphereReflectionCaptureComponent");
		return ptr;
	}

};


// Class Engine.SplineMetadata
// 0x0000 (0x0028 - 0x0028)
class UEngine_SplineMetadata : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMetadata");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SplineMetadata");
		return ptr;
	}

};


// Class Engine.SplineMeshActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_SplineMeshActor : public AEngine_Actor
{
public:
	class UEngine_SplineMeshComponent*                 SplineMeshComponent;                                      // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SplineMeshActor");
		return ptr;
	}

};


// Class Engine.SplineMeshComponent
// 0x0090 (0x0500 - 0x0470)
class UEngine_SplineMeshComponent : public UEngine_StaticMeshComponent
{
public:
	struct FEngine_SplineMeshParams                    SplineParams;                                             // 0x0470(0x0058) (Edit)
	struct FVector                                     SplineUpDir;                                              // 0x04C8(0x000C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMin;                                        // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	struct FGuid                                       CachedMeshBodySetupGuid;                                  // 0x04D8(0x0010) (ZeroConstructor, IsPlainOldData)
	class UEngine_BodySetup*                           BodySetup;                                                // 0x04E8(0x0008) (ZeroConstructor, IsPlainOldData)
	float                                              SplineBoundaryMax;                                        // 0x04F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAllowSplineEditingPerInstance : 1;                       // 0x04F4(0x0001) (Edit, DisableEditOnInstance)
	unsigned char                                      bSmoothInterpRollScale : 1;                               // 0x04F4(0x0001) (Edit)
	unsigned char                                      bMeshDirty : 1;                                           // 0x04F4(0x0001) (Transient)
	TEnumAsByte<FEngine_Engine_ESplineMeshAxis>        ForwardAxis;                                              // 0x04F5(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04F6(0x0002) MISSED OFFSET
	float                                              VirtualTextureMainPassMaxDrawDistance;                    // 0x04F8(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x4];                                       // 0x04FC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}


	void UpdateMesh();
	void SetStartTangent(const struct FVector& StartTangent, bool bUpdateMesh);
	void SetStartScale(const struct FVector2D& StartScale, bool bUpdateMesh);
	void SetStartRoll(float StartRoll, bool bUpdateMesh);
	void SetStartPosition(const struct FVector& StartPos, bool bUpdateMesh);
	void SetStartOffset(const struct FVector2D& StartOffset, bool bUpdateMesh);
	void SetStartAndEnd(const struct FVector& StartPos, const struct FVector& StartTangent, const struct FVector& EndPos, const struct FVector& EndTangent, bool bUpdateMesh);
	void SetSplineUpDir(const struct FVector& InSplineUpDir, bool bUpdateMesh);
	void SetForwardAxis(TEnumAsByte<FEngine_Engine_ESplineMeshAxis> InForwardAxis, bool bUpdateMesh);
	void SetEndTangent(const struct FVector& EndTangent, bool bUpdateMesh);
	void SetEndScale(const struct FVector2D& EndScale, bool bUpdateMesh);
	void SetEndRoll(float EndRoll, bool bUpdateMesh);
	void SetEndPosition(const struct FVector& EndPos, bool bUpdateMesh);
	void SetEndOffset(const struct FVector2D& EndOffset, bool bUpdateMesh);
	void SetBoundaryMin(float InBoundaryMin, bool bUpdateMesh);
	void SetBoundaryMax(float InBoundaryMax, bool bUpdateMesh);
	struct FVector GetStartTangent();
	struct FVector2D GetStartScale();
	float GetStartRoll();
	struct FVector GetStartPosition();
	struct FVector2D GetStartOffset();
	struct FVector GetSplineUpDir();
	TEnumAsByte<FEngine_Engine_ESplineMeshAxis> GetForwardAxis();
	struct FVector GetEndTangent();
	struct FVector2D GetEndScale();
	float GetEndRoll();
	struct FVector GetEndPosition();
	struct FVector2D GetEndOffset();
	float GetBoundaryMin();
	float GetBoundaryMax();
};


// Class Engine.SpotLightComponent
// 0x0010 (0x0380 - 0x0370)
class UEngine_SpotLightComponent : public UEngine_PointLightComponent
{
public:
	float                                              LightShaftConeAngle;                                      // 0x0370(0x0004) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0374(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}


	void SetOuterConeAngle(float NewOuterConeAngle);
	void SetInnerConeAngle(float NewInnerConeAngle);
};


// Class Engine.SpringArmComponent
// 0x0090 (0x0280 - 0x01F0)
class UEngine_SpringArmComponent : public UEngine_SceneComponent
{
public:
	float                                              TargetArmLength;                                          // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     SocketOffset;                                             // 0x01F4(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     TargetOffset;                                             // 0x0200(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              ProbeSize;                                                // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ECollisionChannel>      ProbeChannel;                                             // 0x0210(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0211(0x0003) MISSED OFFSET
	unsigned char                                      bDoCollisionTest : 1;                                     // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUsePawnControlRotation : 1;                              // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritPitch : 1;                                        // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritYaw : 1;                                          // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bInheritRoll : 1;                                         // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraLag : 1;                                     // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bEnableCameraRotationLag : 1;                             // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bUseCameraLagSubstepping : 1;                             // 0x0214(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bDrawDebugLagMarkers : 1;                                 // 0x0215(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0216(0x0002) MISSED OFFSET
	float                                              CameraLagSpeed;                                           // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraRotationLagSpeed;                                   // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxTimeStep;                                     // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              CameraLagMaxDistance;                                     // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x58];                                      // 0x0228(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpringArmComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SpringArmComponent");
		return ptr;
	}


	bool IsCollisionFixApplied();
	struct FVector GetUnfixedCameraPosition();
	struct FRotator GetTargetRotation();
};


// Class Engine.StaticMesh
// 0x00F8 (0x0138 - 0x0040)
class UEngine_StaticMesh : public UEngine_StreamableRenderAsset
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	struct FEngine_PerPlatformInt                      MinLOD;                                                   // 0x0060(0x0004)
	float                                              LpvBiasMultiplier;                                        // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TArray<struct FEngine_StaticMaterial>              StaticMaterials;                                          // 0x0068(0x0010) (ZeroConstructor)
	float                                              LightmapUVDensity;                                        // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData)
	int                                                LightMapResolution;                                       // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                LightMapCoordinateIndex;                                  // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              DistanceFieldSelfShadowBias;                              // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	class UEngine_BodySetup*                           BodySetup;                                                // 0x0088(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData)
	int                                                LODForCollision;                                          // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bGenerateMeshDistanceField : 1;                           // 0x0094(0x0001) (Edit)
	unsigned char                                      bStripComplexCollisionForConsole : 1;                     // 0x0094(0x0001) (Deprecated)
	unsigned char                                      bHasNavigationData : 1;                                   // 0x0094(0x0001) (Edit)
	unsigned char                                      bSupportUniformlyDistributedSampling : 1;                 // 0x0094(0x0001) (Edit)
	unsigned char                                      bIsBuiltAtRuntime : 1;                                    // 0x0094(0x0001)
	unsigned char                                      UnknownData01 : 1;                                        // 0x0094(0x0001)
	unsigned char                                      bAllowCPUAccess : 1;                                      // 0x0094(0x0001) (Edit)
	unsigned char                                      bSupportGpuUniformlyDistributedSampling : 1;              // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x23];                                      // 0x0095(0x0023) MISSED OFFSET
	TArray<class UEngine_StaticMeshSocket*>            Sockets;                                                  // 0x00B8(0x0010) (ZeroConstructor)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00C8(0x0010) MISSED OFFSET
	struct FVector                                     PositiveBoundsExtension;                                  // 0x00D8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FVector                                     NegativeBoundsExtension;                                  // 0x00E4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData)
	struct FBoxSphereBounds                            ExtendedBounds;                                           // 0x00F0(0x001C) (ZeroConstructor, IsPlainOldData)
	int                                                ElementToIgnoreForTexFactor;                              // 0x010C(0x0004) (ZeroConstructor, IsPlainOldData)
	TArray<class UEngine_AssetUserData*>               AssetUserData;                                            // 0x0110(0x0010) (Edit, ExportObject, ZeroConstructor)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0120(0x0008) MISSED OFFSET
	class UObject*                                     EditableMesh;                                             // 0x0128(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData)
	class UEngine_NavCollisionBase*                    NavCollision;                                             // 0x0130(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}


	void RemoveSocket(class UEngine_StaticMeshSocket* Socket);
	int GetNumSections(int InLOD);
	int GetNumLODs();
	void GetMinimumLODForPlatforms(TMap<struct FName, int>* PlatformMinimumLODs);
	int GetMinimumLODForPlatform(const struct FName& PlatformName);
	int GetMaterialIndex(const struct FName& MaterialSlotName);
	class UEngine_MaterialInterface* GetMaterial(int MaterialIndex);
	struct FBoxSphereBounds GetBounds();
	struct FBox GetBoundingBox();
	class UEngine_StaticMeshSocket* FindSocket(const struct FName& InSocketName);
	class UStaticMeshDescription_StaticMeshDescription* STATIC_CreateStaticMeshDescription(class UObject* Outer);
	void BuildFromStaticMeshDescriptions(TArray<class UStaticMeshDescription_StaticMeshDescription*> StaticMeshDescriptions);
	void AddSocket(class UEngine_StaticMeshSocket* Socket);
	struct FName AddMaterial(class UEngine_MaterialInterface* Material);
};


// Class Engine.StaticMeshSocket
// 0x0040 (0x0068 - 0x0028)
class UEngine_StaticMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeLocation;                                         // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FRotator                                    RelativeRotation;                                         // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FVector                                     RelativeScale;                                            // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0054(0x0004) MISSED OFFSET
	struct FString                                     Tag;                                                      // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshSocket");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StaticMeshSocket");
		return ptr;
	}

};


// Class Engine.StereoLayerComponent
// 0x00E0 (0x02D0 - 0x01F0)
class UEngine_StereoLayerComponent : public UEngine_SceneComponent
{
public:
	unsigned char                                      bLiveTexture : 1;                                         // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bSupportsDepth : 1;                                       // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bNoAlphaChannel : 1;                                      // 0x01F0(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x7];                                       // 0x01F1(0x0007) MISSED OFFSET
	class UEngine_Texture*                             Texture;                                                  // 0x01F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_Texture*                             LeftTexture;                                              // 0x0200(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bQuadPreserveTextureRatio : 1;                            // 0x0208(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0209(0x0003) MISSED OFFSET
	struct FVector2D                                   QuadSize;                                                 // 0x020C(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FBox2D                                      UVRect;                                                   // 0x0214(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor)
	float                                              CylinderRadius;                                           // 0x0228(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              CylinderOverlayArc;                                       // 0x022C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	int                                                CylinderHeight;                                           // 0x0230(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	struct FEngine_EquirectProps                       EquirectProps;                                            // 0x0234(0x0048) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly)
	TEnumAsByte<FEngine_Engine_EStereoLayerType>       StereoLayerType;                                          // 0x027C(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EStereoLayerShape>      StereoLayerShape;                                         // 0x027D(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData02[0x2];                                       // 0x027E(0x0002) MISSED OFFSET
	int                                                Priority;                                                 // 0x0280(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData03[0x4C];                                      // 0x0284(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StereoLayerComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StereoLayerComponent");
		return ptr;
	}


	void SetUVRect(const struct FBox2D& InUVRect);
	void SetTexture(class UEngine_Texture* InTexture);
	void SetQuadSize(const struct FVector2D& InQuadSize);
	void SetPriority(int InPriority);
	void SetLeftTexture(class UEngine_Texture* InTexture);
	void SetEquirectProps(const struct FEngine_EquirectProps& InScaleBiases);
	void MarkTextureForUpdate();
	struct FBox2D GetUVRect();
	class UEngine_Texture* GetTexture();
	struct FVector2D GetQuadSize();
	int GetPriority();
	class UEngine_Texture* GetLeftTexture();
};


// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_StereoLayerFunctionLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StereoLayerFunctionLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StereoLayerFunctionLibrary");
		return ptr;
	}


	void STATIC_ShowSplashScreen();
	void STATIC_SetSplashScreen(class UEngine_Texture* Texture, const struct FVector2D& Scale, const struct FVector& Offset, bool bShowLoadingMovie, bool bShowOnSet);
	void STATIC_HideSplashScreen();
	void STATIC_EnableAutoLoadingSplashScreen(bool InAutoShowEnabled);
};


// Class Engine.StringTable
// 0x0018 (0x0040 - 0x0028)
class UEngine_StringTable : public UObject
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0028(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StringTable");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.StringTable");
		return ptr;
	}

};


// Class Engine.SubsurfaceProfile
// 0x0090 (0x00B8 - 0x0028)
class UEngine_SubsurfaceProfile : public UObject
{
public:
	struct FEngine_SubsurfaceProfileStruct             Settings;                                                 // 0x0028(0x008C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubsurfaceProfile");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SubsurfaceProfile");
		return ptr;
	}

};


// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_SubsystemBlueprintLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubsystemBlueprintLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SubsystemBlueprintLibrary");
		return ptr;
	}


	class UEngine_WorldSubsystem* STATIC_GetWorldSubsystem(class UObject* ContextObject, class UClass* Class);
	class UEngine_LocalPlayerSubsystem* STATIC_GetLocalPlayerSubSystemFromPlayerController(class AEngine_PlayerController* PlayerController, class UClass* Class);
	class UEngine_LocalPlayerSubsystem* STATIC_GetLocalPlayerSubsystem(class UObject* ContextObject, class UClass* Class);
	class UEngine_GameInstanceSubsystem* STATIC_GetGameInstanceSubsystem(class UObject* ContextObject, class UClass* Class);
	class UEngine_EngineSubsystem* STATIC_GetEngineSubsystem(class UClass* Class);
};


// Class Engine.SubUVAnimation
// 0x0040 (0x0068 - 0x0028)
class UEngine_SubUVAnimation : public UObject
{
public:
	class UEngine_Texture2D*                           SubUVTexture;                                             // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Horizontal;                                     // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImages_Vertical;                                       // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ESubUVBoundingVertexCount> BoundingMode;                                             // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EOpacitySourceMode>     OpacitySourceMode;                                        // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	float                                              AlphaThreshold;                                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x28];                                      // 0x0040(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubUVAnimation");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SubUVAnimation");
		return ptr;
	}

};


// Class Engine.TimecodeProvider
// 0x0008 (0x0030 - 0x0028)
class UEngine_TimecodeProvider : public UObject
{
public:
	int                                                FrameDelay;                                               // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TimecodeProvider");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TimecodeProvider");
		return ptr;
	}


	struct FTimecode GetTimecode();
	FEngine_Engine_ETimecodeProviderSynchronizationState GetSynchronizationState();
	struct FFrameRate GetFrameRate();
	struct FTimecode GetDelayedTimecode();
};


// Class Engine.SystemTimeTimecodeProvider
// 0x0010 (0x0040 - 0x0030)
class UEngine_SystemTimeTimecodeProvider : public UEngine_TimecodeProvider
{
public:
	struct FFrameRate                                  FrameRate;                                                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0038(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SystemTimeTimecodeProvider");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.SystemTimeTimecodeProvider");
		return ptr;
	}


	void SetFrameRate(const struct FFrameRate& InFrameRate);
};


// Class Engine.TargetPoint
// 0x0000 (0x0218 - 0x0218)
class AEngine_TargetPoint : public AEngine_Actor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TargetPoint");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}

};


// Class Engine.TextPropertyTestObject
// 0x0048 (0x0070 - 0x0028)
class UEngine_TextPropertyTestObject : public UObject
{
public:
	struct FText                                       DefaultedText;                                            // 0x0028(0x0018)
	struct FText                                       UndefaultedText;                                          // 0x0040(0x0018)
	struct FText                                       TransientText;                                            // 0x0058(0x0018)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextPropertyTestObject");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextPropertyTestObject");
		return ptr;
	}

};


// Class Engine.TextRenderActor
// 0x0008 (0x0220 - 0x0218)
class AEngine_TextRenderActor : public AEngine_Actor
{
public:
	class UEngine_TextRenderComponent*                 TextRender;                                               // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextRenderActor");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextRenderActor");
		return ptr;
	}

};


// Class Engine.TextRenderComponent
// 0x0050 (0x0430 - 0x03E0)
class UEngine_TextRenderComponent : public UEngine_PrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x03E0(0x0010) MISSED OFFSET
	class UEngine_MaterialInterface*                   TextMaterial;                                             // 0x03F0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	class UEngine_Font*                                Font;                                                     // 0x03F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EHorizTextAligment>     HorizontalAlignment;                                      // 0x0400(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EVerticalTextAligment>  VerticalAlignment;                                        // 0x0401(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0402(0x0002) MISSED OFFSET
	struct FColor                                      TextRenderColor;                                          // 0x0404(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              XScale;                                                   // 0x0408(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              YScale;                                                   // 0x040C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              WorldSize;                                                // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              InvDefaultSize;                                           // 0x0414(0x0004) (ZeroConstructor, IsPlainOldData)
	float                                              HorizSpacingAdjust;                                       // 0x0418(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              VertSpacingAdjust;                                        // 0x041C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAlwaysRenderAsText : 1;                                  // 0x0420(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData02[0xF];                                       // 0x0421(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextRenderComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextRenderComponent");
		return ptr;
	}


	void SetYScale(float Value);
	void SetXScale(float Value);
	void SetWorldSize(float Value);
	void SetVertSpacingAdjust(float Value);
	void SetVerticalAlignment(TEnumAsByte<FEngine_Engine_EVerticalTextAligment> Value);
	void SetTextRenderColor(const struct FColor& Value);
	void SetTextMaterial(class UEngine_MaterialInterface* Material);
	void SetText(const struct FString& Value);
	void SetHorizSpacingAdjust(float Value);
	void SetHorizontalAlignment(TEnumAsByte<FEngine_Engine_EHorizTextAligment> Value);
	void SetFont(class UEngine_Font* Value);
	void K2_SetText(const struct FText& Value);
	struct FVector GetTextWorldSize();
	struct FVector GetTextLocalSize();
};


// Class Engine.Texture2DArray
// 0x0058 (0x0128 - 0x00D0)
class UEngine_Texture2DArray : public UEngine_Texture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x00D0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DArray");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Texture2DArray");
		return ptr;
	}

};


// Class Engine.TextureLightProfile
// 0x0008 (0x0108 - 0x0100)
class UEngine_TextureLightProfile : public UEngine_Texture2D
{
public:
	float                                              Brightness;                                               // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              TextureMultiplier;                                        // 0x0104(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureLightProfile");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureLightProfile");
		return ptr;
	}

};


// Class Engine.TextureRenderTargetCube
// 0x0018 (0x00F0 - 0x00D8)
class UEngine_TextureRenderTargetCube : public UEngine_TextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	struct FLinearColor                                ClearColor;                                               // 0x00DC(0x0010) (ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FCoreUObject_EPixelFormat>             OverrideFormat;                                           // 0x00EC(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      bHDR : 1;                                                 // 0x00ED(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      bForceLinearGamma : 1;                                    // 0x00ED(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}

};


// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
class UEngine_ThumbnailInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ThumbnailInfo");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.ThumbnailInfo");
		return ptr;
	}

};


// Class Engine.TimelineComponent
// 0x00A0 (0x0150 - 0x00B0)
class UEngine_TimelineComponent : public UEngine_ActorComponent
{
public:
	struct FEngine_Timeline                            TheTimeline;                                              // 0x00B0(0x0098) (Net)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x0148(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0149(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TimelineComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TimelineComponent");
		return ptr;
	}


	void Stop();
	void SetVectorCurve(class UEngine_CurveVector* NewVectorCurve, const struct FName& VectorTrackName);
	void SetTimelineLengthMode(TEnumAsByte<FEngine_Engine_ETimelineLengthMode> NewLengthMode);
	void SetTimelineLength(float NewLength);
	void SetPlayRate(float NewRate);
	void SetPlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetNewTime(float NewTime);
	void SetLooping(bool bNewLooping);
	void SetLinearColorCurve(class UEngine_CurveLinearColor* NewLinearColorCurve, const struct FName& LinearColorTrackName);
	void SetIgnoreTimeDilation(bool bNewIgnoreTimeDilation);
	void SetFloatCurve(class UEngine_CurveFloat* NewFloatCurve, const struct FName& FloatTrackName);
	void ReverseFromEnd();
	void Reverse();
	void PlayFromStart();
	void Play();
	void OnRep_Timeline();
	bool IsReversing();
	bool IsPlaying();
	bool IsLooping();
	float GetTimelineLength();
	float GetPlayRate();
	float GetPlaybackPosition();
	bool GetIgnoreTimeDilation();
};


// Class Engine.TimelineTemplate
// 0x0088 (0x00B0 - 0x0028)
class UEngine_TimelineTemplate : public UObject
{
public:
	float                                              TimelineLength;                                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_ETimelineLengthMode>    LengthMode;                                               // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bAutoPlay : 1;                                            // 0x002D(0x0001) (Edit)
	unsigned char                                      bLoop : 1;                                                // 0x002D(0x0001) (Edit)
	unsigned char                                      bReplicated : 1;                                          // 0x002D(0x0001) (Edit, BlueprintVisible)
	unsigned char                                      bIgnoreTimeDilation : 1;                                  // 0x002D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x002E(0x0002) MISSED OFFSET
	TArray<struct FEngine_TTEventTrack>                EventTracks;                                              // 0x0030(0x0010) (ZeroConstructor)
	TArray<struct FEngine_TTFloatTrack>                FloatTracks;                                              // 0x0040(0x0010) (ZeroConstructor)
	TArray<struct FEngine_TTVectorTrack>               VectorTracks;                                             // 0x0050(0x0010) (ZeroConstructor)
	TArray<struct FEngine_TTLinearColorTrack>          LinearColorTracks;                                        // 0x0060(0x0010) (ZeroConstructor)
	TArray<struct FEngine_BPVariableMetaDataEntry>     MetaDataArray;                                            // 0x0070(0x0010) (Edit, ZeroConstructor)
	struct FGuid                                       TimelineGuid;                                             // 0x0080(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData)
	struct FName                                       VariableName;                                             // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       DirectionPropertyName;                                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       UpdateFunctionName;                                       // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData)
	struct FName                                       FinishedFunctionName;                                     // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TimelineTemplate");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TimelineTemplate");
		return ptr;
	}

};


// Class Engine.TireType
// 0x0008 (0x0038 - 0x0030)
class UEngine_TireType : public UEngine_DataAsset
{
public:
	float                                              FrictionScale;                                            // 0x0030(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0034(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TireType");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TireType");
		return ptr;
	}

};


// Class Engine.TriggerCapsule
// 0x0000 (0x0220 - 0x0220)
class AEngine_TriggerCapsule : public AEngine_TriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerCapsule");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TriggerCapsule");
		return ptr;
	}

};


// Class Engine.TriggerSphere
// 0x0000 (0x0220 - 0x0220)
class AEngine_TriggerSphere : public AEngine_TriggerBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerSphere");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TriggerSphere");
		return ptr;
	}

};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
class UEngine_TwitterIntegrationBase : public UEngine_PlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}


	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<FEngine_Engine_ETwitterRequestMethod> RequestMethod, int AccountIndex);
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	void Init();
	int GetNumAccounts();
	struct FString GetAccountName(int AccountIndex);
	bool CanShowTweetUI();
	bool AuthorizeAccounts();
};


// Class Engine.UserDefinedEnum
// 0x0050 (0x00B0 - 0x0060)
class UEngine_UserDefinedEnum : public UEnum
{
public:
	TMap<struct FName, struct FText>                   DisplayNameMap;                                           // 0x0060(0x0050) (ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserDefinedEnum");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.UserDefinedEnum");
		return ptr;
	}

};


// Class Engine.UserDefinedStruct
// 0x0048 (0x00F0 - 0x00A8)
class UEngine_UserDefinedStruct : public UScriptStruct
{
public:
	TEnumAsByte<FEngine_Engine_EUserDefinedStructureStatus> Status;                                                   // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	struct FGuid                                       Guid;                                                     // 0x00AC(0x0010) (ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData01[0x34];                                      // 0x00BC(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserDefinedStruct");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.UserDefinedStruct");
		return ptr;
	}

};


// Class Engine.UserInterfaceSettings
// 0x0230 (0x0268 - 0x0038)
class UEngine_UserInterfaceSettings : public UEngine_DeveloperSettings
{
public:
	FEngine_Engine_ERenderFocusRule                    RenderFocusRule;                                          // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0039(0x0007) MISSED OFFSET
	TMap<TEnumAsByte<FCoreUObject_EMouseCursor>, struct FEngine_HardwareCursorReference> HardwareCursors;                                          // 0x0040(0x0050) (Edit, ZeroConstructor, Config)
	TMap<TEnumAsByte<FCoreUObject_EMouseCursor>, struct FSoftClassPath> SoftwareCursors;                                          // 0x0090(0x0050) (Edit, ZeroConstructor, Config)
	struct FSoftClassPath                              DefaultCursor;                                            // 0x00E0(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              TextEditBeamCursor;                                       // 0x00F8(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              CrosshairsCursor;                                         // 0x0110(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              HandCursor;                                               // 0x0128(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandCursor;                                           // 0x0140(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              GrabHandClosedCursor;                                     // 0x0158(0x0018) (ZeroConstructor, Config, Deprecated)
	struct FSoftClassPath                              SlashedCircleCursor;                                      // 0x0170(0x0018) (ZeroConstructor, Config, Deprecated)
	float                                              ApplicationScale;                                         // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData)
	FEngine_Engine_EUIScalingRule                      UIScaleRule;                                              // 0x018C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x3];                                       // 0x018D(0x0003) MISSED OFFSET
	struct FSoftClassPath                              CustomScalingRuleClass;                                   // 0x0190(0x0018) (Edit, ZeroConstructor, Config)
	struct FEngine_RuntimeFloatCurve                   UIScaleCurve;                                             // 0x01A8(0x0088) (Edit, Config)
	bool                                               bAllowHighDPIInGameMode;                                  // 0x0230(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadWidgetsOnDedicatedServer;                            // 0x0231(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x6];                                       // 0x0232(0x0006) MISSED OFFSET
	TArray<class UObject*>                             CursorClasses;                                            // 0x0238(0x0010) (ZeroConstructor, Transient)
	class UClass*                                      CustomScalingRuleClassInstance;                           // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	class UEngine_DPICustomScalingRule*                CustomScalingRule;                                        // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData03[0x10];                                      // 0x0258(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserInterfaceSettings");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.UserInterfaceSettings");
		return ptr;
	}

};


// Class Engine.VectorField
// 0x0020 (0x0048 - 0x0028)
class UEngine_VectorField : public UObject
{
public:
	struct FBox                                        Bounds;                                                   // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              Intensity;                                                // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorField");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VectorField");
		return ptr;
	}

};


// Class Engine.VectorFieldAnimated
// 0x0040 (0x0088 - 0x0048)
class UEngine_VectorFieldAnimated : public UEngine_VectorField
{
public:
	class UEngine_Texture2D*                           Texture;                                                  // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	TEnumAsByte<FEngine_Engine_EVectorFieldConstructionOp> ConstructionOp;                                           // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	int                                                VolumeSizeX;                                              // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeY;                                              // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                VolumeSizeZ;                                              // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesX;                                               // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                SubImagesY;                                               // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	int                                                FrameCount;                                               // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              FramesPerSecond;                                          // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bLoop : 1;                                                // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0071(0x0007) MISSED OFFSET
	class UEngine_VectorFieldStatic*                   NoiseField;                                               // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseScale;                                               // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData)
	float                                              NoiseMax;                                                 // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldAnimated");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VectorFieldAnimated");
		return ptr;
	}

};


// Class Engine.VectorFieldComponent
// 0x0020 (0x0400 - 0x03E0)
class UEngine_VectorFieldComponent : public UEngine_PrimitiveComponent
{
public:
	float                                              Intensity;                                                // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Tightness;                                                // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPreviewVectorField : 1;                                  // 0x03E8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x17];                                      // 0x03E9(0x0017) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VectorFieldComponent");
		return ptr;
	}


	void SetIntensity(float NewIntensity);
};


// Class Engine.Texture2DDynamic
// 0x0018 (0x00E8 - 0x00D0)
class UEngine_Texture2DDynamic : public UEngine_Texture
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) MISSED OFFSET
	TEnumAsByte<FCoreUObject_EPixelFormat>             Format;                                                   // 0x00D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData)
	unsigned char                                      UnknownData01[0xF];                                       // 0x00D9(0x000F) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}

};


// Class Engine.VectorFieldStatic
// 0x00B8 (0x0100 - 0x0048)
class UEngine_VectorFieldStatic : public UEngine_VectorField
{
public:
	int                                                SizeX;                                                    // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeY;                                                    // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	int                                                SizeZ;                                                    // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData)
	bool                                               bAllowCPUAccess;                                          // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData)
	unsigned char                                      UnknownData00[0x9B];                                      // 0x0055(0x009B) MISSED OFFSET
	TArray<struct FVector4>                            CPUData;                                                  // 0x00F0(0x0010) (ZeroConstructor, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldStatic");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VectorFieldStatic");
		return ptr;
	}

};


// Class Engine.VectorFieldVolume
// 0x0008 (0x0220 - 0x0218)
class AEngine_VectorFieldVolume : public AEngine_Actor
{
public:
	class UEngine_VectorFieldComponent*                VectorFieldComponent;                                     // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VectorFieldVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VectorFieldVolume");
		return ptr;
	}

};


// Class Engine.VirtualTexture
// 0x0000 (0x0028 - 0x0028)
class UEngine_VirtualTexture : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VirtualTexture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VirtualTexture");
		return ptr;
	}

};


// Class Engine.LightMapVirtualTexture
// 0x0000 (0x0028 - 0x0028)
class UEngine_LightMapVirtualTexture : public UEngine_VirtualTexture
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapVirtualTexture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightMapVirtualTexture");
		return ptr;
	}

};


// Class Engine.LightMapVirtualTexture2D
// 0x0010 (0x0110 - 0x0100)
class UEngine_LightMapVirtualTexture2D : public UEngine_Texture2D
{
public:
	TArray<int8_t>                                     TypeToLayer;                                              // 0x0100(0x0010) (Edit, ZeroConstructor)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapVirtualTexture2D");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.LightMapVirtualTexture2D");
		return ptr;
	}

};


// Class Engine.VirtualTexturePoolConfig
// 0x0018 (0x0040 - 0x0028)
class UEngine_VirtualTexturePoolConfig : public UObject
{
public:
	int                                                DefaultSizeInMegabyte;                                    // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData00[0x4];                                       // 0x002C(0x0004) MISSED OFFSET
	TArray<struct FEngine_VirtualTextureSpacePoolConfig> Pools;                                                    // 0x0030(0x0010) (ZeroConstructor, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VirtualTexturePoolConfig");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VirtualTexturePoolConfig");
		return ptr;
	}

};


// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
class UEngine_VisualLoggerAutomationTests : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerAutomationTests");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VisualLoggerAutomationTests");
		return ptr;
	}

};


// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
class UEngine_VisualLoggerKismetLibrary : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerKismetLibrary");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VisualLoggerKismetLibrary");
		return ptr;
	}


	void STATIC_RedirectVislog(class UObject* SourceOwner, class UObject* DestinationOwner);
	void STATIC_LogText(class UObject* WorldContextObject, const struct FString& Text, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_LogSegment(class UObject* WorldContextObject, const struct FVector& SegmentStart, const struct FVector& SegmentEnd, const struct FString& Text, const struct FLinearColor& ObjectColor, float Thickness, const struct FName& CategoryName, bool bAddToMessageLog);
	void STATIC_LogLocation(class UObject* WorldContextObject, const struct FVector& Location, const struct FString& Text, const struct FLinearColor& ObjectColor, float Radius, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_LogBox(class UObject* WorldContextObject, const struct FBox& BoxShape, const struct FString& Text, const struct FLinearColor& ObjectColor, const struct FName& LogCategory, bool bAddToMessageLog);
	void STATIC_EnableRecording(bool bEnabled);
};


// Class Engine.VOIPTalker
// 0x0038 (0x00E8 - 0x00B0)
class UEngine_VOIPTalker : public UEngine_ActorComponent
{
public:
	struct FEngine_VoiceSettings                       Settings;                                                 // 0x00B0(0x0018) (Edit, BlueprintVisible)
	unsigned char                                      UnknownData00[0x20];                                      // 0x00C8(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VOIPTalker");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VOIPTalker");
		return ptr;
	}


	void RegisterWithPlayerState(class AEngine_PlayerState* OwningState);
	float GetVoiceLevel();
	class UEngine_VOIPTalker* STATIC_CreateTalkerForPlayer(class AEngine_PlayerState* OwningState);
	void BPOnTalkingEnd();
	void BPOnTalkingBegin(class UEngine_AudioComponent* AudioComponent);
};


// Class Engine.VOIPStatics
// 0x0000 (0x0028 - 0x0028)
class UEngine_VOIPStatics : public UEngine_BlueprintFunctionLibrary
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VOIPStatics");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VOIPStatics");
		return ptr;
	}


	void STATIC_SetMicThreshold(float InThreshold);
};


// Class Engine.VoiceChannel
// 0x0010 (0x0080 - 0x0070)
class UEngine_VoiceChannel : public UEngine_Channel
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.VolumeTexture
// 0x0058 (0x0128 - 0x00D0)
class UEngine_VolumeTexture : public UEngine_Texture
{
public:
	unsigned char                                      UnknownData00[0x58];                                      // 0x00D0(0x0058) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumeTexture");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VolumeTexture");
		return ptr;
	}

};


// Class Engine.WindDirectionalSource
// 0x0008 (0x0220 - 0x0218)
class AEngine_WindDirectionalSource : public AEngine_Info
{
public:
	class UEngine_WindDirectionalSourceComponent*      Component;                                                // 0x0218(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0020 (0x0210 - 0x01F0)
class UEngine_WindDirectionalSourceComponent : public UEngine_SceneComponent
{
public:
	float                                              Strength;                                                 // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              Speed;                                                    // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	float                                              MinGustAmount;                                            // 0x01F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              MaxGustAmount;                                            // 0x01FC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData)
	float                                              Radius;                                                   // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData)
	unsigned char                                      bPointWind : 1;                                           // 0x0204(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly)
	unsigned char                                      UnknownData00[0xB];                                       // 0x0205(0x000B) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}


	void SetWindType(FEngine_Engine_EWindSourceType InNewType);
	void SetStrength(float InNewStrength);
	void SetSpeed(float InNewSpeed);
	void SetRadius(float InNewRadius);
	void SetMinimumGustAmount(float InNewMinGust);
	void SetMaximumGustAmount(float InNewMaxGust);
};


// Class Engine.WorldComposition
// 0x0048 (0x0070 - 0x0028)
class UEngine_WorldComposition : public UObject
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0028(0x0020) MISSED OFFSET
	TArray<class UEngine_LevelStreaming*>              TilesStreaming;                                           // 0x0048(0x0010) (ZeroConstructor, Transient)
	double                                             TilesStreamingTimeThreshold;                              // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bLoadAllTilesDuringCinematic;                             // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	bool                                               bRebaseOriginIn3DSpace;                                   // 0x0061(0x0001) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	float                                              RebaseOriginDistance;                                     // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	int                                                TestDevice;                                               // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData)
	unsigned char                                      UnknownData02[0x4];                                       // 0x006C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldComposition");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.WorldComposition");
		return ptr;
	}

};


// Class Engine.HierarchicalLODSetup
// 0x0038 (0x0060 - 0x0028)
class UEngine_HierarchicalLODSetup : public UObject
{
public:
	TArray<struct FEngine_HierarchicalSimplification>  HierarchicalLODSetup;                                     // 0x0028(0x0010) (Edit, ZeroConstructor)
	unsigned char                                      UnknownData00[0x28];                                      // 0x0038(0x0028) UNKNOWN PROPERTY: SoftObjectProperty Engine.HierarchicalLODSetup.OverrideBaseMaterial

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HierarchicalLODSetup");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.HierarchicalLODSetup");
		return ptr;
	}

};


// Class Engine.WorldSubsystem
// 0x0000 (0x0030 - 0x0030)
class UEngine_WorldSubsystem : public UEngine_Subsystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldSubsystem");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.WorldSubsystem");
		return ptr;
	}

};


// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (0x0258 - 0x0250)
class AEngine_VolumetricLightmapDensityVolume : public AEngine_Volume
{
public:
	struct FInt32Interval                              AllowedMipLevelRange;                                     // 0x0250(0x0008) (Edit, ZeroConstructor, IsPlainOldData)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumetricLightmapDensityVolume");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VolumetricLightmapDensityVolume");
		return ptr;
	}

};


// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0028 - 0x0028)
class UEngine_VisualLoggerDebugSnapshotInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisualLoggerDebugSnapshotInterface");
		if (!ptr)
			ptr = UObject::FindClass("Class Engine.VisualLoggerDebugSnapshotInterface");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
